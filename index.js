var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// node_modules/svgson/dist/svgson.umd.js
var require_svgson_umd = __commonJS((exports, module) => {
  (function(global, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.svgson = factory());
  })(exports, function() {
    /*!
       * Determine if an object is a Buffer
       *
       * @author   Feross Aboukhadijeh <https://feross.org>
       * @license  MIT
       */
    var isBuffer_1 = function(obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    };
    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    }
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
    }
    var toString = Object.prototype.toString;
    var kindOf = function kindOf(val) {
      if (typeof val === "undefined") {
        return "undefined";
      }
      if (val === null) {
        return "null";
      }
      if (val === true || val === false || val instanceof Boolean) {
        return "boolean";
      }
      if (typeof val === "string" || val instanceof String) {
        return "string";
      }
      if (typeof val === "number" || val instanceof Number) {
        return "number";
      }
      if (typeof val === "function" || val instanceof Function) {
        return "function";
      }
      if (typeof Array.isArray !== "undefined" && Array.isArray(val)) {
        return "array";
      }
      if (val instanceof RegExp) {
        return "regexp";
      }
      if (val instanceof Date) {
        return "date";
      }
      var type = toString.call(val);
      if (type === "[object RegExp]") {
        return "regexp";
      }
      if (type === "[object Date]") {
        return "date";
      }
      if (type === "[object Arguments]") {
        return "arguments";
      }
      if (type === "[object Error]") {
        return "error";
      }
      if (isBuffer_1(val)) {
        return "buffer";
      }
      if (type === "[object Set]") {
        return "set";
      }
      if (type === "[object WeakSet]") {
        return "weakset";
      }
      if (type === "[object Map]") {
        return "map";
      }
      if (type === "[object WeakMap]") {
        return "weakmap";
      }
      if (type === "[object Symbol]") {
        return "symbol";
      }
      if (type === "[object Int8Array]") {
        return "int8array";
      }
      if (type === "[object Uint8Array]") {
        return "uint8array";
      }
      if (type === "[object Uint8ClampedArray]") {
        return "uint8clampedarray";
      }
      if (type === "[object Int16Array]") {
        return "int16array";
      }
      if (type === "[object Uint16Array]") {
        return "uint16array";
      }
      if (type === "[object Int32Array]") {
        return "int32array";
      }
      if (type === "[object Uint32Array]") {
        return "uint32array";
      }
      if (type === "[object Float32Array]") {
        return "float32array";
      }
      if (type === "[object Float64Array]") {
        return "float64array";
      }
      return "object";
    };
    function createCommonjsModule(fn, module2) {
      return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
    }
    var renameKeys = createCommonjsModule(function(module2) {
      (function() {
        function rename(obj, fn) {
          if (typeof fn !== "function") {
            return obj;
          }
          var res = {};
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              res[fn(key, obj[key]) || key] = obj[key];
            }
          }
          return res;
        }
        if (module2.exports) {
          module2.exports = rename;
        } else {
          {
            window.rename = rename;
          }
        }
      })();
    });
    var deepRenameKeys = function renameDeep(obj, cb) {
      var type = kindOf(obj);
      if (type !== "object" && type !== "array") {
        throw new Error("expected an object");
      }
      var res = [];
      if (type === "object") {
        obj = renameKeys(obj, cb);
        res = {};
      }
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          var val = obj[key];
          if (kindOf(val) === "object" || kindOf(val) === "array") {
            res[key] = renameDeep(val, cb);
          } else {
            res[key] = val;
          }
        }
      }
      return res;
    };
    var eventemitter3 = createCommonjsModule(function(module2) {
      var has = Object.prototype.hasOwnProperty, prefix = "~";
      function Events() {}
      if (Object.create) {
        Events.prototype = Object.create(null);
        if (!new Events().__proto__)
          prefix = false;
      }
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      function EventEmitter() {
        this._events = new Events;
        this._eventsCount = 0;
      }
      EventEmitter.prototype.eventNames = function eventNames() {
        var names = [], events, name;
        if (this._eventsCount === 0)
          return names;
        for (name in events = this._events) {
          if (has.call(events, name))
            names.push(prefix ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }
        return names;
      };
      EventEmitter.prototype.listeners = function listeners(event, exists) {
        var evt = prefix ? prefix + event : event, available = this._events[evt];
        if (exists)
          return !!available;
        if (!available)
          return [];
        if (available.fn)
          return [available.fn];
        for (var i = 0, l = available.length, ee = new Array(l);i < l; i++) {
          ee[i] = available[i].fn;
        }
        return ee;
      };
      EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          return false;
        var listeners = this._events[evt], len = arguments.length, args, i;
        if (listeners.fn) {
          if (listeners.once)
            this.removeListener(event, listeners.fn, undefined, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }
          for (i = 1, args = new Array(len - 1);i < len; i++) {
            args[i - 1] = arguments[i];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j;
          for (i = 0;i < length; i++) {
            if (listeners[i].once)
              this.removeListener(event, listeners[i].fn, undefined, true);
            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;
              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;
              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;
              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;
              default:
                if (!args)
                  for (j = 1, args = new Array(len - 1);j < len; j++) {
                    args[j - 1] = arguments[j];
                  }
                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter.prototype.on = function on(event, fn, context) {
        var listener = new EE(fn, context || this), evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          this._events[evt] = listener, this._eventsCount++;
        else if (!this._events[evt].fn)
          this._events[evt].push(listener);
        else
          this._events[evt] = [this._events[evt], listener];
        return this;
      };
      EventEmitter.prototype.once = function once(event, fn, context) {
        var listener = new EE(fn, context || this, true), evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          this._events[evt] = listener, this._eventsCount++;
        else if (!this._events[evt].fn)
          this._events[evt].push(listener);
        else
          this._events[evt] = [this._events[evt], listener];
        return this;
      };
      EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          return this;
        if (!fn) {
          if (--this._eventsCount === 0)
            this._events = new Events;
          else
            delete this._events[evt];
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            if (--this._eventsCount === 0)
              this._events = new Events;
            else
              delete this._events[evt];
          }
        } else {
          for (var i = 0, events = [], length = listeners.length;i < length; i++) {
            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
              events.push(listeners[i]);
            }
          }
          if (events.length)
            this._events[evt] = events.length === 1 ? events[0] : events;
          else if (--this._eventsCount === 0)
            this._events = new Events;
          else
            delete this._events[evt];
        }
        return this;
      };
      EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix ? prefix + event : event;
          if (this._events[evt]) {
            if (--this._eventsCount === 0)
              this._events = new Events;
            else
              delete this._events[evt];
          }
        } else {
          this._events = new Events;
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
      EventEmitter.prototype.addListener = EventEmitter.prototype.on;
      EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
        return this;
      };
      EventEmitter.prefixed = prefix;
      EventEmitter.EventEmitter = EventEmitter;
      {
        module2.exports = EventEmitter;
      }
    });
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var noop = function noop() {};
    var State = {
      data: "state-data",
      cdata: "state-cdata",
      tagBegin: "state-tag-begin",
      tagName: "state-tag-name",
      tagEnd: "state-tag-end",
      attributeNameStart: "state-attribute-name-start",
      attributeName: "state-attribute-name",
      attributeNameEnd: "state-attribute-name-end",
      attributeValueBegin: "state-attribute-value-begin",
      attributeValue: "state-attribute-value"
    };
    var Action = {
      lt: "action-lt",
      gt: "action-gt",
      space: "action-space",
      equal: "action-equal",
      quote: "action-quote",
      slash: "action-slash",
      char: "action-char",
      error: "action-error"
    };
    var Type$1 = {
      text: "text",
      openTag: "open-tag",
      closeTag: "close-tag",
      attributeName: "attribute-name",
      attributeValue: "attribute-value"
    };
    var charToAction = {
      " ": Action.space,
      "\t": Action.space,
      "\n": Action.space,
      "\r": Action.space,
      "<": Action.lt,
      ">": Action.gt,
      '"': Action.quote,
      "'": Action.quote,
      "=": Action.equal,
      "/": Action.slash
    };
    var getAction = function getAction(char) {
      return charToAction[char] || Action.char;
    };
    var create$1 = function create(options) {
      var _State$data, _State$tagBegin, _State$tagName, _State$tagEnd, _State$attributeNameS, _State$attributeName, _State$attributeNameE, _State$attributeValue, _State$attributeValue2, _lexer$stateMachine;
      options = Object.assign({ debug: false }, options);
      var lexer2 = new eventemitter3;
      var state = State.data;
      var data = "";
      var tagName = "";
      var attrName = "";
      var attrValue = "";
      var isClosing = "";
      var openingQuote = "";
      var emit = function emit(type, value) {
        if (tagName[0] === "?" || tagName[0] === "!") {
          return;
        }
        var event = { type, value };
        if (options.debug) {
          console.log("emit:", event);
        }
        lexer2.emit("data", event);
      };
      lexer2.stateMachine = (_lexer$stateMachine = {}, _defineProperty(_lexer$stateMachine, State.data, (_State$data = {}, _defineProperty(_State$data, Action.lt, function() {
        if (data.trim()) {
          emit(Type$1.text, data);
        }
        tagName = "";
        isClosing = false;
        state = State.tagBegin;
      }), _defineProperty(_State$data, Action.char, function(char) {
        data += char;
      }), _State$data)), _defineProperty(_lexer$stateMachine, State.cdata, _defineProperty({}, Action.char, function(char) {
        data += char;
        if (data.substr(-3) === "]]>") {
          emit(Type$1.text, data.slice(0, -3));
          data = "";
          state = State.data;
        }
      })), _defineProperty(_lexer$stateMachine, State.tagBegin, (_State$tagBegin = {}, _defineProperty(_State$tagBegin, Action.space, noop), _defineProperty(_State$tagBegin, Action.char, function(char) {
        tagName = char;
        state = State.tagName;
      }), _defineProperty(_State$tagBegin, Action.slash, function() {
        tagName = "";
        isClosing = true;
      }), _State$tagBegin)), _defineProperty(_lexer$stateMachine, State.tagName, (_State$tagName = {}, _defineProperty(_State$tagName, Action.space, function() {
        if (isClosing) {
          state = State.tagEnd;
        } else {
          state = State.attributeNameStart;
          emit(Type$1.openTag, tagName);
        }
      }), _defineProperty(_State$tagName, Action.gt, function() {
        if (isClosing) {
          emit(Type$1.closeTag, tagName);
        } else {
          emit(Type$1.openTag, tagName);
        }
        data = "";
        state = State.data;
      }), _defineProperty(_State$tagName, Action.slash, function() {
        state = State.tagEnd;
        emit(Type$1.openTag, tagName);
      }), _defineProperty(_State$tagName, Action.char, function(char) {
        tagName += char;
        if (tagName === "![CDATA[") {
          state = State.cdata;
          data = "";
          tagName = "";
        }
      }), _State$tagName)), _defineProperty(_lexer$stateMachine, State.tagEnd, (_State$tagEnd = {}, _defineProperty(_State$tagEnd, Action.gt, function() {
        emit(Type$1.closeTag, tagName);
        data = "";
        state = State.data;
      }), _defineProperty(_State$tagEnd, Action.char, noop), _State$tagEnd)), _defineProperty(_lexer$stateMachine, State.attributeNameStart, (_State$attributeNameS = {}, _defineProperty(_State$attributeNameS, Action.char, function(char) {
        attrName = char;
        state = State.attributeName;
      }), _defineProperty(_State$attributeNameS, Action.gt, function() {
        data = "";
        state = State.data;
      }), _defineProperty(_State$attributeNameS, Action.space, noop), _defineProperty(_State$attributeNameS, Action.slash, function() {
        isClosing = true;
        state = State.tagEnd;
      }), _State$attributeNameS)), _defineProperty(_lexer$stateMachine, State.attributeName, (_State$attributeName = {}, _defineProperty(_State$attributeName, Action.space, function() {
        state = State.attributeNameEnd;
      }), _defineProperty(_State$attributeName, Action.equal, function() {
        emit(Type$1.attributeName, attrName);
        state = State.attributeValueBegin;
      }), _defineProperty(_State$attributeName, Action.gt, function() {
        attrValue = "";
        emit(Type$1.attributeName, attrName);
        emit(Type$1.attributeValue, attrValue);
        data = "";
        state = State.data;
      }), _defineProperty(_State$attributeName, Action.slash, function() {
        isClosing = true;
        attrValue = "";
        emit(Type$1.attributeName, attrName);
        emit(Type$1.attributeValue, attrValue);
        state = State.tagEnd;
      }), _defineProperty(_State$attributeName, Action.char, function(char) {
        attrName += char;
      }), _State$attributeName)), _defineProperty(_lexer$stateMachine, State.attributeNameEnd, (_State$attributeNameE = {}, _defineProperty(_State$attributeNameE, Action.space, noop), _defineProperty(_State$attributeNameE, Action.equal, function() {
        emit(Type$1.attributeName, attrName);
        state = State.attributeValueBegin;
      }), _defineProperty(_State$attributeNameE, Action.gt, function() {
        attrValue = "";
        emit(Type$1.attributeName, attrName);
        emit(Type$1.attributeValue, attrValue);
        data = "";
        state = State.data;
      }), _defineProperty(_State$attributeNameE, Action.char, function(char) {
        attrValue = "";
        emit(Type$1.attributeName, attrName);
        emit(Type$1.attributeValue, attrValue);
        attrName = char;
        state = State.attributeName;
      }), _State$attributeNameE)), _defineProperty(_lexer$stateMachine, State.attributeValueBegin, (_State$attributeValue = {}, _defineProperty(_State$attributeValue, Action.space, noop), _defineProperty(_State$attributeValue, Action.quote, function(char) {
        openingQuote = char;
        attrValue = "";
        state = State.attributeValue;
      }), _defineProperty(_State$attributeValue, Action.gt, function() {
        attrValue = "";
        emit(Type$1.attributeValue, attrValue);
        data = "";
        state = State.data;
      }), _defineProperty(_State$attributeValue, Action.char, function(char) {
        openingQuote = "";
        attrValue = char;
        state = State.attributeValue;
      }), _State$attributeValue)), _defineProperty(_lexer$stateMachine, State.attributeValue, (_State$attributeValue2 = {}, _defineProperty(_State$attributeValue2, Action.space, function(char) {
        if (openingQuote) {
          attrValue += char;
        } else {
          emit(Type$1.attributeValue, attrValue);
          state = State.attributeNameStart;
        }
      }), _defineProperty(_State$attributeValue2, Action.quote, function(char) {
        if (openingQuote === char) {
          emit(Type$1.attributeValue, attrValue);
          state = State.attributeNameStart;
        } else {
          attrValue += char;
        }
      }), _defineProperty(_State$attributeValue2, Action.gt, function(char) {
        if (openingQuote) {
          attrValue += char;
        } else {
          emit(Type$1.attributeValue, attrValue);
          data = "";
          state = State.data;
        }
      }), _defineProperty(_State$attributeValue2, Action.slash, function(char) {
        if (openingQuote) {
          attrValue += char;
        } else {
          emit(Type$1.attributeValue, attrValue);
          isClosing = true;
          state = State.tagEnd;
        }
      }), _defineProperty(_State$attributeValue2, Action.char, function(char) {
        attrValue += char;
      }), _State$attributeValue2)), _lexer$stateMachine);
      var step = function step(char) {
        if (options.debug) {
          console.log(state, char);
        }
        var actions = lexer2.stateMachine[state];
        var action = actions[getAction(char)] || actions[Action.error] || actions[Action.char];
        action(char);
      };
      lexer2.write = function(str) {
        var len = str.length;
        for (var i = 0;i < len; i++) {
          step(str[i]);
        }
      };
      return lexer2;
    };
    var lexer = {
      State,
      Action,
      Type: Type$1,
      create: create$1
    };
    var Type = lexer.Type;
    var NodeType = {
      element: "element",
      text: "text"
    };
    var createNode = function createNode(params) {
      return Object.assign({
        name: "",
        type: NodeType.element,
        value: "",
        parent: null,
        attributes: {},
        children: []
      }, params);
    };
    var create = function create(options) {
      options = Object.assign({
        stream: false,
        parentNodes: true,
        doneEvent: "done",
        tagPrefix: "tag:",
        emitTopLevelOnly: false,
        debug: false
      }, options);
      var lexer$1 = undefined, rootNode = undefined, current = undefined, attrName = undefined;
      var reader2 = new eventemitter3;
      var handleLexerData = function handleLexerData(data) {
        switch (data.type) {
          case Type.openTag:
            if (current === null) {
              current = rootNode;
              current.name = data.value;
            } else {
              var node = createNode({
                name: data.value,
                parent: current
              });
              current.children.push(node);
              current = node;
            }
            break;
          case Type.closeTag:
            var parent = current.parent;
            if (!options.parentNodes) {
              current.parent = null;
            }
            if (current.name !== data.value) {
              break;
            }
            if (options.stream && parent === rootNode) {
              rootNode.children = [];
              current.parent = null;
            }
            if (!options.emitTopLevelOnly || parent === rootNode) {
              reader2.emit(options.tagPrefix + current.name, current);
              reader2.emit("tag", current.name, current);
            }
            if (current === rootNode) {
              lexer$1.removeAllListeners("data");
              reader2.emit(options.doneEvent, current);
              rootNode = null;
            }
            current = parent;
            break;
          case Type.text:
            if (current) {
              current.children.push(createNode({
                type: NodeType.text,
                value: data.value,
                parent: options.parentNodes ? current : null
              }));
            }
            break;
          case Type.attributeName:
            attrName = data.value;
            current.attributes[attrName] = "";
            break;
          case Type.attributeValue:
            current.attributes[attrName] = data.value;
            break;
        }
      };
      reader2.reset = function() {
        lexer$1 = lexer.create({ debug: options.debug });
        lexer$1.on("data", handleLexerData);
        rootNode = createNode();
        current = null;
        attrName = "";
        reader2.parse = lexer$1.write;
      };
      reader2.reset();
      return reader2;
    };
    var parseSync = function parseSync(xml, options) {
      options = Object.assign({}, options, { stream: false, tagPrefix: ":" });
      var reader2 = create(options);
      var res = undefined;
      reader2.on("done", function(ast) {
        res = ast;
      });
      reader2.parse(xml);
      return res;
    };
    var reader = {
      parseSync,
      create,
      NodeType
    };
    var reader_1 = reader.parseSync;
    var parseInput = function parseInput(input) {
      var parsed = reader_1("<root>".concat(input, "</root>"), {
        parentNodes: false
      });
      var isValid = parsed.children && parsed.children.length > 0 && parsed.children.every(function(node) {
        return node.name === "svg";
      });
      if (isValid) {
        return parsed.children.length === 1 ? parsed.children[0] : parsed.children;
      } else {
        throw Error("nothing to parse");
      }
    };
    var camelize = function camelize(node) {
      return deepRenameKeys(node, function(key) {
        if (!notCamelcase(key)) {
          return toCamelCase(key);
        }
        return key;
      });
    };
    var toCamelCase = function toCamelCase(prop) {
      return prop.replace(/[-|:]([a-z])/gi, function(all, letter) {
        return letter.toUpperCase();
      });
    };
    var notCamelcase = function notCamelcase(prop) {
      return /^(data|aria)(-\w+)/.test(prop);
    };
    var escapeText = function escapeText(text) {
      if (text) {
        var str = String(text);
        return /[&<>]/.test(str) ? "<![CDATA[".concat(str.replace(/]]>/, "]]]]><![CDATA[>"), "]]>") : str;
      }
      return "";
    };
    var escapeAttr = function escapeAttr(attr) {
      return String(attr).replace(/&/g, "&amp;").replace(/'/g, "&apos;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    };
    var svgsonSync = function svgsonSync(input) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$transformNode = _ref.transformNode, transformNode = _ref$transformNode === undefined ? function(node) {
        return node;
      } : _ref$transformNode, _ref$camelcase = _ref.camelcase, camelcase = _ref$camelcase === undefined ? false : _ref$camelcase;
      var applyFilters = function applyFilters(input2) {
        var n;
        n = transformNode(input2);
        if (camelcase) {
          n = camelize(n);
        }
        return n;
      };
      return applyFilters(parseInput(input));
    };
    function svgson() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return new Promise(function(resolve, reject) {
        try {
          var res = svgsonSync.apply(undefined, args);
          resolve(res);
        } catch (e) {
          reject(e);
        }
      });
    }
    var stringify = function stringify(_ast) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$transformAttr = _ref.transformAttr, transformAttr = _ref$transformAttr === undefined ? function(key, value, escape) {
        return "".concat(key, '="').concat(escape(value), '"');
      } : _ref$transformAttr, _ref$transformNode = _ref.transformNode, transformNode = _ref$transformNode === undefined ? function(node) {
        return node;
      } : _ref$transformNode, _ref$selfClose = _ref.selfClose, selfClose = _ref$selfClose === undefined ? true : _ref$selfClose;
      if (Array.isArray(_ast)) {
        return _ast.map(function(ast2) {
          return stringify(ast2, {
            transformAttr,
            selfClose,
            transformNode
          });
        }).join("");
      }
      var ast = transformNode(_ast);
      if (ast.type === "text") {
        return escapeText(ast.value);
      }
      var attributes = "";
      for (var attr in ast.attributes) {
        var attrStr = transformAttr(attr, ast.attributes[attr], escapeAttr, ast.name);
        attributes += attrStr ? " ".concat(attrStr) : "";
      }
      return ast.children && ast.children.length > 0 || !selfClose ? "<".concat(ast.name).concat(attributes, ">").concat(stringify(ast.children, {
        transformAttr,
        transformNode,
        selfClose
      }), "</").concat(ast.name, ">") : "<".concat(ast.name).concat(attributes, "/>");
    };
    var indexUmd = Object.assign({}, {
      parse: svgson,
      parseSync: svgsonSync,
      stringify
    });
    return indexUmd;
  });
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS((exports, module) => {
  (function() {
    function defineDeprecationWarning(methodName, info) {
      Object.defineProperty(Component.prototype, methodName, {
        get: function() {
          console.warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
        }
      });
    }
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object")
        return null;
      maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
      return typeof maybeIterable === "function" ? maybeIterable : null;
    }
    function warnNoop(publicInstance, callerName) {
      publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
      var warningKey = publicInstance + "." + callerName;
      didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, publicInstance), didWarnStateUpdateForUnmountedComponent[warningKey] = true);
    }
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function ComponentDummy() {}
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function noop() {}
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      try {
        testStringCoercion(value);
        var JSCompiler_inline_result = false;
      } catch (e3) {
        JSCompiler_inline_result = true;
      }
      if (JSCompiler_inline_result) {
        JSCompiler_inline_result = console;
        var JSCompiler_temp_const = JSCompiler_inline_result.error;
        var JSCompiler_inline_result$jscomp$0 = typeof Symbol === "function" && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
        return testStringCoercion(value);
      }
    }
    function getComponentNameFromType(type) {
      if (type == null)
        return null;
      if (typeof type === "function")
        return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
      if (typeof type === "string")
        return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
        case REACT_ACTIVITY_TYPE:
          return "Activity";
      }
      if (typeof type === "object")
        switch (typeof type.tag === "number" && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof) {
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_CONTEXT_TYPE:
            return type.displayName || "Context";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = type !== "" ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, innerType !== null ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {}
        }
      return null;
    }
    function getTaskName(type) {
      if (type === REACT_FRAGMENT_TYPE)
        return "<>";
      if (typeof type === "object" && type !== null && type.$$typeof === REACT_LAZY_TYPE)
        return "<...>";
      try {
        var name = getComponentNameFromType(type);
        return name ? "<" + name + ">" : "<...>";
      } catch (x) {
        return "<...>";
      }
    }
    function getOwner() {
      var dispatcher = ReactSharedInternals.A;
      return dispatcher === null ? null : dispatcher.getOwner();
    }
    function UnknownOwner() {
      return Error("react-stack-top-frame");
    }
    function hasValidKey(config) {
      if (hasOwnProperty.call(config, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
        if (getter && getter.isReactWarning)
          return false;
      }
      return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      function warnAboutAccessingKey() {
        specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
      }
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, "key", {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }
    function elementRefGetterWithDeprecationWarning() {
      var componentName = getComponentNameFromType(this.type);
      didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
      componentName = this.props.ref;
      return componentName !== undefined ? componentName : null;
    }
    function ReactElement(type, key, props, owner, debugStack, debugTask) {
      var refProp = props.ref;
      type = {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        props,
        _owner: owner
      };
      (refProp !== undefined ? refProp : null) !== null ? Object.defineProperty(type, "ref", {
        enumerable: false,
        get: elementRefGetterWithDeprecationWarning
      }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
      type._store = {};
      Object.defineProperty(type._store, "validated", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: 0
      });
      Object.defineProperty(type, "_debugInfo", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: null
      });
      Object.defineProperty(type, "_debugStack", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: debugStack
      });
      Object.defineProperty(type, "_debugTask", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: debugTask
      });
      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
      return type;
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      newKey = ReactElement(oldElement.type, newKey, oldElement.props, oldElement._owner, oldElement._debugStack, oldElement._debugTask);
      oldElement._store && (newKey._store.validated = oldElement._store.validated);
      return newKey;
    }
    function validateChildKeys(node) {
      isValidElement(node) ? node._store && (node._store.validated = 1) : typeof node === "object" && node !== null && node.$$typeof === REACT_LAZY_TYPE && (node._payload.status === "fulfilled" ? isValidElement(node._payload.value) && node._payload.value._store && (node._payload.value._store.validated = 1) : node._store && (node._store.validated = 1));
    }
    function isValidElement(object) {
      return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function escape(key) {
      var escaperLookup = { "=": "=0", ":": "=2" };
      return "$" + key.replace(/[=:]/g, function(match) {
        return escaperLookup[match];
      });
    }
    function getElementKey(element, index) {
      return typeof element === "object" && element !== null && element.key != null ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
    }
    function resolveThenable(thenable) {
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
        default:
          switch (typeof thenable.status === "string" ? thenable.then(noop, noop) : (thenable.status = "pending", thenable.then(function(fulfilledValue) {
            thenable.status === "pending" && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
          }, function(error) {
            thenable.status === "pending" && (thenable.status = "rejected", thenable.reason = error);
          })), thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
          }
      }
      throw thenable;
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if (type === "undefined" || type === "boolean")
        children = null;
      var invokeCallback = false;
      if (children === null)
        invokeCallback = true;
      else
        switch (type) {
          case "bigint":
          case "string":
          case "number":
            invokeCallback = true;
            break;
          case "object":
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
                break;
              case REACT_LAZY_TYPE:
                return invokeCallback = children._init, mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback);
            }
        }
      if (invokeCallback) {
        invokeCallback = children;
        callback = callback(invokeCallback);
        var childKey = nameSoFar === "" ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
        isArrayImpl(callback) ? (escapedPrefix = "", childKey != null && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
          return c;
        })) : callback != null && (isValidElement(callback) && (callback.key != null && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(callback, escapedPrefix + (callback.key == null || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$&/") + "/") + childKey), nameSoFar !== "" && invokeCallback != null && isValidElement(invokeCallback) && invokeCallback.key == null && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
        return 1;
      }
      invokeCallback = 0;
      childKey = nameSoFar === "" ? "." : nameSoFar + ":";
      if (isArrayImpl(children))
        for (var i = 0;i < children.length; i++)
          nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
      else if (i = getIteratorFn(children), typeof i === "function")
        for (i === children.entries && (didWarnAboutMaps || console.warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = true), children = i.call(children), i = 0;!(nameSoFar = children.next()).done; )
          nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
      else if (type === "object") {
        if (typeof children.then === "function")
          return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
        array = String(children);
        throw Error("Objects are not valid as a React child (found: " + (array === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead.");
      }
      return invokeCallback;
    }
    function mapChildren(children, func, context) {
      if (children == null)
        return children;
      var result = [], count = 0;
      mapIntoArray(children, result, "", "", function(child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    function lazyInitializer(payload) {
      if (payload._status === -1) {
        var ioInfo = payload._ioInfo;
        ioInfo != null && (ioInfo.start = ioInfo.end = performance.now());
        ioInfo = payload._result;
        var thenable = ioInfo();
        thenable.then(function(moduleObject) {
          if (payload._status === 0 || payload._status === -1) {
            payload._status = 1;
            payload._result = moduleObject;
            var _ioInfo = payload._ioInfo;
            _ioInfo != null && (_ioInfo.end = performance.now());
            thenable.status === undefined && (thenable.status = "fulfilled", thenable.value = moduleObject);
          }
        }, function(error) {
          if (payload._status === 0 || payload._status === -1) {
            payload._status = 2;
            payload._result = error;
            var _ioInfo2 = payload._ioInfo;
            _ioInfo2 != null && (_ioInfo2.end = performance.now());
            thenable.status === undefined && (thenable.status = "rejected", thenable.reason = error);
          }
        });
        ioInfo = payload._ioInfo;
        if (ioInfo != null) {
          ioInfo.value = thenable;
          var displayName = thenable.displayName;
          typeof displayName === "string" && (ioInfo.name = displayName);
        }
        payload._status === -1 && (payload._status = 0, payload._result = thenable);
      }
      if (payload._status === 1)
        return ioInfo = payload._result, ioInfo === undefined && console.error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, ioInfo), "default" in ioInfo || console.error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, ioInfo), ioInfo.default;
      throw payload._result;
    }
    function resolveDispatcher() {
      var dispatcher = ReactSharedInternals.H;
      dispatcher === null && console.error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.`);
      return dispatcher;
    }
    function releaseAsyncTransition() {
      ReactSharedInternals.asyncTransitions--;
    }
    function enqueueTask(task) {
      if (enqueueTaskImpl === null)
        try {
          var requireString = ("require" + Math.random()).slice(0, 7);
          enqueueTaskImpl = (module && module[requireString]).call(module, "timers").setImmediate;
        } catch (_err) {
          enqueueTaskImpl = function(callback) {
            didWarnAboutMessageChannel === false && (didWarnAboutMessageChannel = true, typeof MessageChannel === "undefined" && console.error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
            var channel = new MessageChannel;
            channel.port1.onmessage = callback;
            channel.port2.postMessage(undefined);
          };
        }
      return enqueueTaskImpl(task);
    }
    function aggregateErrors(errors2) {
      return 1 < errors2.length && typeof AggregateError === "function" ? new AggregateError(errors2) : errors2[0];
    }
    function popActScope(prevActQueue, prevActScopeDepth) {
      prevActScopeDepth !== actScopeDepth - 1 && console.error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
      actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
      var queue = ReactSharedInternals.actQueue;
      if (queue !== null)
        if (queue.length !== 0)
          try {
            flushActQueue(queue);
            enqueueTask(function() {
              return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
            return;
          } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
          }
        else
          ReactSharedInternals.actQueue = null;
      0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
    }
    function flushActQueue(queue) {
      if (!isFlushing) {
        isFlushing = true;
        var i = 0;
        try {
          for (;i < queue.length; i++) {
            var callback = queue[i];
            do {
              ReactSharedInternals.didUsePromise = false;
              var continuation = callback(false);
              if (continuation !== null) {
                if (ReactSharedInternals.didUsePromise) {
                  queue[i] = callback;
                  queue.splice(0, i);
                  return;
                }
                callback = continuation;
              } else
                break;
            } while (1);
          }
          queue.length = 0;
        } catch (error) {
          queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
        } finally {
          isFlushing = false;
        }
      }
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
      isMounted: function() {
        return false;
      },
      enqueueForceUpdate: function(publicInstance) {
        warnNoop(publicInstance, "forceUpdate");
      },
      enqueueReplaceState: function(publicInstance) {
        warnNoop(publicInstance, "replaceState");
      },
      enqueueSetState: function(publicInstance) {
        warnNoop(publicInstance, "setState");
      }
    }, assign = Object.assign, emptyObject = {};
    Object.freeze(emptyObject);
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function(partialState, callback) {
      if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null)
        throw Error("takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function(callback) {
      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
      isMounted: [
        "isMounted",
        "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
      ],
      replaceState: [
        "replaceState",
        "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
      ]
    };
    for (fnName in deprecatedAPIs)
      deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    ComponentDummy.prototype = Component.prototype;
    deprecatedAPIs = PureComponent.prototype = new ComponentDummy;
    deprecatedAPIs.constructor = PureComponent;
    assign(deprecatedAPIs, Component.prototype);
    deprecatedAPIs.isPureReactComponent = true;
    var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = {
      H: null,
      A: null,
      T: null,
      S: null,
      actQueue: null,
      asyncTransitions: 0,
      isBatchingLegacy: false,
      didScheduleLegacyUpdate: false,
      didUsePromise: false,
      thrownErrors: [],
      getCurrentStack: null,
      recentlyCreatedOwnerStacks: 0
    }, hasOwnProperty = Object.prototype.hasOwnProperty, createTask = console.createTask ? console.createTask : function() {
      return null;
    };
    deprecatedAPIs = {
      react_stack_bottom_frame: function(callStackForError) {
        return callStackForError();
      }
    };
    var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
    var didWarnAboutElementRef = {};
    var unknownOwnerDebugStack = deprecatedAPIs.react_stack_bottom_frame.bind(deprecatedAPIs, UnknownOwner)();
    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
    var didWarnAboutMaps = false, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = typeof reportError === "function" ? reportError : function(error) {
      if (typeof window === "object" && typeof window.ErrorEvent === "function") {
        var event = new window.ErrorEvent("error", {
          bubbles: true,
          cancelable: true,
          message: typeof error === "object" && error !== null && typeof error.message === "string" ? String(error.message) : String(error),
          error
        });
        if (!window.dispatchEvent(event))
          return;
      } else if (typeof process === "object" && typeof process.emit === "function") {
        process.emit("uncaughtException", error);
        return;
      }
      console.error(error);
    }, didWarnAboutMessageChannel = false, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = false, isFlushing = false, queueSeveralMicrotasks = typeof queueMicrotask === "function" ? function(callback) {
      queueMicrotask(function() {
        return queueMicrotask(callback);
      });
    } : enqueueTask;
    deprecatedAPIs = Object.freeze({
      __proto__: null,
      c: function(size2) {
        return resolveDispatcher().useMemoCache(size2);
      }
    });
    var fnName = {
      map: mapChildren,
      forEach: function(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      },
      count: function(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      },
      toArray: function(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      },
      only: function(children) {
        if (!isValidElement(children))
          throw Error("React.Children.only expected to receive a single React element child.");
        return children;
      }
    };
    exports.Activity = REACT_ACTIVITY_TYPE;
    exports.Children = fnName;
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
    exports.__COMPILER_RUNTIME = deprecatedAPIs;
    exports.act = function(callback) {
      var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
      actScopeDepth++;
      var queue = ReactSharedInternals.actQueue = prevActQueue !== null ? prevActQueue : [], didAwaitActCall = false;
      try {
        var result = callback();
      } catch (error) {
        ReactSharedInternals.thrownErrors.push(error);
      }
      if (0 < ReactSharedInternals.thrownErrors.length)
        throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
      if (result !== null && typeof result === "object" && typeof result.then === "function") {
        var thenable = result;
        queueSeveralMicrotasks(function() {
          didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
        });
        return {
          then: function(resolve, reject) {
            didAwaitActCall = true;
            thenable.then(function(returnValue) {
              popActScope(prevActQueue, prevActScopeDepth);
              if (prevActScopeDepth === 0) {
                try {
                  flushActQueue(queue), enqueueTask(function() {
                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  });
                } catch (error$0) {
                  ReactSharedInternals.thrownErrors.push(error$0);
                }
                if (0 < ReactSharedInternals.thrownErrors.length) {
                  var _thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);
                  ReactSharedInternals.thrownErrors.length = 0;
                  reject(_thrownError);
                }
              } else
                resolve(returnValue);
            }, function(error) {
              popActScope(prevActQueue, prevActScopeDepth);
              0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
            });
          }
        };
      }
      var returnValue$jscomp$0 = result;
      popActScope(prevActQueue, prevActScopeDepth);
      prevActScopeDepth === 0 && (flushActQueue(queue), queue.length !== 0 && queueSeveralMicrotasks(function() {
        didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"));
      }), ReactSharedInternals.actQueue = null);
      if (0 < ReactSharedInternals.thrownErrors.length)
        throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
      return {
        then: function(resolve, reject) {
          didAwaitActCall = true;
          prevActScopeDepth === 0 ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
            return recursivelyFlushAsyncActWork(returnValue$jscomp$0, resolve, reject);
          })) : resolve(returnValue$jscomp$0);
        }
      };
    };
    exports.cache = function(fn2) {
      return function() {
        return fn2.apply(null, arguments);
      };
    };
    exports.cacheSignal = function() {
      return null;
    };
    exports.captureOwnerStack = function() {
      var getCurrentStack = ReactSharedInternals.getCurrentStack;
      return getCurrentStack === null ? null : getCurrentStack();
    };
    exports.cloneElement = function(element, config, children) {
      if (element === null || element === undefined)
        throw Error("The argument must be a React element, but you passed " + element + ".");
      var props = assign({}, element.props), key = element.key, owner = element._owner;
      if (config != null) {
        var JSCompiler_inline_result;
        a: {
          if (hasOwnProperty.call(config, "ref") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(config, "ref").get) && JSCompiler_inline_result.isReactWarning) {
            JSCompiler_inline_result = false;
            break a;
          }
          JSCompiler_inline_result = config.ref !== undefined;
        }
        JSCompiler_inline_result && (owner = getOwner());
        hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
        for (propName in config)
          !hasOwnProperty.call(config, propName) || propName === "key" || propName === "__self" || propName === "__source" || propName === "ref" && config.ref === undefined || (props[propName] = config[propName]);
      }
      var propName = arguments.length - 2;
      if (propName === 1)
        props.children = children;
      else if (1 < propName) {
        JSCompiler_inline_result = Array(propName);
        for (var i = 0;i < propName; i++)
          JSCompiler_inline_result[i] = arguments[i + 2];
        props.children = JSCompiler_inline_result;
      }
      props = ReactElement(element.type, key, props, owner, element._debugStack, element._debugTask);
      for (key = 2;key < arguments.length; key++)
        validateChildKeys(arguments[key]);
      return props;
    };
    exports.createContext = function(defaultValue) {
      defaultValue = {
        $$typeof: REACT_CONTEXT_TYPE,
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        _threadCount: 0,
        Provider: null,
        Consumer: null
      };
      defaultValue.Provider = defaultValue;
      defaultValue.Consumer = {
        $$typeof: REACT_CONSUMER_TYPE,
        _context: defaultValue
      };
      defaultValue._currentRenderer = null;
      defaultValue._currentRenderer2 = null;
      return defaultValue;
    };
    exports.createElement = function(type, config, children) {
      for (var i = 2;i < arguments.length; i++)
        validateChildKeys(arguments[i]);
      i = {};
      var key = null;
      if (config != null)
        for (propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = true, console.warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform")), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), config)
          hasOwnProperty.call(config, propName) && propName !== "key" && propName !== "__self" && propName !== "__source" && (i[propName] = config[propName]);
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1)
        i.children = children;
      else if (1 < childrenLength) {
        for (var childArray = Array(childrenLength), _i2 = 0;_i2 < childrenLength; _i2++)
          childArray[_i2] = arguments[_i2 + 2];
        Object.freeze && Object.freeze(childArray);
        i.children = childArray;
      }
      if (type && type.defaultProps)
        for (propName in childrenLength = type.defaultProps, childrenLength)
          i[propName] === undefined && (i[propName] = childrenLength[propName]);
      key && defineKeyPropWarningGetter(i, typeof type === "function" ? type.displayName || type.name || "Unknown" : type);
      var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
      return ReactElement(type, key, i, getOwner(), propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack, propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask);
    };
    exports.createRef = function() {
      var refObject = { current: null };
      Object.seal(refObject);
      return refObject;
    };
    exports.forwardRef = function(render) {
      render != null && render.$$typeof === REACT_MEMO_TYPE ? console.error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render !== "function" ? console.error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render) : render.length !== 0 && render.length !== 2 && console.error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
      render != null && render.defaultProps != null && console.error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");
      var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render }, ownName;
      Object.defineProperty(elementType, "displayName", {
        enumerable: false,
        configurable: true,
        get: function() {
          return ownName;
        },
        set: function(name) {
          ownName = name;
          render.name || render.displayName || (Object.defineProperty(render, "name", { value: name }), render.displayName = name);
        }
      });
      return elementType;
    };
    exports.isValidElement = isValidElement;
    exports.lazy = function(ctor) {
      ctor = { _status: -1, _result: ctor };
      var lazyType2 = {
        $$typeof: REACT_LAZY_TYPE,
        _payload: ctor,
        _init: lazyInitializer
      }, ioInfo = {
        name: "lazy",
        start: -1,
        end: -1,
        value: null,
        owner: null,
        debugStack: Error("react-stack-top-frame"),
        debugTask: console.createTask ? console.createTask("lazy()") : null
      };
      ctor._ioInfo = ioInfo;
      lazyType2._debugInfo = [{ awaited: ioInfo }];
      return lazyType2;
    };
    exports.memo = function(type, compare) {
      type == null && console.error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
      compare = {
        $$typeof: REACT_MEMO_TYPE,
        type,
        compare: compare === undefined ? null : compare
      };
      var ownName;
      Object.defineProperty(compare, "displayName", {
        enumerable: false,
        configurable: true,
        get: function() {
          return ownName;
        },
        set: function(name) {
          ownName = name;
          type.name || type.displayName || (Object.defineProperty(type, "name", { value: name }), type.displayName = name);
        }
      });
      return compare;
    };
    exports.startTransition = function(scope) {
      var prevTransition = ReactSharedInternals.T, currentTransition = {};
      currentTransition._updatedFibers = new Set;
      ReactSharedInternals.T = currentTransition;
      try {
        var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
        onStartTransitionFinish !== null && onStartTransitionFinish(currentTransition, returnValue);
        typeof returnValue === "object" && returnValue !== null && typeof returnValue.then === "function" && (ReactSharedInternals.asyncTransitions++, returnValue.then(releaseAsyncTransition, releaseAsyncTransition), returnValue.then(noop, reportGlobalError));
      } catch (error) {
        reportGlobalError(error);
      } finally {
        prevTransition === null && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.")), prevTransition !== null && currentTransition.types !== null && (prevTransition.types !== null && prevTransition.types !== currentTransition.types && console.error("We expected inner Transitions to have transferred the outer types set and that you cannot add to the outer Transition while inside the inner.This is a bug in React."), prevTransition.types = currentTransition.types), ReactSharedInternals.T = prevTransition;
      }
    };
    exports.unstable_useCacheRefresh = function() {
      return resolveDispatcher().useCacheRefresh();
    };
    exports.use = function(usable) {
      return resolveDispatcher().use(usable);
    };
    exports.useActionState = function(action, initialState, permalink) {
      return resolveDispatcher().useActionState(action, initialState, permalink);
    };
    exports.useCallback = function(callback, deps) {
      return resolveDispatcher().useCallback(callback, deps);
    };
    exports.useContext = function(Context) {
      var dispatcher = resolveDispatcher();
      Context.$$typeof === REACT_CONSUMER_TYPE && console.error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?");
      return dispatcher.useContext(Context);
    };
    exports.useDebugValue = function(value, formatterFn) {
      return resolveDispatcher().useDebugValue(value, formatterFn);
    };
    exports.useDeferredValue = function(value, initialValue) {
      return resolveDispatcher().useDeferredValue(value, initialValue);
    };
    exports.useEffect = function(create, deps) {
      create == null && console.warn("React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?");
      return resolveDispatcher().useEffect(create, deps);
    };
    exports.useEffectEvent = function(callback) {
      return resolveDispatcher().useEffectEvent(callback);
    };
    exports.useId = function() {
      return resolveDispatcher().useId();
    };
    exports.useImperativeHandle = function(ref, create, deps) {
      return resolveDispatcher().useImperativeHandle(ref, create, deps);
    };
    exports.useInsertionEffect = function(create, deps) {
      create == null && console.warn("React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?");
      return resolveDispatcher().useInsertionEffect(create, deps);
    };
    exports.useLayoutEffect = function(create, deps) {
      create == null && console.warn("React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?");
      return resolveDispatcher().useLayoutEffect(create, deps);
    };
    exports.useMemo = function(create, deps) {
      return resolveDispatcher().useMemo(create, deps);
    };
    exports.useOptimistic = function(passthrough, reducer) {
      return resolveDispatcher().useOptimistic(passthrough, reducer);
    };
    exports.useReducer = function(reducer, initialArg, init) {
      return resolveDispatcher().useReducer(reducer, initialArg, init);
    };
    exports.useRef = function(initialValue) {
      return resolveDispatcher().useRef(initialValue);
    };
    exports.useState = function(initialState) {
      return resolveDispatcher().useState(initialState);
    };
    exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
      return resolveDispatcher().useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    };
    exports.useTransition = function() {
      return resolveDispatcher().useTransition();
    };
    exports.version = "19.2.0";
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();
});

// node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  var react_development = __toESM(require_react_development());
  if (false) {} else {
    module.exports = react_development;
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS((exports) => {
  (function() {
    function performWorkUntilDeadline() {
      needsPaint = false;
      if (isMessageLoopRunning) {
        var currentTime = exports.unstable_now();
        startTime = currentTime;
        var hasMoreWork = true;
        try {
          a: {
            isHostCallbackScheduled = false;
            isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              b: {
                advanceTimers(currentTime);
                for (currentTask = peek(taskQueue);currentTask !== null && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                  var callback = currentTask.callback;
                  if (typeof callback === "function") {
                    currentTask.callback = null;
                    currentPriorityLevel = currentTask.priorityLevel;
                    var continuationCallback = callback(currentTask.expirationTime <= currentTime);
                    currentTime = exports.unstable_now();
                    if (typeof continuationCallback === "function") {
                      currentTask.callback = continuationCallback;
                      advanceTimers(currentTime);
                      hasMoreWork = true;
                      break b;
                    }
                    currentTask === peek(taskQueue) && pop(taskQueue);
                    advanceTimers(currentTime);
                  } else
                    pop(taskQueue);
                  currentTask = peek(taskQueue);
                }
                if (currentTask !== null)
                  hasMoreWork = true;
                else {
                  var firstTimer = peek(timerQueue);
                  firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                  hasMoreWork = false;
                }
              }
              break a;
            } finally {
              currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
            }
            hasMoreWork = undefined;
          }
        } finally {
          hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
        }
      }
    }
    function push(heap, node) {
      var index = heap.length;
      heap.push(node);
      a:
        for (;0 < index; ) {
          var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
          if (0 < compare(parent, node))
            heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
          else
            break a;
        }
    }
    function peek(heap) {
      return heap.length === 0 ? null : heap[0];
    }
    function pop(heap) {
      if (heap.length === 0)
        return null;
      var first = heap[0], last = heap.pop();
      if (last !== first) {
        heap[0] = last;
        a:
          for (var index = 0, length2 = heap.length, halfLength = length2 >>> 1;index < halfLength; ) {
            var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
            if (0 > compare(left, last))
              rightIndex < length2 && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
            else if (rightIndex < length2 && 0 > compare(right, last))
              heap[index] = right, heap[rightIndex] = last, index = rightIndex;
            else
              break a;
          }
      }
      return first;
    }
    function compare(a, b) {
      var diff = a.sortIndex - b.sortIndex;
      return diff !== 0 ? diff : a.id - b.id;
    }
    function advanceTimers(currentTime) {
      for (var timer = peek(timerQueue);timer !== null; ) {
        if (timer.callback === null)
          pop(timerQueue);
        else if (timer.startTime <= currentTime)
          pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
        else
          break;
        timer = peek(timerQueue);
      }
    }
    function handleTimeout(currentTime) {
      isHostTimeoutScheduled = false;
      advanceTimers(currentTime);
      if (!isHostCallbackScheduled)
        if (peek(taskQueue) !== null)
          isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
        else {
          var firstTimer = peek(timerQueue);
          firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        }
    }
    function shouldYieldToHost() {
      return needsPaint ? true : exports.unstable_now() - startTime < frameInterval ? false : true;
    }
    function requestHostTimeout(callback, ms3) {
      taskTimeoutID = localSetTimeout(function() {
        callback(exports.unstable_now());
      }, ms3);
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    exports.unstable_now = undefined;
    if (typeof performance === "object" && typeof performance.now === "function") {
      var localPerformance = performance;
      exports.unstable_now = function() {
        return localPerformance.now();
      };
    } else {
      var localDate = Date, initialTime = localDate.now();
      exports.unstable_now = function() {
        return localDate.now() - initialTime;
      };
    }
    var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, needsPaint = false, localSetTimeout = typeof setTimeout === "function" ? setTimeout : null, localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null, localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null, isMessageLoopRunning = false, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
    if (typeof localSetImmediate === "function")
      var schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
      };
    else if (typeof MessageChannel !== "undefined") {
      var channel = new MessageChannel, port = channel.port2;
      channel.port1.onmessage = performWorkUntilDeadline;
      schedulePerformWorkUntilDeadline = function() {
        port.postMessage(null);
      };
    } else
      schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
      };
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(task) {
      task.callback = null;
    };
    exports.unstable_forceFrameRate = function(fps) {
      0 > fps || 125 < fps ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : frameInterval = 0 < fps ? Math.floor(1000 / fps) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return currentPriorityLevel;
    };
    exports.unstable_next = function(eventHandler) {
      switch (currentPriorityLevel) {
        case 1:
        case 2:
        case 3:
          var priorityLevel = 3;
          break;
        default:
          priorityLevel = currentPriorityLevel;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports.unstable_requestPaint = function() {
      needsPaint = true;
    };
    exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          priorityLevel = 3;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {
      var currentTime = exports.unstable_now();
      typeof options === "object" && options !== null ? (options = options.delay, options = typeof options === "number" && 0 < options ? currentTime + options : currentTime) : options = currentTime;
      switch (priorityLevel) {
        case 1:
          var timeout = -1;
          break;
        case 2:
          timeout = 250;
          break;
        case 5:
          timeout = 1073741823;
          break;
        case 4:
          timeout = 1e4;
          break;
        default:
          timeout = 5000;
      }
      timeout = options + timeout;
      priorityLevel = {
        id: taskIdCounter++,
        callback,
        priorityLevel,
        startTime: options,
        expirationTime: timeout,
        sortIndex: -1
      };
      options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), peek(taskQueue) === null && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
      return priorityLevel;
    };
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = function(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function() {
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = parentPriorityLevel;
        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
    };
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS((exports, module) => {
  var scheduler_development = __toESM(require_scheduler_development());
  if (false) {} else {
    module.exports = scheduler_development;
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS((exports) => {
  var React = __toESM(require_react());
  (function() {
    function noop() {}
    function testStringCoercion(value) {
      return "" + value;
    }
    function createPortal$1(children, containerInfo, implementation) {
      var key = 3 < arguments.length && arguments[3] !== undefined ? arguments[3] : null;
      try {
        testStringCoercion(key);
        var JSCompiler_inline_result = false;
      } catch (e3) {
        JSCompiler_inline_result = true;
      }
      JSCompiler_inline_result && (console.error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", typeof Symbol === "function" && Symbol.toStringTag && key[Symbol.toStringTag] || key.constructor.name || "Object"), testStringCoercion(key));
      return {
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : "" + key,
        children,
        containerInfo,
        implementation
      };
    }
    function getCrossOriginStringAs(as2, input) {
      if (as2 === "font")
        return "";
      if (typeof input === "string")
        return input === "use-credentials" ? input : "";
    }
    function getValueDescriptorExpectingObjectForWarning(thing) {
      return thing === null ? "`null`" : thing === undefined ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
    }
    function getValueDescriptorExpectingEnumForWarning(thing) {
      return thing === null ? "`null`" : thing === undefined ? "`undefined`" : thing === "" ? "an empty string" : typeof thing === "string" ? JSON.stringify(thing) : typeof thing === "number" ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
    }
    function resolveDispatcher() {
      var dispatcher = ReactSharedInternals.H;
      dispatcher === null && console.error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.`);
      return dispatcher;
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var Internals = {
      d: {
        f: noop,
        r: function() {
          throw Error("Invalid form element. requestFormReset must be passed a form that was rendered by React.");
        },
        D: noop,
        C: noop,
        L: noop,
        m: noop,
        X: noop,
        S: noop,
        M: noop
      },
      p: 0,
      findDOMNode: null
    }, REACT_PORTAL_TYPE = Symbol.for("react.portal"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    typeof Map === "function" && Map.prototype != null && typeof Map.prototype.forEach === "function" && typeof Set === "function" && Set.prototype != null && typeof Set.prototype.clear === "function" && typeof Set.prototype.forEach === "function" || console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
    exports.createPortal = function(children, container) {
      var key = 2 < arguments.length && arguments[2] !== undefined ? arguments[2] : null;
      if (!container || container.nodeType !== 1 && container.nodeType !== 9 && container.nodeType !== 11)
        throw Error("Target container is not a DOM element.");
      return createPortal$1(children, container, null, key);
    };
    exports.flushSync = function(fn2) {
      var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
      try {
        if (ReactSharedInternals.T = null, Internals.p = 2, fn2)
          return fn2();
      } finally {
        ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f() && console.error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
      }
    };
    exports.preconnect = function(href, options) {
      typeof href === "string" && href ? options != null && typeof options !== "object" ? console.error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.", getValueDescriptorExpectingEnumForWarning(options)) : options != null && typeof options.crossOrigin !== "string" && console.error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.", getValueDescriptorExpectingObjectForWarning(options.crossOrigin)) : console.error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
      typeof href === "string" && (options ? (options = options.crossOrigin, options = typeof options === "string" ? options === "use-credentials" ? options : "" : undefined) : options = null, Internals.d.C(href, options));
    };
    exports.prefetchDNS = function(href) {
      if (typeof href !== "string" || !href)
        console.error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
      else if (1 < arguments.length) {
        var options = arguments[1];
        typeof options === "object" && options.hasOwnProperty("crossOrigin") ? console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options)) : console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
      }
      typeof href === "string" && Internals.d.D(href);
    };
    exports.preinit = function(href, options) {
      typeof href === "string" && href ? options == null || typeof options !== "object" ? console.error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.", getValueDescriptorExpectingEnumForWarning(options)) : options.as !== "style" && options.as !== "script" && console.error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".', getValueDescriptorExpectingEnumForWarning(options.as)) : console.error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
      if (typeof href === "string" && options && typeof options.as === "string") {
        var as2 = options.as, crossOrigin = getCrossOriginStringAs(as2, options.crossOrigin), integrity = typeof options.integrity === "string" ? options.integrity : undefined, fetchPriority = typeof options.fetchPriority === "string" ? options.fetchPriority : undefined;
        as2 === "style" ? Internals.d.S(href, typeof options.precedence === "string" ? options.precedence : undefined, {
          crossOrigin,
          integrity,
          fetchPriority
        }) : as2 === "script" && Internals.d.X(href, {
          crossOrigin,
          integrity,
          fetchPriority,
          nonce: typeof options.nonce === "string" ? options.nonce : undefined
        });
      }
    };
    exports.preinitModule = function(href, options) {
      var encountered = "";
      typeof href === "string" && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
      options !== undefined && typeof options !== "object" ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && ("as" in options) && options.as !== "script" && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".");
      if (encountered)
        console.error("ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s", encountered);
      else
        switch (encountered = options && typeof options.as === "string" ? options.as : "script", encountered) {
          case "script":
            break;
          default:
            encountered = getValueDescriptorExpectingEnumForWarning(encountered), console.error('ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)', encountered, href);
        }
      if (typeof href === "string")
        if (typeof options === "object" && options !== null) {
          if (options.as == null || options.as === "script")
            encountered = getCrossOriginStringAs(options.as, options.crossOrigin), Internals.d.M(href, {
              crossOrigin: encountered,
              integrity: typeof options.integrity === "string" ? options.integrity : undefined,
              nonce: typeof options.nonce === "string" ? options.nonce : undefined
            });
        } else
          options == null && Internals.d.M(href);
    };
    exports.preload = function(href, options) {
      var encountered = "";
      typeof href === "string" && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
      options == null || typeof options !== "object" ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : typeof options.as === "string" && options.as || (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
      encountered && console.error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s', encountered);
      if (typeof href === "string" && typeof options === "object" && options !== null && typeof options.as === "string") {
        encountered = options.as;
        var crossOrigin = getCrossOriginStringAs(encountered, options.crossOrigin);
        Internals.d.L(href, encountered, {
          crossOrigin,
          integrity: typeof options.integrity === "string" ? options.integrity : undefined,
          nonce: typeof options.nonce === "string" ? options.nonce : undefined,
          type: typeof options.type === "string" ? options.type : undefined,
          fetchPriority: typeof options.fetchPriority === "string" ? options.fetchPriority : undefined,
          referrerPolicy: typeof options.referrerPolicy === "string" ? options.referrerPolicy : undefined,
          imageSrcSet: typeof options.imageSrcSet === "string" ? options.imageSrcSet : undefined,
          imageSizes: typeof options.imageSizes === "string" ? options.imageSizes : undefined,
          media: typeof options.media === "string" ? options.media : undefined
        });
      }
    };
    exports.preloadModule = function(href, options) {
      var encountered = "";
      typeof href === "string" && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
      options !== undefined && typeof options !== "object" ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && ("as" in options) && typeof options.as !== "string" && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
      encountered && console.error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s', encountered);
      typeof href === "string" && (options ? (encountered = getCrossOriginStringAs(options.as, options.crossOrigin), Internals.d.m(href, {
        as: typeof options.as === "string" && options.as !== "script" ? options.as : undefined,
        crossOrigin: encountered,
        integrity: typeof options.integrity === "string" ? options.integrity : undefined
      })) : Internals.d.m(href));
    };
    exports.requestFormReset = function(form) {
      Internals.d.r(form);
    };
    exports.unstable_batchedUpdates = function(fn2, a) {
      return fn2(a);
    };
    exports.useFormState = function(action, initialState, permalink) {
      return resolveDispatcher().useFormState(action, initialState, permalink);
    };
    exports.useFormStatus = function() {
      return resolveDispatcher().useHostTransitionStatus();
    };
    exports.version = "19.2.0";
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  var react_dom_development = __toESM(require_react_dom_development());
  if (false) {} else {
    module.exports = react_dom_development;
  }
});

// node_modules/react-dom/cjs/react-dom-client.development.js
var require_react_dom_client_development = __commonJS((exports) => {
  var Scheduler = __toESM(require_scheduler());
  var React = __toESM(require_react());
  var ReactDOM = __toESM(require_react_dom());
  (function() {
    function findHook(fiber, id) {
      for (fiber = fiber.memoizedState;fiber !== null && 0 < id; )
        fiber = fiber.next, id--;
      return fiber;
    }
    function copyWithSetImpl(obj, path, index, value) {
      if (index >= path.length)
        return value;
      var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
      updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
      return updated;
    }
    function copyWithRename(obj, oldPath, newPath) {
      if (oldPath.length !== newPath.length)
        console.warn("copyWithRename() expects paths of the same length");
      else {
        for (var i = 0;i < newPath.length - 1; i++)
          if (oldPath[i] !== newPath[i]) {
            console.warn("copyWithRename() expects paths to be the same except for the deepest key");
            return;
          }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      }
    }
    function copyWithRenameImpl(obj, oldPath, newPath, index) {
      var oldKey = oldPath[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
      index + 1 === oldPath.length ? (updated[newPath[index]] = updated[oldKey], isArrayImpl(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey]) : updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
      return updated;
    }
    function copyWithDeleteImpl(obj, path, index) {
      var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
      if (index + 1 === path.length)
        return isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key], updated;
      updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
      return updated;
    }
    function shouldSuspendImpl() {
      return false;
    }
    function shouldErrorImpl() {
      return null;
    }
    function warnInvalidHookAccess() {
      console.error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks");
    }
    function warnInvalidContextAccess() {
      console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    }
    function noop() {}
    function warnForMissingKey() {}
    function setToSortedString(set) {
      var array = [];
      set.forEach(function(value) {
        array.push(value);
      });
      return array.sort().join(", ");
    }
    function createFiber(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    }
    function scheduleRoot(root2, element) {
      root2.context === emptyContextObject && (updateContainerImpl(root2.current, 2, element, root2, null, null), flushSyncWork$1());
    }
    function scheduleRefresh(root2, update) {
      if (resolveFamily !== null) {
        var staleFamilies = update.staleFamilies;
        update = update.updatedFamilies;
        flushPendingEffects();
        scheduleFibersWithFamiliesRecursively(root2.current, update, staleFamilies);
        flushSyncWork$1();
      }
    }
    function setRefreshHandler(handler) {
      resolveFamily = handler;
    }
    function isValidContainer(node) {
      return !(!node || node.nodeType !== 1 && node.nodeType !== 9 && node.nodeType !== 11);
    }
    function getNearestMountedFiber(fiber) {
      var node = fiber, nearestMounted = fiber;
      if (fiber.alternate)
        for (;node.return; )
          node = node.return;
      else {
        fiber = node;
        do
          node = fiber, (node.flags & 4098) !== 0 && (nearestMounted = node.return), fiber = node.return;
        while (fiber);
      }
      return node.tag === 3 ? nearestMounted : null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (fiber.tag === 13) {
        var suspenseState = fiber.memoizedState;
        suspenseState === null && (fiber = fiber.alternate, fiber !== null && (suspenseState = fiber.memoizedState));
        if (suspenseState !== null)
          return suspenseState.dehydrated;
      }
      return null;
    }
    function getActivityInstanceFromFiber(fiber) {
      if (fiber.tag === 31) {
        var activityState = fiber.memoizedState;
        activityState === null && (fiber = fiber.alternate, fiber !== null && (activityState = fiber.memoizedState));
        if (activityState !== null)
          return activityState.dehydrated;
      }
      return null;
    }
    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber)
        throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (alternate === null)
          throw Error("Unable to find node on an unmounted component.");
        return alternate !== fiber ? null : fiber;
      }
      for (var a = fiber, b = alternate;; ) {
        var parentA = a.return;
        if (parentA === null)
          break;
        var parentB = parentA.alternate;
        if (parentB === null) {
          b = parentA.return;
          if (b !== null) {
            a = b;
            continue;
          }
          break;
        }
        if (parentA.child === parentB.child) {
          for (parentB = parentA.child;parentB; ) {
            if (parentB === a)
              return assertIsMounted(parentA), fiber;
            if (parentB === b)
              return assertIsMounted(parentA), alternate;
            parentB = parentB.sibling;
          }
          throw Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return)
          a = parentA, b = parentB;
        else {
          for (var didFindChild = false, _child = parentA.child;_child; ) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            for (_child = parentB.child;_child; ) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild)
              throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
        if (a.alternate !== b)
          throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (a.tag !== 3)
        throw Error("Unable to find node on an unmounted component.");
      return a.stateNode.current === a ? fiber : alternate;
    }
    function findCurrentHostFiberImpl(node) {
      var tag = node.tag;
      if (tag === 5 || tag === 26 || tag === 27 || tag === 6)
        return node;
      for (node = node.child;node !== null; ) {
        tag = findCurrentHostFiberImpl(node);
        if (tag !== null)
          return tag;
        node = node.sibling;
      }
      return null;
    }
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object")
        return null;
      maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
      return typeof maybeIterable === "function" ? maybeIterable : null;
    }
    function getComponentNameFromType(type) {
      if (type == null)
        return null;
      if (typeof type === "function")
        return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
      if (typeof type === "string")
        return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
        case REACT_ACTIVITY_TYPE:
          return "Activity";
      }
      if (typeof type === "object")
        switch (typeof type.tag === "number" && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof) {
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_CONTEXT_TYPE:
            return type.displayName || "Context";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = type !== "" ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, innerType !== null ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {}
        }
      return null;
    }
    function getComponentNameFromOwner(owner) {
      return typeof owner.tag === "number" ? getComponentNameFromFiber(owner) : typeof owner.name === "string" ? owner.name : null;
    }
    function getComponentNameFromFiber(fiber) {
      var type = fiber.type;
      switch (fiber.tag) {
        case 31:
          return "Activity";
        case 24:
          return "Cache";
        case 9:
          return (type._context.displayName || "Context") + ".Consumer";
        case 10:
          return type.displayName || "Context";
        case 18:
          return "DehydratedFragment";
        case 11:
          return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || (fiber !== "" ? "ForwardRef(" + fiber + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 26:
        case 27:
        case 5:
          return type;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return getComponentNameFromType(type);
        case 8:
          return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 14:
        case 15:
          if (typeof type === "function")
            return type.displayName || type.name || null;
          if (typeof type === "string")
            return type;
          break;
        case 29:
          type = fiber._debugInfo;
          if (type != null) {
            for (var i = type.length - 1;0 <= i; i--)
              if (typeof type[i].name === "string")
                return type[i].name;
          }
          if (fiber.return !== null)
            return getComponentNameFromFiber(fiber.return);
      }
      return null;
    }
    function createCursor(defaultValue) {
      return { current: defaultValue };
    }
    function pop(cursor, fiber) {
      0 > index$jscomp$0 ? console.error("Unexpected pop.") : (fiber !== fiberStack[index$jscomp$0] && console.error("Unexpected Fiber popped."), cursor.current = valueStack[index$jscomp$0], valueStack[index$jscomp$0] = null, fiberStack[index$jscomp$0] = null, index$jscomp$0--);
    }
    function push(cursor, value, fiber) {
      index$jscomp$0++;
      valueStack[index$jscomp$0] = cursor.current;
      fiberStack[index$jscomp$0] = fiber;
      cursor.current = value;
    }
    function requiredContext(c) {
      c === null && console.error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return c;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor, null, fiber);
      var nextRootContext = nextRootInstance.nodeType;
      switch (nextRootContext) {
        case 9:
        case 11:
          nextRootContext = nextRootContext === 9 ? "#document" : "#fragment";
          nextRootInstance = (nextRootInstance = nextRootInstance.documentElement) ? (nextRootInstance = nextRootInstance.namespaceURI) ? getOwnHostContext(nextRootInstance) : HostContextNamespaceNone : HostContextNamespaceNone;
          break;
        default:
          if (nextRootContext = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
            nextRootInstance = getOwnHostContext(nextRootInstance), nextRootInstance = getChildHostContextProd(nextRootInstance, nextRootContext);
          else
            switch (nextRootContext) {
              case "svg":
                nextRootInstance = HostContextNamespaceSvg;
                break;
              case "math":
                nextRootInstance = HostContextNamespaceMath;
                break;
              default:
                nextRootInstance = HostContextNamespaceNone;
            }
      }
      nextRootContext = nextRootContext.toLowerCase();
      nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
      nextRootContext = {
        context: nextRootInstance,
        ancestorInfo: nextRootContext
      };
      pop(contextStackCursor, fiber);
      push(contextStackCursor, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
      return requiredContext(contextStackCursor.current);
    }
    function pushHostContext(fiber) {
      fiber.memoizedState !== null && push(hostTransitionProviderCursor, fiber, fiber);
      var context = requiredContext(contextStackCursor.current);
      var type = fiber.type;
      var nextContext = getChildHostContextProd(context.context, type);
      type = updatedAncestorInfoDev(context.ancestorInfo, type);
      nextContext = { context: nextContext, ancestorInfo: type };
      context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, nextContext, fiber));
    }
    function popHostContext(fiber) {
      contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
      hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor, fiber), HostTransitionContext._currentValue = NotPendingTransition);
    }
    function disabledLog() {}
    function disableLogs() {
      if (disabledDepth === 0) {
        prevLog = console.log;
        prevInfo = console.info;
        prevWarn = console.warn;
        prevError = console.error;
        prevGroup = console.group;
        prevGroupCollapsed = console.groupCollapsed;
        prevGroupEnd = console.groupEnd;
        var props = {
          configurable: true,
          enumerable: true,
          value: disabledLog,
          writable: true
        };
        Object.defineProperties(console, {
          info: props,
          log: props,
          warn: props,
          error: props,
          group: props,
          groupCollapsed: props,
          groupEnd: props
        });
      }
      disabledDepth++;
    }
    function reenableLogs() {
      disabledDepth--;
      if (disabledDepth === 0) {
        var props = { configurable: true, enumerable: true, writable: true };
        Object.defineProperties(console, {
          log: assign({}, props, { value: prevLog }),
          info: assign({}, props, { value: prevInfo }),
          warn: assign({}, props, { value: prevWarn }),
          error: assign({}, props, { value: prevError }),
          group: assign({}, props, { value: prevGroup }),
          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
          groupEnd: assign({}, props, { value: prevGroupEnd })
        });
      }
      0 > disabledDepth && console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function formatOwnerStack(error) {
      var prevPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = undefined;
      error = error.stack;
      Error.prepareStackTrace = prevPrepareStackTrace;
      error.startsWith(`Error: react-stack-top-frame
`) && (error = error.slice(29));
      prevPrepareStackTrace = error.indexOf(`
`);
      prevPrepareStackTrace !== -1 && (error = error.slice(prevPrepareStackTrace + 1));
      prevPrepareStackTrace = error.indexOf("react_stack_bottom_frame");
      prevPrepareStackTrace !== -1 && (prevPrepareStackTrace = error.lastIndexOf(`
`, prevPrepareStackTrace));
      if (prevPrepareStackTrace !== -1)
        error = error.slice(0, prevPrepareStackTrace);
      else
        return "";
      return error;
    }
    function describeBuiltInComponentFrame(name) {
      if (prefix === undefined)
        try {
          throw Error();
        } catch (x) {
          var match = x.stack.trim().match(/\n( *(at )?)/);
          prefix = match && match[1] || "";
          suffix = -1 < x.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
      return `
` + prefix + name + suffix;
    }
    function describeNativeComponentFrame(fn2, construct) {
      if (!fn2 || reentry)
        return "";
      var frame = componentFrameCache.get(fn2);
      if (frame !== undefined)
        return frame;
      reentry = true;
      frame = Error.prepareStackTrace;
      Error.prepareStackTrace = undefined;
      var previousDispatcher2 = null;
      previousDispatcher2 = ReactSharedInternals.H;
      ReactSharedInternals.H = null;
      disableLogs();
      try {
        var RunInRootFrame = {
          DetermineComponentFrameRoot: function() {
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    var control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x$0) {
                    control = x$0;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x$1) {
                  control = x$1;
                }
                (Fake = fn2()) && typeof Fake.catch === "function" && Fake.catch(function() {});
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string")
                return [sample.stack, control.stack];
            }
            return [null, null];
          }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
        namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", { value: "DetermineComponentFrameRoot" });
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
          var sampleLines = sampleStack.split(`
`), controlLines = controlStack.split(`
`);
          for (_RunInRootFrame$Deter = namePropDescriptor = 0;namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes("DetermineComponentFrameRoot"); )
            namePropDescriptor++;
          for (;_RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes("DetermineComponentFrameRoot"); )
            _RunInRootFrame$Deter++;
          if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length)
            for (namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1;1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]; )
              _RunInRootFrame$Deter--;
          for (;1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)
            if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
              if (namePropDescriptor !== 1 || _RunInRootFrame$Deter !== 1) {
                do
                  if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                    var _frame = `
` + sampleLines[namePropDescriptor].replace(" at new ", " at ");
                    fn2.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn2.displayName));
                    typeof fn2 === "function" && componentFrameCache.set(fn2, _frame);
                    return _frame;
                  }
                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
              }
              break;
            }
        }
      } finally {
        reentry = false, ReactSharedInternals.H = previousDispatcher2, reenableLogs(), Error.prepareStackTrace = frame;
      }
      sampleLines = (sampleLines = fn2 ? fn2.displayName || fn2.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
      typeof fn2 === "function" && componentFrameCache.set(fn2, sampleLines);
      return sampleLines;
    }
    function describeFiber(fiber, childFiber) {
      switch (fiber.tag) {
        case 26:
        case 27:
        case 5:
          return describeBuiltInComponentFrame(fiber.type);
        case 16:
          return describeBuiltInComponentFrame("Lazy");
        case 13:
          return fiber.child !== childFiber && childFiber !== null ? describeBuiltInComponentFrame("Suspense Fallback") : describeBuiltInComponentFrame("Suspense");
        case 19:
          return describeBuiltInComponentFrame("SuspenseList");
        case 0:
        case 15:
          return describeNativeComponentFrame(fiber.type, false);
        case 11:
          return describeNativeComponentFrame(fiber.type.render, false);
        case 1:
          return describeNativeComponentFrame(fiber.type, true);
        case 31:
          return describeBuiltInComponentFrame("Activity");
        default:
          return "";
      }
    }
    function getStackByFiberInDevAndProd(workInProgress2) {
      try {
        var info = "", previous = null;
        do {
          info += describeFiber(workInProgress2, previous);
          var debugInfo = workInProgress2._debugInfo;
          if (debugInfo)
            for (var i = debugInfo.length - 1;0 <= i; i--) {
              var entry = debugInfo[i];
              if (typeof entry.name === "string") {
                var JSCompiler_temp_const = info;
                a: {
                  var { name, env, debugLocation: location } = entry;
                  if (location != null) {
                    var childStack = formatOwnerStack(location), idx = childStack.lastIndexOf(`
`), lastLine = idx === -1 ? childStack : childStack.slice(idx + 1);
                    if (lastLine.indexOf(name) !== -1) {
                      var JSCompiler_inline_result = `
` + lastLine;
                      break a;
                    }
                  }
                  JSCompiler_inline_result = describeBuiltInComponentFrame(name + (env ? " [" + env + "]" : ""));
                }
                info = JSCompiler_temp_const + JSCompiler_inline_result;
              }
            }
          previous = workInProgress2;
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2);
        return info;
      } catch (x) {
        return `
Error generating stack: ` + x.message + `
` + x.stack;
      }
    }
    function describeFunctionComponentFrameWithoutLineNumber(fn2) {
      return (fn2 = fn2 ? fn2.displayName || fn2.name : "") ? describeBuiltInComponentFrame(fn2) : "";
    }
    function getCurrentFiberOwnerNameInDevOrNull() {
      if (current2 === null)
        return null;
      var owner = current2._debugOwner;
      return owner != null ? getComponentNameFromOwner(owner) : null;
    }
    function getCurrentFiberStackInDev() {
      if (current2 === null)
        return "";
      var workInProgress2 = current2;
      try {
        var info = "";
        workInProgress2.tag === 6 && (workInProgress2 = workInProgress2.return);
        switch (workInProgress2.tag) {
          case 26:
          case 27:
          case 5:
            info += describeBuiltInComponentFrame(workInProgress2.type);
            break;
          case 13:
            info += describeBuiltInComponentFrame("Suspense");
            break;
          case 19:
            info += describeBuiltInComponentFrame("SuspenseList");
            break;
          case 31:
            info += describeBuiltInComponentFrame("Activity");
            break;
          case 30:
          case 0:
          case 15:
          case 1:
            workInProgress2._debugOwner || info !== "" || (info += describeFunctionComponentFrameWithoutLineNumber(workInProgress2.type));
            break;
          case 11:
            workInProgress2._debugOwner || info !== "" || (info += describeFunctionComponentFrameWithoutLineNumber(workInProgress2.type.render));
        }
        for (;workInProgress2; )
          if (typeof workInProgress2.tag === "number") {
            var fiber = workInProgress2;
            workInProgress2 = fiber._debugOwner;
            var debugStack = fiber._debugStack;
            if (workInProgress2 && debugStack) {
              var formattedStack = formatOwnerStack(debugStack);
              formattedStack !== "" && (info += `
` + formattedStack);
            }
          } else if (workInProgress2.debugStack != null) {
            var ownerStack = workInProgress2.debugStack;
            (workInProgress2 = workInProgress2.owner) && ownerStack && (info += `
` + formatOwnerStack(ownerStack));
          } else
            break;
        var JSCompiler_inline_result = info;
      } catch (x) {
        JSCompiler_inline_result = `
Error generating stack: ` + x.message + `
` + x.stack;
      }
      return JSCompiler_inline_result;
    }
    function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
      var previousFiber = current2;
      setCurrentFiber(fiber);
      try {
        return fiber !== null && fiber._debugTask ? fiber._debugTask.run(callback.bind(null, arg0, arg1, arg2, arg3, arg4)) : callback(arg0, arg1, arg2, arg3, arg4);
      } finally {
        setCurrentFiber(previousFiber);
      }
      throw Error("runWithFiberInDEV should never be called in production. This is a bug in React.");
    }
    function setCurrentFiber(fiber) {
      ReactSharedInternals.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
      isRendering = false;
      current2 = fiber;
    }
    function typeName(value) {
      return typeof Symbol === "function" && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
    }
    function willCoercionThrow(value) {
      try {
        return testStringCoercion(value), false;
      } catch (e3) {
        return true;
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
      if (willCoercionThrow(value))
        return console.error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.", attributeName, typeName(value)), testStringCoercion(value);
    }
    function checkCSSPropertyStringCoercion(value, propName) {
      if (willCoercionThrow(value))
        return console.error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value)), testStringCoercion(value);
    }
    function checkFormFieldValueStringCoercion(value) {
      if (willCoercionThrow(value))
        return console.error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.", typeName(value)), testStringCoercion(value);
    }
    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined")
        return false;
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled)
        return true;
      if (!hook.supportsFiber)
        return console.error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"), true;
      try {
        rendererID = hook.inject(internals), injectedHook = hook;
      } catch (err) {
        console.error("React instrumentation encountered an error: %o.", err);
      }
      return hook.checkDCE ? true : false;
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
      typeof log$1 === "function" && unstable_setDisableYieldValue2(newIsStrictMode);
      if (injectedHook && typeof injectedHook.setStrictMode === "function")
        try {
          injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
          hasLoggedError || (hasLoggedError = true, console.error("React instrumentation encountered an error: %o", err));
        }
    }
    function clz32Fallback(x) {
      x >>>= 0;
      return x === 0 ? 32 : 31 - (log2(x) / LN2 | 0) | 0;
    }
    function getHighestPriorityLanes(lanes) {
      var pendingSyncLanes = lanes & 42;
      if (pendingSyncLanes !== 0)
        return pendingSyncLanes;
      switch (lanes & -lanes) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
          return 64;
        case 128:
          return 128;
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
          return lanes & 261888;
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return lanes & 3932160;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          return lanes & 62914560;
        case 67108864:
          return 67108864;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 0;
        default:
          return console.error("Should have found matching lanes. This is a bug in React."), lanes;
      }
    }
    function getNextLanes(root2, wipLanes, rootHasPendingCommit) {
      var pendingLanes = root2.pendingLanes;
      if (pendingLanes === 0)
        return 0;
      var nextLanes = 0, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes;
      root2 = root2.warmLanes;
      var nonIdlePendingLanes = pendingLanes & 134217727;
      nonIdlePendingLanes !== 0 ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, pendingLanes !== 0 ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, pingedLanes !== 0 ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root2, rootHasPendingCommit !== 0 && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, nonIdlePendingLanes !== 0 ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : pingedLanes !== 0 ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root2, rootHasPendingCommit !== 0 && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
      return nextLanes === 0 ? 0 : wipLanes !== 0 && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === 0 && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || suspendedLanes === 32 && (rootHasPendingCommit & 4194048) !== 0) ? wipLanes : nextLanes;
    }
    function checkIfRootIsPrerendering(root2, renderLanes2) {
      return (root2.pendingLanes & ~(root2.suspendedLanes & ~root2.pingedLanes) & renderLanes2) === 0;
    }
    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case 1:
        case 2:
        case 4:
        case 8:
        case 64:
          return currentTime + 250;
        case 16:
        case 32:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return currentTime + 5000;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          return -1;
        case 67108864:
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return console.error("Should have found matching lanes. This is a bug in React."), -1;
      }
    }
    function claimNextRetryLane() {
      var lane = nextRetryLane;
      nextRetryLane <<= 1;
      (nextRetryLane & 62914560) === 0 && (nextRetryLane = 4194304);
      return lane;
    }
    function createLaneMap(initial) {
      for (var laneMap = [], i = 0;31 > i; i++)
        laneMap.push(initial);
      return laneMap;
    }
    function markRootUpdated$1(root2, updateLane) {
      root2.pendingLanes |= updateLane;
      updateLane !== 268435456 && (root2.suspendedLanes = 0, root2.pingedLanes = 0, root2.warmLanes = 0);
    }
    function markRootFinished(root2, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
      var previouslyPendingLanes = root2.pendingLanes;
      root2.pendingLanes = remainingLanes;
      root2.suspendedLanes = 0;
      root2.pingedLanes = 0;
      root2.warmLanes = 0;
      root2.expiredLanes &= remainingLanes;
      root2.entangledLanes &= remainingLanes;
      root2.errorRecoveryDisabledLanes &= remainingLanes;
      root2.shellSuspendCounter = 0;
      var { entanglements, expirationTimes, hiddenUpdates } = root2;
      for (remainingLanes = previouslyPendingLanes & ~remainingLanes;0 < remainingLanes; ) {
        var index = 31 - clz32(remainingLanes), lane = 1 << index;
        entanglements[index] = 0;
        expirationTimes[index] = -1;
        var hiddenUpdatesForLane = hiddenUpdates[index];
        if (hiddenUpdatesForLane !== null)
          for (hiddenUpdates[index] = null, index = 0;index < hiddenUpdatesForLane.length; index++) {
            var update = hiddenUpdatesForLane[index];
            update !== null && (update.lane &= -536870913);
          }
        remainingLanes &= ~lane;
      }
      spawnedLane !== 0 && markSpawnedDeferredLane(root2, spawnedLane, 0);
      suspendedRetryLanes !== 0 && updatedLanes === 0 && root2.tag !== 0 && (root2.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
    }
    function markSpawnedDeferredLane(root2, spawnedLane, entangledLanes) {
      root2.pendingLanes |= spawnedLane;
      root2.suspendedLanes &= ~spawnedLane;
      var spawnedLaneIndex = 31 - clz32(spawnedLane);
      root2.entangledLanes |= spawnedLane;
      root2.entanglements[spawnedLaneIndex] = root2.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 261930;
    }
    function markRootEntangled(root2, entangledLanes) {
      var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
      for (root2 = root2.entanglements;rootEntangledLanes; ) {
        var index = 31 - clz32(rootEntangledLanes), lane = 1 << index;
        lane & entangledLanes | root2[index] & entangledLanes && (root2[index] |= entangledLanes);
        rootEntangledLanes &= ~lane;
      }
    }
    function getBumpedLaneForHydration(root2, renderLanes2) {
      var renderLane = renderLanes2 & -renderLanes2;
      renderLane = (renderLane & 42) !== 0 ? 1 : getBumpedLaneForHydrationByLane(renderLane);
      return (renderLane & (root2.suspendedLanes | renderLanes2)) !== 0 ? 0 : renderLane;
    }
    function getBumpedLaneForHydrationByLane(lane) {
      switch (lane) {
        case 2:
          lane = 1;
          break;
        case 8:
          lane = 4;
          break;
        case 32:
          lane = 16;
          break;
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          lane = 128;
          break;
        case 268435456:
          lane = 134217728;
          break;
        default:
          lane = 0;
      }
      return lane;
    }
    function addFiberToLanesMap(root2, fiber, lanes) {
      if (isDevToolsPresent)
        for (root2 = root2.pendingUpdatersLaneMap;0 < lanes; ) {
          var index = 31 - clz32(lanes), lane = 1 << index;
          root2[index].add(fiber);
          lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root2, lanes) {
      if (isDevToolsPresent)
        for (var { pendingUpdatersLaneMap, memoizedUpdaters } = root2;0 < lanes; ) {
          var index = 31 - clz32(lanes);
          root2 = 1 << index;
          index = pendingUpdatersLaneMap[index];
          0 < index.size && (index.forEach(function(fiber) {
            var alternate = fiber.alternate;
            alternate !== null && memoizedUpdaters.has(alternate) || memoizedUpdaters.add(fiber);
          }), index.clear());
          lanes &= ~root2;
        }
    }
    function lanesToEventPriority(lanes) {
      lanes &= -lanes;
      return DiscreteEventPriority !== 0 && DiscreteEventPriority < lanes ? ContinuousEventPriority !== 0 && ContinuousEventPriority < lanes ? (lanes & 134217727) !== 0 ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
    }
    function resolveUpdatePriority() {
      var updatePriority = ReactDOMSharedInternals.p;
      if (updatePriority !== 0)
        return updatePriority;
      updatePriority = window.event;
      return updatePriority === undefined ? DefaultEventPriority : getEventPriority(updatePriority.type);
    }
    function runWithPriority(priority, fn2) {
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        return ReactDOMSharedInternals.p = priority, fn2();
      } finally {
        ReactDOMSharedInternals.p = previousPriority;
      }
    }
    function detachDeletedInstance(node) {
      delete node[internalInstanceKey];
      delete node[internalPropsKey];
      delete node[internalEventHandlersKey];
      delete node[internalEventHandlerListenersKey];
      delete node[internalEventHandlesSetKey];
    }
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst)
        return targetInst;
      for (var parentNode = targetNode.parentNode;parentNode; ) {
        if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
          parentNode = targetInst.alternate;
          if (targetInst.child !== null || parentNode !== null && parentNode.child !== null)
            for (targetNode = getParentHydrationBoundary(targetNode);targetNode !== null; ) {
              if (parentNode = targetNode[internalInstanceKey])
                return parentNode;
              targetNode = getParentHydrationBoundary(targetNode);
            }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    function getInstanceFromNode(node) {
      if (node = node[internalInstanceKey] || node[internalContainerInstanceKey]) {
        var tag = node.tag;
        if (tag === 5 || tag === 6 || tag === 13 || tag === 31 || tag === 26 || tag === 27 || tag === 3)
          return node;
      }
      return null;
    }
    function getNodeFromInstance(inst) {
      var tag = inst.tag;
      if (tag === 5 || tag === 26 || tag === 27 || tag === 6)
        return inst.stateNode;
      throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getResourcesFromRoot(root2) {
      var resources = root2[internalRootNodeResourcesKey];
      resources || (resources = root2[internalRootNodeResourcesKey] = { hoistableStyles: new Map, hoistableScripts: new Map });
      return resources;
    }
    function markNodeAsHoistable(node) {
      node[internalHoistableMarker] = true;
    }
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      registrationNameDependencies[registrationName] && console.error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
      registrationNameDependencies[registrationName] = dependencies;
      var lowerCasedName = registrationName.toLowerCase();
      possibleRegistrationNames[lowerCasedName] = registrationName;
      registrationName === "onDoubleClick" && (possibleRegistrationNames.ondblclick = registrationName);
      for (registrationName = 0;registrationName < dependencies.length; registrationName++)
        allNativeEvents.add(dependencies[registrationName]);
    }
    function checkControlledValueProps(tagName, props) {
      hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || (tagName === "select" ? console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`.") : console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."));
      props.onChange || props.readOnly || props.disabled || props.checked == null || console.error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
        return true;
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
        return false;
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
        return validatedAttributeNameCache[attributeName] = true;
      illegalAttributeNameCache[attributeName] = true;
      console.error("Invalid attribute name: `%s`", attributeName);
      return false;
    }
    function getValueForAttributeOnCustomComponent(node, name, expected) {
      if (isAttributeNameSafe(name)) {
        if (!node.hasAttribute(name)) {
          switch (typeof expected) {
            case "symbol":
            case "object":
              return expected;
            case "function":
              return expected;
            case "boolean":
              if (expected === false)
                return expected;
          }
          return expected === undefined ? undefined : null;
        }
        node = node.getAttribute(name);
        if (node === "" && expected === true)
          return true;
        checkAttributeStringCoercion(expected, name);
        return node === "" + expected ? expected : node;
      }
    }
    function setValueForAttribute(node, name, value) {
      if (isAttributeNameSafe(name))
        if (value === null)
          node.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
              node.removeAttribute(name);
              return;
            case "boolean":
              var prefix2 = name.toLowerCase().slice(0, 5);
              if (prefix2 !== "data-" && prefix2 !== "aria-") {
                node.removeAttribute(name);
                return;
              }
          }
          checkAttributeStringCoercion(value, name);
          node.setAttribute(name, "" + value);
        }
    }
    function setValueForKnownAttribute(node, name, value) {
      if (value === null)
        node.removeAttribute(name);
      else {
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            node.removeAttribute(name);
            return;
        }
        checkAttributeStringCoercion(value, name);
        node.setAttribute(name, "" + value);
      }
    }
    function setValueForNamespacedAttribute(node, namespace, name, value) {
      if (value === null)
        node.removeAttribute(name);
      else {
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            node.removeAttribute(name);
            return;
        }
        checkAttributeStringCoercion(value, name);
        node.setAttributeNS(namespace, name, "" + value);
      }
    }
    function getToStringValue(value) {
      switch (typeof value) {
        case "bigint":
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return value;
        case "object":
          return checkFormFieldValueStringCoercion(value), value;
        default:
          return "";
      }
    }
    function isCheckable(elem) {
      var type = elem.type;
      return (elem = elem.nodeName) && elem.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
    }
    function trackValueOnNode(node, valueField, currentValue) {
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      if (!node.hasOwnProperty(valueField) && typeof descriptor !== "undefined" && typeof descriptor.get === "function" && typeof descriptor.set === "function") {
        var { get, set } = descriptor;
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function() {
            return get.call(this);
          },
          set: function(value) {
            checkFormFieldValueStringCoercion(value);
            currentValue = "" + value;
            set.call(this, value);
          }
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable
        });
        return {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            checkFormFieldValueStringCoercion(value);
            currentValue = "" + value;
          },
          stopTracking: function() {
            node._valueTracker = null;
            delete node[valueField];
          }
        };
      }
    }
    function track(node) {
      if (!node._valueTracker) {
        var valueField = isCheckable(node) ? "checked" : "value";
        node._valueTracker = trackValueOnNode(node, valueField, "" + node[valueField]);
      }
    }
    function updateValueIfChanged(node) {
      if (!node)
        return false;
      var tracker = node._valueTracker;
      if (!tracker)
        return true;
      var lastValue = tracker.getValue();
      var value = "";
      node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
      node = value;
      return node !== lastValue ? (tracker.setValue(node), true) : false;
    }
    function getActiveElement(doc) {
      doc = doc || (typeof document !== "undefined" ? document : undefined);
      if (typeof doc === "undefined")
        return null;
      try {
        return doc.activeElement || doc.body;
      } catch (e3) {
        return doc.body;
      }
    }
    function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
      return value.replace(escapeSelectorAttributeValueInsideDoubleQuotesRegex, function(ch2) {
        return "\\" + ch2.charCodeAt(0).toString(16) + " ";
      });
    }
    function validateInputProps(element, props) {
      props.checked === undefined || props.defaultChecked === undefined || didWarnCheckedDefaultChecked || (console.error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = true);
      props.value === undefined || props.defaultValue === undefined || didWarnValueDefaultValue$1 || (console.error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue$1 = true);
    }
    function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
      element.name = "";
      type != null && typeof type !== "function" && typeof type !== "symbol" && typeof type !== "boolean" ? (checkAttributeStringCoercion(type, "type"), element.type = type) : element.removeAttribute("type");
      if (value != null)
        if (type === "number") {
          if (value === 0 && element.value === "" || element.value != value)
            element.value = "" + getToStringValue(value);
        } else
          element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
      else
        type !== "submit" && type !== "reset" || element.removeAttribute("value");
      value != null ? setDefaultValue(element, type, getToStringValue(value)) : defaultValue != null ? setDefaultValue(element, type, getToStringValue(defaultValue)) : lastDefaultValue != null && element.removeAttribute("value");
      checked == null && defaultChecked != null && (element.defaultChecked = !!defaultChecked);
      checked != null && (element.checked = checked && typeof checked !== "function" && typeof checked !== "symbol");
      name != null && typeof name !== "function" && typeof name !== "symbol" && typeof name !== "boolean" ? (checkAttributeStringCoercion(name, "name"), element.name = "" + getToStringValue(name)) : element.removeAttribute("name");
    }
    function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
      type != null && typeof type !== "function" && typeof type !== "symbol" && typeof type !== "boolean" && (checkAttributeStringCoercion(type, "type"), element.type = type);
      if (value != null || defaultValue != null) {
        if (!(type !== "submit" && type !== "reset" || value !== undefined && value !== null)) {
          track(element);
          return;
        }
        defaultValue = defaultValue != null ? "" + getToStringValue(defaultValue) : "";
        value = value != null ? "" + getToStringValue(value) : defaultValue;
        isHydrating2 || value === element.value || (element.value = value);
        element.defaultValue = value;
      }
      checked = checked != null ? checked : defaultChecked;
      checked = typeof checked !== "function" && typeof checked !== "symbol" && !!checked;
      element.checked = isHydrating2 ? element.checked : !!checked;
      element.defaultChecked = !!checked;
      name != null && typeof name !== "function" && typeof name !== "symbol" && typeof name !== "boolean" && (checkAttributeStringCoercion(name, "name"), element.name = name);
      track(element);
    }
    function setDefaultValue(node, type, value) {
      type === "number" && getActiveElement(node.ownerDocument) === node || node.defaultValue === "" + value || (node.defaultValue = "" + value);
    }
    function validateOptionProps(element, props) {
      props.value == null && (typeof props.children === "object" && props.children !== null ? React.Children.forEach(props.children, function(child) {
        child == null || typeof child === "string" || typeof child === "number" || typeof child === "bigint" || didWarnInvalidChild || (didWarnInvalidChild = true, console.error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."));
      }) : props.dangerouslySetInnerHTML == null || didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = true, console.error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")));
      props.selected == null || didWarnSelectedSetOnOption || (console.error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = true);
    }
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      return ownerName ? `

Check the render method of \`` + ownerName + "`." : "";
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      node = node.options;
      if (multiple) {
        multiple = {};
        for (var i = 0;i < propValue.length; i++)
          multiple["$" + propValue[i]] = true;
        for (propValue = 0;propValue < node.length; propValue++)
          i = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i && (node[propValue].selected = i), i && setDefaultSelected && (node[propValue].defaultSelected = true);
      } else {
        propValue = "" + getToStringValue(propValue);
        multiple = null;
        for (i = 0;i < node.length; i++) {
          if (node[i].value === propValue) {
            node[i].selected = true;
            setDefaultSelected && (node[i].defaultSelected = true);
            return;
          }
          multiple !== null || node[i].disabled || (multiple = node[i]);
        }
        multiple !== null && (multiple.selected = true);
      }
    }
    function validateSelectProps(element, props) {
      for (element = 0;element < valuePropNames.length; element++) {
        var propName = valuePropNames[element];
        if (props[propName] != null) {
          var propNameIsArray = isArrayImpl(props[propName]);
          props.multiple && !propNameIsArray ? console.error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum()) : !props.multiple && propNameIsArray && console.error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
      }
      props.value === undefined || props.defaultValue === undefined || didWarnValueDefaultValue || (console.error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"), didWarnValueDefaultValue = true);
    }
    function validateTextareaProps(element, props) {
      props.value === undefined || props.defaultValue === undefined || didWarnValDefaultVal || (console.error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = true);
      props.children != null && props.value == null && console.error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
    }
    function updateTextarea(element, value, defaultValue) {
      if (value != null && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), defaultValue == null)) {
        element.defaultValue !== value && (element.defaultValue = value);
        return;
      }
      element.defaultValue = defaultValue != null ? "" + getToStringValue(defaultValue) : "";
    }
    function initTextarea(element, value, defaultValue, children) {
      if (value == null) {
        if (children != null) {
          if (defaultValue != null)
            throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArrayImpl(children)) {
            if (1 < children.length)
              throw Error("<textarea> can only have at most one child.");
            children = children[0];
          }
          defaultValue = children;
        }
        defaultValue == null && (defaultValue = "");
        value = defaultValue;
      }
      defaultValue = getToStringValue(value);
      element.defaultValue = defaultValue;
      children = element.textContent;
      children === defaultValue && children !== "" && children !== null && (element.value = children);
      track(element);
    }
    function findNotableNode(node, indent) {
      return node.serverProps === undefined && node.serverTail.length === 0 && node.children.length === 1 && 3 < node.distanceFromLeaf && node.distanceFromLeaf > 15 - indent ? findNotableNode(node.children[0], indent) : node;
    }
    function indentation(indent) {
      return "  " + "  ".repeat(indent);
    }
    function added(indent) {
      return "+ " + "  ".repeat(indent);
    }
    function removed(indent) {
      return "- " + "  ".repeat(indent);
    }
    function describeFiberType(fiber) {
      switch (fiber.tag) {
        case 26:
        case 27:
        case 5:
          return fiber.type;
        case 16:
          return "Lazy";
        case 31:
          return "Activity";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 0:
        case 15:
          return fiber = fiber.type, fiber.displayName || fiber.name || null;
        case 11:
          return fiber = fiber.type.render, fiber.displayName || fiber.name || null;
        case 1:
          return fiber = fiber.type, fiber.displayName || fiber.name || null;
        default:
          return null;
      }
    }
    function describeTextNode(content, maxLength) {
      return needsEscaping.test(content) ? (content = JSON.stringify(content), content.length > maxLength - 2 ? 8 > maxLength ? '{"..."}' : "{" + content.slice(0, maxLength - 7) + '..."}' : "{" + content + "}") : content.length > maxLength ? 5 > maxLength ? '{"..."}' : content.slice(0, maxLength - 3) + "..." : content;
    }
    function describeTextDiff(clientText, serverProps, indent) {
      var maxLength = 120 - 2 * indent;
      if (serverProps === null)
        return added(indent) + describeTextNode(clientText, maxLength) + `
`;
      if (typeof serverProps === "string") {
        for (var firstDiff = 0;firstDiff < serverProps.length && firstDiff < clientText.length && serverProps.charCodeAt(firstDiff) === clientText.charCodeAt(firstDiff); firstDiff++)
          ;
        firstDiff > maxLength - 8 && 10 < firstDiff && (clientText = "..." + clientText.slice(firstDiff - 8), serverProps = "..." + serverProps.slice(firstDiff - 8));
        return added(indent) + describeTextNode(clientText, maxLength) + `
` + removed(indent) + describeTextNode(serverProps, maxLength) + `
`;
      }
      return indentation(indent) + describeTextNode(clientText, maxLength) + `
`;
    }
    function objectName(object) {
      return Object.prototype.toString.call(object).replace(/^\[object (.*)\]$/, function(m, p02) {
        return p02;
      });
    }
    function describeValue(value, maxLength) {
      switch (typeof value) {
        case "string":
          return value = JSON.stringify(value), value.length > maxLength ? 5 > maxLength ? '"..."' : value.slice(0, maxLength - 4) + '..."' : value;
        case "object":
          if (value === null)
            return "null";
          if (isArrayImpl(value))
            return "[...]";
          if (value.$$typeof === REACT_ELEMENT_TYPE)
            return (maxLength = getComponentNameFromType(value.type)) ? "<" + maxLength + ">" : "<...>";
          var name = objectName(value);
          if (name === "Object") {
            name = "";
            maxLength -= 2;
            for (var propName in value)
              if (value.hasOwnProperty(propName)) {
                var jsonPropName = JSON.stringify(propName);
                jsonPropName !== '"' + propName + '"' && (propName = jsonPropName);
                maxLength -= propName.length - 2;
                jsonPropName = describeValue(value[propName], 15 > maxLength ? maxLength : 15);
                maxLength -= jsonPropName.length;
                if (0 > maxLength) {
                  name += name === "" ? "..." : ", ...";
                  break;
                }
                name += (name === "" ? "" : ",") + propName + ":" + jsonPropName;
              }
            return "{" + name + "}";
          }
          return name;
        case "function":
          return (maxLength = value.displayName || value.name) ? "function " + maxLength : "function";
        default:
          return String(value);
      }
    }
    function describePropValue(value, maxLength) {
      return typeof value !== "string" || needsEscaping.test(value) ? "{" + describeValue(value, maxLength - 2) + "}" : value.length > maxLength - 2 ? 5 > maxLength ? '"..."' : '"' + value.slice(0, maxLength - 5) + '..."' : '"' + value + '"';
    }
    function describeExpandedElement(type, props, rowPrefix) {
      var remainingRowLength = 120 - rowPrefix.length - type.length, properties = [], propName;
      for (propName in props)
        if (props.hasOwnProperty(propName) && propName !== "children") {
          var propValue = describePropValue(props[propName], 120 - rowPrefix.length - propName.length - 1);
          remainingRowLength -= propName.length + propValue.length + 2;
          properties.push(propName + "=" + propValue);
        }
      return properties.length === 0 ? rowPrefix + "<" + type + `>
` : 0 < remainingRowLength ? rowPrefix + "<" + type + " " + properties.join(" ") + `>
` : rowPrefix + "<" + type + `
` + rowPrefix + "  " + properties.join(`
` + rowPrefix + "  ") + `
` + rowPrefix + `>
`;
    }
    function describePropertiesDiff(clientObject, serverObject, indent) {
      var properties = "", remainingServerProperties = assign({}, serverObject), propName;
      for (propName in clientObject)
        if (clientObject.hasOwnProperty(propName)) {
          delete remainingServerProperties[propName];
          var maxLength = 120 - 2 * indent - propName.length - 2, clientPropValue = describeValue(clientObject[propName], maxLength);
          serverObject.hasOwnProperty(propName) ? (maxLength = describeValue(serverObject[propName], maxLength), properties += added(indent) + propName + ": " + clientPropValue + `
`, properties += removed(indent) + propName + ": " + maxLength + `
`) : properties += added(indent) + propName + ": " + clientPropValue + `
`;
        }
      for (var _propName in remainingServerProperties)
        remainingServerProperties.hasOwnProperty(_propName) && (clientObject = describeValue(remainingServerProperties[_propName], 120 - 2 * indent - _propName.length - 2), properties += removed(indent) + _propName + ": " + clientObject + `
`);
      return properties;
    }
    function describeElementDiff(type, clientProps, serverProps, indent) {
      var content = "", serverPropNames = new Map;
      for (propName$jscomp$0 in serverProps)
        serverProps.hasOwnProperty(propName$jscomp$0) && serverPropNames.set(propName$jscomp$0.toLowerCase(), propName$jscomp$0);
      if (serverPropNames.size === 1 && serverPropNames.has("children"))
        content += describeExpandedElement(type, clientProps, indentation(indent));
      else {
        for (var _propName2 in clientProps)
          if (clientProps.hasOwnProperty(_propName2) && _propName2 !== "children") {
            var maxLength$jscomp$0 = 120 - 2 * (indent + 1) - _propName2.length - 1, serverPropName = serverPropNames.get(_propName2.toLowerCase());
            if (serverPropName !== undefined) {
              serverPropNames.delete(_propName2.toLowerCase());
              var propName$jscomp$0 = clientProps[_propName2];
              serverPropName = serverProps[serverPropName];
              var clientPropValue = describePropValue(propName$jscomp$0, maxLength$jscomp$0);
              maxLength$jscomp$0 = describePropValue(serverPropName, maxLength$jscomp$0);
              typeof propName$jscomp$0 === "object" && propName$jscomp$0 !== null && typeof serverPropName === "object" && serverPropName !== null && objectName(propName$jscomp$0) === "Object" && objectName(serverPropName) === "Object" && (2 < Object.keys(propName$jscomp$0).length || 2 < Object.keys(serverPropName).length || -1 < clientPropValue.indexOf("...") || -1 < maxLength$jscomp$0.indexOf("...")) ? content += indentation(indent + 1) + _propName2 + `={{
` + describePropertiesDiff(propName$jscomp$0, serverPropName, indent + 2) + indentation(indent + 1) + `}}
` : (content += added(indent + 1) + _propName2 + "=" + clientPropValue + `
`, content += removed(indent + 1) + _propName2 + "=" + maxLength$jscomp$0 + `
`);
            } else
              content += indentation(indent + 1) + _propName2 + "=" + describePropValue(clientProps[_propName2], maxLength$jscomp$0) + `
`;
          }
        serverPropNames.forEach(function(propName) {
          if (propName !== "children") {
            var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
            content += removed(indent + 1) + propName + "=" + describePropValue(serverProps[propName], maxLength) + `
`;
          }
        });
        content = content === "" ? indentation(indent) + "<" + type + `>
` : indentation(indent) + "<" + type + `
` + content + indentation(indent) + `>
`;
      }
      type = serverProps.children;
      clientProps = clientProps.children;
      if (typeof type === "string" || typeof type === "number" || typeof type === "bigint") {
        serverPropNames = "";
        if (typeof clientProps === "string" || typeof clientProps === "number" || typeof clientProps === "bigint")
          serverPropNames = "" + clientProps;
        content += describeTextDiff(serverPropNames, "" + type, indent + 1);
      } else if (typeof clientProps === "string" || typeof clientProps === "number" || typeof clientProps === "bigint")
        content = type == null ? content + describeTextDiff("" + clientProps, null, indent + 1) : content + describeTextDiff("" + clientProps, undefined, indent + 1);
      return content;
    }
    function describeSiblingFiber(fiber, indent) {
      var type = describeFiberType(fiber);
      if (type === null) {
        type = "";
        for (fiber = fiber.child;fiber; )
          type += describeSiblingFiber(fiber, indent), fiber = fiber.sibling;
        return type;
      }
      return indentation(indent) + "<" + type + `>
`;
    }
    function describeNode(node, indent) {
      var skipToNode = findNotableNode(node, indent);
      if (skipToNode !== node && (node.children.length !== 1 || node.children[0] !== skipToNode))
        return indentation(indent) + `...
` + describeNode(skipToNode, indent + 1);
      skipToNode = "";
      var debugInfo = node.fiber._debugInfo;
      if (debugInfo)
        for (var i = 0;i < debugInfo.length; i++) {
          var serverComponentName = debugInfo[i].name;
          typeof serverComponentName === "string" && (skipToNode += indentation(indent) + "<" + serverComponentName + `>
`, indent++);
        }
      debugInfo = "";
      i = node.fiber.pendingProps;
      if (node.fiber.tag === 6)
        debugInfo = describeTextDiff(i, node.serverProps, indent), indent++;
      else if (serverComponentName = describeFiberType(node.fiber), serverComponentName !== null)
        if (node.serverProps === undefined) {
          debugInfo = indent;
          var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2, content = "";
          for (propName in i)
            if (i.hasOwnProperty(propName) && propName !== "children") {
              var propValue = describePropValue(i[propName], 15);
              maxLength -= propName.length + propValue.length + 2;
              if (0 > maxLength) {
                content += " ...";
                break;
              }
              content += " " + propName + "=" + propValue;
            }
          debugInfo = indentation(debugInfo) + "<" + serverComponentName + content + `>
`;
          indent++;
        } else
          node.serverProps === null ? (debugInfo = describeExpandedElement(serverComponentName, i, added(indent)), indent++) : typeof node.serverProps === "string" ? console.error("Should not have matched a non HostText fiber to a Text node. This is a bug in React.") : (debugInfo = describeElementDiff(serverComponentName, i, node.serverProps, indent), indent++);
      var propName = "";
      i = node.fiber.child;
      for (serverComponentName = 0;i && serverComponentName < node.children.length; )
        maxLength = node.children[serverComponentName], maxLength.fiber === i ? (propName += describeNode(maxLength, indent), serverComponentName++) : propName += describeSiblingFiber(i, indent), i = i.sibling;
      i && 0 < node.children.length && (propName += indentation(indent) + `...
`);
      i = node.serverTail;
      node.serverProps === null && indent--;
      for (node = 0;node < i.length; node++)
        serverComponentName = i[node], propName = typeof serverComponentName === "string" ? propName + (removed(indent) + describeTextNode(serverComponentName, 120 - 2 * indent) + `
`) : propName + describeExpandedElement(serverComponentName.type, serverComponentName.props, removed(indent));
      return skipToNode + debugInfo + propName;
    }
    function describeDiff(rootNode) {
      try {
        return `

` + describeNode(rootNode, 0);
      } catch (x) {
        return "";
      }
    }
    function describeAncestors(ancestor, child, props) {
      for (var fiber = child, node = null, distanceFromLeaf = 0;fiber; )
        fiber === ancestor && (distanceFromLeaf = 0), node = {
          fiber,
          children: node !== null ? [node] : [],
          serverProps: fiber === child ? props : fiber === ancestor ? null : undefined,
          serverTail: [],
          distanceFromLeaf
        }, distanceFromLeaf++, fiber = fiber.return;
      return node !== null ? describeDiff(node).replaceAll(/^[+-]/gm, ">") : "";
    }
    function updatedAncestorInfoDev(oldInfo, tag) {
      var ancestorInfo = assign({}, oldInfo || emptyAncestorInfoDev), info = { tag };
      inScopeTags.indexOf(tag) !== -1 && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null);
      buttonScopeTags.indexOf(tag) !== -1 && (ancestorInfo.pTagInButtonScope = null);
      specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p" && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null);
      ancestorInfo.current = info;
      tag === "form" && (ancestorInfo.formTag = info);
      tag === "a" && (ancestorInfo.aTagInScope = info);
      tag === "button" && (ancestorInfo.buttonTagInScope = info);
      tag === "nobr" && (ancestorInfo.nobrTagInScope = info);
      tag === "p" && (ancestorInfo.pTagInButtonScope = info);
      tag === "li" && (ancestorInfo.listItemTagAutoclosing = info);
      if (tag === "dd" || tag === "dt")
        ancestorInfo.dlItemTagAutoclosing = info;
      tag === "#document" || tag === "html" ? ancestorInfo.containerTagInScope = null : ancestorInfo.containerTagInScope || (ancestorInfo.containerTagInScope = info);
      oldInfo !== null || tag !== "#document" && tag !== "html" && tag !== "body" ? ancestorInfo.implicitRootScope === true && (ancestorInfo.implicitRootScope = false) : ancestorInfo.implicitRootScope = true;
      return ancestorInfo;
    }
    function isTagValidWithParent(tag, parentTag, implicitRootScope) {
      switch (parentTag) {
        case "select":
          return tag === "hr" || tag === "option" || tag === "optgroup" || tag === "script" || tag === "template" || tag === "#text";
        case "optgroup":
          return tag === "option" || tag === "#text";
        case "option":
          return tag === "#text";
        case "tr":
          return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
        case "tbody":
        case "thead":
        case "tfoot":
          return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
        case "colgroup":
          return tag === "col" || tag === "template";
        case "table":
          return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
        case "head":
          return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
        case "html":
          if (implicitRootScope)
            break;
          return tag === "head" || tag === "body" || tag === "frameset";
        case "frameset":
          return tag === "frame";
        case "#document":
          if (!implicitRootScope)
            return tag === "html";
      }
      switch (tag) {
        case "h1":
        case "h2":
        case "h3":
        case "h4":
        case "h5":
        case "h6":
          return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
        case "rp":
        case "rt":
          return impliedEndTags.indexOf(parentTag) === -1;
        case "caption":
        case "col":
        case "colgroup":
        case "frameset":
        case "frame":
        case "tbody":
        case "td":
        case "tfoot":
        case "th":
        case "thead":
        case "tr":
          return parentTag == null;
        case "head":
          return implicitRootScope || parentTag === null;
        case "html":
          return implicitRootScope && parentTag === "#document" || parentTag === null;
        case "body":
          return implicitRootScope && (parentTag === "#document" || parentTag === "html") || parentTag === null;
      }
      return true;
    }
    function findInvalidAncestorForTag(tag, ancestorInfo) {
      switch (tag) {
        case "address":
        case "article":
        case "aside":
        case "blockquote":
        case "center":
        case "details":
        case "dialog":
        case "dir":
        case "div":
        case "dl":
        case "fieldset":
        case "figcaption":
        case "figure":
        case "footer":
        case "header":
        case "hgroup":
        case "main":
        case "menu":
        case "nav":
        case "ol":
        case "p":
        case "section":
        case "summary":
        case "ul":
        case "pre":
        case "listing":
        case "table":
        case "hr":
        case "xmp":
        case "h1":
        case "h2":
        case "h3":
        case "h4":
        case "h5":
        case "h6":
          return ancestorInfo.pTagInButtonScope;
        case "form":
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
        case "li":
          return ancestorInfo.listItemTagAutoclosing;
        case "dd":
        case "dt":
          return ancestorInfo.dlItemTagAutoclosing;
        case "button":
          return ancestorInfo.buttonTagInScope;
        case "a":
          return ancestorInfo.aTagInScope;
        case "nobr":
          return ancestorInfo.nobrTagInScope;
      }
      return null;
    }
    function findAncestor(parent, tagName) {
      for (;parent; ) {
        switch (parent.tag) {
          case 5:
          case 26:
          case 27:
            if (parent.type === tagName)
              return parent;
        }
        parent = parent.return;
      }
      return null;
    }
    function validateDOMNesting(childTag, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
      var parentInfo = ancestorInfo.current;
      ancestorInfo = (parentInfo = isTagValidWithParent(childTag, parentInfo && parentInfo.tag, ancestorInfo.implicitRootScope) ? null : parentInfo) ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
      ancestorInfo = parentInfo || ancestorInfo;
      if (!ancestorInfo)
        return true;
      var ancestorTag = ancestorInfo.tag;
      ancestorInfo = String(!!parentInfo) + "|" + childTag + "|" + ancestorTag;
      if (didWarn[ancestorInfo])
        return false;
      didWarn[ancestorInfo] = true;
      var ancestor = (ancestorInfo = current2) ? findAncestor(ancestorInfo.return, ancestorTag) : null, ancestorDescription = ancestorInfo !== null && ancestor !== null ? describeAncestors(ancestor, ancestorInfo, null) : "", tagDisplayName = "<" + childTag + ">";
      parentInfo ? (parentInfo = "", ancestorTag === "table" && childTag === "tr" && (parentInfo += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), console.error(`In HTML, %s cannot be a child of <%s>.%s
This will cause a hydration error.%s`, tagDisplayName, ancestorTag, parentInfo, ancestorDescription)) : console.error(`In HTML, %s cannot be a descendant of <%s>.
This will cause a hydration error.%s`, tagDisplayName, ancestorTag, ancestorDescription);
      ancestorInfo && (childTag = ancestorInfo.return, ancestor === null || childTag === null || ancestor === childTag && childTag._debugOwner === ancestorInfo._debugOwner || runWithFiberInDEV(ancestor, function() {
        console.error(`<%s> cannot contain a nested %s.
See this log for the ancestor stack trace.`, ancestorTag, tagDisplayName);
      }));
      return false;
    }
    function validateTextNesting(childText, parentTag, implicitRootScope) {
      if (implicitRootScope || isTagValidWithParent("#text", parentTag, false))
        return true;
      implicitRootScope = "#text|" + parentTag;
      if (didWarn[implicitRootScope])
        return false;
      didWarn[implicitRootScope] = true;
      var ancestor = (implicitRootScope = current2) ? findAncestor(implicitRootScope, parentTag) : null;
      implicitRootScope = implicitRootScope !== null && ancestor !== null ? describeAncestors(ancestor, implicitRootScope, implicitRootScope.tag !== 6 ? { children: null } : null) : "";
      /\S/.test(childText) ? console.error(`In HTML, text nodes cannot be a child of <%s>.
This will cause a hydration error.%s`, parentTag, implicitRootScope) : console.error(`In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.
This will cause a hydration error.%s`, parentTag, implicitRootScope);
      return false;
    }
    function setTextContent(node, text) {
      if (text) {
        var firstChild = node.firstChild;
        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    }
    function camelize(string) {
      return string.replace(hyphenPattern, function(_2, character) {
        return character.toUpperCase();
      });
    }
    function setValueForStyle(style2, styleName, value) {
      var isCustomProperty = styleName.indexOf("--") === 0;
      isCustomProperty || (-1 < styleName.indexOf("-") ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error("Unsupported style property %s. Did you mean %s?", styleName, camelize(styleName.replace(msPattern, "ms-")))) : badVendoredStyleNamePattern.test(styleName) ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error("Unsupported vendor-prefixed style property %s. Did you mean %s?", styleName, styleName.charAt(0).toUpperCase() + styleName.slice(1))) : !badStyleValueWithSemicolonPattern.test(value) || warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = true, console.error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, styleName, value.replace(badStyleValueWithSemicolonPattern, ""))), typeof value === "number" && (isNaN(value) ? warnedForNaNValue || (warnedForNaNValue = true, console.error("`NaN` is an invalid value for the `%s` css style property.", styleName)) : isFinite(value) || warnedForInfinityValue || (warnedForInfinityValue = true, console.error("`Infinity` is an invalid value for the `%s` css style property.", styleName))));
      value == null || typeof value === "boolean" || value === "" ? isCustomProperty ? style2.setProperty(styleName, "") : styleName === "float" ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty ? style2.setProperty(styleName, value) : typeof value !== "number" || value === 0 || unitlessNumbers.has(styleName) ? styleName === "float" ? style2.cssFloat = value : (checkCSSPropertyStringCoercion(value, styleName), style2[styleName] = ("" + value).trim()) : style2[styleName] = value + "px";
    }
    function setValueForStyles(node, styles, prevStyles) {
      if (styles != null && typeof styles !== "object")
        throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      styles && Object.freeze(styles);
      node = node.style;
      if (prevStyles != null) {
        if (styles) {
          var expandedUpdates = {};
          if (prevStyles) {
            for (var key in prevStyles)
              if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key))
                for (var longhands = shorthandToLonghand[key] || [key], i = 0;i < longhands.length; i++)
                  expandedUpdates[longhands[i]] = key;
          }
          for (var _key in styles)
            if (styles.hasOwnProperty(_key) && (!prevStyles || prevStyles[_key] !== styles[_key]))
              for (key = shorthandToLonghand[_key] || [_key], longhands = 0;longhands < key.length; longhands++)
                expandedUpdates[key[longhands]] = _key;
          _key = {};
          for (var key$jscomp$0 in styles)
            for (key = shorthandToLonghand[key$jscomp$0] || [key$jscomp$0], longhands = 0;longhands < key.length; longhands++)
              _key[key[longhands]] = key$jscomp$0;
          key$jscomp$0 = {};
          for (var _key2 in expandedUpdates)
            if (key = expandedUpdates[_key2], (longhands = _key[_key2]) && key !== longhands && (i = key + "," + longhands, !key$jscomp$0[i])) {
              key$jscomp$0[i] = true;
              i = console;
              var value = styles[key];
              i.error.call(i, "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", value == null || typeof value === "boolean" || value === "" ? "Removing" : "Updating", key, longhands);
            }
        }
        for (var styleName in prevStyles)
          !prevStyles.hasOwnProperty(styleName) || styles != null && styles.hasOwnProperty(styleName) || (styleName.indexOf("--") === 0 ? node.setProperty(styleName, "") : styleName === "float" ? node.cssFloat = "" : node[styleName] = "");
        for (var _styleName in styles)
          _key2 = styles[_styleName], styles.hasOwnProperty(_styleName) && prevStyles[_styleName] !== _key2 && setValueForStyle(node, _styleName, _key2);
      } else
        for (expandedUpdates in styles)
          styles.hasOwnProperty(expandedUpdates) && setValueForStyle(node, expandedUpdates, styles[expandedUpdates]);
    }
    function isCustomElement(tagName) {
      if (tagName.indexOf("-") === -1)
        return false;
      switch (tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    function getAttributeAlias(name) {
      return aliases.get(name) || name;
    }
    function validateProperty$1(tagName, name) {
      if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
        return true;
      if (rARIACamel$1.test(name)) {
        tagName = "aria-" + name.slice(4).toLowerCase();
        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
        if (tagName == null)
          return console.error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties$1[name] = true;
        if (name !== tagName)
          return console.error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, tagName), warnedProperties$1[name] = true;
      }
      if (rARIA$1.test(name)) {
        tagName = name.toLowerCase();
        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
        if (tagName == null)
          return warnedProperties$1[name] = true, false;
        name !== tagName && (console.error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, tagName), warnedProperties$1[name] = true);
      }
      return true;
    }
    function validateProperties$2(type, props) {
      var invalidProps = [], key;
      for (key in props)
        validateProperty$1(type, key) || invalidProps.push(key);
      props = invalidProps.map(function(prop) {
        return "`" + prop + "`";
      }).join(", ");
      invalidProps.length === 1 ? console.error("Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", props, type) : 1 < invalidProps.length && console.error("Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", props, type);
    }
    function validateProperty(tagName, name, value, eventRegistry) {
      if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
        return true;
      var lowerCasedName = name.toLowerCase();
      if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
        return console.error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties[name] = true;
      if (typeof value === "function" && (tagName === "form" && name === "action" || tagName === "input" && name === "formAction" || tagName === "button" && name === "formAction"))
        return true;
      if (eventRegistry != null) {
        tagName = eventRegistry.possibleRegistrationNames;
        if (eventRegistry.registrationNameDependencies.hasOwnProperty(name))
          return true;
        eventRegistry = tagName.hasOwnProperty(lowerCasedName) ? tagName[lowerCasedName] : null;
        if (eventRegistry != null)
          return console.error("Invalid event handler property `%s`. Did you mean `%s`?", name, eventRegistry), warnedProperties[name] = true;
        if (EVENT_NAME_REGEX.test(name))
          return console.error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties[name] = true;
      } else if (EVENT_NAME_REGEX.test(name))
        return INVALID_EVENT_NAME_REGEX.test(name) && console.error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties[name] = true;
      if (rARIA.test(name) || rARIACamel.test(name))
        return true;
      if (lowerCasedName === "innerhtml")
        return console.error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties[name] = true;
      if (lowerCasedName === "aria")
        return console.error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties[name] = true;
      if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string")
        return console.error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties[name] = true;
      if (typeof value === "number" && isNaN(value))
        return console.error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties[name] = true;
      if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
        if (lowerCasedName = possibleStandardNames[lowerCasedName], lowerCasedName !== name)
          return console.error("Invalid DOM property `%s`. Did you mean `%s`?", name, lowerCasedName), warnedProperties[name] = true;
      } else if (name !== lowerCasedName)
        return console.error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties[name] = true;
      switch (name) {
        case "dangerouslySetInnerHTML":
        case "children":
        case "style":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "ref":
          return true;
        case "innerText":
        case "textContent":
          return true;
      }
      switch (typeof value) {
        case "boolean":
          switch (name) {
            case "autoFocus":
            case "checked":
            case "multiple":
            case "muted":
            case "selected":
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha":
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope":
            case "capture":
            case "download":
            case "inert":
              return true;
            default:
              lowerCasedName = name.toLowerCase().slice(0, 5);
              if (lowerCasedName === "data-" || lowerCasedName === "aria-")
                return true;
              value ? console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              return warnedProperties[name] = true;
          }
        case "function":
        case "symbol":
          return warnedProperties[name] = true, false;
        case "string":
          if (value === "false" || value === "true") {
            switch (name) {
              case "checked":
              case "selected":
              case "multiple":
              case "muted":
              case "allowFullScreen":
              case "async":
              case "autoPlay":
              case "controls":
              case "default":
              case "defer":
              case "disabled":
              case "disablePictureInPicture":
              case "disableRemotePlayback":
              case "formNoValidate":
              case "hidden":
              case "loop":
              case "noModule":
              case "noValidate":
              case "open":
              case "playsInline":
              case "readOnly":
              case "required":
              case "reversed":
              case "scoped":
              case "seamless":
              case "itemScope":
              case "inert":
                break;
              default:
                return true;
            }
            console.error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties[name] = true;
          }
      }
      return true;
    }
    function warnUnknownProperties(type, props, eventRegistry) {
      var unknownProps = [], key;
      for (key in props)
        validateProperty(type, key, props[key], eventRegistry) || unknownProps.push(key);
      props = unknownProps.map(function(prop) {
        return "`" + prop + "`";
      }).join(", ");
      unknownProps.length === 1 ? console.error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ", props, type) : 1 < unknownProps.length && console.error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ", props, type);
    }
    function sanitizeURL(url) {
      return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
    }
    function noop$1() {}
    function getEventTarget(nativeEvent) {
      nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
      nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
      return nativeEvent.nodeType === 3 ? nativeEvent.parentNode : nativeEvent;
    }
    function restoreStateOfTarget(target) {
      var internalInstance = getInstanceFromNode(target);
      if (internalInstance && (target = internalInstance.stateNode)) {
        var props = target[internalPropsKey] || null;
        a:
          switch (target = internalInstance.stateNode, internalInstance.type) {
            case "input":
              updateInput(target, props.value, props.defaultValue, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name);
              internalInstance = props.name;
              if (props.type === "radio" && internalInstance != null) {
                for (props = target;props.parentNode; )
                  props = props.parentNode;
                checkAttributeStringCoercion(internalInstance, "name");
                props = props.querySelectorAll('input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes("" + internalInstance) + '"][type="radio"]');
                for (internalInstance = 0;internalInstance < props.length; internalInstance++) {
                  var otherNode = props[internalInstance];
                  if (otherNode !== target && otherNode.form === target.form) {
                    var otherProps = otherNode[internalPropsKey] || null;
                    if (!otherProps)
                      throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                    updateInput(otherNode, otherProps.value, otherProps.defaultValue, otherProps.defaultValue, otherProps.checked, otherProps.defaultChecked, otherProps.type, otherProps.name);
                  }
                }
                for (internalInstance = 0;internalInstance < props.length; internalInstance++)
                  otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
              }
              break a;
            case "textarea":
              updateTextarea(target, props.value, props.defaultValue);
              break a;
            case "select":
              internalInstance = props.value, internalInstance != null && updateOptions(target, !!props.multiple, internalInstance, false);
          }
      }
    }
    function batchedUpdates$1(fn2, a, b) {
      if (isInsideEventHandler)
        return fn2(a, b);
      isInsideEventHandler = true;
      try {
        var JSCompiler_inline_result = fn2(a);
        return JSCompiler_inline_result;
      } finally {
        if (isInsideEventHandler = false, restoreTarget !== null || restoreQueue !== null) {
          if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn2 = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn2))
            for (a = 0;a < fn2.length; a++)
              restoreStateOfTarget(fn2[a]);
        }
      }
    }
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (stateNode === null)
        return null;
      var props = stateNode[internalPropsKey] || null;
      if (props === null)
        return null;
      stateNode = props[registrationName];
      a:
        switch (registrationName) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (props = !props.disabled) || (inst = inst.type, props = !(inst === "button" || inst === "input" || inst === "select" || inst === "textarea"));
            inst = !props;
            break a;
          default:
            inst = false;
        }
      if (inst)
        return null;
      if (stateNode && typeof stateNode !== "function")
        throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof stateNode + "` type.");
      return stateNode;
    }
    function getData() {
      if (fallbackText)
        return fallbackText;
      var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
      for (start = 0;start < startLength && startValue[start] === endValue[start]; start++)
        ;
      var minEnd = startLength - start;
      for (end = 1;end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++)
        ;
      return fallbackText = endValue.slice(start, 1 < end ? 1 - end : undefined);
    }
    function getEventCharCode(nativeEvent) {
      var keyCode = nativeEvent.keyCode;
      "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, nativeEvent === 0 && keyCode === 13 && (nativeEvent = 13)) : nativeEvent = keyCode;
      nativeEvent === 10 && (nativeEvent = 13);
      return 32 <= nativeEvent || nativeEvent === 13 ? nativeEvent : 0;
    }
    function functionThatReturnsTrue() {
      return true;
    }
    function functionThatReturnsFalse() {
      return false;
    }
    function createSyntheticEvent(Interface) {
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var propName in Interface)
          Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
        this.isDefaultPrevented = (nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false) ? functionThatReturnsTrue : functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      assign(SyntheticBaseEvent.prototype, {
        preventDefault: function() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          event && (event.preventDefault ? event.preventDefault() : typeof event.returnValue !== "unknown" && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
        },
        stopPropagation: function() {
          var event = this.nativeEvent;
          event && (event.stopPropagation ? event.stopPropagation() : typeof event.cancelBubble !== "unknown" && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
        },
        persist: function() {},
        isPersistent: functionThatReturnsTrue
      });
      return SyntheticBaseEvent;
    }
    function modifierStateGetter(keyArg) {
      var nativeEvent = this.nativeEvent;
      return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
    }
    function getEventModifierState() {
      return modifierStateGetter;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case "keyup":
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case "keydown":
          return nativeEvent.keyCode !== START_KEYCODE;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function getDataFromCustomEvent(nativeEvent) {
      nativeEvent = nativeEvent.detail;
      return typeof nativeEvent === "object" && "data" in nativeEvent ? nativeEvent.data : null;
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case "compositionend":
          return getDataFromCustomEvent(nativeEvent);
        case "keypress":
          if (nativeEvent.which !== SPACEBAR_CODE)
            return null;
          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;
        case "textInput":
          return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
        default:
          return null;
      }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      if (isComposing)
        return domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = false, domEventName) : null;
      switch (domEventName) {
        case "paste":
          return null;
        case "keypress":
          if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
            if (nativeEvent.char && 1 < nativeEvent.char.length)
              return nativeEvent.char;
            if (nativeEvent.which)
              return String.fromCharCode(nativeEvent.which);
          }
          return null;
        case "compositionend":
          return useFallbackCompositionData && nativeEvent.locale !== "ko" ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === "input" ? !!supportedInputTypes[elem.type] : nodeName === "textarea" ? true : false;
    }
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM)
        return false;
      eventNameSuffix = "on" + eventNameSuffix;
      var isSupported = eventNameSuffix in document;
      isSupported || (isSupported = document.createElement("div"), isSupported.setAttribute(eventNameSuffix, "return;"), isSupported = typeof isSupported[eventNameSuffix] === "function");
      return isSupported;
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
      inst = accumulateTwoPhaseListeners(inst, "onChange");
      0 < inst.length && (nativeEvent = new SyntheticEvent("onChange", "change", null, nativeEvent, target), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode))
        return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if (domEventName === "change")
        return targetInst;
    }
    function stopWatchingForValueChange() {
      activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
    }
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName === "value" && getInstIfValueChanged(activeElementInst$1)) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst$1, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates$1(runEventInBatch, dispatchQueue);
      }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      domEventName === "focusin" ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : domEventName === "focusout" && stopWatchingForValueChange();
    }
    function getTargetInstForInputEventPolyfill(domEventName) {
      if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown")
        return getInstIfValueChanged(activeElementInst$1);
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if (domEventName === "click")
        return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if (domEventName === "input" || domEventName === "change")
        return getInstIfValueChanged(targetInst);
    }
    function is2(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB))
        return true;
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null)
        return false;
      var keysA = Object.keys(objA), keysB = Object.keys(objB);
      if (keysA.length !== keysB.length)
        return false;
      for (keysB = 0;keysB < keysA.length; keysB++) {
        var currentKey = keysA[keysB];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
          return false;
      }
      return true;
    }
    function getLeafNode(node) {
      for (;node && node.firstChild; )
        node = node.firstChild;
      return node;
    }
    function getNodeForCharacterOffset(root2, offset) {
      var node = getLeafNode(root2);
      root2 = 0;
      for (var nodeEnd;node; ) {
        if (node.nodeType === 3) {
          nodeEnd = root2 + node.textContent.length;
          if (root2 <= offset && nodeEnd >= offset)
            return { node, offset: offset - root2 };
          root2 = nodeEnd;
        }
        a: {
          for (;node; ) {
            if (node.nextSibling) {
              node = node.nextSibling;
              break a;
            }
            node = node.parentNode;
          }
          node = undefined;
        }
        node = getLeafNode(node);
      }
    }
    function containsNode(outerNode, innerNode) {
      return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && outerNode.nodeType === 3 ? false : innerNode && innerNode.nodeType === 3 ? containsNode(outerNode, innerNode.parentNode) : ("contains" in outerNode) ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
    }
    function getActiveElementDeep(containerInfo) {
      containerInfo = containerInfo != null && containerInfo.ownerDocument != null && containerInfo.ownerDocument.defaultView != null ? containerInfo.ownerDocument.defaultView : window;
      for (var element = getActiveElement(containerInfo.document);element instanceof containerInfo.HTMLIFrameElement; ) {
        try {
          var JSCompiler_inline_result = typeof element.contentWindow.location.href === "string";
        } catch (err) {
          JSCompiler_inline_result = false;
        }
        if (JSCompiler_inline_result)
          containerInfo = element.contentWindow;
        else
          break;
        element = getActiveElement(containerInfo.document);
      }
      return element;
    }
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
    }
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === 9 ? nativeEventTarget : nativeEventTarget.ownerDocument;
      mouseDown || activeElement == null || activeElement !== getActiveElement(doc) || (doc = activeElement, ("selectionStart" in doc) && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
        anchorNode: doc.anchorNode,
        anchorOffset: doc.anchorOffset,
        focusNode: doc.focusNode,
        focusOffset: doc.focusOffset
      }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
    }
    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes["Webkit" + styleProp] = "webkit" + eventName;
      prefixes["Moz" + styleProp] = "moz" + eventName;
      return prefixes;
    }
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName])
        return prefixedEventNames[eventName];
      if (!vendorPrefixes[eventName])
        return eventName;
      var prefixMap = vendorPrefixes[eventName], styleProp;
      for (styleProp in prefixMap)
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
          return prefixedEventNames[eventName] = prefixMap[styleProp];
      return eventName;
    }
    function registerSimpleEvent(domEventName, reactName) {
      topLevelEventsToReactNames.set(domEventName, reactName);
      registerTwoPhaseEvent(reactName, [domEventName]);
    }
    function getArrayKind(array) {
      for (var kind = EMPTY_ARRAY, i = 0;i < array.length; i++) {
        var value = array[i];
        if (typeof value === "object" && value !== null)
          if (isArrayImpl(value) && value.length === 2 && typeof value[0] === "string") {
            if (kind !== EMPTY_ARRAY && kind !== ENTRIES_ARRAY)
              return COMPLEX_ARRAY;
            kind = ENTRIES_ARRAY;
          } else
            return COMPLEX_ARRAY;
        else {
          if (typeof value === "function" || typeof value === "string" && 50 < value.length || kind !== EMPTY_ARRAY && kind !== PRIMITIVE_ARRAY)
            return COMPLEX_ARRAY;
          kind = PRIMITIVE_ARRAY;
        }
      }
      return kind;
    }
    function addObjectToProperties(object, properties, indent, prefix2) {
      for (var key in object)
        hasOwnProperty.call(object, key) && key[0] !== "_" && addValueToProperties(key, object[key], properties, indent, prefix2);
    }
    function addValueToProperties(propertyName, value, properties, indent, prefix2) {
      switch (typeof value) {
        case "object":
          if (value === null) {
            value = "null";
            break;
          } else {
            if (value.$$typeof === REACT_ELEMENT_TYPE) {
              var typeName2 = getComponentNameFromType(value.type) || "…", key = value.key;
              value = value.props;
              var propsKeys = Object.keys(value), propsLength = propsKeys.length;
              if (key == null && propsLength === 0) {
                value = "<" + typeName2 + " />";
                break;
              }
              if (3 > indent || propsLength === 1 && propsKeys[0] === "children" && key == null) {
                value = "<" + typeName2 + " … />";
                break;
              }
              properties.push([
                prefix2 + "  ".repeat(indent) + propertyName,
                "<" + typeName2
              ]);
              key !== null && addValueToProperties("key", key, properties, indent + 1, prefix2);
              propertyName = false;
              for (var propKey in value)
                propKey === "children" ? value.children != null && (!isArrayImpl(value.children) || 0 < value.children.length) && (propertyName = true) : hasOwnProperty.call(value, propKey) && propKey[0] !== "_" && addValueToProperties(propKey, value[propKey], properties, indent + 1, prefix2);
              properties.push([
                "",
                propertyName ? ">…</" + typeName2 + ">" : "/>"
              ]);
              return;
            }
            typeName2 = Object.prototype.toString.call(value);
            typeName2 = typeName2.slice(8, typeName2.length - 1);
            if (typeName2 === "Array") {
              if (propKey = getArrayKind(value), propKey === PRIMITIVE_ARRAY || propKey === EMPTY_ARRAY) {
                value = JSON.stringify(value);
                break;
              } else if (propKey === ENTRIES_ARRAY) {
                properties.push([
                  prefix2 + "  ".repeat(indent) + propertyName,
                  ""
                ]);
                for (propertyName = 0;propertyName < value.length; propertyName++)
                  typeName2 = value[propertyName], addValueToProperties(typeName2[0], typeName2[1], properties, indent + 1, prefix2);
                return;
              }
            }
            if (typeName2 === "Promise") {
              if (value.status === "fulfilled") {
                if (typeName2 = properties.length, addValueToProperties(propertyName, value.value, properties, indent, prefix2), properties.length > typeName2) {
                  properties = properties[typeName2];
                  properties[1] = "Promise<" + (properties[1] || "Object") + ">";
                  return;
                }
              } else if (value.status === "rejected" && (typeName2 = properties.length, addValueToProperties(propertyName, value.reason, properties, indent, prefix2), properties.length > typeName2)) {
                properties = properties[typeName2];
                properties[1] = "Rejected Promise<" + properties[1] + ">";
                return;
              }
              properties.push([
                "  ".repeat(indent) + propertyName,
                "Promise"
              ]);
              return;
            }
            typeName2 === "Object" && (propKey = Object.getPrototypeOf(value)) && typeof propKey.constructor === "function" && (typeName2 = propKey.constructor.name);
            properties.push([
              prefix2 + "  ".repeat(indent) + propertyName,
              typeName2 === "Object" ? 3 > indent ? "" : "…" : typeName2
            ]);
            3 > indent && addObjectToProperties(value, properties, indent + 1, prefix2);
            return;
          }
        case "function":
          value = value.name === "" ? "() => {}" : value.name + "() {}";
          break;
        case "string":
          value = value === OMITTED_PROP_ERROR ? "…" : JSON.stringify(value);
          break;
        case "undefined":
          value = "undefined";
          break;
        case "boolean":
          value = value ? "true" : "false";
          break;
        default:
          value = String(value);
      }
      properties.push([
        prefix2 + "  ".repeat(indent) + propertyName,
        value
      ]);
    }
    function addObjectDiffToProperties(prev, next, properties, indent) {
      var isDeeplyEqual = true;
      for (key in prev)
        key in next || (properties.push([
          REMOVED + "  ".repeat(indent) + key,
          "…"
        ]), isDeeplyEqual = false);
      for (var _key in next)
        if (_key in prev) {
          var key = prev[_key];
          var nextValue = next[_key];
          if (key !== nextValue) {
            if (indent === 0 && _key === "children")
              isDeeplyEqual = "  ".repeat(indent) + _key, properties.push([REMOVED + isDeeplyEqual, "…"], [ADDED + isDeeplyEqual, "…"]);
            else {
              if (!(3 <= indent)) {
                if (typeof key === "object" && typeof nextValue === "object" && key !== null && nextValue !== null && key.$$typeof === nextValue.$$typeof)
                  if (nextValue.$$typeof === REACT_ELEMENT_TYPE) {
                    if (key.type === nextValue.type && key.key === nextValue.key) {
                      key = getComponentNameFromType(nextValue.type) || "…";
                      isDeeplyEqual = "  ".repeat(indent) + _key;
                      key = "<" + key + " … />";
                      properties.push([REMOVED + isDeeplyEqual, key], [ADDED + isDeeplyEqual, key]);
                      isDeeplyEqual = false;
                      continue;
                    }
                  } else {
                    var prevKind = Object.prototype.toString.call(key), nextKind = Object.prototype.toString.call(nextValue);
                    if (prevKind === nextKind && (nextKind === "[object Object]" || nextKind === "[object Array]")) {
                      prevKind = [
                        UNCHANGED + "  ".repeat(indent) + _key,
                        nextKind === "[object Array]" ? "Array" : ""
                      ];
                      properties.push(prevKind);
                      nextKind = properties.length;
                      addObjectDiffToProperties(key, nextValue, properties, indent + 1) ? nextKind === properties.length && (prevKind[1] = "Referentially unequal but deeply equal objects. Consider memoization.") : isDeeplyEqual = false;
                      continue;
                    }
                  }
                else if (typeof key === "function" && typeof nextValue === "function" && key.name === nextValue.name && key.length === nextValue.length && (prevKind = Function.prototype.toString.call(key), nextKind = Function.prototype.toString.call(nextValue), prevKind === nextKind)) {
                  key = nextValue.name === "" ? "() => {}" : nextValue.name + "() {}";
                  properties.push([
                    UNCHANGED + "  ".repeat(indent) + _key,
                    key + " Referentially unequal function closure. Consider memoization."
                  ]);
                  continue;
                }
              }
              addValueToProperties(_key, key, properties, indent, REMOVED);
              addValueToProperties(_key, nextValue, properties, indent, ADDED);
            }
            isDeeplyEqual = false;
          }
        } else
          properties.push([
            ADDED + "  ".repeat(indent) + _key,
            "…"
          ]), isDeeplyEqual = false;
      return isDeeplyEqual;
    }
    function setCurrentTrackFromLanes(lanes) {
      currentTrack = lanes & 63 ? "Blocking" : lanes & 64 ? "Gesture" : lanes & 4194176 ? "Transition" : lanes & 62914560 ? "Suspense" : lanes & 2080374784 ? "Idle" : "Other";
    }
    function logComponentTrigger(fiber, startTime, endTime, trigger) {
      supportsUserTiming && (reusableComponentOptions.start = startTime, reusableComponentOptions.end = endTime, reusableComponentDevToolDetails.color = "warning", reusableComponentDevToolDetails.tooltipText = trigger, reusableComponentDevToolDetails.properties = null, (fiber = fiber._debugTask) ? fiber.run(performance.measure.bind(performance, trigger, reusableComponentOptions)) : performance.measure(trigger, reusableComponentOptions));
    }
    function logComponentReappeared(fiber, startTime, endTime) {
      logComponentTrigger(fiber, startTime, endTime, "Reconnect");
    }
    function logComponentRender(fiber, startTime, endTime, wasHydrated, committedLanes) {
      var name = getComponentNameFromFiber(fiber);
      if (name !== null && supportsUserTiming) {
        var { alternate, actualDuration: selfTime } = fiber;
        if (alternate === null || alternate.child !== fiber.child)
          for (var child = fiber.child;child !== null; child = child.sibling)
            selfTime -= child.actualDuration;
        wasHydrated = 0.5 > selfTime ? wasHydrated ? "tertiary-light" : "primary-light" : 10 > selfTime ? wasHydrated ? "tertiary" : "primary" : 100 > selfTime ? wasHydrated ? "tertiary-dark" : "primary-dark" : "error";
        var props = fiber.memoizedProps;
        selfTime = fiber._debugTask;
        props !== null && alternate !== null && alternate.memoizedProps !== props ? (child = [resuableChangedPropsEntry], props = addObjectDiffToProperties(alternate.memoizedProps, props, child, 0), 1 < child.length && (props && !alreadyWarnedForDeepEquality && (alternate.lanes & committedLanes) === 0 && 100 < fiber.actualDuration ? (alreadyWarnedForDeepEquality = true, child[0] = reusableDeeplyEqualPropsEntry, reusableComponentDevToolDetails.color = "warning", reusableComponentDevToolDetails.tooltipText = DEEP_EQUALITY_WARNING) : (reusableComponentDevToolDetails.color = wasHydrated, reusableComponentDevToolDetails.tooltipText = name), reusableComponentDevToolDetails.properties = child, reusableComponentOptions.start = startTime, reusableComponentOptions.end = endTime, selfTime != null ? selfTime.run(performance.measure.bind(performance, "​" + name, reusableComponentOptions)) : performance.measure("​" + name, reusableComponentOptions))) : selfTime != null ? selfTime.run(console.timeStamp.bind(console, name, startTime, endTime, COMPONENTS_TRACK, undefined, wasHydrated)) : console.timeStamp(name, startTime, endTime, COMPONENTS_TRACK, undefined, wasHydrated);
      }
    }
    function logComponentErrored(fiber, startTime, endTime, errors2) {
      if (supportsUserTiming) {
        var name = getComponentNameFromFiber(fiber);
        if (name !== null) {
          for (var debugTask = null, properties = [], i = 0;i < errors2.length; i++) {
            var capturedValue = errors2[i];
            debugTask == null && capturedValue.source !== null && (debugTask = capturedValue.source._debugTask);
            capturedValue = capturedValue.value;
            properties.push([
              "Error",
              typeof capturedValue === "object" && capturedValue !== null && typeof capturedValue.message === "string" ? String(capturedValue.message) : String(capturedValue)
            ]);
          }
          fiber.key !== null && addValueToProperties("key", fiber.key, properties, 0, "");
          fiber.memoizedProps !== null && addObjectToProperties(fiber.memoizedProps, properties, 0, "");
          debugTask == null && (debugTask = fiber._debugTask);
          fiber = {
            start: startTime,
            end: endTime,
            detail: {
              devtools: {
                color: "error",
                track: COMPONENTS_TRACK,
                tooltipText: fiber.tag === 13 ? "Hydration failed" : "Error boundary caught an error",
                properties
              }
            }
          };
          debugTask ? debugTask.run(performance.measure.bind(performance, "​" + name, fiber)) : performance.measure("​" + name, fiber);
        }
      }
    }
    function logComponentEffect(fiber, startTime, endTime, selfTime, errors2) {
      if (errors2 !== null) {
        if (supportsUserTiming) {
          var name = getComponentNameFromFiber(fiber);
          if (name !== null) {
            selfTime = [];
            for (var i = 0;i < errors2.length; i++) {
              var error = errors2[i].value;
              selfTime.push([
                "Error",
                typeof error === "object" && error !== null && typeof error.message === "string" ? String(error.message) : String(error)
              ]);
            }
            fiber.key !== null && addValueToProperties("key", fiber.key, selfTime, 0, "");
            fiber.memoizedProps !== null && addObjectToProperties(fiber.memoizedProps, selfTime, 0, "");
            startTime = {
              start: startTime,
              end: endTime,
              detail: {
                devtools: {
                  color: "error",
                  track: COMPONENTS_TRACK,
                  tooltipText: "A lifecycle or effect errored",
                  properties: selfTime
                }
              }
            };
            (fiber = fiber._debugTask) ? fiber.run(performance.measure.bind(performance, "​" + name, startTime)) : performance.measure("​" + name, startTime);
          }
        }
      } else
        name = getComponentNameFromFiber(fiber), name !== null && supportsUserTiming && (errors2 = 1 > selfTime ? "secondary-light" : 100 > selfTime ? "secondary" : 500 > selfTime ? "secondary-dark" : "error", (fiber = fiber._debugTask) ? fiber.run(console.timeStamp.bind(console, name, startTime, endTime, COMPONENTS_TRACK, undefined, errors2)) : console.timeStamp(name, startTime, endTime, COMPONENTS_TRACK, undefined, errors2));
    }
    function logRenderPhase(startTime, endTime, lanes, debugTask) {
      if (supportsUserTiming && !(endTime <= startTime)) {
        var color = (lanes & 738197653) === lanes ? "tertiary-dark" : "primary-dark";
        lanes = (lanes & 536870912) === lanes ? "Prepared" : (lanes & 201326741) === lanes ? "Hydrated" : "Render";
        debugTask ? debugTask.run(console.timeStamp.bind(console, lanes, startTime, endTime, currentTrack, LANES_TRACK_GROUP, color)) : console.timeStamp(lanes, startTime, endTime, currentTrack, LANES_TRACK_GROUP, color);
      }
    }
    function logSuspendedRenderPhase(startTime, endTime, lanes, debugTask) {
      !supportsUserTiming || endTime <= startTime || (lanes = (lanes & 738197653) === lanes ? "tertiary-dark" : "primary-dark", debugTask ? debugTask.run(console.timeStamp.bind(console, "Prewarm", startTime, endTime, currentTrack, LANES_TRACK_GROUP, lanes)) : console.timeStamp("Prewarm", startTime, endTime, currentTrack, LANES_TRACK_GROUP, lanes));
    }
    function logSuspendedWithDelayPhase(startTime, endTime, lanes, debugTask) {
      !supportsUserTiming || endTime <= startTime || (lanes = (lanes & 738197653) === lanes ? "tertiary-dark" : "primary-dark", debugTask ? debugTask.run(console.timeStamp.bind(console, "Suspended", startTime, endTime, currentTrack, LANES_TRACK_GROUP, lanes)) : console.timeStamp("Suspended", startTime, endTime, currentTrack, LANES_TRACK_GROUP, lanes));
    }
    function logRecoveredRenderPhase(startTime, endTime, lanes, recoverableErrors, hydrationFailed, debugTask) {
      if (supportsUserTiming && !(endTime <= startTime)) {
        lanes = [];
        for (var i = 0;i < recoverableErrors.length; i++) {
          var error = recoverableErrors[i].value;
          lanes.push([
            "Recoverable Error",
            typeof error === "object" && error !== null && typeof error.message === "string" ? String(error.message) : String(error)
          ]);
        }
        startTime = {
          start: startTime,
          end: endTime,
          detail: {
            devtools: {
              color: "primary-dark",
              track: currentTrack,
              trackGroup: LANES_TRACK_GROUP,
              tooltipText: hydrationFailed ? "Hydration Failed" : "Recovered after Error",
              properties: lanes
            }
          }
        };
        debugTask ? debugTask.run(performance.measure.bind(performance, "Recovered", startTime)) : performance.measure("Recovered", startTime);
      }
    }
    function logErroredRenderPhase(startTime, endTime, lanes, debugTask) {
      !supportsUserTiming || endTime <= startTime || (debugTask ? debugTask.run(console.timeStamp.bind(console, "Errored", startTime, endTime, currentTrack, LANES_TRACK_GROUP, "error")) : console.timeStamp("Errored", startTime, endTime, currentTrack, LANES_TRACK_GROUP, "error"));
    }
    function logSuspendedCommitPhase(startTime, endTime, reason, debugTask) {
      !supportsUserTiming || endTime <= startTime || (debugTask ? debugTask.run(console.timeStamp.bind(console, reason, startTime, endTime, currentTrack, LANES_TRACK_GROUP, "secondary-light")) : console.timeStamp(reason, startTime, endTime, currentTrack, LANES_TRACK_GROUP, "secondary-light"));
    }
    function logCommitErrored(startTime, endTime, errors2, passive, debugTask) {
      if (supportsUserTiming && !(endTime <= startTime)) {
        for (var properties = [], i = 0;i < errors2.length; i++) {
          var error = errors2[i].value;
          properties.push([
            "Error",
            typeof error === "object" && error !== null && typeof error.message === "string" ? String(error.message) : String(error)
          ]);
        }
        startTime = {
          start: startTime,
          end: endTime,
          detail: {
            devtools: {
              color: "error",
              track: currentTrack,
              trackGroup: LANES_TRACK_GROUP,
              tooltipText: passive ? "Remaining Effects Errored" : "Commit Errored",
              properties
            }
          }
        };
        debugTask ? debugTask.run(performance.measure.bind(performance, "Errored", startTime)) : performance.measure("Errored", startTime);
      }
    }
    function logAnimatingPhase(startTime, endTime, debugTask) {
      !supportsUserTiming || endTime <= startTime || (debugTask ? debugTask.run(console.timeStamp.bind(console, "Animating", startTime, endTime, currentTrack, LANES_TRACK_GROUP, "secondary-dark")) : console.timeStamp("Animating", startTime, endTime, currentTrack, LANES_TRACK_GROUP, "secondary-dark"));
    }
    function finishQueueingConcurrentUpdates() {
      for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0;i < endIndex; ) {
        var fiber = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var queue = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var update = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var lane = concurrentQueues[i];
        concurrentQueues[i++] = null;
        if (queue !== null && update !== null) {
          var pending = queue.pending;
          pending === null ? update.next = update : (update.next = pending.next, pending.next = update);
          queue.pending = update;
        }
        lane !== 0 && markUpdateLaneFromFiberToRoot(fiber, update, lane);
      }
    }
    function enqueueUpdate$1(fiber, queue, update, lane) {
      concurrentQueues[concurrentQueuesIndex++] = fiber;
      concurrentQueues[concurrentQueuesIndex++] = queue;
      concurrentQueues[concurrentQueuesIndex++] = update;
      concurrentQueues[concurrentQueuesIndex++] = lane;
      concurrentlyUpdatedLanes |= lane;
      fiber.lanes |= lane;
      fiber = fiber.alternate;
      fiber !== null && (fiber.lanes |= lane);
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
      enqueueUpdate$1(fiber, queue, update, lane);
      return getRootForUpdatedFiber(fiber);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
      enqueueUpdate$1(fiber, null, null, lane);
      return getRootForUpdatedFiber(fiber);
    }
    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
      sourceFiber.lanes |= lane;
      var alternate = sourceFiber.alternate;
      alternate !== null && (alternate.lanes |= lane);
      for (var isHidden = false, parent = sourceFiber.return;parent !== null; )
        parent.childLanes |= lane, alternate = parent.alternate, alternate !== null && (alternate.childLanes |= lane), parent.tag === 22 && (sourceFiber = parent.stateNode, sourceFiber === null || sourceFiber._visibility & OffscreenVisible || (isHidden = true)), sourceFiber = parent, parent = parent.return;
      return sourceFiber.tag === 3 ? (parent = sourceFiber.stateNode, isHidden && update !== null && (isHidden = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden], alternate === null ? sourceFiber[isHidden] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
    }
    function getRootForUpdatedFiber(sourceFiber) {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
        throw nestedPassiveUpdateCount = nestedUpdateCount = 0, rootWithPassiveNestedUpdates = rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, console.error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
      sourceFiber.alternate === null && (sourceFiber.flags & 4098) !== 0 && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
      for (var node = sourceFiber, parent = node.return;parent !== null; )
        node.alternate === null && (node.flags & 4098) !== 0 && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = node.return;
      return node.tag === 3 ? node.stateNode : null;
    }
    function resolveFunctionForHotReloading(type) {
      if (resolveFamily === null)
        return type;
      var family = resolveFamily(type);
      return family === undefined ? type : family.current;
    }
    function resolveForwardRefForHotReloading(type) {
      if (resolveFamily === null)
        return type;
      var family = resolveFamily(type);
      return family === undefined ? type !== null && type !== undefined && typeof type.render === "function" && (family = resolveFunctionForHotReloading(type.render), type.render !== family) ? (family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }, type.displayName !== undefined && (family.displayName = type.displayName), family) : type : family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      if (resolveFamily === null)
        return false;
      var prevType = fiber.elementType;
      element = element.type;
      var needsCompareFamilies = false, $$typeofNextType = typeof element === "object" && element !== null ? element.$$typeof : null;
      switch (fiber.tag) {
        case 1:
          typeof element === "function" && (needsCompareFamilies = true);
          break;
        case 0:
          typeof element === "function" ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
          break;
        case 11:
          $$typeofNextType === REACT_FORWARD_REF_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
          break;
        case 14:
        case 15:
          $$typeofNextType === REACT_MEMO_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
          break;
        default:
          return false;
      }
      return needsCompareFamilies && (fiber = resolveFamily(prevType), fiber !== undefined && fiber === resolveFamily(element)) ? true : false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      resolveFamily !== null && typeof WeakSet === "function" && (failedBoundaries === null && (failedBoundaries = new WeakSet), failedBoundaries.add(fiber));
    }
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      do {
        var _fiber = fiber, alternate = _fiber.alternate, child = _fiber.child, sibling = _fiber.sibling, tag = _fiber.tag;
        _fiber = _fiber.type;
        var candidateType = null;
        switch (tag) {
          case 0:
          case 15:
          case 1:
            candidateType = _fiber;
            break;
          case 11:
            candidateType = _fiber.render;
        }
        if (resolveFamily === null)
          throw Error("Expected resolveFamily to be set during hot reload.");
        var needsRender = false;
        _fiber = false;
        candidateType !== null && (candidateType = resolveFamily(candidateType), candidateType !== undefined && (staleFamilies.has(candidateType) ? _fiber = true : updatedFamilies.has(candidateType) && (tag === 1 ? _fiber = true : needsRender = true)));
        failedBoundaries !== null && (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) && (_fiber = true);
        _fiber && (fiber._debugNeedsRemount = true);
        if (_fiber || needsRender)
          alternate = enqueueConcurrentRenderForLane(fiber, 2), alternate !== null && scheduleUpdateOnFiber(alternate, fiber, 2);
        child === null || _fiber || scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling === null)
          break;
        fiber = sibling;
      } while (1);
    }
    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.refCleanup = this.ref = null;
      this.pendingProps = pendingProps;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = mode;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
      this.actualDuration = -0;
      this.actualStartTime = -1.1;
      this.treeBaseDuration = this.selfBaseDuration = -0;
      this._debugTask = this._debugStack = this._debugOwner = this._debugInfo = null;
      this._debugNeedsRemount = false;
      this._debugHookTypes = null;
      hasBadMapPolyfill || typeof Object.preventExtensions !== "function" || Object.preventExtensions(this);
    }
    function shouldConstruct(Component) {
      Component = Component.prototype;
      return !(!Component || !Component.isReactComponent);
    }
    function createWorkInProgress(current3, pendingProps) {
      var workInProgress2 = current3.alternate;
      workInProgress2 === null ? (workInProgress2 = createFiber(current3.tag, pendingProps, current3.key, current3.mode), workInProgress2.elementType = current3.elementType, workInProgress2.type = current3.type, workInProgress2.stateNode = current3.stateNode, workInProgress2._debugOwner = current3._debugOwner, workInProgress2._debugStack = current3._debugStack, workInProgress2._debugTask = current3._debugTask, workInProgress2._debugHookTypes = current3._debugHookTypes, workInProgress2.alternate = current3, current3.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current3.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.actualDuration = -0, workInProgress2.actualStartTime = -1.1);
      workInProgress2.flags = current3.flags & 65011712;
      workInProgress2.childLanes = current3.childLanes;
      workInProgress2.lanes = current3.lanes;
      workInProgress2.child = current3.child;
      workInProgress2.memoizedProps = current3.memoizedProps;
      workInProgress2.memoizedState = current3.memoizedState;
      workInProgress2.updateQueue = current3.updateQueue;
      pendingProps = current3.dependencies;
      workInProgress2.dependencies = pendingProps === null ? null : {
        lanes: pendingProps.lanes,
        firstContext: pendingProps.firstContext,
        _debugThenableState: pendingProps._debugThenableState
      };
      workInProgress2.sibling = current3.sibling;
      workInProgress2.index = current3.index;
      workInProgress2.ref = current3.ref;
      workInProgress2.refCleanup = current3.refCleanup;
      workInProgress2.selfBaseDuration = current3.selfBaseDuration;
      workInProgress2.treeBaseDuration = current3.treeBaseDuration;
      workInProgress2._debugInfo = current3._debugInfo;
      workInProgress2._debugNeedsRemount = current3._debugNeedsRemount;
      switch (workInProgress2.tag) {
        case 0:
        case 15:
          workInProgress2.type = resolveFunctionForHotReloading(current3.type);
          break;
        case 1:
          workInProgress2.type = resolveFunctionForHotReloading(current3.type);
          break;
        case 11:
          workInProgress2.type = resolveForwardRefForHotReloading(current3.type);
      }
      return workInProgress2;
    }
    function resetWorkInProgress(workInProgress2, renderLanes2) {
      workInProgress2.flags &= 65011714;
      var current3 = workInProgress2.alternate;
      current3 === null ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0) : (workInProgress2.childLanes = current3.childLanes, workInProgress2.lanes = current3.lanes, workInProgress2.child = current3.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current3.memoizedProps, workInProgress2.memoizedState = current3.memoizedState, workInProgress2.updateQueue = current3.updateQueue, workInProgress2.type = current3.type, renderLanes2 = current3.dependencies, workInProgress2.dependencies = renderLanes2 === null ? null : {
        lanes: renderLanes2.lanes,
        firstContext: renderLanes2.firstContext,
        _debugThenableState: renderLanes2._debugThenableState
      }, workInProgress2.selfBaseDuration = current3.selfBaseDuration, workInProgress2.treeBaseDuration = current3.treeBaseDuration);
      return workInProgress2;
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
      var fiberTag = 0, resolvedType = type;
      if (typeof type === "function")
        shouldConstruct(type) && (fiberTag = 1), resolvedType = resolveFunctionForHotReloading(resolvedType);
      else if (typeof type === "string")
        fiberTag = getHostContext(), fiberTag = isHostHoistableType(type, pendingProps, fiberTag) ? 26 : type === "html" || type === "head" || type === "body" ? 27 : 5;
      else
        a:
          switch (type) {
            case REACT_ACTIVITY_TYPE:
              return key = createFiber(31, pendingProps, key, mode), key.elementType = REACT_ACTIVITY_TYPE, key.lanes = lanes, key;
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
              fiberTag = 8;
              mode |= StrictLegacyMode;
              mode |= StrictEffectsMode;
              break;
            case REACT_PROFILER_TYPE:
              return type = pendingProps, owner = mode, typeof type.id !== "string" && console.error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof type.id), key = createFiber(12, type, key, owner | ProfileMode), key.elementType = REACT_PROFILER_TYPE, key.lanes = lanes, key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }, key;
            case REACT_SUSPENSE_TYPE:
              return key = createFiber(13, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_TYPE, key.lanes = lanes, key;
            case REACT_SUSPENSE_LIST_TYPE:
              return key = createFiber(19, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_LIST_TYPE, key.lanes = lanes, key;
            default:
              if (typeof type === "object" && type !== null)
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    fiberTag = 10;
                    break a;
                  case REACT_CONSUMER_TYPE:
                    fiberTag = 9;
                    break a;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = 11;
                    resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    break a;
                  case REACT_MEMO_TYPE:
                    fiberTag = 14;
                    break a;
                  case REACT_LAZY_TYPE:
                    fiberTag = 16;
                    resolvedType = null;
                    break a;
                }
              resolvedType = "";
              if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0)
                resolvedType += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              type === null ? pendingProps = "null" : isArrayImpl(type) ? pendingProps = "array" : type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE ? (pendingProps = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", resolvedType = " Did you accidentally export a JSX literal instead of a component?") : pendingProps = typeof type;
              (fiberTag = owner ? getComponentNameFromOwner(owner) : null) && (resolvedType += `

Check the render method of \`` + fiberTag + "`.");
              fiberTag = 29;
              pendingProps = Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (pendingProps + "." + resolvedType));
              resolvedType = null;
          }
      key = createFiber(fiberTag, pendingProps, key, mode);
      key.elementType = type;
      key.type = resolvedType;
      key.lanes = lanes;
      key._debugOwner = owner;
      return key;
    }
    function createFiberFromElement(element, mode, lanes) {
      mode = createFiberFromTypeAndProps(element.type, element.key, element.props, element._owner, mode, lanes);
      mode._debugOwner = element._owner;
      mode._debugStack = element._debugStack;
      mode._debugTask = element._debugTask;
      return mode;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      elements = createFiber(7, elements, key, mode);
      elements.lanes = lanes;
      return elements;
    }
    function createFiberFromText(content, mode, lanes) {
      content = createFiber(6, content, null, mode);
      content.lanes = lanes;
      return content;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
      var fiber = createFiber(18, null, null, NoMode);
      fiber.stateNode = dehydratedNode;
      return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      mode = createFiber(4, portal.children !== null ? portal.children : [], portal.key, mode);
      mode.lanes = lanes;
      mode.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
      };
      return mode;
    }
    function createCapturedValueAtFiber(value, source) {
      if (typeof value === "object" && value !== null) {
        var existing = CapturedStacks.get(value);
        if (existing !== undefined)
          return existing;
        source = {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source)
        };
        CapturedStacks.set(value, source);
        return source;
      }
      return {
        value,
        source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }
    function pushTreeFork(workInProgress2, totalChildren) {
      warnIfNotHydrating();
      forkStack[forkStackIndex++] = treeForkCount;
      forkStack[forkStackIndex++] = treeForkProvider;
      treeForkProvider = workInProgress2;
      treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress2, totalChildren, index) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextProvider = workInProgress2;
      var baseIdWithLeadingBit = treeContextId;
      workInProgress2 = treeContextOverflow;
      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
      baseIdWithLeadingBit &= ~(1 << baseLength);
      index += 1;
      var length2 = 32 - clz32(totalChildren) + baseLength;
      if (30 < length2) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        length2 = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
        baseIdWithLeadingBit >>= numberOfOverflowBits;
        baseLength -= numberOfOverflowBits;
        treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit;
        treeContextOverflow = length2 + workInProgress2;
      } else
        treeContextId = 1 << length2 | index << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
    }
    function pushMaterializedTreeId(workInProgress2) {
      warnIfNotHydrating();
      workInProgress2.return !== null && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
    }
    function popTreeContext(workInProgress2) {
      for (;workInProgress2 === treeForkProvider; )
        treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
      for (;workInProgress2 === treeContextProvider; )
        treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
    }
    function getSuspendedTreeContext() {
      warnIfNotHydrating();
      return treeContextProvider !== null ? { id: treeContextId, overflow: treeContextOverflow } : null;
    }
    function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextId = suspendedContext.id;
      treeContextOverflow = suspendedContext.overflow;
      treeContextProvider = workInProgress2;
    }
    function warnIfNotHydrating() {
      isHydrating || console.error("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    function buildHydrationDiffNode(fiber, distanceFromLeaf) {
      if (fiber.return === null) {
        if (hydrationDiffRootDEV === null)
          hydrationDiffRootDEV = {
            fiber,
            children: [],
            serverProps: undefined,
            serverTail: [],
            distanceFromLeaf
          };
        else {
          if (hydrationDiffRootDEV.fiber !== fiber)
            throw Error("Saw multiple hydration diff roots in a pass. This is a bug in React.");
          hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf && (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
        }
        return hydrationDiffRootDEV;
      }
      var siblings = buildHydrationDiffNode(fiber.return, distanceFromLeaf + 1).children;
      if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
        return siblings = siblings[siblings.length - 1], siblings.distanceFromLeaf > distanceFromLeaf && (siblings.distanceFromLeaf = distanceFromLeaf), siblings;
      distanceFromLeaf = {
        fiber,
        children: [],
        serverProps: undefined,
        serverTail: [],
        distanceFromLeaf
      };
      siblings.push(distanceFromLeaf);
      return distanceFromLeaf;
    }
    function warnIfHydrating() {
      isHydrating && console.error("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function warnNonHydratedInstance(fiber, rejectedCandidate) {
      didSuspendOrErrorDEV || (fiber = buildHydrationDiffNode(fiber, 0), fiber.serverProps = null, rejectedCandidate !== null && (rejectedCandidate = describeHydratableInstanceForDevWarnings(rejectedCandidate), fiber.serverTail.push(rejectedCandidate)));
    }
    function throwOnHydrationMismatch(fiber) {
      var fromText = 1 < arguments.length && arguments[1] !== undefined ? arguments[1] : false, diff = "", diffRoot = hydrationDiffRootDEV;
      diffRoot !== null && (hydrationDiffRootDEV = null, diff = describeDiff(diffRoot));
      queueHydrationError(createCapturedValueAtFiber(Error("Hydration failed because the server rendered " + (fromText ? "text" : "HTML") + ` didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch \`if (typeof window !== 'undefined')\`.
- Variable input such as \`Date.now()\` or \`Math.random()\` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch` + diff), fiber));
      throw HydrationMismatchException;
    }
    function prepareToHydrateHostInstance(fiber) {
      var didHydrate = fiber.stateNode;
      var { type, memoizedProps: props } = fiber;
      didHydrate[internalInstanceKey] = fiber;
      didHydrate[internalPropsKey] = props;
      validatePropertiesInDevelopment(type, props);
      switch (type) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", didHydrate);
          listenToNonDelegatedEvent("close", didHydrate);
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", didHydrate);
          break;
        case "video":
        case "audio":
          for (type = 0;type < mediaEventTypes.length; type++)
            listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
          break;
        case "source":
          listenToNonDelegatedEvent("error", didHydrate);
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", didHydrate);
          listenToNonDelegatedEvent("load", didHydrate);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", didHydrate);
          break;
        case "input":
          checkControlledValueProps("input", props);
          listenToNonDelegatedEvent("invalid", didHydrate);
          validateInputProps(didHydrate, props);
          initInput(didHydrate, props.value, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name, true);
          break;
        case "option":
          validateOptionProps(didHydrate, props);
          break;
        case "select":
          checkControlledValueProps("select", props);
          listenToNonDelegatedEvent("invalid", didHydrate);
          validateSelectProps(didHydrate, props);
          break;
        case "textarea":
          checkControlledValueProps("textarea", props), listenToNonDelegatedEvent("invalid", didHydrate), validateTextareaProps(didHydrate, props), initTextarea(didHydrate, props.value, props.defaultValue, props.children);
      }
      type = props.children;
      typeof type !== "string" && typeof type !== "number" && typeof type !== "bigint" || didHydrate.textContent === "" + type || props.suppressHydrationWarning === true || checkForUnmatchedText(didHydrate.textContent, type) ? (props.popover != null && (listenToNonDelegatedEvent("beforetoggle", didHydrate), listenToNonDelegatedEvent("toggle", didHydrate)), props.onScroll != null && listenToNonDelegatedEvent("scroll", didHydrate), props.onScrollEnd != null && listenToNonDelegatedEvent("scrollend", didHydrate), props.onClick != null && (didHydrate.onclick = noop$1), didHydrate = true) : didHydrate = false;
      didHydrate || throwOnHydrationMismatch(fiber, true);
    }
    function popToNextHostParent(fiber) {
      for (hydrationParentFiber = fiber.return;hydrationParentFiber; )
        switch (hydrationParentFiber.tag) {
          case 5:
          case 31:
          case 13:
            rootOrSingletonContext = false;
            return;
          case 27:
          case 3:
            rootOrSingletonContext = true;
            return;
          default:
            hydrationParentFiber = hydrationParentFiber.return;
        }
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber)
        return false;
      if (!isHydrating)
        return popToNextHostParent(fiber), isHydrating = true, false;
      var tag = fiber.tag, JSCompiler_temp;
      if (JSCompiler_temp = tag !== 3 && tag !== 27) {
        if (JSCompiler_temp = tag === 5)
          JSCompiler_temp = fiber.type, JSCompiler_temp = !(JSCompiler_temp !== "form" && JSCompiler_temp !== "button") || shouldSetTextContent(fiber.type, fiber.memoizedProps);
        JSCompiler_temp = !JSCompiler_temp;
      }
      if (JSCompiler_temp && nextHydratableInstance) {
        for (JSCompiler_temp = nextHydratableInstance;JSCompiler_temp; ) {
          var diffNode = buildHydrationDiffNode(fiber, 0), description = describeHydratableInstanceForDevWarnings(JSCompiler_temp);
          diffNode.serverTail.push(description);
          JSCompiler_temp = description.type === "Suspense" ? getNextHydratableInstanceAfterHydrationBoundary(JSCompiler_temp) : getNextHydratable(JSCompiler_temp.nextSibling);
        }
        throwOnHydrationMismatch(fiber);
      }
      popToNextHostParent(fiber);
      if (tag === 13) {
        fiber = fiber.memoizedState;
        fiber = fiber !== null ? fiber.dehydrated : null;
        if (!fiber)
          throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        nextHydratableInstance = getNextHydratableInstanceAfterHydrationBoundary(fiber);
      } else if (tag === 31) {
        fiber = fiber.memoizedState;
        fiber = fiber !== null ? fiber.dehydrated : null;
        if (!fiber)
          throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        nextHydratableInstance = getNextHydratableInstanceAfterHydrationBoundary(fiber);
      } else
        tag === 27 ? (tag = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
      return true;
    }
    function resetHydrationState() {
      nextHydratableInstance = hydrationParentFiber = null;
      didSuspendOrErrorDEV = isHydrating = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
      var queuedErrors = hydrationErrors;
      queuedErrors !== null && (workInProgressRootRecoverableErrors === null ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, queuedErrors), hydrationErrors = null);
      return queuedErrors;
    }
    function queueHydrationError(error) {
      hydrationErrors === null ? hydrationErrors = [error] : hydrationErrors.push(error);
    }
    function emitPendingHydrationWarnings() {
      var diffRoot = hydrationDiffRootDEV;
      if (diffRoot !== null) {
        hydrationDiffRootDEV = null;
        for (var diff = describeDiff(diffRoot);0 < diffRoot.children.length; )
          diffRoot = diffRoot.children[0];
        runWithFiberInDEV(diffRoot.fiber, function() {
          console.error(`A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:

- A server/client branch \`if (typeof window !== 'undefined')\`.
- Variable input such as \`Date.now()\` or \`Math.random()\` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

%s%s`, "https://react.dev/link/hydration-mismatch", diff);
        });
      }
    }
    function resetContextDependencies() {
      lastContextDependency = currentlyRenderingFiber$1 = null;
      isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, context, nextValue) {
      push(valueCursor, context._currentValue, providerFiber);
      context._currentValue = nextValue;
      push(rendererCursorDEV, context._currentRenderer, providerFiber);
      context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && console.error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
      context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
      context._currentValue = valueCursor.current;
      var currentRenderer = rendererCursorDEV.current;
      pop(rendererCursorDEV, providerFiber);
      context._currentRenderer = currentRenderer;
      pop(valueCursor, providerFiber);
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
      for (;parent !== null; ) {
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, alternate !== null && (alternate.childLanes |= renderLanes2)) : alternate !== null && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
        if (parent === propagationRoot)
          break;
        parent = parent.return;
      }
      parent !== propagationRoot && console.error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChanges(workInProgress2, contexts, renderLanes2, forcePropagateEntireTree) {
      var fiber = workInProgress2.child;
      fiber !== null && (fiber.return = workInProgress2);
      for (;fiber !== null; ) {
        var list = fiber.dependencies;
        if (list !== null) {
          var nextFiber = fiber.child;
          list = list.firstContext;
          a:
            for (;list !== null; ) {
              var dependency = list;
              list = fiber;
              for (var i = 0;i < contexts.length; i++)
                if (dependency.context === contexts[i]) {
                  list.lanes |= renderLanes2;
                  dependency = list.alternate;
                  dependency !== null && (dependency.lanes |= renderLanes2);
                  scheduleContextWorkOnParentPath(list.return, renderLanes2, workInProgress2);
                  forcePropagateEntireTree || (nextFiber = null);
                  break a;
                }
              list = dependency.next;
            }
        } else if (fiber.tag === 18) {
          nextFiber = fiber.return;
          if (nextFiber === null)
            throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          nextFiber.lanes |= renderLanes2;
          list = nextFiber.alternate;
          list !== null && (list.lanes |= renderLanes2);
          scheduleContextWorkOnParentPath(nextFiber, renderLanes2, workInProgress2);
          nextFiber = null;
        } else
          nextFiber = fiber.child;
        if (nextFiber !== null)
          nextFiber.return = fiber;
        else
          for (nextFiber = fiber;nextFiber !== null; ) {
            if (nextFiber === workInProgress2) {
              nextFiber = null;
              break;
            }
            fiber = nextFiber.sibling;
            if (fiber !== null) {
              fiber.return = nextFiber.return;
              nextFiber = fiber;
              break;
            }
            nextFiber = nextFiber.return;
          }
        fiber = nextFiber;
      }
    }
    function propagateParentContextChanges(current3, workInProgress2, renderLanes2, forcePropagateEntireTree) {
      current3 = null;
      for (var parent = workInProgress2, isInsidePropagationBailout = false;parent !== null; ) {
        if (!isInsidePropagationBailout) {
          if ((parent.flags & 524288) !== 0)
            isInsidePropagationBailout = true;
          else if ((parent.flags & 262144) !== 0)
            break;
        }
        if (parent.tag === 10) {
          var currentParent = parent.alternate;
          if (currentParent === null)
            throw Error("Should have a current fiber. This is a bug in React.");
          currentParent = currentParent.memoizedProps;
          if (currentParent !== null) {
            var context = parent.type;
            objectIs(parent.pendingProps.value, currentParent.value) || (current3 !== null ? current3.push(context) : current3 = [context]);
          }
        } else if (parent === hostTransitionProviderCursor.current) {
          currentParent = parent.alternate;
          if (currentParent === null)
            throw Error("Should have a current fiber. This is a bug in React.");
          currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (current3 !== null ? current3.push(HostTransitionContext) : current3 = [HostTransitionContext]);
        }
        parent = parent.return;
      }
      current3 !== null && propagateContextChanges(workInProgress2, current3, renderLanes2, forcePropagateEntireTree);
      workInProgress2.flags |= 262144;
    }
    function checkIfContextChanged(currentDependencies) {
      for (currentDependencies = currentDependencies.firstContext;currentDependencies !== null; ) {
        if (!objectIs(currentDependencies.context._currentValue, currentDependencies.memoizedValue))
          return true;
        currentDependencies = currentDependencies.next;
      }
      return false;
    }
    function prepareToReadContext(workInProgress2) {
      currentlyRenderingFiber$1 = workInProgress2;
      lastContextDependency = null;
      workInProgress2 = workInProgress2.dependencies;
      workInProgress2 !== null && (workInProgress2.firstContext = null);
    }
    function readContext(context) {
      isDisallowedContextReadInDEV && console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      return readContextForConsumer(currentlyRenderingFiber$1, context);
    }
    function readContextDuringReconciliation(consumer, context) {
      currentlyRenderingFiber$1 === null && prepareToReadContext(consumer);
      return readContextForConsumer(consumer, context);
    }
    function readContextForConsumer(consumer, context) {
      var value = context._currentValue;
      context = { context, memoizedValue: value, next: null };
      if (lastContextDependency === null) {
        if (consumer === null)
          throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        lastContextDependency = context;
        consumer.dependencies = {
          lanes: 0,
          firstContext: context,
          _debugThenableState: null
        };
        consumer.flags |= 524288;
      } else
        lastContextDependency = lastContextDependency.next = context;
      return value;
    }
    function createCache() {
      return {
        controller: new AbortControllerLocal,
        data: new Map,
        refCount: 0
      };
    }
    function retainCache(cache) {
      cache.controller.signal.aborted && console.warn("A cache instance was retained after it was already freed. This likely indicates a bug in React.");
      cache.refCount++;
    }
    function releaseCache(cache) {
      cache.refCount--;
      0 > cache.refCount && console.warn("A cache instance was released after it was already freed. This likely indicates a bug in React.");
      cache.refCount === 0 && scheduleCallback$2(NormalPriority, function() {
        cache.controller.abort();
      });
    }
    function startUpdateTimerByLane(lane, method, fiber) {
      if ((lane & 127) !== 0)
        0 > blockingUpdateTime && (blockingUpdateTime = now(), blockingUpdateTask = createTask(method), blockingUpdateMethodName = method, fiber != null && (blockingUpdateComponentName = getComponentNameFromFiber(fiber)), (executionContext & (RenderContext | CommitContext)) !== NoContext && (componentEffectSpawnedUpdate = true, blockingUpdateType = SPAWNED_UPDATE), lane = resolveEventTimeStamp(), method = resolveEventType(), lane !== blockingEventRepeatTime || method !== blockingEventType ? blockingEventRepeatTime = -1.1 : method !== null && (blockingUpdateType = SPAWNED_UPDATE), blockingEventTime = lane, blockingEventType = method);
      else if ((lane & 4194048) !== 0 && 0 > transitionUpdateTime && (transitionUpdateTime = now(), transitionUpdateTask = createTask(method), transitionUpdateMethodName = method, fiber != null && (transitionUpdateComponentName = getComponentNameFromFiber(fiber)), 0 > transitionStartTime)) {
        lane = resolveEventTimeStamp();
        method = resolveEventType();
        if (lane !== transitionEventRepeatTime || method !== transitionEventType)
          transitionEventRepeatTime = -1.1;
        transitionEventTime = lane;
        transitionEventType = method;
      }
    }
    function startHostActionTimer(fiber) {
      if (0 > blockingUpdateTime) {
        blockingUpdateTime = now();
        blockingUpdateTask = fiber._debugTask != null ? fiber._debugTask : null;
        (executionContext & (RenderContext | CommitContext)) !== NoContext && (blockingUpdateType = SPAWNED_UPDATE);
        var newEventTime = resolveEventTimeStamp(), newEventType = resolveEventType();
        newEventTime !== blockingEventRepeatTime || newEventType !== blockingEventType ? blockingEventRepeatTime = -1.1 : newEventType !== null && (blockingUpdateType = SPAWNED_UPDATE);
        blockingEventTime = newEventTime;
        blockingEventType = newEventType;
      }
      if (0 > transitionUpdateTime && (transitionUpdateTime = now(), transitionUpdateTask = fiber._debugTask != null ? fiber._debugTask : null, 0 > transitionStartTime)) {
        fiber = resolveEventTimeStamp();
        newEventTime = resolveEventType();
        if (fiber !== transitionEventRepeatTime || newEventTime !== transitionEventType)
          transitionEventRepeatTime = -1.1;
        transitionEventTime = fiber;
        transitionEventType = newEventTime;
      }
    }
    function pushNestedEffectDurations() {
      var prevEffectDuration = profilerEffectDuration;
      profilerEffectDuration = 0;
      return prevEffectDuration;
    }
    function popNestedEffectDurations(prevEffectDuration) {
      var elapsedTime = profilerEffectDuration;
      profilerEffectDuration = prevEffectDuration;
      return elapsedTime;
    }
    function bubbleNestedEffectDurations(prevEffectDuration) {
      var elapsedTime = profilerEffectDuration;
      profilerEffectDuration += prevEffectDuration;
      return elapsedTime;
    }
    function resetComponentEffectTimers() {
      componentEffectEndTime = componentEffectStartTime = -1.1;
    }
    function pushComponentEffectStart() {
      var prevEffectStart = componentEffectStartTime;
      componentEffectStartTime = -1.1;
      return prevEffectStart;
    }
    function popComponentEffectStart(prevEffectStart) {
      0 <= prevEffectStart && (componentEffectStartTime = prevEffectStart);
    }
    function pushComponentEffectDuration() {
      var prevEffectDuration = componentEffectDuration;
      componentEffectDuration = -0;
      return prevEffectDuration;
    }
    function popComponentEffectDuration(prevEffectDuration) {
      0 <= prevEffectDuration && (componentEffectDuration = prevEffectDuration);
    }
    function pushComponentEffectErrors() {
      var prevErrors = componentEffectErrors;
      componentEffectErrors = null;
      return prevErrors;
    }
    function pushComponentEffectDidSpawnUpdate() {
      var prev = componentEffectSpawnedUpdate;
      componentEffectSpawnedUpdate = false;
      return prev;
    }
    function startProfilerTimer(fiber) {
      profilerStartTime = now();
      0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
    }
    function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
      if (0 <= profilerStartTime) {
        var elapsedTime = now() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        fiber.selfBaseDuration = elapsedTime;
        profilerStartTime = -1;
      }
    }
    function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
      if (0 <= profilerStartTime) {
        var elapsedTime = now() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        profilerStartTime = -1;
      }
    }
    function recordEffectDuration() {
      if (0 <= profilerStartTime) {
        var endTime = now(), elapsedTime = endTime - profilerStartTime;
        profilerStartTime = -1;
        profilerEffectDuration += elapsedTime;
        componentEffectDuration += elapsedTime;
        componentEffectEndTime = endTime;
      }
    }
    function recordEffectError(errorInfo) {
      componentEffectErrors === null && (componentEffectErrors = []);
      componentEffectErrors.push(errorInfo);
      commitErrors === null && (commitErrors = []);
      commitErrors.push(errorInfo);
    }
    function startEffectTimer() {
      profilerStartTime = now();
      0 > componentEffectStartTime && (componentEffectStartTime = profilerStartTime);
    }
    function transferActualDuration(fiber) {
      for (var child = fiber.child;child; )
        fiber.actualDuration += child.actualDuration, child = child.sibling;
    }
    function entangleAsyncAction(transition, thenable) {
      if (currentEntangledListeners === null) {
        var entangledListeners = currentEntangledListeners = [];
        currentEntangledPendingCount = 0;
        currentEntangledLane = requestTransitionLane();
        currentEntangledActionThenable = {
          status: "pending",
          value: undefined,
          then: function(resolve) {
            entangledListeners.push(resolve);
          }
        };
      }
      currentEntangledPendingCount++;
      thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
      return thenable;
    }
    function pingEngtangledActionScope() {
      if (--currentEntangledPendingCount === 0 && (-1 < transitionUpdateTime || (transitionStartTime = -1.1), currentEntangledListeners !== null)) {
        currentEntangledActionThenable !== null && (currentEntangledActionThenable.status = "fulfilled");
        var listeners = currentEntangledListeners;
        currentEntangledListeners = null;
        currentEntangledLane = 0;
        currentEntangledActionThenable = null;
        for (var i = 0;i < listeners.length; i++)
          (0, listeners[i])();
      }
    }
    function chainThenableValue(thenable, result) {
      var listeners = [], thenableWithOverride = {
        status: "pending",
        value: null,
        reason: null,
        then: function(resolve) {
          listeners.push(resolve);
        }
      };
      thenable.then(function() {
        thenableWithOverride.status = "fulfilled";
        thenableWithOverride.value = result;
        for (var i = 0;i < listeners.length; i++)
          (0, listeners[i])(result);
      }, function(error) {
        thenableWithOverride.status = "rejected";
        thenableWithOverride.reason = error;
        for (error = 0;error < listeners.length; error++)
          (0, listeners[error])(undefined);
      });
      return thenableWithOverride;
    }
    function peekCacheFromPool() {
      var cacheResumedFromPreviousRender = resumedCache.current;
      return cacheResumedFromPreviousRender !== null ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
    }
    function pushTransition(offscreenWorkInProgress, prevCachePool) {
      prevCachePool === null ? push(resumedCache, resumedCache.current, offscreenWorkInProgress) : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
    }
    function getSuspendedCache() {
      var cacheFromPool = peekCacheFromPool();
      return cacheFromPool === null ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
    }
    function createThenableState() {
      return { didWarnAboutUncachedPromise: false, thenables: [] };
    }
    function isThenableResolved(thenable) {
      thenable = thenable.status;
      return thenable === "fulfilled" || thenable === "rejected";
    }
    function trackUsedThenable(thenableState2, thenable, index) {
      ReactSharedInternals.actQueue !== null && (ReactSharedInternals.didUsePromise = true);
      var trackedThenables = thenableState2.thenables;
      index = trackedThenables[index];
      index === undefined ? trackedThenables.push(thenable) : index !== thenable && (thenableState2.didWarnAboutUncachedPromise || (thenableState2.didWarnAboutUncachedPromise = true, console.error("A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.")), thenable.then(noop$1, noop$1), thenable = index);
      if (thenable._debugInfo === undefined) {
        thenableState2 = performance.now();
        trackedThenables = thenable.displayName;
        var ioInfo = {
          name: typeof trackedThenables === "string" ? trackedThenables : "Promise",
          start: thenableState2,
          end: thenableState2,
          value: thenable
        };
        thenable._debugInfo = [{ awaited: ioInfo }];
        thenable.status !== "fulfilled" && thenable.status !== "rejected" && (thenableState2 = function() {
          ioInfo.end = performance.now();
        }, thenable.then(thenableState2, thenableState2));
      }
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
        default:
          if (typeof thenable.status === "string")
            thenable.then(noop$1, noop$1);
          else {
            thenableState2 = workInProgressRoot;
            if (thenableState2 !== null && 100 < thenableState2.shellSuspendCounter)
              throw Error("An unknown Component is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
            thenableState2 = thenable;
            thenableState2.status = "pending";
            thenableState2.then(function(fulfilledValue) {
              if (thenable.status === "pending") {
                var fulfilledThenable = thenable;
                fulfilledThenable.status = "fulfilled";
                fulfilledThenable.value = fulfilledValue;
              }
            }, function(error) {
              if (thenable.status === "pending") {
                var rejectedThenable = thenable;
                rejectedThenable.status = "rejected";
                rejectedThenable.reason = error;
              }
            });
          }
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
          }
          suspendedThenable = thenable;
          needsToResetSuspendedThenableDEV = true;
          throw SuspenseException;
      }
    }
    function resolveLazy(lazyType2) {
      try {
        return callLazyInitInDEV(lazyType2);
      } catch (x) {
        if (x !== null && typeof x === "object" && typeof x.then === "function")
          throw suspendedThenable = x, needsToResetSuspendedThenableDEV = true, SuspenseException;
        throw x;
      }
    }
    function getSuspendedThenable() {
      if (suspendedThenable === null)
        throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
      var thenable = suspendedThenable;
      suspendedThenable = null;
      needsToResetSuspendedThenableDEV = false;
      return thenable;
    }
    function checkIfUseWrappedInAsyncCatch(rejectedReason) {
      if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
        throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
    }
    function pushDebugInfo(debugInfo) {
      var previousDebugInfo = currentDebugInfo;
      debugInfo != null && (currentDebugInfo = previousDebugInfo === null ? debugInfo : previousDebugInfo.concat(debugInfo));
      return previousDebugInfo;
    }
    function getCurrentDebugTask() {
      var debugInfo = currentDebugInfo;
      if (debugInfo != null) {
        for (var i = debugInfo.length - 1;0 <= i; i--)
          if (debugInfo[i].name != null) {
            var debugTask = debugInfo[i].debugTask;
            if (debugTask != null)
              return debugTask;
          }
      }
      return null;
    }
    function validateFragmentProps(element, fiber, returnFiber) {
      for (var keys = Object.keys(element.props), i = 0;i < keys.length; i++) {
        var key = keys[i];
        if (key !== "children" && key !== "key") {
          fiber === null && (fiber = createFiberFromElement(element, returnFiber.mode, 0), fiber._debugInfo = currentDebugInfo, fiber.return = returnFiber);
          runWithFiberInDEV(fiber, function(erroredKey) {
            console.error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", erroredKey);
          }, key);
          break;
        }
      }
    }
    function unwrapThenable(thenable) {
      var index = thenableIndexCounter$1;
      thenableIndexCounter$1 += 1;
      thenableState$1 === null && (thenableState$1 = createThenableState());
      return trackUsedThenable(thenableState$1, thenable, index);
    }
    function coerceRef(workInProgress2, element) {
      element = element.props.ref;
      workInProgress2.ref = element !== undefined ? element : null;
    }
    function throwOnInvalidObjectTypeImpl(returnFiber, newChild) {
      if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
        throw Error(`A React Element from an older version of React was rendered. This is not supported. It can happen if:
- Multiple copies of the "react" package is used.
- A library pre-bundled an old copy of "react" or "react/jsx-runtime".
- A compiler tries to "inline" JSX instead of using the runtime.`);
      returnFiber = Object.prototype.toString.call(newChild);
      throw Error("Objects are not valid as a React child (found: " + (returnFiber === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      var debugTask = getCurrentDebugTask();
      debugTask !== null ? debugTask.run(throwOnInvalidObjectTypeImpl.bind(null, returnFiber, newChild)) : throwOnInvalidObjectTypeImpl(returnFiber, newChild);
    }
    function warnOnFunctionTypeImpl(returnFiber, invalidChild) {
      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
      ownerHasFunctionTypeWarning[parentName] || (ownerHasFunctionTypeWarning[parentName] = true, invalidChild = invalidChild.displayName || invalidChild.name || "Component", returnFiber.tag === 3 ? console.error(`Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.
  root.render(%s)`, invalidChild, invalidChild, invalidChild) : console.error(`Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.
  <%s>{%s}</%s>`, invalidChild, invalidChild, parentName, invalidChild, parentName));
    }
    function warnOnFunctionType(returnFiber, invalidChild) {
      var debugTask = getCurrentDebugTask();
      debugTask !== null ? debugTask.run(warnOnFunctionTypeImpl.bind(null, returnFiber, invalidChild)) : warnOnFunctionTypeImpl(returnFiber, invalidChild);
    }
    function warnOnSymbolTypeImpl(returnFiber, invalidChild) {
      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
      ownerHasSymbolTypeWarning[parentName] || (ownerHasSymbolTypeWarning[parentName] = true, invalidChild = String(invalidChild), returnFiber.tag === 3 ? console.error(`Symbols are not valid as a React child.
  root.render(%s)`, invalidChild) : console.error(`Symbols are not valid as a React child.
  <%s>%s</%s>`, parentName, invalidChild, parentName));
    }
    function warnOnSymbolType(returnFiber, invalidChild) {
      var debugTask = getCurrentDebugTask();
      debugTask !== null ? debugTask.run(warnOnSymbolTypeImpl.bind(null, returnFiber, invalidChild)) : warnOnSymbolTypeImpl(returnFiber, invalidChild);
    }
    function createChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
          var deletions = returnFiber.deletions;
          deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
        }
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects)
          return null;
        for (;currentFirstChild !== null; )
          deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return null;
      }
      function mapRemainingChildren(currentFirstChild) {
        for (var existingChildren = new Map;currentFirstChild !== null; )
          currentFirstChild.key !== null ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects)
          return newFiber.flags |= 1048576, lastPlacedIndex;
        newIndex = newFiber.alternate;
        if (newIndex !== null)
          return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
        newFiber.flags |= 67108866;
        return lastPlacedIndex;
      }
      function placeSingleChild(newFiber) {
        shouldTrackSideEffects && newFiber.alternate === null && (newFiber.flags |= 67108866);
        return newFiber;
      }
      function updateTextNode(returnFiber, current3, textContent, lanes) {
        if (current3 === null || current3.tag !== 6)
          return current3 = createFiberFromText(textContent, returnFiber.mode, lanes), current3.return = returnFiber, current3._debugOwner = returnFiber, current3._debugTask = returnFiber._debugTask, current3._debugInfo = currentDebugInfo, current3;
        current3 = useFiber(current3, textContent);
        current3.return = returnFiber;
        current3._debugInfo = currentDebugInfo;
        return current3;
      }
      function updateElement(returnFiber, current3, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE)
          return current3 = updateFragment(returnFiber, current3, element.props.children, lanes, element.key), validateFragmentProps(element, current3, returnFiber), current3;
        if (current3 !== null && (current3.elementType === elementType || isCompatibleFamilyForHotReloading(current3, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current3.type))
          return current3 = useFiber(current3, element.props), coerceRef(current3, element), current3.return = returnFiber, current3._debugOwner = element._owner, current3._debugInfo = currentDebugInfo, current3;
        current3 = createFiberFromElement(element, returnFiber.mode, lanes);
        coerceRef(current3, element);
        current3.return = returnFiber;
        current3._debugInfo = currentDebugInfo;
        return current3;
      }
      function updatePortal(returnFiber, current3, portal, lanes) {
        if (current3 === null || current3.tag !== 4 || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation)
          return current3 = createFiberFromPortal(portal, returnFiber.mode, lanes), current3.return = returnFiber, current3._debugInfo = currentDebugInfo, current3;
        current3 = useFiber(current3, portal.children || []);
        current3.return = returnFiber;
        current3._debugInfo = currentDebugInfo;
        return current3;
      }
      function updateFragment(returnFiber, current3, fragment, lanes, key) {
        if (current3 === null || current3.tag !== 7)
          return current3 = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current3.return = returnFiber, current3._debugOwner = returnFiber, current3._debugTask = returnFiber._debugTask, current3._debugInfo = currentDebugInfo, current3;
        current3 = useFiber(current3, fragment);
        current3.return = returnFiber;
        current3._debugInfo = currentDebugInfo;
        return current3;
      }
      function createChild(returnFiber, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number" || typeof newChild === "bigint")
          return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild._debugOwner = returnFiber, newChild._debugTask = returnFiber._debugTask, newChild._debugInfo = currentDebugInfo, newChild;
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return lanes = createFiberFromElement(newChild, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
            case REACT_PORTAL_TYPE:
              return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild._debugInfo = currentDebugInfo, newChild;
            case REACT_LAZY_TYPE:
              var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
              newChild = resolveLazy(newChild);
              returnFiber = createChild(returnFiber, newChild, lanes);
              currentDebugInfo = _prevDebugInfo;
              return returnFiber;
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return lanes = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
          if (typeof newChild.then === "function")
            return _prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = createChild(returnFiber, unwrapThenable(newChild), lanes), currentDebugInfo = _prevDebugInfo, returnFiber;
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return createChild(returnFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        typeof newChild === "function" && warnOnFunctionType(returnFiber, newChild);
        typeof newChild === "symbol" && warnOnSymbolType(returnFiber, newChild);
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = oldFiber !== null ? oldFiber.key : null;
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number" || typeof newChild === "bigint")
          return key !== null ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return newChild.key === key ? (key = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(returnFiber, oldFiber, newChild, lanes), currentDebugInfo = key, returnFiber) : null;
            case REACT_PORTAL_TYPE:
              return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
            case REACT_LAZY_TYPE:
              return key = pushDebugInfo(newChild._debugInfo), newChild = resolveLazy(newChild), returnFiber = updateSlot(returnFiber, oldFiber, newChild, lanes), currentDebugInfo = key, returnFiber;
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
            if (key !== null)
              return null;
            key = pushDebugInfo(newChild._debugInfo);
            returnFiber = updateFragment(returnFiber, oldFiber, newChild, lanes, null);
            currentDebugInfo = key;
            return returnFiber;
          }
          if (typeof newChild.then === "function")
            return key = pushDebugInfo(newChild._debugInfo), returnFiber = updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes), currentDebugInfo = key, returnFiber;
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        typeof newChild === "function" && warnOnFunctionType(returnFiber, newChild);
        typeof newChild === "symbol" && warnOnSymbolType(returnFiber, newChild);
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number" || typeof newChild === "bigint")
          return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return newIdx = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(returnFiber, newIdx, newChild, lanes), currentDebugInfo = existingChildren, returnFiber;
            case REACT_PORTAL_TYPE:
              return existingChildren = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
            case REACT_LAZY_TYPE:
              var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
              newChild = resolveLazy(newChild);
              returnFiber = updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes);
              currentDebugInfo = _prevDebugInfo7;
              return returnFiber;
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return newIdx = existingChildren.get(newIdx) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateFragment(returnFiber, newIdx, newChild, lanes, null), currentDebugInfo = existingChildren, returnFiber;
          if (typeof newChild.then === "function")
            return _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo), returnFiber = updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(newChild), lanes), currentDebugInfo = _prevDebugInfo7, returnFiber;
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, newChild), lanes);
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        typeof newChild === "function" && warnOnFunctionType(returnFiber, newChild);
        typeof newChild === "symbol" && warnOnSymbolType(returnFiber, newChild);
        return null;
      }
      function warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys) {
        if (typeof child !== "object" || child === null)
          return knownKeys;
        switch (child.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            warnForMissingKey(returnFiber, workInProgress2, child);
            var key = child.key;
            if (typeof key !== "string")
              break;
            if (knownKeys === null) {
              knownKeys = new Set;
              knownKeys.add(key);
              break;
            }
            if (!knownKeys.has(key)) {
              knownKeys.add(key);
              break;
            }
            runWithFiberInDEV(workInProgress2, function() {
              console.error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
            });
            break;
          case REACT_LAZY_TYPE:
            child = resolveLazy(child), warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys);
        }
        return knownKeys;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        for (var knownKeys = null, resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null;oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
          if (newFiber === null) {
            oldFiber === null && (oldFiber = nextOldFiber);
            break;
          }
          knownKeys = warnOnInvalidKey(returnFiber, newFiber, newChildren[newIdx], knownKeys);
          shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length)
          return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
        if (oldFiber === null) {
          for (;newIdx < newChildren.length; newIdx++)
            oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), oldFiber !== null && (knownKeys = warnOnInvalidKey(returnFiber, oldFiber, newChildren[newIdx], knownKeys), currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), previousNewFiber === null ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        for (oldFiber = mapRemainingChildren(oldFiber);newIdx < newChildren.length; newIdx++)
          nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), nextOldFiber !== null && (knownKeys = warnOnInvalidKey(returnFiber, nextOldFiber, newChildren[newIdx], knownKeys), shouldTrackSideEffects && nextOldFiber.alternate !== null && oldFiber.delete(nextOldFiber.key === null ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), previousNewFiber === null ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
          return deleteChild(returnFiber, child);
        });
        isHydrating && pushTreeFork(returnFiber, newIdx);
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
        if (newChildren == null)
          throw Error("An iterable object provided no iterator.");
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, knownKeys = null, step = newChildren.next();oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (newFiber === null) {
            oldFiber === null && (oldFiber = nextOldFiber);
            break;
          }
          knownKeys = warnOnInvalidKey(returnFiber, newFiber, step.value, knownKeys);
          shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (step.done)
          return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
        if (oldFiber === null) {
          for (;!step.done; newIdx++, step = newChildren.next())
            oldFiber = createChild(returnFiber, step.value, lanes), oldFiber !== null && (knownKeys = warnOnInvalidKey(returnFiber, oldFiber, step.value, knownKeys), currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), previousNewFiber === null ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        for (oldFiber = mapRemainingChildren(oldFiber);!step.done; newIdx++, step = newChildren.next())
          nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), nextOldFiber !== null && (knownKeys = warnOnInvalidKey(returnFiber, nextOldFiber, step.value, knownKeys), shouldTrackSideEffects && nextOldFiber.alternate !== null && oldFiber.delete(nextOldFiber.key === null ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), previousNewFiber === null ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
          return deleteChild(returnFiber, child);
        });
        isHydrating && pushTreeFork(returnFiber, newIdx);
        return resultingFirstChild;
      }
      function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
        typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null && (validateFragmentProps(newChild, null, returnFiber), newChild = newChild.props.children);
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
              a: {
                for (var key = newChild.key;currentFirstChild !== null; ) {
                  if (currentFirstChild.key === key) {
                    key = newChild.type;
                    if (key === REACT_FRAGMENT_TYPE) {
                      if (currentFirstChild.tag === 7) {
                        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                        lanes = useFiber(currentFirstChild, newChild.props.children);
                        lanes.return = returnFiber;
                        lanes._debugOwner = newChild._owner;
                        lanes._debugInfo = currentDebugInfo;
                        validateFragmentProps(newChild, lanes, returnFiber);
                        returnFiber = lanes;
                        break a;
                      }
                    } else if (currentFirstChild.elementType === key || isCompatibleFamilyForHotReloading(currentFirstChild, newChild) || typeof key === "object" && key !== null && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                      lanes = useFiber(currentFirstChild, newChild.props);
                      coerceRef(lanes, newChild);
                      lanes.return = returnFiber;
                      lanes._debugOwner = newChild._owner;
                      lanes._debugInfo = currentDebugInfo;
                      returnFiber = lanes;
                      break a;
                    }
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  } else
                    deleteChild(returnFiber, currentFirstChild);
                  currentFirstChild = currentFirstChild.sibling;
                }
                newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, validateFragmentProps(newChild, lanes, returnFiber), returnFiber = lanes) : (lanes = createFiberFromElement(newChild, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes._debugInfo = currentDebugInfo, returnFiber = lanes);
              }
              returnFiber = placeSingleChild(returnFiber);
              currentDebugInfo = prevDebugInfo;
              return returnFiber;
            case REACT_PORTAL_TYPE:
              a: {
                prevDebugInfo = newChild;
                for (newChild = prevDebugInfo.key;currentFirstChild !== null; ) {
                  if (currentFirstChild.key === newChild)
                    if (currentFirstChild.tag === 4 && currentFirstChild.stateNode.containerInfo === prevDebugInfo.containerInfo && currentFirstChild.stateNode.implementation === prevDebugInfo.implementation) {
                      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                      lanes = useFiber(currentFirstChild, prevDebugInfo.children || []);
                      lanes.return = returnFiber;
                      returnFiber = lanes;
                      break a;
                    } else {
                      deleteRemainingChildren(returnFiber, currentFirstChild);
                      break;
                    }
                  else
                    deleteChild(returnFiber, currentFirstChild);
                  currentFirstChild = currentFirstChild.sibling;
                }
                lanes = createFiberFromPortal(prevDebugInfo, returnFiber.mode, lanes);
                lanes.return = returnFiber;
                returnFiber = lanes;
              }
              return placeSingleChild(returnFiber);
            case REACT_LAZY_TYPE:
              return prevDebugInfo = pushDebugInfo(newChild._debugInfo), newChild = resolveLazy(newChild), returnFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes), currentDebugInfo = prevDebugInfo, returnFiber;
          }
          if (isArrayImpl(newChild))
            return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes), currentDebugInfo = prevDebugInfo, returnFiber;
          if (getIteratorFn(newChild)) {
            prevDebugInfo = pushDebugInfo(newChild._debugInfo);
            key = getIteratorFn(newChild);
            if (typeof key !== "function")
              throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            var newChildren = key.call(newChild);
            if (newChildren === newChild) {
              if (returnFiber.tag !== 0 || Object.prototype.toString.call(returnFiber.type) !== "[object GeneratorFunction]" || Object.prototype.toString.call(newChildren) !== "[object Generator]")
                didWarnAboutGenerators || console.error("Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."), didWarnAboutGenerators = true;
            } else
              newChild.entries !== key || didWarnAboutMaps || (console.error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = true);
            returnFiber = reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes);
            currentDebugInfo = prevDebugInfo;
            return returnFiber;
          }
          if (typeof newChild.then === "function")
            return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(newChild), lanes), currentDebugInfo = prevDebugInfo, returnFiber;
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, newChild), lanes);
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number" || typeof newChild === "bigint")
          return prevDebugInfo = "" + newChild, currentFirstChild !== null && currentFirstChild.tag === 6 ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, prevDebugInfo), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(prevDebugInfo, returnFiber.mode, lanes), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, returnFiber = lanes), placeSingleChild(returnFiber);
        typeof newChild === "function" && warnOnFunctionType(returnFiber, newChild);
        typeof newChild === "symbol" && warnOnSymbolType(returnFiber, newChild);
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return function(returnFiber, currentFirstChild, newChild, lanes) {
        var prevDebugInfo = currentDebugInfo;
        currentDebugInfo = null;
        try {
          thenableIndexCounter$1 = 0;
          var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
          thenableState$1 = null;
          return firstChildFiber;
        } catch (x) {
          if (x === SuspenseException || x === SuspenseActionException)
            throw x;
          var fiber = createFiber(29, x, null, returnFiber.mode);
          fiber.lanes = lanes;
          fiber.return = returnFiber;
          var debugInfo = fiber._debugInfo = currentDebugInfo;
          fiber._debugOwner = returnFiber._debugOwner;
          fiber._debugTask = returnFiber._debugTask;
          if (debugInfo != null) {
            for (var i = debugInfo.length - 1;0 <= i; i--)
              if (typeof debugInfo[i].stack === "string") {
                fiber._debugOwner = debugInfo[i];
                fiber._debugTask = debugInfo[i].debugTask;
                break;
              }
          }
          return fiber;
        } finally {
          currentDebugInfo = prevDebugInfo;
        }
      };
    }
    function validateSuspenseListNestedChild(childSlot, index) {
      var isAnArray = isArrayImpl(childSlot);
      childSlot = !isAnArray && typeof getIteratorFn(childSlot) === "function";
      return isAnArray || childSlot ? (isAnArray = isAnArray ? "array" : "iterable", console.error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", isAnArray, index, isAnArray), false) : true;
    }
    function initializeUpdateQueue(fiber) {
      fiber.updateQueue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: { pending: null, lanes: 0, hiddenCallbacks: null },
        callbacks: null
      };
    }
    function cloneUpdateQueue(current3, workInProgress2) {
      current3 = current3.updateQueue;
      workInProgress2.updateQueue === current3 && (workInProgress2.updateQueue = {
        baseState: current3.baseState,
        firstBaseUpdate: current3.firstBaseUpdate,
        lastBaseUpdate: current3.lastBaseUpdate,
        shared: current3.shared,
        callbacks: null
      });
    }
    function createUpdate(lane) {
      return {
        lane,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null
      };
    }
    function enqueueUpdate(fiber, update, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null)
        return null;
      updateQueue = updateQueue.shared;
      if (currentlyProcessingQueue === updateQueue && !didWarnUpdateInsideUpdate) {
        var componentName2 = getComponentNameFromFiber(fiber);
        console.error(`An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.

Please update the following component: %s`, componentName2);
        didWarnUpdateInsideUpdate = true;
      }
      if ((executionContext & RenderContext) !== NoContext)
        return componentName2 = updateQueue.pending, componentName2 === null ? update.next = update : (update.next = componentName2.next, componentName2.next = update), updateQueue.pending = update, update = getRootForUpdatedFiber(fiber), markUpdateLaneFromFiberToRoot(fiber, null, lane), update;
      enqueueUpdate$1(fiber, updateQueue, update, lane);
      return getRootForUpdatedFiber(fiber);
    }
    function entangleTransitions(root2, fiber, lane) {
      fiber = fiber.updateQueue;
      if (fiber !== null && (fiber = fiber.shared, (lane & 4194048) !== 0)) {
        var queueLanes = fiber.lanes;
        queueLanes &= root2.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root2, lane);
      }
    }
    function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
      var { updateQueue: queue, alternate: current3 } = workInProgress2;
      if (current3 !== null && (current3 = current3.updateQueue, queue === current3)) {
        var newFirst = null, newLast = null;
        queue = queue.firstBaseUpdate;
        if (queue !== null) {
          do {
            var clone = {
              lane: queue.lane,
              tag: queue.tag,
              payload: queue.payload,
              callback: null,
              next: null
            };
            newLast === null ? newFirst = newLast = clone : newLast = newLast.next = clone;
            queue = queue.next;
          } while (queue !== null);
          newLast === null ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
        } else
          newFirst = newLast = capturedUpdate;
        queue = {
          baseState: current3.baseState,
          firstBaseUpdate: newFirst,
          lastBaseUpdate: newLast,
          shared: current3.shared,
          callbacks: current3.callbacks
        };
        workInProgress2.updateQueue = queue;
        return;
      }
      workInProgress2 = queue.lastBaseUpdate;
      workInProgress2 === null ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
      queue.lastBaseUpdate = capturedUpdate;
    }
    function suspendIfUpdateReadFromEntangledAsyncAction() {
      if (didReadFromEntangledAsyncAction) {
        var entangledActionThenable = currentEntangledActionThenable;
        if (entangledActionThenable !== null)
          throw entangledActionThenable;
      }
    }
    function processUpdateQueue(workInProgress2, props, instance$jscomp$0, renderLanes2) {
      didReadFromEntangledAsyncAction = false;
      var queue = workInProgress2.updateQueue;
      hasForceUpdate = false;
      currentlyProcessingQueue = queue.shared;
      var { firstBaseUpdate, lastBaseUpdate } = queue, pendingQueue = queue.shared.pending;
      if (pendingQueue !== null) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        lastBaseUpdate === null ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
        lastBaseUpdate = lastPendingUpdate;
        var current3 = workInProgress2.alternate;
        current3 !== null && (current3 = current3.updateQueue, pendingQueue = current3.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (pendingQueue === null ? current3.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current3.lastBaseUpdate = lastPendingUpdate));
      }
      if (firstBaseUpdate !== null) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current3 = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;
        do {
          var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
          if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
            updateLane !== 0 && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
            current3 !== null && (current3 = current3.next = {
              lane: 0,
              tag: pendingQueue.tag,
              payload: pendingQueue.payload,
              callback: null,
              next: null
            });
            a: {
              updateLane = workInProgress2;
              var partialState = pendingQueue;
              var nextProps = props, instance = instance$jscomp$0;
              switch (partialState.tag) {
                case ReplaceState:
                  partialState = partialState.payload;
                  if (typeof partialState === "function") {
                    isDisallowedContextReadInDEV = true;
                    var nextState = partialState.call(instance, newState, nextProps);
                    if (updateLane.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        partialState.call(instance, newState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    isDisallowedContextReadInDEV = false;
                    newState = nextState;
                    break a;
                  }
                  newState = partialState;
                  break a;
                case CaptureUpdate:
                  updateLane.flags = updateLane.flags & -65537 | 128;
                case UpdateState:
                  nextState = partialState.payload;
                  if (typeof nextState === "function") {
                    isDisallowedContextReadInDEV = true;
                    partialState = nextState.call(instance, newState, nextProps);
                    if (updateLane.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        nextState.call(instance, newState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    isDisallowedContextReadInDEV = false;
                  } else
                    partialState = nextState;
                  if (partialState === null || partialState === undefined)
                    break a;
                  newState = assign({}, newState, partialState);
                  break a;
                case ForceUpdate:
                  hasForceUpdate = true;
              }
            }
            updateLane = pendingQueue.callback;
            updateLane !== null && (workInProgress2.flags |= 64, isHiddenUpdate && (workInProgress2.flags |= 8192), isHiddenUpdate = queue.callbacks, isHiddenUpdate === null ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
          } else
            isHiddenUpdate = {
              lane: updateLane,
              tag: pendingQueue.tag,
              payload: pendingQueue.payload,
              callback: pendingQueue.callback,
              next: null
            }, current3 === null ? (firstPendingUpdate = current3 = isHiddenUpdate, lastPendingUpdate = newState) : current3 = current3.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
          pendingQueue = pendingQueue.next;
          if (pendingQueue === null)
            if (pendingQueue = queue.shared.pending, pendingQueue === null)
              break;
            else
              isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
        } while (1);
        current3 === null && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current3;
        firstBaseUpdate === null && (queue.shared.lanes = 0);
        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress2.lanes = lastBaseUpdate;
        workInProgress2.memoizedState = newState;
      }
      currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
      if (typeof callback !== "function")
        throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
      callback.call(context);
    }
    function commitHiddenCallbacks(updateQueue, context) {
      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
      if (hiddenCallbacks !== null)
        for (updateQueue.shared.hiddenCallbacks = null, updateQueue = 0;updateQueue < hiddenCallbacks.length; updateQueue++)
          callCallback(hiddenCallbacks[updateQueue], context);
    }
    function commitCallbacks(updateQueue, context) {
      var callbacks = updateQueue.callbacks;
      if (callbacks !== null)
        for (updateQueue.callbacks = null, updateQueue = 0;updateQueue < callbacks.length; updateQueue++)
          callCallback(callbacks[updateQueue], context);
    }
    function pushHiddenContext(fiber, context) {
      var prevEntangledRenderLanes = entangledRenderLanes;
      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
      push(currentTreeHiddenStackCursor, context, fiber);
      entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
    }
    function reuseHiddenContextOnStack(fiber) {
      push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
      push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current, fiber);
    }
    function popHiddenContext(fiber) {
      entangledRenderLanes = prevEntangledRenderLanesCursor.current;
      pop(currentTreeHiddenStackCursor, fiber);
      pop(prevEntangledRenderLanesCursor, fiber);
    }
    function pushPrimaryTreeSuspenseHandler(handler) {
      var current3 = handler.alternate;
      push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, handler);
      push(suspenseHandlerStackCursor, handler, handler);
      shellBoundary === null && (current3 === null || currentTreeHiddenStackCursor.current !== null ? shellBoundary = handler : current3.memoizedState !== null && (shellBoundary = handler));
    }
    function pushDehydratedActivitySuspenseHandler(fiber) {
      push(suspenseStackCursor, suspenseStackCursor.current, fiber);
      push(suspenseHandlerStackCursor, fiber, fiber);
      shellBoundary === null && (shellBoundary = fiber);
    }
    function pushOffscreenSuspenseHandler(fiber) {
      fiber.tag === 22 ? (push(suspenseStackCursor, suspenseStackCursor.current, fiber), push(suspenseHandlerStackCursor, fiber, fiber), shellBoundary === null && (shellBoundary = fiber)) : reuseSuspenseHandlerOnStack(fiber);
    }
    function reuseSuspenseHandlerOnStack(fiber) {
      push(suspenseStackCursor, suspenseStackCursor.current, fiber);
      push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current, fiber);
    }
    function popSuspenseHandler(fiber) {
      pop(suspenseHandlerStackCursor, fiber);
      shellBoundary === fiber && (shellBoundary = null);
      pop(suspenseStackCursor, fiber);
    }
    function findFirstSuspended(row) {
      for (var node = row;node !== null; ) {
        if (node.tag === 13) {
          var state = node.memoizedState;
          if (state !== null && (state = state.dehydrated, state === null || isSuspenseInstancePending(state) || isSuspenseInstanceFallback(state)))
            return node;
        } else if (node.tag === 19 && (node.memoizedProps.revealOrder === "forwards" || node.memoizedProps.revealOrder === "backwards" || node.memoizedProps.revealOrder === "unstable_legacy-backwards" || node.memoizedProps.revealOrder === "together")) {
          if ((node.flags & 128) !== 0)
            return node;
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === row)
          break;
        for (;node.sibling === null; ) {
          if (node.return === null || node.return === row)
            return null;
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      return null;
    }
    function mountHookTypesDev() {
      var hookName = currentHookNameInDev;
      hookTypesDev === null ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
      var hookName = currentHookNameInDev;
      if (hookTypesDev !== null && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName)) {
        var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName2) && (didWarnAboutMismatchedHooksForComponent.add(componentName2), hookTypesDev !== null)) {
          for (var table = "", i = 0;i <= hookTypesUpdateIndexDev; i++) {
            var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? hookName : oldHookName;
            for (oldHookName = i + 1 + ". " + oldHookName;30 > oldHookName.length; )
              oldHookName += " ";
            oldHookName += newHookName + `
`;
            table += oldHookName;
          }
          console.error(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, componentName2, table);
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      deps === undefined || deps === null || isArrayImpl(deps) || console.error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnUseFormStateInDev() {
      var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
      didWarnAboutUseFormState.has(componentName2) || (didWarnAboutUseFormState.add(componentName2), console.error("ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.", componentName2));
    }
    function throwInvalidHookError() {
      throw Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.`);
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      if (ignorePreviousDependencies)
        return false;
      if (prevDeps === null)
        return console.error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), false;
      nextDeps.length !== prevDeps.length && console.error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
      for (var i = 0;i < prevDeps.length && i < nextDeps.length; i++)
        if (!objectIs(nextDeps[i], prevDeps[i]))
          return false;
      return true;
    }
    function renderWithHooks(current3, workInProgress2, Component, props, secondArg, nextRenderLanes) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber = workInProgress2;
      hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
      hookTypesUpdateIndexDev = -1;
      ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress2.type;
      if (Object.prototype.toString.call(Component) === "[object AsyncFunction]" || Object.prototype.toString.call(Component) === "[object AsyncGeneratorFunction]")
        nextRenderLanes = getComponentNameFromFiber(currentlyRenderingFiber), didWarnAboutAsyncClientComponent.has(nextRenderLanes) || (didWarnAboutAsyncClientComponent.add(nextRenderLanes), console.error("%s is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.", nextRenderLanes === null ? "An unknown Component" : "<" + nextRenderLanes + ">"));
      workInProgress2.memoizedState = null;
      workInProgress2.updateQueue = null;
      workInProgress2.lanes = 0;
      ReactSharedInternals.H = current3 !== null && current3.memoizedState !== null ? HooksDispatcherOnUpdateInDEV : hookTypesDev !== null ? HooksDispatcherOnMountWithHookTypesInDEV : HooksDispatcherOnMountInDEV;
      shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes = (workInProgress2.mode & StrictLegacyMode) !== NoMode;
      var children = callComponentInDEV(Component, props, secondArg);
      shouldDoubleInvokeUserFnsInHooksDEV = false;
      didScheduleRenderPhaseUpdateDuringThisPass && (children = renderWithHooksAgain(workInProgress2, Component, props, secondArg));
      if (nextRenderLanes) {
        setIsStrictModeForDevtools(true);
        try {
          children = renderWithHooksAgain(workInProgress2, Component, props, secondArg);
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      finishRenderingHooks(current3, workInProgress2);
      return children;
    }
    function finishRenderingHooks(current3, workInProgress2) {
      workInProgress2._debugHookTypes = hookTypesDev;
      workInProgress2.dependencies === null ? thenableState !== null && (workInProgress2.dependencies = {
        lanes: 0,
        firstContext: null,
        _debugThenableState: thenableState
      }) : workInProgress2.dependencies._debugThenableState = thenableState;
      ReactSharedInternals.H = ContextOnlyDispatcher;
      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderLanes = 0;
      hookTypesDev = currentHookNameInDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
      hookTypesUpdateIndexDev = -1;
      current3 !== null && (current3.flags & 65011712) !== (workInProgress2.flags & 65011712) && console.error("Internal React error: Expected static flag was missing. Please notify the React team.");
      didScheduleRenderPhaseUpdate = false;
      thenableIndexCounter = 0;
      thenableState = null;
      if (didRenderTooFewHooks)
        throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      current3 === null || didReceiveUpdate || (current3 = current3.dependencies, current3 !== null && checkIfContextChanged(current3) && (didReceiveUpdate = true));
      needsToResetSuspendedThenableDEV ? (needsToResetSuspendedThenableDEV = false, current3 = true) : current3 = false;
      current3 && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Unknown", didWarnAboutUseWrappedInTryCatch.has(workInProgress2) || didWarnAboutAsyncClientComponent.has(workInProgress2) || (didWarnAboutUseWrappedInTryCatch.add(workInProgress2), console.error("`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary.")));
    }
    function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
      currentlyRenderingFiber = workInProgress2;
      var numberOfReRenders = 0;
      do {
        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
        thenableIndexCounter = 0;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        numberOfReRenders += 1;
        ignorePreviousDependencies = false;
        workInProgressHook = currentHook = null;
        if (workInProgress2.updateQueue != null) {
          var children = workInProgress2.updateQueue;
          children.lastEffect = null;
          children.events = null;
          children.stores = null;
          children.memoCache != null && (children.memoCache.index = 0);
        }
        hookTypesUpdateIndexDev = -1;
        ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
        children = callComponentInDEV(Component, props, secondArg);
      } while (didScheduleRenderPhaseUpdateDuringThisPass);
      return children;
    }
    function TransitionAwareHostComponent() {
      var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
      maybeThenable = typeof maybeThenable.then === "function" ? useThenable(maybeThenable) : maybeThenable;
      dispatcher = dispatcher.useState()[0];
      (currentHook !== null ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
      return maybeThenable;
    }
    function checkDidRenderIdHook() {
      var didRenderIdHook = localIdCounter !== 0;
      localIdCounter = 0;
      return didRenderIdHook;
    }
    function bailoutHooks(current3, workInProgress2, lanes) {
      workInProgress2.updateQueue = current3.updateQueue;
      workInProgress2.flags = (workInProgress2.mode & StrictEffectsMode) !== NoMode ? workInProgress2.flags & -402655237 : workInProgress2.flags & -2053;
      current3.lanes &= ~lanes;
    }
    function resetHooksOnUnwind(workInProgress2) {
      if (didScheduleRenderPhaseUpdate) {
        for (workInProgress2 = workInProgress2.memoizedState;workInProgress2 !== null; ) {
          var queue = workInProgress2.queue;
          queue !== null && (queue.pending = null);
          workInProgress2 = workInProgress2.next;
        }
        didScheduleRenderPhaseUpdate = false;
      }
      renderLanes = 0;
      hookTypesDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
      hookTypesUpdateIndexDev = -1;
      currentHookNameInDev = null;
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      thenableIndexCounter = localIdCounter = 0;
      thenableState = null;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      workInProgressHook === null ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      if (currentHook === null) {
        var nextCurrentHook = currentlyRenderingFiber.alternate;
        nextCurrentHook = nextCurrentHook !== null ? nextCurrentHook.memoizedState : null;
      } else
        nextCurrentHook = currentHook.next;
      var nextWorkInProgressHook = workInProgressHook === null ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
      if (nextWorkInProgressHook !== null)
        workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
      else {
        if (nextCurrentHook === null) {
          if (currentlyRenderingFiber.alternate === null)
            throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
          throw Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        nextCurrentHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        workInProgressHook === null ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return { lastEffect: null, events: null, stores: null, memoCache: null };
    }
    function useThenable(thenable) {
      var index = thenableIndexCounter;
      thenableIndexCounter += 1;
      thenableState === null && (thenableState = createThenableState());
      thenable = trackUsedThenable(thenableState, thenable, index);
      index = currentlyRenderingFiber;
      (workInProgressHook === null ? index.memoizedState : workInProgressHook.next) === null && (index = index.alternate, ReactSharedInternals.H = index !== null && index.memoizedState !== null ? HooksDispatcherOnUpdateInDEV : HooksDispatcherOnMountInDEV);
      return thenable;
    }
    function use(usable) {
      if (usable !== null && typeof usable === "object") {
        if (typeof usable.then === "function")
          return useThenable(usable);
        if (usable.$$typeof === REACT_CONTEXT_TYPE)
          return readContext(usable);
      }
      throw Error("An unsupported type was passed to use(): " + String(usable));
    }
    function useMemoCache(size2) {
      var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
      updateQueue !== null && (memoCache = updateQueue.memoCache);
      if (memoCache == null) {
        var current3 = currentlyRenderingFiber.alternate;
        current3 !== null && (current3 = current3.updateQueue, current3 !== null && (current3 = current3.memoCache, current3 != null && (memoCache = {
          data: current3.data.map(function(array) {
            return array.slice();
          }),
          index: 0
        })));
      }
      memoCache == null && (memoCache = { data: [], index: 0 });
      updateQueue === null && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
      updateQueue.memoCache = memoCache;
      updateQueue = memoCache.data[memoCache.index];
      if (updateQueue === undefined || ignorePreviousDependencies)
        for (updateQueue = memoCache.data[memoCache.index] = Array(size2), current3 = 0;current3 < size2; current3++)
          updateQueue[current3] = REACT_MEMO_CACHE_SENTINEL;
      else
        updateQueue.length !== size2 && console.error("Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.", updateQueue.length, size2);
      memoCache.index++;
      return updateQueue;
    }
    function basicStateReducer(state, action) {
      return typeof action === "function" ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      if (init !== undefined) {
        var initialState = init(initialArg);
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            init(initialArg);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      } else
        initialState = initialArg;
      hook.memoizedState = hook.baseState = initialState;
      reducer = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      hook.queue = reducer;
      reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber, reducer);
      return [hook.memoizedState, reducer];
    }
    function updateReducer(reducer) {
      var hook = updateWorkInProgressHook();
      return updateReducerImpl(hook, currentHook, reducer);
    }
    function updateReducerImpl(hook, current3, reducer) {
      var queue = hook.queue;
      if (queue === null)
        throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
      queue.lastRenderedReducer = reducer;
      var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
      if (pendingQueue !== null) {
        if (baseQueue !== null) {
          var baseFirst = baseQueue.next;
          baseQueue.next = pendingQueue.next;
          pendingQueue.next = baseFirst;
        }
        current3.baseQueue !== baseQueue && console.error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
        current3.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }
      pendingQueue = hook.baseState;
      if (baseQueue === null)
        hook.memoizedState = pendingQueue;
      else {
        current3 = baseQueue.next;
        var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current3, didReadFromEntangledAsyncAction2 = false;
        do {
          var updateLane = update.lane & -536870913;
          if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
            var revertLane = update.revertLane;
            if (revertLane === 0)
              newBaseQueueLast !== null && (newBaseQueueLast = newBaseQueueLast.next = {
                lane: 0,
                revertLane: 0,
                gesture: null,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
            else if ((renderLanes & revertLane) === revertLane) {
              update = update.next;
              revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
              continue;
            } else
              updateLane = {
                lane: 0,
                revertLane: update.revertLane,
                gesture: null,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }, newBaseQueueLast === null ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
            updateLane = update.action;
            shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
            pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
          } else
            revertLane = {
              lane: updateLane,
              revertLane: update.revertLane,
              gesture: update.gesture,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            }, newBaseQueueLast === null ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
          update = update.next;
        } while (update !== null && update !== current3);
        newBaseQueueLast === null ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
        if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction2 && (reducer = currentEntangledActionThenable, reducer !== null)))
          throw reducer;
        hook.memoizedState = pendingQueue;
        hook.baseState = baseFirst;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = pendingQueue;
      }
      baseQueue === null && (queue.lanes = 0);
      return [hook.memoizedState, queue.dispatch];
    }
    function rerenderReducer(reducer) {
      var hook = updateWorkInProgressHook(), queue = hook.queue;
      if (queue === null)
        throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
      queue.lastRenderedReducer = reducer;
      var { dispatch, pending: lastRenderPhaseUpdate } = queue, newState = hook.memoizedState;
      if (lastRenderPhaseUpdate !== null) {
        queue.pending = null;
        var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        do
          newState = reducer(newState, update.action), update = update.next;
        while (update !== lastRenderPhaseUpdate);
        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
        hook.memoizedState = newState;
        hook.baseQueue === null && (hook.baseState = newState);
        queue.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
      if (isHydrating) {
        if (getServerSnapshot === undefined)
          throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        var nextSnapshot = getServerSnapshot();
        didWarnUncachedGetSnapshot || nextSnapshot === getServerSnapshot() || (console.error("The result of getServerSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = true);
      } else {
        nextSnapshot = getSnapshot();
        didWarnUncachedGetSnapshot || (getServerSnapshot = getSnapshot(), objectIs(nextSnapshot, getServerSnapshot) || (console.error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = true));
        if (workInProgressRoot === null)
          throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        (workInProgressRootRenderLanes & 127) !== 0 || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
      }
      hook.memoizedState = nextSnapshot;
      getServerSnapshot = { value: nextSnapshot, getSnapshot };
      hook.queue = getServerSnapshot;
      mountEffect(subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe), [subscribe]);
      fiber.flags |= 2048;
      pushSimpleEffect(HasEffect | Passive, { destroy: undefined }, updateStoreInstance.bind(null, fiber, getServerSnapshot, nextSnapshot, getSnapshot), null);
      return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
      if (isHydrating$jscomp$0) {
        if (getServerSnapshot === undefined)
          throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        getServerSnapshot = getServerSnapshot();
      } else if (getServerSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
        var cachedSnapshot = getSnapshot();
        objectIs(getServerSnapshot, cachedSnapshot) || (console.error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = true);
      }
      if (cachedSnapshot = !objectIs((currentHook || hook).memoizedState, getServerSnapshot))
        hook.memoizedState = getServerSnapshot, didReceiveUpdate = true;
      hook = hook.queue;
      var create = subscribeToStore.bind(null, fiber, hook, subscribe);
      updateEffectImpl(2048, Passive, create, [subscribe]);
      if (hook.getSnapshot !== getSnapshot || cachedSnapshot || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
        fiber.flags |= 2048;
        pushSimpleEffect(HasEffect | Passive, { destroy: undefined }, updateStoreInstance.bind(null, fiber, hook, getServerSnapshot, getSnapshot), null);
        if (workInProgressRoot === null)
          throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        isHydrating$jscomp$0 || (renderLanes & 127) !== 0 || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
      }
      return getServerSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= 16384;
      fiber = { getSnapshot, value: renderedSnapshot };
      getSnapshot = currentlyRenderingFiber.updateQueue;
      getSnapshot === null ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, renderedSnapshot === null ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
      return subscribe(function() {
        checkIfSnapshotChanged(inst) && (startUpdateTimerByLane(2, "updateSyncExternalStore()", fiber), forceStoreRerender(fiber));
      });
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      inst = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
      } catch (error) {
        return true;
      }
    }
    function forceStoreRerender(fiber) {
      var root2 = enqueueConcurrentRenderForLane(fiber, 2);
      root2 !== null && scheduleUpdateOnFiber(root2, fiber, 2);
    }
    function mountStateImpl(initialState) {
      var hook = mountWorkInProgressHook();
      if (typeof initialState === "function") {
        var initialStateInitializer = initialState;
        initialState = initialStateInitializer();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            initialStateInitializer();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      }
      hook.memoizedState = hook.baseState = initialState;
      hook.queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      return hook;
    }
    function mountState(initialState) {
      initialState = mountStateImpl(initialState);
      var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
      queue.dispatch = dispatch;
      return [initialState.memoizedState, dispatch];
    }
    function mountOptimistic(passthrough) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = hook.baseState = passthrough;
      var queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
      };
      hook.queue = queue;
      hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber, true, queue);
      queue.dispatch = hook;
      return [passthrough, hook];
    }
    function updateOptimistic(passthrough, reducer) {
      var hook = updateWorkInProgressHook();
      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    }
    function updateOptimisticImpl(hook, current3, passthrough, reducer) {
      hook.baseState = passthrough;
      return updateReducerImpl(hook, currentHook, typeof reducer === "function" ? reducer : basicStateReducer);
    }
    function rerenderOptimistic(passthrough, reducer) {
      var hook = updateWorkInProgressHook();
      if (currentHook !== null)
        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
      hook.baseState = passthrough;
      return [passthrough, hook.queue.dispatch];
    }
    function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
      if (isRenderPhaseUpdate(fiber))
        throw Error("Cannot update form state while rendering.");
      fiber = actionQueue.action;
      if (fiber !== null) {
        var actionNode = {
          payload,
          action: fiber,
          next: null,
          isTransition: true,
          status: "pending",
          value: null,
          reason: null,
          listeners: [],
          then: function(listener) {
            actionNode.listeners.push(listener);
          }
        };
        ReactSharedInternals.T !== null ? setPendingState(true) : actionNode.isTransition = false;
        setState(actionNode);
        setPendingState = actionQueue.pending;
        setPendingState === null ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
      }
    }
    function runActionStateAction(actionQueue, node) {
      var { action, payload } = node, prevState = actionQueue.state;
      if (node.isTransition) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        currentTransition._updatedFibers = new Set;
        ReactSharedInternals.T = currentTransition;
        try {
          var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
          onStartTransitionFinish !== null && onStartTransitionFinish(currentTransition, returnValue);
          handleActionReturnValue(actionQueue, node, returnValue);
        } catch (error) {
          onActionError(actionQueue, node, error);
        } finally {
          prevTransition !== null && currentTransition.types !== null && (prevTransition.types !== null && prevTransition.types !== currentTransition.types && console.error("We expected inner Transitions to have transferred the outer types set and that you cannot add to the outer Transition while inside the inner.This is a bug in React."), prevTransition.types = currentTransition.types), ReactSharedInternals.T = prevTransition, prevTransition === null && currentTransition._updatedFibers && (actionQueue = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < actionQueue && console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."));
        }
      } else
        try {
          currentTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, currentTransition);
        } catch (error$4) {
          onActionError(actionQueue, node, error$4);
        }
    }
    function handleActionReturnValue(actionQueue, node, returnValue) {
      returnValue !== null && typeof returnValue === "object" && typeof returnValue.then === "function" ? (ReactSharedInternals.asyncTransitions++, returnValue.then(releaseAsyncTransition, releaseAsyncTransition), returnValue.then(function(nextState) {
        onActionSuccess(actionQueue, node, nextState);
      }, function(error) {
        return onActionError(actionQueue, node, error);
      }), node.isTransition || console.error("An async function with useActionState was called outside of a transition. This is likely not what you intended (for example, isPending will not update correctly). Either call the returned function inside startTransition, or pass it to an `action` or `formAction` prop.")) : onActionSuccess(actionQueue, node, returnValue);
    }
    function onActionSuccess(actionQueue, actionNode, nextState) {
      actionNode.status = "fulfilled";
      actionNode.value = nextState;
      notifyActionListeners(actionNode);
      actionQueue.state = nextState;
      actionNode = actionQueue.pending;
      actionNode !== null && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
    }
    function onActionError(actionQueue, actionNode, error) {
      var last = actionQueue.pending;
      actionQueue.pending = null;
      if (last !== null) {
        last = last.next;
        do
          actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
        while (actionNode !== last);
      }
      actionQueue.action = null;
    }
    function notifyActionListeners(actionNode) {
      actionNode = actionNode.listeners;
      for (var i = 0;i < actionNode.length; i++)
        (0, actionNode[i])();
    }
    function actionStateReducer(oldState, newState) {
      return newState;
    }
    function mountActionState(action, initialStateProp) {
      if (isHydrating) {
        var ssrFormState = workInProgressRoot.formState;
        if (ssrFormState !== null) {
          a: {
            var isMatching = currentlyRenderingFiber;
            if (isHydrating) {
              if (nextHydratableInstance) {
                b: {
                  var markerInstance = nextHydratableInstance;
                  for (var inRootOrSingleton = rootOrSingletonContext;markerInstance.nodeType !== 8; ) {
                    if (!inRootOrSingleton) {
                      markerInstance = null;
                      break b;
                    }
                    markerInstance = getNextHydratable(markerInstance.nextSibling);
                    if (markerInstance === null) {
                      markerInstance = null;
                      break b;
                    }
                  }
                  inRootOrSingleton = markerInstance.data;
                  markerInstance = inRootOrSingleton === FORM_STATE_IS_MATCHING || inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING ? markerInstance : null;
                }
                if (markerInstance) {
                  nextHydratableInstance = getNextHydratable(markerInstance.nextSibling);
                  isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
                  break a;
                }
              }
              throwOnHydrationMismatch(isMatching);
            }
            isMatching = false;
          }
          isMatching && (initialStateProp = ssrFormState[0]);
        }
      }
      ssrFormState = mountWorkInProgressHook();
      ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
      isMatching = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: actionStateReducer,
        lastRenderedState: initialStateProp
      };
      ssrFormState.queue = isMatching;
      ssrFormState = dispatchSetState.bind(null, currentlyRenderingFiber, isMatching);
      isMatching.dispatch = ssrFormState;
      isMatching = mountStateImpl(false);
      inRootOrSingleton = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber, false, isMatching.queue);
      isMatching = mountWorkInProgressHook();
      markerInstance = {
        state: initialStateProp,
        dispatch: null,
        action,
        pending: null
      };
      isMatching.queue = markerInstance;
      ssrFormState = dispatchActionState.bind(null, currentlyRenderingFiber, markerInstance, inRootOrSingleton, ssrFormState);
      markerInstance.dispatch = ssrFormState;
      isMatching.memoizedState = action;
      return [initialStateProp, ssrFormState, false];
    }
    function updateActionState(action) {
      var stateHook = updateWorkInProgressHook();
      return updateActionStateImpl(stateHook, currentHook, action);
    }
    function updateActionStateImpl(stateHook, currentStateHook, action) {
      currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0];
      stateHook = updateReducer(basicStateReducer)[0];
      if (typeof currentStateHook === "object" && currentStateHook !== null && typeof currentStateHook.then === "function")
        try {
          var state = useThenable(currentStateHook);
        } catch (x) {
          if (x === SuspenseException)
            throw SuspenseActionException;
          throw x;
        }
      else
        state = currentStateHook;
      currentStateHook = updateWorkInProgressHook();
      var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
      action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(HasEffect | Passive, { destroy: undefined }, actionStateActionEffect.bind(null, actionQueue, action), null));
      return [state, dispatch, stateHook];
    }
    function actionStateActionEffect(actionQueue, action) {
      actionQueue.action = action;
    }
    function rerenderActionState(action) {
      var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
      if (currentStateHook !== null)
        return updateActionStateImpl(stateHook, currentStateHook, action);
      updateWorkInProgressHook();
      stateHook = stateHook.memoizedState;
      currentStateHook = updateWorkInProgressHook();
      var dispatch = currentStateHook.queue.dispatch;
      currentStateHook.memoizedState = action;
      return [stateHook, dispatch, false];
    }
    function pushSimpleEffect(tag, inst, create, deps) {
      tag = { tag, create, deps, inst, next: null };
      inst = currentlyRenderingFiber.updateQueue;
      inst === null && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
      create = inst.lastEffect;
      create === null ? inst.lastEffect = tag.next = tag : (deps = create.next, create.next = tag, tag.next = deps, inst.lastEffect = tag);
      return tag;
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = { current: initialValue };
      return hook.memoizedState = initialValue;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = mountWorkInProgressHook();
      currentlyRenderingFiber.flags |= fiberFlags;
      hook.memoizedState = pushSimpleEffect(HasEffect | hookFlags, { destroy: undefined }, create, deps === undefined ? null : deps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      deps = deps === undefined ? null : deps;
      var inst = hook.memoizedState.inst;
      currentHook !== null && deps !== null && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(HasEffect | hookFlags, inst, create, deps));
    }
    function mountEffect(create, deps) {
      (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode ? mountEffectImpl(276826112, Passive, create, deps) : mountEffectImpl(8390656, Passive, create, deps);
    }
    function useEffectEventImpl(payload) {
      currentlyRenderingFiber.flags |= 4;
      var componentUpdateQueue = currentlyRenderingFiber.updateQueue;
      if (componentUpdateQueue === null)
        componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = componentUpdateQueue, componentUpdateQueue.events = [payload];
      else {
        var events = componentUpdateQueue.events;
        events === null ? componentUpdateQueue.events = [payload] : events.push(payload);
      }
    }
    function mountEvent(callback) {
      var hook = mountWorkInProgressHook(), ref = { impl: callback };
      hook.memoizedState = ref;
      return function() {
        if ((executionContext & RenderContext) !== NoContext)
          throw Error("A function wrapped in useEffectEvent can't be called during rendering.");
        return ref.impl.apply(undefined, arguments);
      };
    }
    function updateEvent(callback) {
      var ref = updateWorkInProgressHook().memoizedState;
      useEffectEventImpl({ ref, nextImpl: callback });
      return function() {
        if ((executionContext & RenderContext) !== NoContext)
          throw Error("A function wrapped in useEffectEvent can't be called during rendering.");
        return ref.impl.apply(undefined, arguments);
      };
    }
    function mountLayoutEffect(create, deps) {
      var fiberFlags = 4194308;
      (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
      return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
      if (typeof ref === "function") {
        create = create();
        var refCleanup = ref(create);
        return function() {
          typeof refCleanup === "function" ? refCleanup() : ref(null);
        };
      }
      if (ref !== null && ref !== undefined)
        return ref.hasOwnProperty("current") || console.error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(ref).join(", ") + "}"), create = create(), ref.current = create, function() {
          ref.current = null;
        };
    }
    function mountImperativeHandle(ref, create, deps) {
      typeof create !== "function" && console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
      deps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      var fiberFlags = 4194308;
      (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
      mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), deps);
    }
    function updateImperativeHandle(ref, create, deps) {
      typeof create !== "function" && console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
      deps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      updateEffectImpl(4, Layout, imperativeHandleEffect.bind(null, create, ref), deps);
    }
    function mountCallback(callback, deps) {
      mountWorkInProgressHook().memoizedState = [
        callback,
        deps === undefined ? null : deps
      ];
      return callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;
      if (deps !== null && areHookInputsEqual(deps, prevState[1]))
        return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = deps === undefined ? null : deps;
      var nextValue = nextCreate();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          nextCreate();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      hook.memoizedState = [nextValue, deps];
      return nextValue;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;
      if (deps !== null && areHookInputsEqual(deps, prevState[1]))
        return prevState[0];
      prevState = nextCreate();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          nextCreate();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      hook.memoizedState = [prevState, deps];
      return prevState;
    }
    function mountDeferredValue(value, initialValue) {
      var hook = mountWorkInProgressHook();
      return mountDeferredValueImpl(hook, value, initialValue);
    }
    function updateDeferredValue(value, initialValue) {
      var hook = updateWorkInProgressHook();
      return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    }
    function rerenderDeferredValue(value, initialValue) {
      var hook = updateWorkInProgressHook();
      return currentHook === null ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    }
    function mountDeferredValueImpl(hook, value, initialValue) {
      if (initialValue === undefined || (renderLanes & 1073741824) !== 0 && (workInProgressRootRenderLanes & 261930) === 0)
        return hook.memoizedState = value;
      hook.memoizedState = initialValue;
      hook = requestDeferredLane();
      currentlyRenderingFiber.lanes |= hook;
      workInProgressRootSkippedLanes |= hook;
      return initialValue;
    }
    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
      if (objectIs(value, prevValue))
        return value;
      if (currentTreeHiddenStackCursor.current !== null)
        return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
      if ((renderLanes & 42) === 0 || (renderLanes & 1073741824) !== 0 && (workInProgressRootRenderLanes & 261930) === 0)
        return didReceiveUpdate = true, hook.memoizedState = value;
      hook = requestDeferredLane();
      currentlyRenderingFiber.lanes |= hook;
      workInProgressRootSkippedLanes |= hook;
      return prevValue;
    }
    function releaseAsyncTransition() {
      ReactSharedInternals.asyncTransitions--;
    }
    function startTransition(fiber, queue, pendingState, finishedState, callback) {
      var previousPriority = ReactDOMSharedInternals.p;
      ReactDOMSharedInternals.p = previousPriority !== 0 && previousPriority < ContinuousEventPriority ? previousPriority : ContinuousEventPriority;
      var prevTransition = ReactSharedInternals.T, currentTransition = {};
      currentTransition._updatedFibers = new Set;
      ReactSharedInternals.T = currentTransition;
      dispatchOptimisticSetState(fiber, false, queue, pendingState);
      try {
        var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
        onStartTransitionFinish !== null && onStartTransitionFinish(currentTransition, returnValue);
        if (returnValue !== null && typeof returnValue === "object" && typeof returnValue.then === "function") {
          ReactSharedInternals.asyncTransitions++;
          returnValue.then(releaseAsyncTransition, releaseAsyncTransition);
          var thenableForFinishedState = chainThenableValue(returnValue, finishedState);
          dispatchSetStateInternal(fiber, queue, thenableForFinishedState, requestUpdateLane(fiber));
        } else
          dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber));
      } catch (error) {
        dispatchSetStateInternal(fiber, queue, { then: function() {}, status: "rejected", reason: error }, requestUpdateLane(fiber));
      } finally {
        ReactDOMSharedInternals.p = previousPriority, prevTransition !== null && currentTransition.types !== null && (prevTransition.types !== null && prevTransition.types !== currentTransition.types && console.error("We expected inner Transitions to have transferred the outer types set and that you cannot add to the outer Transition while inside the inner.This is a bug in React."), prevTransition.types = currentTransition.types), ReactSharedInternals.T = prevTransition, prevTransition === null && currentTransition._updatedFibers && (fiber = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < fiber && console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."));
      }
    }
    function startHostTransition(formFiber, pendingState, action, formData) {
      if (formFiber.tag !== 5)
        throw Error("Expected the form instance to be a HostComponent. This is a bug in React.");
      var queue = ensureFormComponentIsStateful(formFiber).queue;
      startHostActionTimer(formFiber);
      startTransition(formFiber, queue, pendingState, NotPendingTransition, action === null ? noop : function() {
        requestFormReset$1(formFiber);
        return action(formData);
      });
    }
    function ensureFormComponentIsStateful(formFiber) {
      var existingStateHook = formFiber.memoizedState;
      if (existingStateHook !== null)
        return existingStateHook;
      existingStateHook = {
        memoizedState: NotPendingTransition,
        baseState: NotPendingTransition,
        baseQueue: null,
        queue: {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: NotPendingTransition
        },
        next: null
      };
      var initialResetState = {};
      existingStateHook.next = {
        memoizedState: initialResetState,
        baseState: initialResetState,
        baseQueue: null,
        queue: {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialResetState
        },
        next: null
      };
      formFiber.memoizedState = existingStateHook;
      formFiber = formFiber.alternate;
      formFiber !== null && (formFiber.memoizedState = existingStateHook);
      return existingStateHook;
    }
    function requestFormReset$1(formFiber) {
      ReactSharedInternals.T === null && console.error("requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition.");
      var stateHook = ensureFormComponentIsStateful(formFiber);
      stateHook.next === null && (stateHook = formFiber.alternate.memoizedState);
      dispatchSetStateInternal(formFiber, stateHook.next.queue, {}, requestUpdateLane(formFiber));
    }
    function mountTransition() {
      var stateHook = mountStateImpl(false);
      stateHook = startTransition.bind(null, currentlyRenderingFiber, stateHook.queue, true, false);
      mountWorkInProgressHook().memoizedState = stateHook;
      return [false, stateHook];
    }
    function updateTransition() {
      var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
      return [
        typeof booleanOrThenable === "boolean" ? booleanOrThenable : useThenable(booleanOrThenable),
        start
      ];
    }
    function rerenderTransition() {
      var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
      return [
        typeof booleanOrThenable === "boolean" ? booleanOrThenable : useThenable(booleanOrThenable),
        start
      ];
    }
    function useHostTransitionStatus() {
      return readContext(HostTransitionContext);
    }
    function mountId() {
      var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
      if (isHydrating) {
        var treeId = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        treeId = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + treeId;
        identifierPrefix = "_" + identifierPrefix + "R_" + treeId;
        treeId = localIdCounter++;
        0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
        identifierPrefix += "_";
      } else
        treeId = globalClientIdCounter++, identifierPrefix = "_" + identifierPrefix + "r_" + treeId.toString(32) + "_";
      return hook.memoizedState = identifierPrefix;
    }
    function mountRefresh() {
      return mountWorkInProgressHook().memoizedState = refreshCache.bind(null, currentlyRenderingFiber);
    }
    function refreshCache(fiber, seedKey) {
      for (var provider = fiber.return;provider !== null; ) {
        switch (provider.tag) {
          case 24:
          case 3:
            var lane = requestUpdateLane(provider), refreshUpdate = createUpdate(lane), root2 = enqueueUpdate(provider, refreshUpdate, lane);
            root2 !== null && (startUpdateTimerByLane(lane, "refresh()", fiber), scheduleUpdateOnFiber(root2, provider, lane), entangleTransitions(root2, provider, lane));
            fiber = createCache();
            seedKey !== null && seedKey !== undefined && root2 !== null && console.error("The seed argument is not enabled outside experimental channels.");
            refreshUpdate.payload = { cache: fiber };
            return;
        }
        provider = provider.return;
      }
    }
    function dispatchReducerAction(fiber, queue, action) {
      var args = arguments;
      typeof args[3] === "function" && console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      args = requestUpdateLane(fiber);
      var update = {
        lane: args,
        revertLane: 0,
        gesture: null,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, update) : (update = enqueueConcurrentHookUpdate(fiber, queue, update, args), update !== null && (startUpdateTimerByLane(args, "dispatch()", fiber), scheduleUpdateOnFiber(update, fiber, args), entangleTransitionUpdate(update, queue, args)));
    }
    function dispatchSetState(fiber, queue, action) {
      var args = arguments;
      typeof args[3] === "function" && console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      args = requestUpdateLane(fiber);
      dispatchSetStateInternal(fiber, queue, action, args) && startUpdateTimerByLane(args, "setState()", fiber);
    }
    function dispatchSetStateInternal(fiber, queue, action, lane) {
      var update = {
        lane,
        revertLane: 0,
        gesture: null,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber))
        enqueueRenderPhaseUpdate(queue, update);
      else {
        var alternate = fiber.alternate;
        if (fiber.lanes === 0 && (alternate === null || alternate.lanes === 0) && (alternate = queue.lastRenderedReducer, alternate !== null)) {
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
            update.hasEagerState = true;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState))
              return enqueueUpdate$1(fiber, queue, update, 0), workInProgressRoot === null && finishQueueingConcurrentUpdates(), false;
          } catch (error) {} finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        }
        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (action !== null)
          return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
      }
      return false;
    }
    function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
      ReactSharedInternals.T === null && currentEntangledLane === 0 && console.error("An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition.");
      action = {
        lane: 2,
        revertLane: requestTransitionLane(),
        gesture: null,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        if (throwIfDuringRender)
          throw Error("Cannot update optimistic state while rendering.");
        console.error("Cannot call startTransition while rendering.");
      } else
        throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2), throwIfDuringRender !== null && (startUpdateTimerByLane(2, "setOptimistic()", fiber), scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2));
    }
    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return fiber === currentlyRenderingFiber || alternate !== null && alternate === currentlyRenderingFiber;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
      var pending = queue.pending;
      pending === null ? update.next = update : (update.next = pending.next, pending.next = update);
      queue.pending = update;
    }
    function entangleTransitionUpdate(root2, queue, lane) {
      if ((lane & 4194048) !== 0) {
        var queueLanes = queue.lanes;
        queueLanes &= root2.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root2, lane);
      }
    }
    function warnOnInvalidCallback(callback) {
      if (callback !== null && typeof callback !== "function") {
        var key = String(callback);
        didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.", callback));
      }
    }
    function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
      if (workInProgress2.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);
        try {
          partialState = getDerivedStateFromProps(nextProps, prevState);
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      partialState === undefined && (ctor = getComponentNameFromType(ctor) || "Component", didWarnAboutUndefinedDerivedState.has(ctor) || (didWarnAboutUndefinedDerivedState.add(ctor), console.error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", ctor)));
      prevState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
      workInProgress2.memoizedState = prevState;
      workInProgress2.lanes === 0 && (workInProgress2.updateQueue.baseState = prevState);
    }
    function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress2.stateNode;
      if (typeof instance.shouldComponentUpdate === "function") {
        oldProps = instance.shouldComponentUpdate(newProps, newState, nextContext);
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            oldProps = instance.shouldComponentUpdate(newProps, newState, nextContext);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        oldProps === undefined && console.error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
        return oldProps;
      }
      return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
    }
    function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
      var oldState = instance.state;
      typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps(newProps, nextContext);
      typeof instance.UNSAFE_componentWillReceiveProps === "function" && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      instance.state !== oldState && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Component", didWarnAboutStateAssignmentForComponent.has(workInProgress2) || (didWarnAboutStateAssignmentForComponent.add(workInProgress2), console.error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", workInProgress2)), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
    }
    function resolveClassComponentProps(Component, baseProps) {
      var newProps = baseProps;
      if ("ref" in baseProps) {
        newProps = {};
        for (var propName in baseProps)
          propName !== "ref" && (newProps[propName] = baseProps[propName]);
      }
      if (Component = Component.defaultProps) {
        newProps === baseProps && (newProps = assign({}, newProps));
        for (var _propName in Component)
          newProps[_propName] === undefined && (newProps[_propName] = Component[_propName]);
      }
      return newProps;
    }
    function defaultOnUncaughtError(error) {
      reportGlobalError(error);
      console.warn(`%s

%s
`, componentName ? "An error occurred in the <" + componentName + "> component." : "An error occurred in one of your React components.", `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://react.dev/link/error-boundaries to learn more about error boundaries.`);
    }
    function defaultOnCaughtError(error) {
      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component." : "The above error occurred in one of your React components.", recreateMessage = "React will try to recreate this component tree from scratch using the error boundary you provided, " + ((errorBoundaryName || "Anonymous") + ".");
      if (typeof error === "object" && error !== null && typeof error.environmentName === "string") {
        var JSCompiler_inline_result = error.environmentName;
        error = [
          `%o

%s

%s
`,
          error,
          componentNameMessage,
          recreateMessage
        ].slice(0);
        typeof error[0] === "string" ? error.splice(0, 1, badgeFormat + " " + error[0], badgeStyle, pad + JSCompiler_inline_result + pad, resetStyle) : error.splice(0, 0, badgeFormat, badgeStyle, pad + JSCompiler_inline_result + pad, resetStyle);
        error.unshift(console);
        JSCompiler_inline_result = bind.apply(console.error, error);
        JSCompiler_inline_result();
      } else
        console.error(`%o

%s

%s
`, error, componentNameMessage, recreateMessage);
    }
    function defaultOnRecoverableError(error) {
      reportGlobalError(error);
    }
    function logUncaughtError(root2, errorInfo) {
      try {
        componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
        errorBoundaryName = null;
        var error = errorInfo.value;
        if (ReactSharedInternals.actQueue !== null)
          ReactSharedInternals.thrownErrors.push(error);
        else {
          var onUncaughtError = root2.onUncaughtError;
          onUncaughtError(error, { componentStack: errorInfo.stack });
        }
      } catch (e$5) {
        setTimeout(function() {
          throw e$5;
        });
      }
    }
    function logCaughtError(root2, boundary, errorInfo) {
      try {
        componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
        errorBoundaryName = getComponentNameFromFiber(boundary);
        var onCaughtError = root2.onCaughtError;
        onCaughtError(errorInfo.value, {
          componentStack: errorInfo.stack,
          errorBoundary: boundary.tag === 1 ? boundary.stateNode : null
        });
      } catch (e$6) {
        setTimeout(function() {
          throw e$6;
        });
      }
    }
    function createRootErrorUpdate(root2, errorInfo, lane) {
      lane = createUpdate(lane);
      lane.tag = CaptureUpdate;
      lane.payload = { element: null };
      lane.callback = function() {
        runWithFiberInDEV(errorInfo.source, logUncaughtError, root2, errorInfo);
      };
      return lane;
    }
    function createClassErrorUpdate(lane) {
      lane = createUpdate(lane);
      lane.tag = CaptureUpdate;
      return lane;
    }
    function initializeClassErrorUpdate(update, root2, fiber, errorInfo) {
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if (typeof getDerivedStateFromError === "function") {
        var error = errorInfo.value;
        update.payload = function() {
          return getDerivedStateFromError(error);
        };
        update.callback = function() {
          markFailedErrorBoundaryForHotReloading(fiber);
          runWithFiberInDEV(errorInfo.source, logCaughtError, root2, fiber, errorInfo);
        };
      }
      var inst = fiber.stateNode;
      inst !== null && typeof inst.componentDidCatch === "function" && (update.callback = function() {
        markFailedErrorBoundaryForHotReloading(fiber);
        runWithFiberInDEV(errorInfo.source, logCaughtError, root2, fiber, errorInfo);
        typeof getDerivedStateFromError !== "function" && (legacyErrorBoundariesThatAlreadyFailed === null ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
        callComponentDidCatchInDEV(this, errorInfo);
        typeof getDerivedStateFromError === "function" || (fiber.lanes & 2) === 0 && console.error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
      });
    }
    function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
      sourceFiber.flags |= 32768;
      isDevToolsPresent && restorePendingUpdaters(root2, rootRenderLanes);
      if (value !== null && typeof value === "object" && typeof value.then === "function") {
        returnFiber = sourceFiber.alternate;
        returnFiber !== null && propagateParentContextChanges(returnFiber, sourceFiber, rootRenderLanes, true);
        isHydrating && (didSuspendOrErrorDEV = true);
        sourceFiber = suspenseHandlerStackCursor.current;
        if (sourceFiber !== null) {
          switch (sourceFiber.tag) {
            case 31:
            case 13:
              return shellBoundary === null ? renderDidSuspendDelayIfPossible() : sourceFiber.alternate === null && workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, returnFiber === null ? sourceFiber.updateQueue = new Set([value]) : returnFiber.add(value), attachPingListener(root2, value, rootRenderLanes)), false;
            case 22:
              return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, returnFiber === null ? (returnFiber = {
                transitions: null,
                markerInstances: null,
                retryQueue: new Set([value])
              }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, sourceFiber === null ? returnFiber.retryQueue = new Set([value]) : sourceFiber.add(value)), attachPingListener(root2, value, rootRenderLanes)), false;
          }
          throw Error("Unexpected Suspense handler tag (" + sourceFiber.tag + "). This is a bug in React.");
        }
        attachPingListener(root2, value, rootRenderLanes);
        renderDidSuspendDelayIfPossible();
        return false;
      }
      if (isHydrating)
        return didSuspendOrErrorDEV = true, returnFiber = suspenseHandlerStackCursor.current, returnFiber !== null ? ((returnFiber.flags & 65536) === 0 && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && queueHydrationError(createCapturedValueAtFiber(Error("There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.", { cause: value }), sourceFiber))) : (value !== HydrationMismatchException && queueHydrationError(createCapturedValueAtFiber(Error("There was an error while hydrating but React was able to recover by instead client rendering the entire root.", { cause: value }), sourceFiber)), root2 = root2.current.alternate, root2.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root2.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(root2.stateNode, value, rootRenderLanes), enqueueCapturedUpdate(root2, rootRenderLanes), workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored)), false;
      var error = createCapturedValueAtFiber(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.", { cause: value }), sourceFiber);
      workInProgressRootConcurrentErrors === null ? workInProgressRootConcurrentErrors = [error] : workInProgressRootConcurrentErrors.push(error);
      workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored);
      if (returnFiber === null)
        return true;
      value = createCapturedValueAtFiber(value, sourceFiber);
      sourceFiber = returnFiber;
      do {
        switch (sourceFiber.tag) {
          case 3:
            return sourceFiber.flags |= 65536, root2 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root2, root2 = createRootErrorUpdate(sourceFiber.stateNode, value, root2), enqueueCapturedUpdate(sourceFiber, root2), false;
          case 1:
            if (returnFiber = sourceFiber.type, error = sourceFiber.stateNode, (sourceFiber.flags & 128) === 0 && (typeof returnFiber.getDerivedStateFromError === "function" || error !== null && typeof error.componentDidCatch === "function" && (legacyErrorBoundariesThatAlreadyFailed === null || !legacyErrorBoundariesThatAlreadyFailed.has(error))))
              return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(rootRenderLanes, root2, sourceFiber, value), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
        }
        sourceFiber = sourceFiber.return;
      } while (sourceFiber !== null);
      return false;
    }
    function reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2) {
      workInProgress2.child = current3 === null ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(workInProgress2, current3.child, nextChildren, renderLanes2);
    }
    function updateForwardRef(current3, workInProgress2, Component, nextProps, renderLanes2) {
      Component = Component.render;
      var ref = workInProgress2.ref;
      if ("ref" in nextProps) {
        var propsWithoutRef = {};
        for (var key in nextProps)
          key !== "ref" && (propsWithoutRef[key] = nextProps[key]);
      } else
        propsWithoutRef = nextProps;
      prepareToReadContext(workInProgress2);
      nextProps = renderWithHooks(current3, workInProgress2, Component, propsWithoutRef, ref, renderLanes2);
      key = checkDidRenderIdHook();
      if (current3 !== null && !didReceiveUpdate)
        return bailoutHooks(current3, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
      isHydrating && key && pushMaterializedTreeId(workInProgress2);
      workInProgress2.flags |= 1;
      reconcileChildren(current3, workInProgress2, nextProps, renderLanes2);
      return workInProgress2.child;
    }
    function updateMemoComponent(current3, workInProgress2, Component, nextProps, renderLanes2) {
      if (current3 === null) {
        var type = Component.type;
        if (typeof type === "function" && !shouldConstruct(type) && type.defaultProps === undefined && Component.compare === null)
          return Component = resolveFunctionForHotReloading(type), workInProgress2.tag = 15, workInProgress2.type = Component, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(current3, workInProgress2, Component, nextProps, renderLanes2);
        current3 = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
        current3.ref = workInProgress2.ref;
        current3.return = workInProgress2;
        return workInProgress2.child = current3;
      }
      type = current3.child;
      if (!checkScheduledUpdateOrContext(current3, renderLanes2)) {
        var prevProps = type.memoizedProps;
        Component = Component.compare;
        Component = Component !== null ? Component : shallowEqual;
        if (Component(prevProps, nextProps) && current3.ref === workInProgress2.ref)
          return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
      }
      workInProgress2.flags |= 1;
      current3 = createWorkInProgress(type, nextProps);
      current3.ref = workInProgress2.ref;
      current3.return = workInProgress2;
      return workInProgress2.child = current3;
    }
    function updateSimpleMemoComponent(current3, workInProgress2, Component, nextProps, renderLanes2) {
      if (current3 !== null) {
        var prevProps = current3.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current3.ref === workInProgress2.ref && workInProgress2.type === current3.type)
          if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current3, renderLanes2))
            (current3.flags & 131072) !== 0 && (didReceiveUpdate = true);
          else
            return workInProgress2.lanes = current3.lanes, bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
      }
      return updateFunctionComponent(current3, workInProgress2, Component, nextProps, renderLanes2);
    }
    function updateOffscreenComponent(current3, workInProgress2, renderLanes2, nextProps) {
      var nextChildren = nextProps.children, prevState = current3 !== null ? current3.memoizedState : null;
      current3 === null && workInProgress2.stateNode === null && (workInProgress2.stateNode = {
        _visibility: OffscreenVisible,
        _pendingMarkers: null,
        _retryCache: null,
        _transitions: null
      });
      if (nextProps.mode === "hidden") {
        if ((workInProgress2.flags & 128) !== 0) {
          prevState = prevState !== null ? prevState.baseLanes | renderLanes2 : renderLanes2;
          if (current3 !== null) {
            nextProps = workInProgress2.child = current3.child;
            for (nextChildren = 0;nextProps !== null; )
              nextChildren = nextChildren | nextProps.lanes | nextProps.childLanes, nextProps = nextProps.sibling;
            nextProps = nextChildren & ~prevState;
          } else
            nextProps = 0, workInProgress2.child = null;
          return deferHiddenOffscreenComponent(current3, workInProgress2, prevState, renderLanes2, nextProps);
        }
        if ((renderLanes2 & 536870912) !== 0)
          workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, current3 !== null && pushTransition(workInProgress2, prevState !== null ? prevState.cachePool : null), prevState !== null ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(workInProgress2), pushOffscreenSuspenseHandler(workInProgress2);
        else
          return nextProps = workInProgress2.lanes = 536870912, deferHiddenOffscreenComponent(current3, workInProgress2, prevState !== null ? prevState.baseLanes | renderLanes2 : renderLanes2, renderLanes2, nextProps);
      } else
        prevState !== null ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.memoizedState = null) : (current3 !== null && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(workInProgress2), reuseSuspenseHandlerOnStack(workInProgress2));
      reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function bailoutOffscreenComponent(current3, workInProgress2) {
      current3 !== null && current3.tag === 22 || workInProgress2.stateNode !== null || (workInProgress2.stateNode = {
        _visibility: OffscreenVisible,
        _pendingMarkers: null,
        _retryCache: null,
        _transitions: null
      });
      return workInProgress2.sibling;
    }
    function deferHiddenOffscreenComponent(current3, workInProgress2, nextBaseLanes, renderLanes2, remainingChildLanes) {
      var JSCompiler_inline_result = peekCacheFromPool();
      JSCompiler_inline_result = JSCompiler_inline_result === null ? null : {
        parent: CacheContext._currentValue,
        pool: JSCompiler_inline_result
      };
      workInProgress2.memoizedState = {
        baseLanes: nextBaseLanes,
        cachePool: JSCompiler_inline_result
      };
      current3 !== null && pushTransition(workInProgress2, null);
      reuseHiddenContextOnStack(workInProgress2);
      pushOffscreenSuspenseHandler(workInProgress2);
      current3 !== null && propagateParentContextChanges(current3, workInProgress2, renderLanes2, true);
      workInProgress2.childLanes = remainingChildLanes;
      return null;
    }
    function mountActivityChildren(workInProgress2, nextProps) {
      var hiddenProp = nextProps.hidden;
      hiddenProp !== undefined && console.error(`<Activity> doesn't accept a hidden prop. Use mode="hidden" instead.
- <Activity %s>
+ <Activity %s>`, hiddenProp === true ? "hidden" : hiddenProp === false ? "hidden={false}" : "hidden={...}", hiddenProp ? 'mode="hidden"' : 'mode="visible"');
      nextProps = mountWorkInProgressOffscreenFiber({ mode: nextProps.mode, children: nextProps.children }, workInProgress2.mode);
      nextProps.ref = workInProgress2.ref;
      workInProgress2.child = nextProps;
      nextProps.return = workInProgress2;
      return nextProps;
    }
    function retryActivityComponentWithoutHydrating(current3, workInProgress2, renderLanes2) {
      reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
      current3 = mountActivityChildren(workInProgress2, workInProgress2.pendingProps);
      current3.flags |= 2;
      popSuspenseHandler(workInProgress2);
      workInProgress2.memoizedState = null;
      return current3;
    }
    function updateActivityComponent(current3, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps, didSuspend = (workInProgress2.flags & 128) !== 0;
      workInProgress2.flags &= -129;
      if (current3 === null) {
        if (isHydrating) {
          if (nextProps.mode === "hidden")
            return current3 = mountActivityChildren(workInProgress2, nextProps), workInProgress2.lanes = 536870912, bailoutOffscreenComponent(null, current3);
          pushDehydratedActivitySuspenseHandler(workInProgress2);
          (current3 = nextHydratableInstance) ? (renderLanes2 = canHydrateHydrationBoundary(current3, rootOrSingletonContext), renderLanes2 = renderLanes2 !== null && renderLanes2.data === ACTIVITY_START_DATA ? renderLanes2 : null, renderLanes2 !== null && (nextProps = {
            dehydrated: renderLanes2,
            treeContext: getSuspendedTreeContext(),
            retryLane: 536870912,
            hydrationErrors: null
          }, workInProgress2.memoizedState = nextProps, nextProps = createFiberFromDehydratedFragment(renderLanes2), nextProps.return = workInProgress2, workInProgress2.child = nextProps, hydrationParentFiber = workInProgress2, nextHydratableInstance = null)) : renderLanes2 = null;
          if (renderLanes2 === null)
            throw warnNonHydratedInstance(workInProgress2, current3), throwOnHydrationMismatch(workInProgress2);
          workInProgress2.lanes = 536870912;
          return null;
        }
        return mountActivityChildren(workInProgress2, nextProps);
      }
      var prevState = current3.memoizedState;
      if (prevState !== null) {
        var activityInstance = prevState.dehydrated;
        pushDehydratedActivitySuspenseHandler(workInProgress2);
        if (didSuspend)
          if (workInProgress2.flags & 256)
            workInProgress2.flags &= -257, workInProgress2 = retryActivityComponentWithoutHydrating(current3, workInProgress2, renderLanes2);
          else if (workInProgress2.memoizedState !== null)
            workInProgress2.child = current3.child, workInProgress2.flags |= 128, workInProgress2 = null;
          else
            throw Error("Client rendering an Activity suspended it again. This is a bug in React.");
        else if (warnIfHydrating(), (renderLanes2 & 536870912) !== 0 && markRenderDerivedCause(workInProgress2), didReceiveUpdate || propagateParentContextChanges(current3, workInProgress2, renderLanes2, false), didSuspend = (renderLanes2 & current3.childLanes) !== 0, didReceiveUpdate || didSuspend) {
          nextProps = workInProgressRoot;
          if (nextProps !== null && (activityInstance = getBumpedLaneForHydration(nextProps, renderLanes2), activityInstance !== 0 && activityInstance !== prevState.retryLane))
            throw prevState.retryLane = activityInstance, enqueueConcurrentRenderForLane(current3, activityInstance), scheduleUpdateOnFiber(nextProps, current3, activityInstance), SelectiveHydrationException;
          renderDidSuspendDelayIfPossible();
          workInProgress2 = retryActivityComponentWithoutHydrating(current3, workInProgress2, renderLanes2);
        } else
          current3 = prevState.treeContext, nextHydratableInstance = getNextHydratable(activityInstance.nextSibling), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, rootOrSingletonContext = false, current3 !== null && restoreSuspendedTreeContext(workInProgress2, current3), workInProgress2 = mountActivityChildren(workInProgress2, nextProps), workInProgress2.flags |= 4096;
        return workInProgress2;
      }
      prevState = current3.child;
      nextProps = { mode: nextProps.mode, children: nextProps.children };
      (renderLanes2 & 536870912) !== 0 && (renderLanes2 & current3.lanes) !== 0 && markRenderDerivedCause(workInProgress2);
      current3 = createWorkInProgress(prevState, nextProps);
      current3.ref = workInProgress2.ref;
      workInProgress2.child = current3;
      current3.return = workInProgress2;
      return current3;
    }
    function markRef(current3, workInProgress2) {
      var ref = workInProgress2.ref;
      if (ref === null)
        current3 !== null && current3.ref !== null && (workInProgress2.flags |= 4194816);
      else {
        if (typeof ref !== "function" && typeof ref !== "object")
          throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");
        if (current3 === null || current3.ref !== ref)
          workInProgress2.flags |= 4194816;
      }
    }
    function updateFunctionComponent(current3, workInProgress2, Component, nextProps, renderLanes2) {
      if (Component.prototype && typeof Component.prototype.render === "function") {
        var componentName2 = getComponentNameFromType(Component) || "Unknown";
        didWarnAboutBadClass[componentName2] || (console.error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName2, componentName2), didWarnAboutBadClass[componentName2] = true);
      }
      workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
      current3 === null && (validateFunctionComponentInDev(workInProgress2, workInProgress2.type), Component.contextTypes && (componentName2 = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypes[componentName2] || (didWarnAboutContextTypes[componentName2] = true, console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)", componentName2))));
      prepareToReadContext(workInProgress2);
      Component = renderWithHooks(current3, workInProgress2, Component, nextProps, undefined, renderLanes2);
      nextProps = checkDidRenderIdHook();
      if (current3 !== null && !didReceiveUpdate)
        return bailoutHooks(current3, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
      isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
      workInProgress2.flags |= 1;
      reconcileChildren(current3, workInProgress2, Component, renderLanes2);
      return workInProgress2.child;
    }
    function replayFunctionComponent(current3, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
      prepareToReadContext(workInProgress2);
      hookTypesUpdateIndexDev = -1;
      ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress2.type;
      workInProgress2.updateQueue = null;
      nextProps = renderWithHooksAgain(workInProgress2, Component, nextProps, secondArg);
      finishRenderingHooks(current3, workInProgress2);
      Component = checkDidRenderIdHook();
      if (current3 !== null && !didReceiveUpdate)
        return bailoutHooks(current3, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
      isHydrating && Component && pushMaterializedTreeId(workInProgress2);
      workInProgress2.flags |= 1;
      reconcileChildren(current3, workInProgress2, nextProps, renderLanes2);
      return workInProgress2.child;
    }
    function updateClassComponent(current3, workInProgress2, Component, nextProps, renderLanes2) {
      switch (shouldErrorImpl(workInProgress2)) {
        case false:
          var _instance = workInProgress2.stateNode, state = new workInProgress2.type(workInProgress2.memoizedProps, _instance.context).state;
          _instance.updater.enqueueSetState(_instance, state, null);
          break;
        case true:
          workInProgress2.flags |= 128;
          workInProgress2.flags |= 65536;
          _instance = Error("Simulated error coming from DevTools");
          var lane = renderLanes2 & -renderLanes2;
          workInProgress2.lanes |= lane;
          state = workInProgressRoot;
          if (state === null)
            throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          lane = createClassErrorUpdate(lane);
          initializeClassErrorUpdate(lane, state, workInProgress2, createCapturedValueAtFiber(_instance, workInProgress2));
          enqueueCapturedUpdate(workInProgress2, lane);
      }
      prepareToReadContext(workInProgress2);
      if (workInProgress2.stateNode === null) {
        state = emptyContextObject;
        _instance = Component.contextType;
        "contextType" in Component && _instance !== null && (_instance === undefined || _instance.$$typeof !== REACT_CONTEXT_TYPE) && !didWarnAboutInvalidateContextType.has(Component) && (didWarnAboutInvalidateContextType.add(Component), lane = _instance === undefined ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof _instance !== "object" ? " However, it is set to a " + typeof _instance + "." : _instance.$$typeof === REACT_CONSUMER_TYPE ? " Did you accidentally pass the Context.Consumer instead?" : " However, it is set to an object with keys {" + Object.keys(_instance).join(", ") + "}.", console.error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(Component) || "Component", lane));
        typeof _instance === "object" && _instance !== null && (state = readContext(_instance));
        _instance = new Component(nextProps, state);
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            _instance = new Component(nextProps, state);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        state = workInProgress2.memoizedState = _instance.state !== null && _instance.state !== undefined ? _instance.state : null;
        _instance.updater = classComponentUpdater;
        workInProgress2.stateNode = _instance;
        _instance._reactInternals = workInProgress2;
        _instance._reactInternalInstance = fakeInternalInstance;
        typeof Component.getDerivedStateFromProps === "function" && state === null && (state = getComponentNameFromType(Component) || "Component", didWarnAboutUninitializedState.has(state) || (didWarnAboutUninitializedState.add(state), console.error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", state, _instance.state === null ? "null" : "undefined", state)));
        if (typeof Component.getDerivedStateFromProps === "function" || typeof _instance.getSnapshotBeforeUpdate === "function") {
          var foundWillUpdateName = lane = state = null;
          typeof _instance.componentWillMount === "function" && _instance.componentWillMount.__suppressDeprecationWarning !== true ? state = "componentWillMount" : typeof _instance.UNSAFE_componentWillMount === "function" && (state = "UNSAFE_componentWillMount");
          typeof _instance.componentWillReceiveProps === "function" && _instance.componentWillReceiveProps.__suppressDeprecationWarning !== true ? lane = "componentWillReceiveProps" : typeof _instance.UNSAFE_componentWillReceiveProps === "function" && (lane = "UNSAFE_componentWillReceiveProps");
          typeof _instance.componentWillUpdate === "function" && _instance.componentWillUpdate.__suppressDeprecationWarning !== true ? foundWillUpdateName = "componentWillUpdate" : typeof _instance.UNSAFE_componentWillUpdate === "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate");
          if (state !== null || lane !== null || foundWillUpdateName !== null) {
            _instance = getComponentNameFromType(Component) || "Component";
            var newApiName = typeof Component.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance), console.error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://react.dev/link/unsafe-component-lifecycles`, _instance, newApiName, state !== null ? `
  ` + state : "", lane !== null ? `
  ` + lane : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
          }
        }
        _instance = workInProgress2.stateNode;
        state = getComponentNameFromType(Component) || "Component";
        _instance.render || (Component.prototype && typeof Component.prototype.render === "function" ? console.error("No `render` method found on the %s instance: did you accidentally return an object from the constructor?", state) : console.error("No `render` method found on the %s instance: you may have forgotten to define `render`.", state));
        !_instance.getInitialState || _instance.getInitialState.isReactClassApproved || _instance.state || console.error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", state);
        _instance.getDefaultProps && !_instance.getDefaultProps.isReactClassApproved && console.error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", state);
        _instance.contextType && console.error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", state);
        Component.childContextTypes && !didWarnAboutChildContextTypes.has(Component) && (didWarnAboutChildContextTypes.add(Component), console.error("%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)", state));
        Component.contextTypes && !didWarnAboutContextTypes$1.has(Component) && (didWarnAboutContextTypes$1.add(Component), console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)", state));
        typeof _instance.componentShouldUpdate === "function" && console.error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", state);
        Component.prototype && Component.prototype.isPureReactComponent && typeof _instance.shouldComponentUpdate !== "undefined" && console.error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(Component) || "A pure component");
        typeof _instance.componentDidUnmount === "function" && console.error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", state);
        typeof _instance.componentDidReceiveProps === "function" && console.error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", state);
        typeof _instance.componentWillRecieveProps === "function" && console.error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", state);
        typeof _instance.UNSAFE_componentWillRecieveProps === "function" && console.error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", state);
        lane = _instance.props !== nextProps;
        _instance.props !== undefined && lane && console.error("When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", state);
        _instance.defaultProps && console.error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", state, state);
        typeof _instance.getSnapshotBeforeUpdate !== "function" || typeof _instance.componentDidUpdate === "function" || didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) || (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component), console.error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(Component)));
        typeof _instance.getDerivedStateFromProps === "function" && console.error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", state);
        typeof _instance.getDerivedStateFromError === "function" && console.error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", state);
        typeof Component.getSnapshotBeforeUpdate === "function" && console.error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", state);
        (lane = _instance.state) && (typeof lane !== "object" || isArrayImpl(lane)) && console.error("%s.state: must be set to an object or null", state);
        typeof _instance.getChildContext === "function" && typeof Component.childContextTypes !== "object" && console.error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", state);
        _instance = workInProgress2.stateNode;
        _instance.props = nextProps;
        _instance.state = workInProgress2.memoizedState;
        _instance.refs = {};
        initializeUpdateQueue(workInProgress2);
        state = Component.contextType;
        _instance.context = typeof state === "object" && state !== null ? readContext(state) : emptyContextObject;
        _instance.state === nextProps && (state = getComponentNameFromType(Component) || "Component", didWarnAboutDirectlyAssigningPropsToState.has(state) || (didWarnAboutDirectlyAssigningPropsToState.add(state), console.error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", state)));
        workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, _instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, _instance);
        _instance.state = workInProgress2.memoizedState;
        state = Component.getDerivedStateFromProps;
        typeof state === "function" && (applyDerivedStateFromProps(workInProgress2, Component, state, nextProps), _instance.state = workInProgress2.memoizedState);
        typeof Component.getDerivedStateFromProps === "function" || typeof _instance.getSnapshotBeforeUpdate === "function" || typeof _instance.UNSAFE_componentWillMount !== "function" && typeof _instance.componentWillMount !== "function" || (state = _instance.state, typeof _instance.componentWillMount === "function" && _instance.componentWillMount(), typeof _instance.UNSAFE_componentWillMount === "function" && _instance.UNSAFE_componentWillMount(), state !== _instance.state && (console.error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component"), classComponentUpdater.enqueueReplaceState(_instance, _instance.state, null)), processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), _instance.state = workInProgress2.memoizedState);
        typeof _instance.componentDidMount === "function" && (workInProgress2.flags |= 4194308);
        (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728);
        _instance = true;
      } else if (current3 === null) {
        _instance = workInProgress2.stateNode;
        var unresolvedOldProps = workInProgress2.memoizedProps;
        lane = resolveClassComponentProps(Component, unresolvedOldProps);
        _instance.props = lane;
        var oldContext = _instance.context;
        foundWillUpdateName = Component.contextType;
        state = emptyContextObject;
        typeof foundWillUpdateName === "object" && foundWillUpdateName !== null && (state = readContext(foundWillUpdateName));
        newApiName = Component.getDerivedStateFromProps;
        foundWillUpdateName = typeof newApiName === "function" || typeof _instance.getSnapshotBeforeUpdate === "function";
        unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
        foundWillUpdateName || typeof _instance.UNSAFE_componentWillReceiveProps !== "function" && typeof _instance.componentWillReceiveProps !== "function" || (unresolvedOldProps || oldContext !== state) && callComponentWillReceiveProps(workInProgress2, _instance, nextProps, state);
        hasForceUpdate = false;
        var oldState = workInProgress2.memoizedState;
        _instance.state = oldState;
        processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
        suspendIfUpdateReadFromEntangledAsyncAction();
        oldContext = workInProgress2.memoizedState;
        unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? (typeof newApiName === "function" && (applyDerivedStateFromProps(workInProgress2, Component, newApiName, nextProps), oldContext = workInProgress2.memoizedState), (lane = hasForceUpdate || checkShouldComponentUpdate(workInProgress2, Component, lane, nextProps, oldState, oldContext, state)) ? (foundWillUpdateName || typeof _instance.UNSAFE_componentWillMount !== "function" && typeof _instance.componentWillMount !== "function" || (typeof _instance.componentWillMount === "function" && _instance.componentWillMount(), typeof _instance.UNSAFE_componentWillMount === "function" && _instance.UNSAFE_componentWillMount()), typeof _instance.componentDidMount === "function" && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728)) : (typeof _instance.componentDidMount === "function" && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), _instance.props = nextProps, _instance.state = oldContext, _instance.context = state, _instance = lane) : (typeof _instance.componentDidMount === "function" && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), _instance = false);
      } else {
        _instance = workInProgress2.stateNode;
        cloneUpdateQueue(current3, workInProgress2);
        state = workInProgress2.memoizedProps;
        foundWillUpdateName = resolveClassComponentProps(Component, state);
        _instance.props = foundWillUpdateName;
        newApiName = workInProgress2.pendingProps;
        oldState = _instance.context;
        oldContext = Component.contextType;
        lane = emptyContextObject;
        typeof oldContext === "object" && oldContext !== null && (lane = readContext(oldContext));
        unresolvedOldProps = Component.getDerivedStateFromProps;
        (oldContext = typeof unresolvedOldProps === "function" || typeof _instance.getSnapshotBeforeUpdate === "function") || typeof _instance.UNSAFE_componentWillReceiveProps !== "function" && typeof _instance.componentWillReceiveProps !== "function" || (state !== newApiName || oldState !== lane) && callComponentWillReceiveProps(workInProgress2, _instance, nextProps, lane);
        hasForceUpdate = false;
        oldState = workInProgress2.memoizedState;
        _instance.state = oldState;
        processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
        suspendIfUpdateReadFromEntangledAsyncAction();
        var newState = workInProgress2.memoizedState;
        state !== newApiName || oldState !== newState || hasForceUpdate || current3 !== null && current3.dependencies !== null && checkIfContextChanged(current3.dependencies) ? (typeof unresolvedOldProps === "function" && (applyDerivedStateFromProps(workInProgress2, Component, unresolvedOldProps, nextProps), newState = workInProgress2.memoizedState), (foundWillUpdateName = hasForceUpdate || checkShouldComponentUpdate(workInProgress2, Component, foundWillUpdateName, nextProps, oldState, newState, lane) || current3 !== null && current3.dependencies !== null && checkIfContextChanged(current3.dependencies)) ? (oldContext || typeof _instance.UNSAFE_componentWillUpdate !== "function" && typeof _instance.componentWillUpdate !== "function" || (typeof _instance.componentWillUpdate === "function" && _instance.componentWillUpdate(nextProps, newState, lane), typeof _instance.UNSAFE_componentWillUpdate === "function" && _instance.UNSAFE_componentWillUpdate(nextProps, newState, lane)), typeof _instance.componentDidUpdate === "function" && (workInProgress2.flags |= 4), typeof _instance.getSnapshotBeforeUpdate === "function" && (workInProgress2.flags |= 1024)) : (typeof _instance.componentDidUpdate !== "function" || state === current3.memoizedProps && oldState === current3.memoizedState || (workInProgress2.flags |= 4), typeof _instance.getSnapshotBeforeUpdate !== "function" || state === current3.memoizedProps && oldState === current3.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), _instance.props = nextProps, _instance.state = newState, _instance.context = lane, _instance = foundWillUpdateName) : (typeof _instance.componentDidUpdate !== "function" || state === current3.memoizedProps && oldState === current3.memoizedState || (workInProgress2.flags |= 4), typeof _instance.getSnapshotBeforeUpdate !== "function" || state === current3.memoizedProps && oldState === current3.memoizedState || (workInProgress2.flags |= 1024), _instance = false);
      }
      lane = _instance;
      markRef(current3, workInProgress2);
      state = (workInProgress2.flags & 128) !== 0;
      if (lane || state) {
        lane = workInProgress2.stateNode;
        setCurrentFiber(workInProgress2);
        if (state && typeof Component.getDerivedStateFromError !== "function")
          Component = null, profilerStartTime = -1;
        else if (Component = callRenderInDEV(lane), workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            callRenderInDEV(lane);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        workInProgress2.flags |= 1;
        current3 !== null && state ? (workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2), workInProgress2.child = reconcileChildFibers(workInProgress2, null, Component, renderLanes2)) : reconcileChildren(current3, workInProgress2, Component, renderLanes2);
        workInProgress2.memoizedState = lane.state;
        current3 = workInProgress2.child;
      } else
        current3 = bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
      renderLanes2 = workInProgress2.stateNode;
      _instance && renderLanes2.props !== nextProps && (didWarnAboutReassigningProps || console.error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component"), didWarnAboutReassigningProps = true);
      return current3;
    }
    function mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2) {
      resetHydrationState();
      workInProgress2.flags |= 256;
      reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function validateFunctionComponentInDev(workInProgress2, Component) {
      Component && Component.childContextTypes && console.error(`childContextTypes cannot be defined on a function component.
  %s.childContextTypes = ...`, Component.displayName || Component.name || "Component");
      typeof Component.getDerivedStateFromProps === "function" && (workInProgress2 = getComponentNameFromType(Component) || "Unknown", didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] || (console.error("%s: Function components do not support getDerivedStateFromProps.", workInProgress2), didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] = true));
      typeof Component.contextType === "object" && Component.contextType !== null && (Component = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypeOnFunctionComponent[Component] || (console.error("%s: Function components do not support contextType.", Component), didWarnAboutContextTypeOnFunctionComponent[Component] = true));
    }
    function mountSuspenseOffscreenState(renderLanes2) {
      return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
    }
    function getRemainingWorkInPrimaryTree(current3, primaryTreeDidDefer, renderLanes2) {
      current3 = current3 !== null ? current3.childLanes & ~renderLanes2 : 0;
      primaryTreeDidDefer && (current3 |= workInProgressDeferredLane);
      return current3;
    }
    function updateSuspenseComponent(current3, workInProgress2, renderLanes2) {
      var JSCompiler_object_inline_digest_2724;
      var JSCompiler_object_inline_stack_2725 = workInProgress2.pendingProps;
      shouldSuspendImpl(workInProgress2) && (workInProgress2.flags |= 128);
      var JSCompiler_object_inline_message_2723 = false;
      var didSuspend = (workInProgress2.flags & 128) !== 0;
      (JSCompiler_object_inline_digest_2724 = didSuspend) || (JSCompiler_object_inline_digest_2724 = current3 !== null && current3.memoizedState === null ? false : (suspenseStackCursor.current & ForceSuspenseFallback) !== 0);
      JSCompiler_object_inline_digest_2724 && (JSCompiler_object_inline_message_2723 = true, workInProgress2.flags &= -129);
      JSCompiler_object_inline_digest_2724 = (workInProgress2.flags & 32) !== 0;
      workInProgress2.flags &= -33;
      if (current3 === null) {
        if (isHydrating) {
          JSCompiler_object_inline_message_2723 ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack(workInProgress2);
          (current3 = nextHydratableInstance) ? (renderLanes2 = canHydrateHydrationBoundary(current3, rootOrSingletonContext), renderLanes2 = renderLanes2 !== null && renderLanes2.data !== ACTIVITY_START_DATA ? renderLanes2 : null, renderLanes2 !== null && (JSCompiler_object_inline_digest_2724 = {
            dehydrated: renderLanes2,
            treeContext: getSuspendedTreeContext(),
            retryLane: 536870912,
            hydrationErrors: null
          }, workInProgress2.memoizedState = JSCompiler_object_inline_digest_2724, JSCompiler_object_inline_digest_2724 = createFiberFromDehydratedFragment(renderLanes2), JSCompiler_object_inline_digest_2724.return = workInProgress2, workInProgress2.child = JSCompiler_object_inline_digest_2724, hydrationParentFiber = workInProgress2, nextHydratableInstance = null)) : renderLanes2 = null;
          if (renderLanes2 === null)
            throw warnNonHydratedInstance(workInProgress2, current3), throwOnHydrationMismatch(workInProgress2);
          isSuspenseInstanceFallback(renderLanes2) ? workInProgress2.lanes = 32 : workInProgress2.lanes = 536870912;
          return null;
        }
        var nextPrimaryChildren = JSCompiler_object_inline_stack_2725.children;
        JSCompiler_object_inline_stack_2725 = JSCompiler_object_inline_stack_2725.fallback;
        if (JSCompiler_object_inline_message_2723) {
          reuseSuspenseHandlerOnStack(workInProgress2);
          var mode = workInProgress2.mode;
          nextPrimaryChildren = mountWorkInProgressOffscreenFiber({ mode: "hidden", children: nextPrimaryChildren }, mode);
          JSCompiler_object_inline_stack_2725 = createFiberFromFragment(JSCompiler_object_inline_stack_2725, mode, renderLanes2, null);
          nextPrimaryChildren.return = workInProgress2;
          JSCompiler_object_inline_stack_2725.return = workInProgress2;
          nextPrimaryChildren.sibling = JSCompiler_object_inline_stack_2725;
          workInProgress2.child = nextPrimaryChildren;
          JSCompiler_object_inline_stack_2725 = workInProgress2.child;
          JSCompiler_object_inline_stack_2725.memoizedState = mountSuspenseOffscreenState(renderLanes2);
          JSCompiler_object_inline_stack_2725.childLanes = getRemainingWorkInPrimaryTree(current3, JSCompiler_object_inline_digest_2724, renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return bailoutOffscreenComponent(null, JSCompiler_object_inline_stack_2725);
        }
        pushPrimaryTreeSuspenseHandler(workInProgress2);
        return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
      }
      var prevState = current3.memoizedState;
      if (prevState !== null) {
        var JSCompiler_object_inline_componentStack_2726 = prevState.dehydrated;
        if (JSCompiler_object_inline_componentStack_2726 !== null) {
          if (didSuspend)
            workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2)) : workInProgress2.memoizedState !== null ? (reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.child = current3.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(workInProgress2), nextPrimaryChildren = JSCompiler_object_inline_stack_2725.fallback, mode = workInProgress2.mode, JSCompiler_object_inline_stack_2725 = mountWorkInProgressOffscreenFiber({
              mode: "visible",
              children: JSCompiler_object_inline_stack_2725.children
            }, mode), nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, mode, renderLanes2, null), nextPrimaryChildren.flags |= 2, JSCompiler_object_inline_stack_2725.return = workInProgress2, nextPrimaryChildren.return = workInProgress2, JSCompiler_object_inline_stack_2725.sibling = nextPrimaryChildren, workInProgress2.child = JSCompiler_object_inline_stack_2725, reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2), JSCompiler_object_inline_stack_2725 = workInProgress2.child, JSCompiler_object_inline_stack_2725.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_stack_2725.childLanes = getRemainingWorkInPrimaryTree(current3, JSCompiler_object_inline_digest_2724, renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = bailoutOffscreenComponent(null, JSCompiler_object_inline_stack_2725));
          else if (pushPrimaryTreeSuspenseHandler(workInProgress2), warnIfHydrating(), (renderLanes2 & 536870912) !== 0 && markRenderDerivedCause(workInProgress2), isSuspenseInstanceFallback(JSCompiler_object_inline_componentStack_2726)) {
            JSCompiler_object_inline_digest_2724 = JSCompiler_object_inline_componentStack_2726.nextSibling && JSCompiler_object_inline_componentStack_2726.nextSibling.dataset;
            if (JSCompiler_object_inline_digest_2724) {
              nextPrimaryChildren = JSCompiler_object_inline_digest_2724.dgst;
              var message = JSCompiler_object_inline_digest_2724.msg;
              mode = JSCompiler_object_inline_digest_2724.stck;
              var componentStack = JSCompiler_object_inline_digest_2724.cstck;
            }
            JSCompiler_object_inline_message_2723 = message;
            JSCompiler_object_inline_digest_2724 = nextPrimaryChildren;
            JSCompiler_object_inline_stack_2725 = mode;
            JSCompiler_object_inline_componentStack_2726 = componentStack;
            nextPrimaryChildren = JSCompiler_object_inline_message_2723;
            mode = JSCompiler_object_inline_componentStack_2726;
            nextPrimaryChildren = nextPrimaryChildren ? Error(nextPrimaryChildren) : Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            nextPrimaryChildren.stack = JSCompiler_object_inline_stack_2725 || "";
            nextPrimaryChildren.digest = JSCompiler_object_inline_digest_2724;
            JSCompiler_object_inline_digest_2724 = mode === undefined ? null : mode;
            JSCompiler_object_inline_stack_2725 = {
              value: nextPrimaryChildren,
              source: null,
              stack: JSCompiler_object_inline_digest_2724
            };
            typeof JSCompiler_object_inline_digest_2724 === "string" && CapturedStacks.set(nextPrimaryChildren, JSCompiler_object_inline_stack_2725);
            queueHydrationError(JSCompiler_object_inline_stack_2725);
            workInProgress2 = retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2);
          } else if (didReceiveUpdate || propagateParentContextChanges(current3, workInProgress2, renderLanes2, false), JSCompiler_object_inline_digest_2724 = (renderLanes2 & current3.childLanes) !== 0, didReceiveUpdate || JSCompiler_object_inline_digest_2724) {
            JSCompiler_object_inline_digest_2724 = workInProgressRoot;
            if (JSCompiler_object_inline_digest_2724 !== null && (JSCompiler_object_inline_stack_2725 = getBumpedLaneForHydration(JSCompiler_object_inline_digest_2724, renderLanes2), JSCompiler_object_inline_stack_2725 !== 0 && JSCompiler_object_inline_stack_2725 !== prevState.retryLane))
              throw prevState.retryLane = JSCompiler_object_inline_stack_2725, enqueueConcurrentRenderForLane(current3, JSCompiler_object_inline_stack_2725), scheduleUpdateOnFiber(JSCompiler_object_inline_digest_2724, current3, JSCompiler_object_inline_stack_2725), SelectiveHydrationException;
            isSuspenseInstancePending(JSCompiler_object_inline_componentStack_2726) || renderDidSuspendDelayIfPossible();
            workInProgress2 = retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2);
          } else
            isSuspenseInstancePending(JSCompiler_object_inline_componentStack_2726) ? (workInProgress2.flags |= 192, workInProgress2.child = current3.child, workInProgress2 = null) : (current3 = prevState.treeContext, nextHydratableInstance = getNextHydratable(JSCompiler_object_inline_componentStack_2726.nextSibling), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, rootOrSingletonContext = false, current3 !== null && restoreSuspendedTreeContext(workInProgress2, current3), workInProgress2 = mountSuspensePrimaryChildren(workInProgress2, JSCompiler_object_inline_stack_2725.children), workInProgress2.flags |= 4096);
          return workInProgress2;
        }
      }
      if (JSCompiler_object_inline_message_2723)
        return reuseSuspenseHandlerOnStack(workInProgress2), nextPrimaryChildren = JSCompiler_object_inline_stack_2725.fallback, mode = workInProgress2.mode, componentStack = current3.child, JSCompiler_object_inline_componentStack_2726 = componentStack.sibling, JSCompiler_object_inline_stack_2725 = createWorkInProgress(componentStack, {
          mode: "hidden",
          children: JSCompiler_object_inline_stack_2725.children
        }), JSCompiler_object_inline_stack_2725.subtreeFlags = componentStack.subtreeFlags & 65011712, JSCompiler_object_inline_componentStack_2726 !== null ? nextPrimaryChildren = createWorkInProgress(JSCompiler_object_inline_componentStack_2726, nextPrimaryChildren) : (nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, mode, renderLanes2, null), nextPrimaryChildren.flags |= 2), nextPrimaryChildren.return = workInProgress2, JSCompiler_object_inline_stack_2725.return = workInProgress2, JSCompiler_object_inline_stack_2725.sibling = nextPrimaryChildren, workInProgress2.child = JSCompiler_object_inline_stack_2725, bailoutOffscreenComponent(null, JSCompiler_object_inline_stack_2725), JSCompiler_object_inline_stack_2725 = workInProgress2.child, nextPrimaryChildren = current3.child.memoizedState, nextPrimaryChildren === null ? nextPrimaryChildren = mountSuspenseOffscreenState(renderLanes2) : (mode = nextPrimaryChildren.cachePool, mode !== null ? (componentStack = CacheContext._currentValue, mode = mode.parent !== componentStack ? { parent: componentStack, pool: componentStack } : mode) : mode = getSuspendedCache(), nextPrimaryChildren = {
          baseLanes: nextPrimaryChildren.baseLanes | renderLanes2,
          cachePool: mode
        }), JSCompiler_object_inline_stack_2725.memoizedState = nextPrimaryChildren, JSCompiler_object_inline_stack_2725.childLanes = getRemainingWorkInPrimaryTree(current3, JSCompiler_object_inline_digest_2724, renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, bailoutOffscreenComponent(current3.child, JSCompiler_object_inline_stack_2725);
      prevState !== null && (renderLanes2 & 62914560) === renderLanes2 && (renderLanes2 & current3.lanes) !== 0 && markRenderDerivedCause(workInProgress2);
      pushPrimaryTreeSuspenseHandler(workInProgress2);
      renderLanes2 = current3.child;
      current3 = renderLanes2.sibling;
      renderLanes2 = createWorkInProgress(renderLanes2, {
        mode: "visible",
        children: JSCompiler_object_inline_stack_2725.children
      });
      renderLanes2.return = workInProgress2;
      renderLanes2.sibling = null;
      current3 !== null && (JSCompiler_object_inline_digest_2724 = workInProgress2.deletions, JSCompiler_object_inline_digest_2724 === null ? (workInProgress2.deletions = [current3], workInProgress2.flags |= 16) : JSCompiler_object_inline_digest_2724.push(current3));
      workInProgress2.child = renderLanes2;
      workInProgress2.memoizedState = null;
      return renderLanes2;
    }
    function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
      primaryChildren = mountWorkInProgressOffscreenFiber({ mode: "visible", children: primaryChildren }, workInProgress2.mode);
      primaryChildren.return = workInProgress2;
      return workInProgress2.child = primaryChildren;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
      offscreenProps = createFiber(22, offscreenProps, null, mode);
      offscreenProps.lanes = 0;
      return offscreenProps;
    }
    function retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2) {
      reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
      current3 = mountSuspensePrimaryChildren(workInProgress2, workInProgress2.pendingProps.children);
      current3.flags |= 2;
      workInProgress2.memoizedState = null;
      return current3;
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
      fiber.lanes |= renderLanes2;
      var alternate = fiber.alternate;
      alternate !== null && (alternate.lanes |= renderLanes2);
      scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
    }
    function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, treeForkCount2) {
      var renderState = workInProgress2.memoizedState;
      renderState === null ? workInProgress2.memoizedState = {
        isBackwards,
        rendering: null,
        renderingStartTime: 0,
        last: lastContentRow,
        tail,
        tailMode,
        treeForkCount: treeForkCount2
      } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode, renderState.treeForkCount = treeForkCount2);
    }
    function updateSuspenseListComponent(current3, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail, newChildren = nextProps.children, suspenseContext = suspenseStackCursor.current;
      (nextProps = (suspenseContext & ForceSuspenseFallback) !== 0) ? (suspenseContext = suspenseContext & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress2.flags |= 128) : suspenseContext &= SubtreeSuspenseContextMask;
      push(suspenseStackCursor, suspenseContext, workInProgress2);
      suspenseContext = revealOrder == null ? "null" : revealOrder;
      if (revealOrder !== "forwards" && revealOrder !== "unstable_legacy-backwards" && revealOrder !== "together" && revealOrder !== "independent" && !didWarnAboutRevealOrder[suspenseContext])
        if (didWarnAboutRevealOrder[suspenseContext] = true, revealOrder == null)
          console.error('The default for the <SuspenseList revealOrder="..."> prop is changing. To be future compatible you must explictly specify either "independent" (the current default), "together", "forwards" or "legacy_unstable-backwards".');
        else if (revealOrder === "backwards")
          console.error('The rendering order of <SuspenseList revealOrder="backwards"> is changing. To be future compatible you must specify revealOrder="legacy_unstable-backwards" instead.');
        else if (typeof revealOrder === "string")
          switch (revealOrder.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards":
            case "independent":
              console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            case "forward":
            case "backward":
              console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            default:
              console.error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "independent", "together", "forwards" or "backwards"?', revealOrder);
          }
        else
          console.error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "independent", "together", "forwards" or "backwards"?', revealOrder);
      suspenseContext = tailMode == null ? "null" : tailMode;
      if (!didWarnAboutTailOptions[suspenseContext])
        if (tailMode == null) {
          if (revealOrder === "forwards" || revealOrder === "backwards" || revealOrder === "unstable_legacy-backwards")
            didWarnAboutTailOptions[suspenseContext] = true, console.error('The default for the <SuspenseList tail="..."> prop is changing. To be future compatible you must explictly specify either "visible" (the current default), "collapsed" or "hidden".');
        } else
          tailMode !== "visible" && tailMode !== "collapsed" && tailMode !== "hidden" ? (didWarnAboutTailOptions[suspenseContext] = true, console.error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "visible", "collapsed" or "hidden"?', tailMode)) : revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "unstable_legacy-backwards" && (didWarnAboutTailOptions[suspenseContext] = true, console.error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode));
      a:
        if ((revealOrder === "forwards" || revealOrder === "backwards" || revealOrder === "unstable_legacy-backwards") && newChildren !== undefined && newChildren !== null && newChildren !== false)
          if (isArrayImpl(newChildren))
            for (suspenseContext = 0;suspenseContext < newChildren.length; suspenseContext++) {
              if (!validateSuspenseListNestedChild(newChildren[suspenseContext], suspenseContext))
                break a;
            }
          else if (suspenseContext = getIteratorFn(newChildren), typeof suspenseContext === "function") {
            if (suspenseContext = suspenseContext.call(newChildren))
              for (var step = suspenseContext.next(), _i2 = 0;!step.done; step = suspenseContext.next()) {
                if (!validateSuspenseListNestedChild(step.value, _i2))
                  break a;
                _i2++;
              }
          } else
            console.error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
      reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
      isHydrating ? (warnIfNotHydrating(), newChildren = treeForkCount) : newChildren = 0;
      if (!nextProps && current3 !== null && (current3.flags & 128) !== 0)
        a:
          for (current3 = workInProgress2.child;current3 !== null; ) {
            if (current3.tag === 13)
              current3.memoizedState !== null && scheduleSuspenseWorkOnFiber(current3, renderLanes2, workInProgress2);
            else if (current3.tag === 19)
              scheduleSuspenseWorkOnFiber(current3, renderLanes2, workInProgress2);
            else if (current3.child !== null) {
              current3.child.return = current3;
              current3 = current3.child;
              continue;
            }
            if (current3 === workInProgress2)
              break a;
            for (;current3.sibling === null; ) {
              if (current3.return === null || current3.return === workInProgress2)
                break a;
              current3 = current3.return;
            }
            current3.sibling.return = current3.return;
            current3 = current3.sibling;
          }
      switch (revealOrder) {
        case "forwards":
          renderLanes2 = workInProgress2.child;
          for (revealOrder = null;renderLanes2 !== null; )
            current3 = renderLanes2.alternate, current3 !== null && findFirstSuspended(current3) === null && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
          renderLanes2 = revealOrder;
          renderLanes2 === null ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
          initSuspenseListRenderState(workInProgress2, false, revealOrder, renderLanes2, tailMode, newChildren);
          break;
        case "backwards":
        case "unstable_legacy-backwards":
          renderLanes2 = null;
          revealOrder = workInProgress2.child;
          for (workInProgress2.child = null;revealOrder !== null; ) {
            current3 = revealOrder.alternate;
            if (current3 !== null && findFirstSuspended(current3) === null) {
              workInProgress2.child = revealOrder;
              break;
            }
            current3 = revealOrder.sibling;
            revealOrder.sibling = renderLanes2;
            renderLanes2 = revealOrder;
            revealOrder = current3;
          }
          initSuspenseListRenderState(workInProgress2, true, renderLanes2, null, tailMode, newChildren);
          break;
        case "together":
          initSuspenseListRenderState(workInProgress2, false, null, null, undefined, newChildren);
          break;
        default:
          workInProgress2.memoizedState = null;
      }
      return workInProgress2.child;
    }
    function bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2) {
      current3 !== null && (workInProgress2.dependencies = current3.dependencies);
      profilerStartTime = -1;
      workInProgressRootSkippedLanes |= workInProgress2.lanes;
      if ((renderLanes2 & workInProgress2.childLanes) === 0)
        if (current3 !== null) {
          if (propagateParentContextChanges(current3, workInProgress2, renderLanes2, false), (renderLanes2 & workInProgress2.childLanes) === 0)
            return null;
        } else
          return null;
      if (current3 !== null && workInProgress2.child !== current3.child)
        throw Error("Resuming work not yet implemented.");
      if (workInProgress2.child !== null) {
        current3 = workInProgress2.child;
        renderLanes2 = createWorkInProgress(current3, current3.pendingProps);
        workInProgress2.child = renderLanes2;
        for (renderLanes2.return = workInProgress2;current3.sibling !== null; )
          current3 = current3.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current3, current3.pendingProps), renderLanes2.return = workInProgress2;
        renderLanes2.sibling = null;
      }
      return workInProgress2.child;
    }
    function checkScheduledUpdateOrContext(current3, renderLanes2) {
      if ((current3.lanes & renderLanes2) !== 0)
        return true;
      current3 = current3.dependencies;
      return current3 !== null && checkIfContextChanged(current3) ? true : false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2) {
      switch (workInProgress2.tag) {
        case 3:
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          pushProvider(workInProgress2, CacheContext, current3.memoizedState.cache);
          resetHydrationState();
          break;
        case 27:
        case 5:
          pushHostContext(workInProgress2);
          break;
        case 4:
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          break;
        case 10:
          pushProvider(workInProgress2, workInProgress2.type, workInProgress2.memoizedProps.value);
          break;
        case 12:
          (renderLanes2 & workInProgress2.childLanes) !== 0 && (workInProgress2.flags |= 4);
          workInProgress2.flags |= 2048;
          var stateNode = workInProgress2.stateNode;
          stateNode.effectDuration = -0;
          stateNode.passiveEffectDuration = -0;
          break;
        case 31:
          if (workInProgress2.memoizedState !== null)
            return workInProgress2.flags |= 128, pushDehydratedActivitySuspenseHandler(workInProgress2), null;
          break;
        case 13:
          stateNode = workInProgress2.memoizedState;
          if (stateNode !== null) {
            if (stateNode.dehydrated !== null)
              return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
            if ((renderLanes2 & workInProgress2.child.childLanes) !== 0)
              return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            current3 = bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            return current3 !== null ? current3.sibling : null;
          }
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          break;
        case 19:
          var didSuspendBefore = (current3.flags & 128) !== 0;
          stateNode = (renderLanes2 & workInProgress2.childLanes) !== 0;
          stateNode || (propagateParentContextChanges(current3, workInProgress2, renderLanes2, false), stateNode = (renderLanes2 & workInProgress2.childLanes) !== 0);
          if (didSuspendBefore) {
            if (stateNode)
              return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
            workInProgress2.flags |= 128;
          }
          didSuspendBefore = workInProgress2.memoizedState;
          didSuspendBefore !== null && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
          push(suspenseStackCursor, suspenseStackCursor.current, workInProgress2);
          if (stateNode)
            break;
          else
            return null;
        case 22:
          return workInProgress2.lanes = 0, updateOffscreenComponent(current3, workInProgress2, renderLanes2, workInProgress2.pendingProps);
        case 24:
          pushProvider(workInProgress2, CacheContext, current3.memoizedState.cache);
      }
      return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
    }
    function beginWork(current3, workInProgress2, renderLanes2) {
      if (workInProgress2._debugNeedsRemount && current3 !== null) {
        renderLanes2 = createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes);
        renderLanes2._debugStack = workInProgress2._debugStack;
        renderLanes2._debugTask = workInProgress2._debugTask;
        var returnFiber = workInProgress2.return;
        if (returnFiber === null)
          throw Error("Cannot swap the root fiber.");
        current3.alternate = null;
        workInProgress2.alternate = null;
        renderLanes2.index = workInProgress2.index;
        renderLanes2.sibling = workInProgress2.sibling;
        renderLanes2.return = workInProgress2.return;
        renderLanes2.ref = workInProgress2.ref;
        renderLanes2._debugInfo = workInProgress2._debugInfo;
        if (workInProgress2 === returnFiber.child)
          returnFiber.child = renderLanes2;
        else {
          var prevSibling = returnFiber.child;
          if (prevSibling === null)
            throw Error("Expected parent to have a child.");
          for (;prevSibling.sibling !== workInProgress2; )
            if (prevSibling = prevSibling.sibling, prevSibling === null)
              throw Error("Expected to find the previous sibling.");
          prevSibling.sibling = renderLanes2;
        }
        workInProgress2 = returnFiber.deletions;
        workInProgress2 === null ? (returnFiber.deletions = [current3], returnFiber.flags |= 16) : workInProgress2.push(current3);
        renderLanes2.flags |= 2;
        return renderLanes2;
      }
      if (current3 !== null)
        if (current3.memoizedProps !== workInProgress2.pendingProps || workInProgress2.type !== current3.type)
          didReceiveUpdate = true;
        else {
          if (!checkScheduledUpdateOrContext(current3, renderLanes2) && (workInProgress2.flags & 128) === 0)
            return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2);
          didReceiveUpdate = (current3.flags & 131072) !== 0 ? true : false;
        }
      else {
        didReceiveUpdate = false;
        if (returnFiber = isHydrating)
          warnIfNotHydrating(), returnFiber = (workInProgress2.flags & 1048576) !== 0;
        returnFiber && (returnFiber = workInProgress2.index, warnIfNotHydrating(), pushTreeId(workInProgress2, treeForkCount, returnFiber));
      }
      workInProgress2.lanes = 0;
      switch (workInProgress2.tag) {
        case 16:
          a:
            if (returnFiber = workInProgress2.pendingProps, current3 = resolveLazy(workInProgress2.elementType), workInProgress2.type = current3, typeof current3 === "function")
              shouldConstruct(current3) ? (returnFiber = resolveClassComponentProps(current3, returnFiber), workInProgress2.tag = 1, workInProgress2.type = current3 = resolveFunctionForHotReloading(current3), workInProgress2 = updateClassComponent(null, workInProgress2, current3, returnFiber, renderLanes2)) : (workInProgress2.tag = 0, validateFunctionComponentInDev(workInProgress2, current3), workInProgress2.type = current3 = resolveFunctionForHotReloading(current3), workInProgress2 = updateFunctionComponent(null, workInProgress2, current3, returnFiber, renderLanes2));
            else {
              if (current3 !== undefined && current3 !== null) {
                if (prevSibling = current3.$$typeof, prevSibling === REACT_FORWARD_REF_TYPE) {
                  workInProgress2.tag = 11;
                  workInProgress2.type = current3 = resolveForwardRefForHotReloading(current3);
                  workInProgress2 = updateForwardRef(null, workInProgress2, current3, returnFiber, renderLanes2);
                  break a;
                } else if (prevSibling === REACT_MEMO_TYPE) {
                  workInProgress2.tag = 14;
                  workInProgress2 = updateMemoComponent(null, workInProgress2, current3, returnFiber, renderLanes2);
                  break a;
                }
              }
              workInProgress2 = "";
              current3 !== null && typeof current3 === "object" && current3.$$typeof === REACT_LAZY_TYPE && (workInProgress2 = " Did you wrap a component in React.lazy() more than once?");
              renderLanes2 = getComponentNameFromType(current3) || current3;
              throw Error("Element type is invalid. Received a promise that resolves to: " + renderLanes2 + ". Lazy element type must resolve to a class or function." + workInProgress2);
            }
          return workInProgress2;
        case 0:
          return updateFunctionComponent(current3, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
        case 1:
          return returnFiber = workInProgress2.type, prevSibling = resolveClassComponentProps(returnFiber, workInProgress2.pendingProps), updateClassComponent(current3, workInProgress2, returnFiber, prevSibling, renderLanes2);
        case 3:
          a: {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            if (current3 === null)
              throw Error("Should have a current fiber. This is a bug in React.");
            returnFiber = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            prevSibling = prevState.element;
            cloneUpdateQueue(current3, workInProgress2);
            processUpdateQueue(workInProgress2, returnFiber, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            returnFiber = nextState.cache;
            pushProvider(workInProgress2, CacheContext, returnFiber);
            returnFiber !== prevState.cache && propagateContextChanges(workInProgress2, [CacheContext], renderLanes2, true);
            suspendIfUpdateReadFromEntangledAsyncAction();
            returnFiber = nextState.element;
            if (prevState.isDehydrated)
              if (prevState = {
                element: returnFiber,
                isDehydrated: false,
                cache: nextState.cache
              }, workInProgress2.updateQueue.baseState = prevState, workInProgress2.memoizedState = prevState, workInProgress2.flags & 256) {
                workInProgress2 = mountHostRootWithoutHydrating(current3, workInProgress2, returnFiber, renderLanes2);
                break a;
              } else if (returnFiber !== prevSibling) {
                prevSibling = createCapturedValueAtFiber(Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                queueHydrationError(prevSibling);
                workInProgress2 = mountHostRootWithoutHydrating(current3, workInProgress2, returnFiber, renderLanes2);
                break a;
              } else {
                current3 = workInProgress2.stateNode.containerInfo;
                switch (current3.nodeType) {
                  case 9:
                    current3 = current3.body;
                    break;
                  default:
                    current3 = current3.nodeName === "HTML" ? current3.ownerDocument.body : current3;
                }
                nextHydratableInstance = getNextHydratable(current3.firstChild);
                hydrationParentFiber = workInProgress2;
                isHydrating = true;
                hydrationErrors = null;
                didSuspendOrErrorDEV = false;
                hydrationDiffRootDEV = null;
                rootOrSingletonContext = true;
                renderLanes2 = mountChildFibers(workInProgress2, null, returnFiber, renderLanes2);
                for (workInProgress2.child = renderLanes2;renderLanes2; )
                  renderLanes2.flags = renderLanes2.flags & -3 | 4096, renderLanes2 = renderLanes2.sibling;
              }
            else {
              resetHydrationState();
              if (returnFiber === prevSibling) {
                workInProgress2 = bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                break a;
              }
              reconcileChildren(current3, workInProgress2, returnFiber, renderLanes2);
            }
            workInProgress2 = workInProgress2.child;
          }
          return workInProgress2;
        case 26:
          return markRef(current3, workInProgress2), current3 === null ? (renderLanes2 = getResource(workInProgress2.type, null, workInProgress2.pendingProps, null)) ? workInProgress2.memoizedState = renderLanes2 : isHydrating || (renderLanes2 = workInProgress2.type, current3 = workInProgress2.pendingProps, returnFiber = requiredContext(rootInstanceStackCursor.current), returnFiber = getOwnerDocumentFromRootContainer(returnFiber).createElement(renderLanes2), returnFiber[internalInstanceKey] = workInProgress2, returnFiber[internalPropsKey] = current3, setInitialProperties(returnFiber, renderLanes2, current3), markNodeAsHoistable(returnFiber), workInProgress2.stateNode = returnFiber) : workInProgress2.memoizedState = getResource(workInProgress2.type, current3.memoizedProps, workInProgress2.pendingProps, current3.memoizedState), null;
        case 27:
          return pushHostContext(workInProgress2), current3 === null && isHydrating && (returnFiber = requiredContext(rootInstanceStackCursor.current), prevSibling = getHostContext(), returnFiber = workInProgress2.stateNode = resolveSingletonInstance(workInProgress2.type, workInProgress2.pendingProps, returnFiber, prevSibling, false), didSuspendOrErrorDEV || (prevSibling = diffHydratedProperties(returnFiber, workInProgress2.type, workInProgress2.pendingProps, prevSibling), prevSibling !== null && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevSibling)), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, prevSibling = nextHydratableInstance, isSingletonScope(workInProgress2.type) ? (previousHydratableOnEnteringScopedSingleton = prevSibling, nextHydratableInstance = getNextHydratable(returnFiber.firstChild)) : nextHydratableInstance = prevSibling), reconcileChildren(current3, workInProgress2, workInProgress2.pendingProps.children, renderLanes2), markRef(current3, workInProgress2), current3 === null && (workInProgress2.flags |= 4194304), workInProgress2.child;
        case 5:
          return current3 === null && isHydrating && (prevState = getHostContext(), returnFiber = validateDOMNesting(workInProgress2.type, prevState.ancestorInfo), prevSibling = nextHydratableInstance, (nextState = !prevSibling) || (nextState = canHydrateInstance(prevSibling, workInProgress2.type, workInProgress2.pendingProps, rootOrSingletonContext), nextState !== null ? (workInProgress2.stateNode = nextState, didSuspendOrErrorDEV || (prevState = diffHydratedProperties(nextState, workInProgress2.type, workInProgress2.pendingProps, prevState), prevState !== null && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevState)), hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(nextState.firstChild), rootOrSingletonContext = false, prevState = true) : prevState = false, nextState = !prevState), nextState && (returnFiber && warnNonHydratedInstance(workInProgress2, prevSibling), throwOnHydrationMismatch(workInProgress2))), pushHostContext(workInProgress2), prevSibling = workInProgress2.type, prevState = workInProgress2.pendingProps, nextState = current3 !== null ? current3.memoizedProps : null, returnFiber = prevState.children, shouldSetTextContent(prevSibling, prevState) ? returnFiber = null : nextState !== null && shouldSetTextContent(prevSibling, nextState) && (workInProgress2.flags |= 32), workInProgress2.memoizedState !== null && (prevSibling = renderWithHooks(current3, workInProgress2, TransitionAwareHostComponent, null, null, renderLanes2), HostTransitionContext._currentValue = prevSibling), markRef(current3, workInProgress2), reconcileChildren(current3, workInProgress2, returnFiber, renderLanes2), workInProgress2.child;
        case 6:
          return current3 === null && isHydrating && (renderLanes2 = workInProgress2.pendingProps, current3 = getHostContext(), returnFiber = current3.ancestorInfo.current, renderLanes2 = returnFiber != null ? validateTextNesting(renderLanes2, returnFiber.tag, current3.ancestorInfo.implicitRootScope) : true, current3 = nextHydratableInstance, (returnFiber = !current3) || (returnFiber = canHydrateTextInstance(current3, workInProgress2.pendingProps, rootOrSingletonContext), returnFiber !== null ? (workInProgress2.stateNode = returnFiber, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, returnFiber = true) : returnFiber = false, returnFiber = !returnFiber), returnFiber && (renderLanes2 && warnNonHydratedInstance(workInProgress2, current3), throwOnHydrationMismatch(workInProgress2))), null;
        case 13:
          return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
        case 4:
          return pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo), returnFiber = workInProgress2.pendingProps, current3 === null ? workInProgress2.child = reconcileChildFibers(workInProgress2, null, returnFiber, renderLanes2) : reconcileChildren(current3, workInProgress2, returnFiber, renderLanes2), workInProgress2.child;
        case 11:
          return updateForwardRef(current3, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
        case 7:
          return reconcileChildren(current3, workInProgress2, workInProgress2.pendingProps, renderLanes2), workInProgress2.child;
        case 8:
          return reconcileChildren(current3, workInProgress2, workInProgress2.pendingProps.children, renderLanes2), workInProgress2.child;
        case 12:
          return workInProgress2.flags |= 4, workInProgress2.flags |= 2048, returnFiber = workInProgress2.stateNode, returnFiber.effectDuration = -0, returnFiber.passiveEffectDuration = -0, reconcileChildren(current3, workInProgress2, workInProgress2.pendingProps.children, renderLanes2), workInProgress2.child;
        case 10:
          return returnFiber = workInProgress2.type, prevSibling = workInProgress2.pendingProps, prevState = prevSibling.value, "value" in prevSibling || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = true, console.error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?")), pushProvider(workInProgress2, returnFiber, prevState), reconcileChildren(current3, workInProgress2, prevSibling.children, renderLanes2), workInProgress2.child;
        case 9:
          return prevSibling = workInProgress2.type._context, returnFiber = workInProgress2.pendingProps.children, typeof returnFiber !== "function" && console.error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), prepareToReadContext(workInProgress2), prevSibling = readContext(prevSibling), returnFiber = callComponentInDEV(returnFiber, prevSibling, undefined), workInProgress2.flags |= 1, reconcileChildren(current3, workInProgress2, returnFiber, renderLanes2), workInProgress2.child;
        case 14:
          return updateMemoComponent(current3, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
        case 15:
          return updateSimpleMemoComponent(current3, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
        case 19:
          return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
        case 31:
          return updateActivityComponent(current3, workInProgress2, renderLanes2);
        case 22:
          return updateOffscreenComponent(current3, workInProgress2, renderLanes2, workInProgress2.pendingProps);
        case 24:
          return prepareToReadContext(workInProgress2), returnFiber = readContext(CacheContext), current3 === null ? (prevSibling = peekCacheFromPool(), prevSibling === null && (prevSibling = workInProgressRoot, prevState = createCache(), prevSibling.pooledCache = prevState, retainCache(prevState), prevState !== null && (prevSibling.pooledCacheLanes |= renderLanes2), prevSibling = prevState), workInProgress2.memoizedState = {
            parent: returnFiber,
            cache: prevSibling
          }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, prevSibling)) : ((current3.lanes & renderLanes2) !== 0 && (cloneUpdateQueue(current3, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), prevSibling = current3.memoizedState, prevState = workInProgress2.memoizedState, prevSibling.parent !== returnFiber ? (prevSibling = {
            parent: returnFiber,
            cache: returnFiber
          }, workInProgress2.memoizedState = prevSibling, workInProgress2.lanes === 0 && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = prevSibling), pushProvider(workInProgress2, CacheContext, returnFiber)) : (returnFiber = prevState.cache, pushProvider(workInProgress2, CacheContext, returnFiber), returnFiber !== prevSibling.cache && propagateContextChanges(workInProgress2, [CacheContext], renderLanes2, true))), reconcileChildren(current3, workInProgress2, workInProgress2.pendingProps.children, renderLanes2), workInProgress2.child;
        case 29:
          throw workInProgress2.pendingProps;
      }
      throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress2) {
      workInProgress2.flags |= 4;
    }
    function preloadInstanceAndSuspendIfNeeded(workInProgress2, type, oldProps, newProps, renderLanes2) {
      if (type = (workInProgress2.mode & SuspenseyImagesMode) !== NoMode)
        type = false;
      if (type) {
        if (workInProgress2.flags |= 16777216, (renderLanes2 & 335544128) === renderLanes2)
          if (workInProgress2.stateNode.complete)
            workInProgress2.flags |= 8192;
          else if (shouldRemainOnPreviousScreen())
            workInProgress2.flags |= 8192;
          else
            throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
      } else
        workInProgress2.flags &= -16777217;
    }
    function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
      if (resource.type !== "stylesheet" || (resource.state.loading & Inserted) !== NotLoaded)
        workInProgress2.flags &= -16777217;
      else if (workInProgress2.flags |= 16777216, !preloadResource(resource))
        if (shouldRemainOnPreviousScreen())
          workInProgress2.flags |= 8192;
        else
          throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
    }
    function scheduleRetryEffect(workInProgress2, retryQueue) {
      retryQueue !== null && (workInProgress2.flags |= 4);
      workInProgress2.flags & 16384 && (retryQueue = workInProgress2.tag !== 22 ? claimNextRetryLane() : 536870912, workInProgress2.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (!isHydrating)
        switch (renderState.tailMode) {
          case "hidden":
            hasRenderedATailFallback = renderState.tail;
            for (var lastTailNode = null;hasRenderedATailFallback !== null; )
              hasRenderedATailFallback.alternate !== null && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
            lastTailNode === null ? renderState.tail = null : lastTailNode.sibling = null;
            break;
          case "collapsed":
            lastTailNode = renderState.tail;
            for (var _lastTailNode = null;lastTailNode !== null; )
              lastTailNode.alternate !== null && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
            _lastTailNode === null ? hasRenderedATailFallback || renderState.tail === null ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
        }
    }
    function bubbleProperties(completedWork) {
      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
      if (didBailout)
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          for (var { selfBaseDuration: _treeBaseDuration, child: _child2 } = completedWork;_child2 !== null; )
            newChildLanes |= _child2.lanes | _child2.childLanes, subtreeFlags |= _child2.subtreeFlags & 65011712, subtreeFlags |= _child2.flags & 65011712, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
          completedWork.treeBaseDuration = _treeBaseDuration;
        } else
          for (_treeBaseDuration = completedWork.child;_treeBaseDuration !== null; )
            newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags & 65011712, subtreeFlags |= _treeBaseDuration.flags & 65011712, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
      else if ((completedWork.mode & ProfileMode) !== NoMode) {
        _treeBaseDuration = completedWork.actualDuration;
        _child2 = completedWork.selfBaseDuration;
        for (var child = completedWork.child;child !== null; )
          newChildLanes |= child.lanes | child.childLanes, subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, _treeBaseDuration += child.actualDuration, _child2 += child.treeBaseDuration, child = child.sibling;
        completedWork.actualDuration = _treeBaseDuration;
        completedWork.treeBaseDuration = _child2;
      } else
        for (_treeBaseDuration = completedWork.child;_treeBaseDuration !== null; )
          newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags, subtreeFlags |= _treeBaseDuration.flags, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
      completedWork.subtreeFlags |= subtreeFlags;
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }
    function completeWork(current3, workInProgress2, renderLanes2) {
      var newProps = workInProgress2.pendingProps;
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return bubbleProperties(workInProgress2), null;
        case 1:
          return bubbleProperties(workInProgress2), null;
        case 3:
          renderLanes2 = workInProgress2.stateNode;
          newProps = null;
          current3 !== null && (newProps = current3.memoizedState.cache);
          workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048);
          popProvider(CacheContext, workInProgress2);
          popHostContainer(workInProgress2);
          renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
          if (current3 === null || current3.child === null)
            popHydrationState(workInProgress2) ? (emitPendingHydrationWarnings(), markUpdate(workInProgress2)) : current3 === null || current3.memoizedState.isDehydrated && (workInProgress2.flags & 256) === 0 || (workInProgress2.flags |= 1024, upgradeHydrationErrorsToRecoverable());
          bubbleProperties(workInProgress2);
          return null;
        case 26:
          var { type, memoizedState: nextResource } = workInProgress2;
          current3 === null ? (markUpdate(workInProgress2), nextResource !== null ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, nextResource)) : (bubbleProperties(workInProgress2), preloadInstanceAndSuspendIfNeeded(workInProgress2, type, null, newProps, renderLanes2))) : nextResource ? nextResource !== current3.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, nextResource)) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current3 = current3.memoizedProps, current3 !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadInstanceAndSuspendIfNeeded(workInProgress2, type, current3, newProps, renderLanes2));
          return null;
        case 27:
          popHostContext(workInProgress2);
          renderLanes2 = requiredContext(rootInstanceStackCursor.current);
          type = workInProgress2.type;
          if (current3 !== null && workInProgress2.stateNode != null)
            current3.memoizedProps !== newProps && markUpdate(workInProgress2);
          else {
            if (!newProps) {
              if (workInProgress2.stateNode === null)
                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              bubbleProperties(workInProgress2);
              return null;
            }
            current3 = getHostContext();
            popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2, current3) : (current3 = resolveSingletonInstance(type, newProps, renderLanes2, current3, true), workInProgress2.stateNode = current3, markUpdate(workInProgress2));
          }
          bubbleProperties(workInProgress2);
          return null;
        case 5:
          popHostContext(workInProgress2);
          type = workInProgress2.type;
          if (current3 !== null && workInProgress2.stateNode != null)
            current3.memoizedProps !== newProps && markUpdate(workInProgress2);
          else {
            if (!newProps) {
              if (workInProgress2.stateNode === null)
                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              bubbleProperties(workInProgress2);
              return null;
            }
            var _currentHostContext = getHostContext();
            if (popHydrationState(workInProgress2))
              prepareToHydrateHostInstance(workInProgress2, _currentHostContext);
            else {
              nextResource = requiredContext(rootInstanceStackCursor.current);
              validateDOMNesting(type, _currentHostContext.ancestorInfo);
              _currentHostContext = _currentHostContext.context;
              nextResource = getOwnerDocumentFromRootContainer(nextResource);
              switch (_currentHostContext) {
                case HostContextNamespaceSvg:
                  nextResource = nextResource.createElementNS(SVG_NAMESPACE, type);
                  break;
                case HostContextNamespaceMath:
                  nextResource = nextResource.createElementNS(MATH_NAMESPACE, type);
                  break;
                default:
                  switch (type) {
                    case "svg":
                      nextResource = nextResource.createElementNS(SVG_NAMESPACE, type);
                      break;
                    case "math":
                      nextResource = nextResource.createElementNS(MATH_NAMESPACE, type);
                      break;
                    case "script":
                      nextResource = nextResource.createElement("div");
                      nextResource.innerHTML = "<script></script>";
                      nextResource = nextResource.removeChild(nextResource.firstChild);
                      break;
                    case "select":
                      nextResource = typeof newProps.is === "string" ? nextResource.createElement("select", {
                        is: newProps.is
                      }) : nextResource.createElement("select");
                      newProps.multiple ? nextResource.multiple = true : newProps.size && (nextResource.size = newProps.size);
                      break;
                    default:
                      nextResource = typeof newProps.is === "string" ? nextResource.createElement(type, {
                        is: newProps.is
                      }) : nextResource.createElement(type), type.indexOf("-") === -1 && (type !== type.toLowerCase() && console.error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), Object.prototype.toString.call(nextResource) !== "[object HTMLUnknownElement]" || hasOwnProperty.call(warnedUnknownTags, type) || (warnedUnknownTags[type] = true, console.error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type)));
                  }
              }
              nextResource[internalInstanceKey] = workInProgress2;
              nextResource[internalPropsKey] = newProps;
              a:
                for (_currentHostContext = workInProgress2.child;_currentHostContext !== null; ) {
                  if (_currentHostContext.tag === 5 || _currentHostContext.tag === 6)
                    nextResource.appendChild(_currentHostContext.stateNode);
                  else if (_currentHostContext.tag !== 4 && _currentHostContext.tag !== 27 && _currentHostContext.child !== null) {
                    _currentHostContext.child.return = _currentHostContext;
                    _currentHostContext = _currentHostContext.child;
                    continue;
                  }
                  if (_currentHostContext === workInProgress2)
                    break a;
                  for (;_currentHostContext.sibling === null; ) {
                    if (_currentHostContext.return === null || _currentHostContext.return === workInProgress2)
                      break a;
                    _currentHostContext = _currentHostContext.return;
                  }
                  _currentHostContext.sibling.return = _currentHostContext.return;
                  _currentHostContext = _currentHostContext.sibling;
                }
              workInProgress2.stateNode = nextResource;
              a:
                switch (setInitialProperties(nextResource, type, newProps), type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    newProps = !!newProps.autoFocus;
                    break a;
                  case "img":
                    newProps = true;
                    break a;
                  default:
                    newProps = false;
                }
              newProps && markUpdate(workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          preloadInstanceAndSuspendIfNeeded(workInProgress2, workInProgress2.type, current3 === null ? null : current3.memoizedProps, workInProgress2.pendingProps, renderLanes2);
          return null;
        case 6:
          if (current3 && workInProgress2.stateNode != null)
            current3.memoizedProps !== newProps && markUpdate(workInProgress2);
          else {
            if (typeof newProps !== "string" && workInProgress2.stateNode === null)
              throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            current3 = requiredContext(rootInstanceStackCursor.current);
            renderLanes2 = getHostContext();
            if (popHydrationState(workInProgress2)) {
              current3 = workInProgress2.stateNode;
              renderLanes2 = workInProgress2.memoizedProps;
              type = !didSuspendOrErrorDEV;
              newProps = null;
              nextResource = hydrationParentFiber;
              if (nextResource !== null)
                switch (nextResource.tag) {
                  case 3:
                    type && (type = diffHydratedTextForDevWarnings(current3, renderLanes2, newProps), type !== null && (buildHydrationDiffNode(workInProgress2, 0).serverProps = type));
                    break;
                  case 27:
                  case 5:
                    newProps = nextResource.memoizedProps, type && (type = diffHydratedTextForDevWarnings(current3, renderLanes2, newProps), type !== null && (buildHydrationDiffNode(workInProgress2, 0).serverProps = type));
                }
              current3[internalInstanceKey] = workInProgress2;
              current3 = current3.nodeValue === renderLanes2 || newProps !== null && newProps.suppressHydrationWarning === true || checkForUnmatchedText(current3.nodeValue, renderLanes2) ? true : false;
              current3 || throwOnHydrationMismatch(workInProgress2, true);
            } else
              type = renderLanes2.ancestorInfo.current, type != null && validateTextNesting(newProps, type.tag, renderLanes2.ancestorInfo.implicitRootScope), current3 = getOwnerDocumentFromRootContainer(current3).createTextNode(newProps), current3[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current3;
          }
          bubbleProperties(workInProgress2);
          return null;
        case 31:
          renderLanes2 = workInProgress2.memoizedState;
          if (current3 === null || current3.memoizedState !== null) {
            newProps = popHydrationState(workInProgress2);
            if (renderLanes2 !== null) {
              if (current3 === null) {
                if (!newProps)
                  throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                current3 = workInProgress2.memoizedState;
                current3 = current3 !== null ? current3.dehydrated : null;
                if (!current3)
                  throw Error("Expected to have a hydrated activity instance. This error is likely caused by a bug in React. Please file an issue.");
                current3[internalInstanceKey] = workInProgress2;
                bubbleProperties(workInProgress2);
                (workInProgress2.mode & ProfileMode) !== NoMode && renderLanes2 !== null && (current3 = workInProgress2.child, current3 !== null && (workInProgress2.treeBaseDuration -= current3.treeBaseDuration));
              } else
                emitPendingHydrationWarnings(), resetHydrationState(), (workInProgress2.flags & 128) === 0 && (renderLanes2 = workInProgress2.memoizedState = null), workInProgress2.flags |= 4, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && renderLanes2 !== null && (current3 = workInProgress2.child, current3 !== null && (workInProgress2.treeBaseDuration -= current3.treeBaseDuration));
              current3 = false;
            } else
              renderLanes2 = upgradeHydrationErrorsToRecoverable(), current3 !== null && current3.memoizedState !== null && (current3.memoizedState.hydrationErrors = renderLanes2), current3 = true;
            if (!current3) {
              if (workInProgress2.flags & 256)
                return popSuspenseHandler(workInProgress2), workInProgress2;
              popSuspenseHandler(workInProgress2);
              return null;
            }
            if ((workInProgress2.flags & 128) !== 0)
              throw Error("Client rendering an Activity suspended it again. This is a bug in React.");
          }
          bubbleProperties(workInProgress2);
          return null;
        case 13:
          newProps = workInProgress2.memoizedState;
          if (current3 === null || current3.memoizedState !== null && current3.memoizedState.dehydrated !== null) {
            type = newProps;
            nextResource = popHydrationState(workInProgress2);
            if (type !== null && type.dehydrated !== null) {
              if (current3 === null) {
                if (!nextResource)
                  throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                nextResource = workInProgress2.memoizedState;
                nextResource = nextResource !== null ? nextResource.dehydrated : null;
                if (!nextResource)
                  throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
                nextResource[internalInstanceKey] = workInProgress2;
                bubbleProperties(workInProgress2);
                (workInProgress2.mode & ProfileMode) !== NoMode && type !== null && (type = workInProgress2.child, type !== null && (workInProgress2.treeBaseDuration -= type.treeBaseDuration));
              } else
                emitPendingHydrationWarnings(), resetHydrationState(), (workInProgress2.flags & 128) === 0 && (type = workInProgress2.memoizedState = null), workInProgress2.flags |= 4, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && type !== null && (type = workInProgress2.child, type !== null && (workInProgress2.treeBaseDuration -= type.treeBaseDuration));
              type = false;
            } else
              type = upgradeHydrationErrorsToRecoverable(), current3 !== null && current3.memoizedState !== null && (current3.memoizedState.hydrationErrors = type), type = true;
            if (!type) {
              if (workInProgress2.flags & 256)
                return popSuspenseHandler(workInProgress2), workInProgress2;
              popSuspenseHandler(workInProgress2);
              return null;
            }
          }
          popSuspenseHandler(workInProgress2);
          if ((workInProgress2.flags & 128) !== 0)
            return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
          renderLanes2 = newProps !== null;
          current3 = current3 !== null && current3.memoizedState !== null;
          renderLanes2 && (newProps = workInProgress2.child, type = null, newProps.alternate !== null && newProps.alternate.memoizedState !== null && newProps.alternate.memoizedState.cachePool !== null && (type = newProps.alternate.memoizedState.cachePool.pool), nextResource = null, newProps.memoizedState !== null && newProps.memoizedState.cachePool !== null && (nextResource = newProps.memoizedState.cachePool.pool), nextResource !== type && (newProps.flags |= 2048));
          renderLanes2 !== current3 && renderLanes2 && (workInProgress2.child.flags |= 8192);
          scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
          bubbleProperties(workInProgress2);
          (workInProgress2.mode & ProfileMode) !== NoMode && renderLanes2 && (current3 = workInProgress2.child, current3 !== null && (workInProgress2.treeBaseDuration -= current3.treeBaseDuration));
          return null;
        case 4:
          return popHostContainer(workInProgress2), current3 === null && listenToAllSupportedEvents(workInProgress2.stateNode.containerInfo), bubbleProperties(workInProgress2), null;
        case 10:
          return popProvider(workInProgress2.type, workInProgress2), bubbleProperties(workInProgress2), null;
        case 19:
          pop(suspenseStackCursor, workInProgress2);
          newProps = workInProgress2.memoizedState;
          if (newProps === null)
            return bubbleProperties(workInProgress2), null;
          type = (workInProgress2.flags & 128) !== 0;
          nextResource = newProps.rendering;
          if (nextResource === null)
            if (type)
              cutOffTailIfNeeded(newProps, false);
            else {
              if (workInProgressRootExitStatus !== RootInProgress || current3 !== null && (current3.flags & 128) !== 0)
                for (current3 = workInProgress2.child;current3 !== null; ) {
                  nextResource = findFirstSuspended(current3);
                  if (nextResource !== null) {
                    workInProgress2.flags |= 128;
                    cutOffTailIfNeeded(newProps, false);
                    current3 = nextResource.updateQueue;
                    workInProgress2.updateQueue = current3;
                    scheduleRetryEffect(workInProgress2, current3);
                    workInProgress2.subtreeFlags = 0;
                    current3 = renderLanes2;
                    for (renderLanes2 = workInProgress2.child;renderLanes2 !== null; )
                      resetWorkInProgress(renderLanes2, current3), renderLanes2 = renderLanes2.sibling;
                    push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress2);
                    isHydrating && pushTreeFork(workInProgress2, newProps.treeForkCount);
                    return workInProgress2.child;
                  }
                  current3 = current3.sibling;
                }
              newProps.tail !== null && now$1() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, type = true, cutOffTailIfNeeded(newProps, false), workInProgress2.lanes = 4194304);
            }
          else {
            if (!type)
              if (current3 = findFirstSuspended(nextResource), current3 !== null) {
                if (workInProgress2.flags |= 128, type = true, current3 = current3.updateQueue, workInProgress2.updateQueue = current3, scheduleRetryEffect(workInProgress2, current3), cutOffTailIfNeeded(newProps, true), newProps.tail === null && newProps.tailMode === "hidden" && !nextResource.alternate && !isHydrating)
                  return bubbleProperties(workInProgress2), null;
              } else
                2 * now$1() - newProps.renderingStartTime > workInProgressRootRenderTargetTime && renderLanes2 !== 536870912 && (workInProgress2.flags |= 128, type = true, cutOffTailIfNeeded(newProps, false), workInProgress2.lanes = 4194304);
            newProps.isBackwards ? (nextResource.sibling = workInProgress2.child, workInProgress2.child = nextResource) : (current3 = newProps.last, current3 !== null ? current3.sibling = nextResource : workInProgress2.child = nextResource, newProps.last = nextResource);
          }
          if (newProps.tail !== null)
            return current3 = newProps.tail, newProps.rendering = current3, newProps.tail = current3.sibling, newProps.renderingStartTime = now$1(), current3.sibling = null, renderLanes2 = suspenseStackCursor.current, renderLanes2 = type ? renderLanes2 & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderLanes2 & SubtreeSuspenseContextMask, push(suspenseStackCursor, renderLanes2, workInProgress2), isHydrating && pushTreeFork(workInProgress2, newProps.treeForkCount), current3;
          bubbleProperties(workInProgress2);
          return null;
        case 22:
        case 23:
          return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), newProps = workInProgress2.memoizedState !== null, current3 !== null ? current3.memoizedState !== null !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? (renderLanes2 & 536870912) !== 0 && (workInProgress2.flags & 128) === 0 && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), renderLanes2 = workInProgress2.updateQueue, renderLanes2 !== null && scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue), renderLanes2 = null, current3 !== null && current3.memoizedState !== null && current3.memoizedState.cachePool !== null && (renderLanes2 = current3.memoizedState.cachePool.pool), newProps = null, workInProgress2.memoizedState !== null && workInProgress2.memoizedState.cachePool !== null && (newProps = workInProgress2.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress2.flags |= 2048), current3 !== null && pop(resumedCache, workInProgress2), null;
        case 24:
          return renderLanes2 = null, current3 !== null && (renderLanes2 = current3.memoizedState.cache), workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048), popProvider(CacheContext, workInProgress2), bubbleProperties(workInProgress2), null;
        case 25:
          return null;
        case 30:
          return null;
      }
      throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(current3, workInProgress2) {
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case 1:
          return current3 = workInProgress2.flags, current3 & 65536 ? (workInProgress2.flags = current3 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
        case 3:
          return popProvider(CacheContext, workInProgress2), popHostContainer(workInProgress2), current3 = workInProgress2.flags, (current3 & 65536) !== 0 && (current3 & 128) === 0 ? (workInProgress2.flags = current3 & -65537 | 128, workInProgress2) : null;
        case 26:
        case 27:
        case 5:
          return popHostContext(workInProgress2), null;
        case 31:
          if (workInProgress2.memoizedState !== null) {
            popSuspenseHandler(workInProgress2);
            if (workInProgress2.alternate === null)
              throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            resetHydrationState();
          }
          current3 = workInProgress2.flags;
          return current3 & 65536 ? (workInProgress2.flags = current3 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
        case 13:
          popSuspenseHandler(workInProgress2);
          current3 = workInProgress2.memoizedState;
          if (current3 !== null && current3.dehydrated !== null) {
            if (workInProgress2.alternate === null)
              throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            resetHydrationState();
          }
          current3 = workInProgress2.flags;
          return current3 & 65536 ? (workInProgress2.flags = current3 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
        case 19:
          return pop(suspenseStackCursor, workInProgress2), null;
        case 4:
          return popHostContainer(workInProgress2), null;
        case 10:
          return popProvider(workInProgress2.type, workInProgress2), null;
        case 22:
        case 23:
          return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), current3 !== null && pop(resumedCache, workInProgress2), current3 = workInProgress2.flags, current3 & 65536 ? (workInProgress2.flags = current3 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
        case 24:
          return popProvider(CacheContext, workInProgress2), null;
        case 25:
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(current3, interruptedWork) {
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case 3:
          popProvider(CacheContext, interruptedWork);
          popHostContainer(interruptedWork);
          break;
        case 26:
        case 27:
        case 5:
          popHostContext(interruptedWork);
          break;
        case 4:
          popHostContainer(interruptedWork);
          break;
        case 31:
          interruptedWork.memoizedState !== null && popSuspenseHandler(interruptedWork);
          break;
        case 13:
          popSuspenseHandler(interruptedWork);
          break;
        case 19:
          pop(suspenseStackCursor, interruptedWork);
          break;
        case 10:
          popProvider(interruptedWork.type, interruptedWork);
          break;
        case 22:
        case 23:
          popSuspenseHandler(interruptedWork);
          popHiddenContext(interruptedWork);
          current3 !== null && pop(resumedCache, interruptedWork);
          break;
        case 24:
          popProvider(CacheContext, interruptedWork);
      }
    }
    function shouldProfile(current3) {
      return (current3.mode & ProfileMode) !== NoMode;
    }
    function commitHookLayoutEffects(finishedWork, hookFlags) {
      shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
    }
    function commitHookLayoutUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
      shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor), recordEffectDuration()) : commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);
    }
    function commitHookEffectListMount(flags, finishedWork) {
      try {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          updateQueue = firstEffect;
          do {
            if ((updateQueue.tag & flags) === flags && (lastEffect = undefined, (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = runWithFiberInDEV(finishedWork, callCreateInDEV, updateQueue), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = false), lastEffect !== undefined && typeof lastEffect !== "function")) {
              var hookName = undefined;
              hookName = (updateQueue.tag & Layout) !== 0 ? "useLayoutEffect" : (updateQueue.tag & Insertion) !== 0 ? "useInsertionEffect" : "useEffect";
              var addendum = undefined;
              addendum = lastEffect === null ? " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof lastEffect.then === "function" ? `

It looks like you wrote ` + hookName + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + hookName + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching` : " You returned: " + lastEffect;
              runWithFiberInDEV(finishedWork, function(n, a) {
                console.error("%s must not return anything besides a function, which is used for clean-up.%s", n, a);
              }, hookName, addendum);
            }
            updateQueue = updateQueue.next;
          } while (updateQueue !== firstEffect);
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
      try {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          updateQueue = firstEffect;
          do {
            if ((updateQueue.tag & flags) === flags) {
              var inst = updateQueue.inst, destroy = inst.destroy;
              destroy !== undefined && (inst.destroy = undefined, (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = finishedWork, runWithFiberInDEV(lastEffect, callDestroyInDEV, lastEffect, nearestMountedAncestor, destroy), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = false));
            }
            updateQueue = updateQueue.next;
          } while (updateQueue !== firstEffect);
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitHookPassiveMountEffects(finishedWork, hookFlags) {
      shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
    }
    function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
      shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor), recordEffectDuration()) : commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);
    }
    function commitClassCallbacks(finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      if (updateQueue !== null) {
        var instance = finishedWork.stateNode;
        finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (instance.props !== finishedWork.memoizedProps && console.error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && console.error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
        try {
          runWithFiberInDEV(finishedWork, commitCallbacks, updateQueue, instance);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
    }
    function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
      return instance.getSnapshotBeforeUpdate(prevProps, prevState);
    }
    function commitClassSnapshot(finishedWork, current3) {
      var { memoizedProps: prevProps, memoizedState: prevState } = current3;
      current3 = finishedWork.stateNode;
      finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (current3.props !== finishedWork.memoizedProps && console.error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), current3.state !== finishedWork.memoizedState && console.error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
      try {
        var resolvedPrevProps = resolveClassComponentProps(finishedWork.type, prevProps);
        var snapshot = runWithFiberInDEV(finishedWork, callGetSnapshotBeforeUpdates, current3, resolvedPrevProps, prevState);
        prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
        snapshot !== undefined || prevProps.has(finishedWork.type) || (prevProps.add(finishedWork.type), runWithFiberInDEV(finishedWork, function() {
          console.error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
        }));
        current3.__reactInternalSnapshotBeforeUpdate = snapshot;
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function safelyCallComponentWillUnmount(current3, nearestMountedAncestor, instance) {
      instance.props = resolveClassComponentProps(current3.type, current3.memoizedProps);
      instance.state = current3.memoizedState;
      shouldProfile(current3) ? (startEffectTimer(), runWithFiberInDEV(current3, callComponentWillUnmountInDEV, current3, nearestMountedAncestor, instance), recordEffectDuration()) : runWithFiberInDEV(current3, callComponentWillUnmountInDEV, current3, nearestMountedAncestor, instance);
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (ref !== null) {
        switch (finishedWork.tag) {
          case 26:
          case 27:
          case 5:
            var instanceToUse = finishedWork.stateNode;
            break;
          case 30:
            instanceToUse = finishedWork.stateNode;
            break;
          default:
            instanceToUse = finishedWork.stateNode;
        }
        if (typeof ref === "function")
          if (shouldProfile(finishedWork))
            try {
              startEffectTimer(), finishedWork.refCleanup = ref(instanceToUse);
            } finally {
              recordEffectDuration();
            }
          else
            finishedWork.refCleanup = ref(instanceToUse);
        else
          typeof ref === "string" ? console.error("String refs are no longer supported.") : ref.hasOwnProperty("current") || console.error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork)), ref.current = instanceToUse;
      }
    }
    function safelyAttachRef(current3, nearestMountedAncestor) {
      try {
        runWithFiberInDEV(current3, commitAttachRef, current3);
      } catch (error) {
        captureCommitPhaseError(current3, nearestMountedAncestor, error);
      }
    }
    function safelyDetachRef(current3, nearestMountedAncestor) {
      var { ref, refCleanup } = current3;
      if (ref !== null)
        if (typeof refCleanup === "function")
          try {
            if (shouldProfile(current3))
              try {
                startEffectTimer(), runWithFiberInDEV(current3, refCleanup);
              } finally {
                recordEffectDuration(current3);
              }
            else
              runWithFiberInDEV(current3, refCleanup);
          } catch (error) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error);
          } finally {
            current3.refCleanup = null, current3 = current3.alternate, current3 != null && (current3.refCleanup = null);
          }
        else if (typeof ref === "function")
          try {
            if (shouldProfile(current3))
              try {
                startEffectTimer(), runWithFiberInDEV(current3, ref, null);
              } finally {
                recordEffectDuration(current3);
              }
            else
              runWithFiberInDEV(current3, ref, null);
          } catch (error$7) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error$7);
          }
        else
          ref.current = null;
    }
    function commitProfiler(finishedWork, current3, commitStartTime2, effectDuration) {
      var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onCommit = _finishedWork$memoize.onCommit;
      _finishedWork$memoize = _finishedWork$memoize.onRender;
      current3 = current3 === null ? "mount" : "update";
      currentUpdateIsNested && (current3 = "nested-update");
      typeof _finishedWork$memoize === "function" && _finishedWork$memoize(id, current3, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitStartTime2);
      typeof onCommit === "function" && onCommit(id, current3, effectDuration, commitStartTime2);
    }
    function commitProfilerPostCommitImpl(finishedWork, current3, commitStartTime2, passiveEffectDuration) {
      var _finishedWork$memoize2 = finishedWork.memoizedProps;
      finishedWork = _finishedWork$memoize2.id;
      _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
      current3 = current3 === null ? "mount" : "update";
      currentUpdateIsNested && (current3 = "nested-update");
      typeof _finishedWork$memoize2 === "function" && _finishedWork$memoize2(finishedWork, current3, passiveEffectDuration, commitStartTime2);
    }
    function commitHostMount(finishedWork) {
      var { type, memoizedProps: props, stateNode: instance } = finishedWork;
      try {
        runWithFiberInDEV(finishedWork, commitMount, instance, type, props, finishedWork);
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitHostUpdate(finishedWork, newProps, oldProps) {
      try {
        runWithFiberInDEV(finishedWork, commitUpdate, finishedWork.stateNode, finishedWork.type, oldProps, newProps, finishedWork);
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function isHostParent(fiber) {
      return fiber.tag === 5 || fiber.tag === 3 || fiber.tag === 26 || fiber.tag === 27 && isSingletonScope(fiber.type) || fiber.tag === 4;
    }
    function getHostSibling(fiber) {
      a:
        for (;; ) {
          for (;fiber.sibling === null; ) {
            if (fiber.return === null || isHostParent(fiber.return))
              return null;
            fiber = fiber.return;
          }
          fiber.sibling.return = fiber.return;
          for (fiber = fiber.sibling;fiber.tag !== 5 && fiber.tag !== 6 && fiber.tag !== 18; ) {
            if (fiber.tag === 27 && isSingletonScope(fiber.type))
              continue a;
            if (fiber.flags & 2)
              continue a;
            if (fiber.child === null || fiber.tag === 4)
              continue a;
            else
              fiber.child.return = fiber, fiber = fiber.child;
          }
          if (!(fiber.flags & 2))
            return fiber.stateNode;
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
      var tag = node.tag;
      if (tag === 5 || tag === 6)
        node = node.stateNode, before ? (warnForReactChildrenConflict(parent), (parent.nodeType === 9 ? parent.body : parent.nodeName === "HTML" ? parent.ownerDocument.body : parent).insertBefore(node, before)) : (warnForReactChildrenConflict(parent), before = parent.nodeType === 9 ? parent.body : parent.nodeName === "HTML" ? parent.ownerDocument.body : parent, before.appendChild(node), parent = parent._reactRootContainer, parent !== null && parent !== undefined || before.onclick !== null || (before.onclick = noop$1));
      else if (tag !== 4 && (tag === 27 && isSingletonScope(node.type) && (parent = node.stateNode, before = null), node = node.child, node !== null))
        for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;node !== null; )
          insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
    }
    function insertOrAppendPlacementNode(node, before, parent) {
      var tag = node.tag;
      if (tag === 5 || tag === 6)
        node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
      else if (tag !== 4 && (tag === 27 && isSingletonScope(node.type) && (parent = node.stateNode), node = node.child, node !== null))
        for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling;node !== null; )
          insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
    }
    function commitPlacement(finishedWork) {
      for (var hostParentFiber, parentFiber = finishedWork.return;parentFiber !== null; ) {
        if (isHostParent(parentFiber)) {
          hostParentFiber = parentFiber;
          break;
        }
        parentFiber = parentFiber.return;
      }
      if (hostParentFiber == null)
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      switch (hostParentFiber.tag) {
        case 27:
          hostParentFiber = hostParentFiber.stateNode;
          parentFiber = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(finishedWork, parentFiber, hostParentFiber);
          break;
        case 5:
          parentFiber = hostParentFiber.stateNode;
          hostParentFiber.flags & 32 && (resetTextContent(parentFiber), hostParentFiber.flags &= -33);
          hostParentFiber = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(finishedWork, hostParentFiber, parentFiber);
          break;
        case 3:
        case 4:
          hostParentFiber = hostParentFiber.stateNode.containerInfo;
          parentFiber = getHostSibling(finishedWork);
          insertOrAppendPlacementNodeIntoContainer(finishedWork, parentFiber, hostParentFiber);
          break;
        default:
          throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function commitHostSingletonAcquisition(finishedWork) {
      var { stateNode: singleton, memoizedProps: props } = finishedWork;
      try {
        runWithFiberInDEV(finishedWork, acquireSingletonInstance, finishedWork.type, props, singleton, finishedWork);
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function isHydratingParent(current3, finishedWork) {
      return finishedWork.tag === 31 ? (finishedWork = finishedWork.memoizedState, current3.memoizedState !== null && finishedWork === null) : finishedWork.tag === 13 ? (current3 = current3.memoizedState, finishedWork = finishedWork.memoizedState, current3 !== null && current3.dehydrated !== null && (finishedWork === null || finishedWork.dehydrated === null)) : finishedWork.tag === 3 ? current3.memoizedState.isDehydrated && (finishedWork.flags & 256) === 0 : false;
    }
    function commitBeforeMutationEffects(root2, firstChild) {
      root2 = root2.containerInfo;
      eventsEnabled = _enabled;
      root2 = getActiveElementDeep(root2);
      if (hasSelectionCapabilities(root2)) {
        if ("selectionStart" in root2)
          var JSCompiler_temp = {
            start: root2.selectionStart,
            end: root2.selectionEnd
          };
        else
          a: {
            JSCompiler_temp = (JSCompiler_temp = root2.ownerDocument) && JSCompiler_temp.defaultView || window;
            var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
            if (selection && selection.rangeCount !== 0) {
              JSCompiler_temp = selection.anchorNode;
              var { anchorOffset, focusNode } = selection;
              selection = selection.focusOffset;
              try {
                JSCompiler_temp.nodeType, focusNode.nodeType;
              } catch (e$2) {
                JSCompiler_temp = null;
                break a;
              }
              var length2 = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root2, parentNode = null;
              b:
                for (;; ) {
                  for (var next;; ) {
                    node !== JSCompiler_temp || anchorOffset !== 0 && node.nodeType !== 3 || (start = length2 + anchorOffset);
                    node !== focusNode || selection !== 0 && node.nodeType !== 3 || (end = length2 + selection);
                    node.nodeType === 3 && (length2 += node.nodeValue.length);
                    if ((next = node.firstChild) === null)
                      break;
                    parentNode = node;
                    node = next;
                  }
                  for (;; ) {
                    if (node === root2)
                      break b;
                    parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length2);
                    parentNode === focusNode && ++indexWithinFocus === selection && (end = length2);
                    if ((next = node.nextSibling) !== null)
                      break;
                    node = parentNode;
                    parentNode = node.parentNode;
                  }
                  node = next;
                }
              JSCompiler_temp = start === -1 || end === -1 ? null : { start, end };
            } else
              JSCompiler_temp = null;
          }
        JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
      } else
        JSCompiler_temp = null;
      selectionInformation = {
        focusedElem: root2,
        selectionRange: JSCompiler_temp
      };
      _enabled = false;
      for (nextEffect = firstChild;nextEffect !== null; )
        if (firstChild = nextEffect, root2 = firstChild.child, (firstChild.subtreeFlags & 1028) !== 0 && root2 !== null)
          root2.return = firstChild, nextEffect = root2;
        else
          for (;nextEffect !== null; ) {
            root2 = firstChild = nextEffect;
            JSCompiler_temp = root2.alternate;
            anchorOffset = root2.flags;
            switch (root2.tag) {
              case 0:
                if ((anchorOffset & 4) !== 0 && (root2 = root2.updateQueue, root2 = root2 !== null ? root2.events : null, root2 !== null))
                  for (JSCompiler_temp = 0;JSCompiler_temp < root2.length; JSCompiler_temp++)
                    anchorOffset = root2[JSCompiler_temp], anchorOffset.ref.impl = anchorOffset.nextImpl;
                break;
              case 11:
              case 15:
                break;
              case 1:
                (anchorOffset & 1024) !== 0 && JSCompiler_temp !== null && commitClassSnapshot(root2, JSCompiler_temp);
                break;
              case 3:
                if ((anchorOffset & 1024) !== 0) {
                  if (root2 = root2.stateNode.containerInfo, JSCompiler_temp = root2.nodeType, JSCompiler_temp === 9)
                    clearContainerSparingly(root2);
                  else if (JSCompiler_temp === 1)
                    switch (root2.nodeName) {
                      case "HEAD":
                      case "HTML":
                      case "BODY":
                        clearContainerSparingly(root2);
                        break;
                      default:
                        root2.textContent = "";
                    }
                }
                break;
              case 5:
              case 26:
              case 27:
              case 6:
              case 4:
              case 17:
                break;
              default:
                if ((anchorOffset & 1024) !== 0)
                  throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2 = firstChild.sibling;
            if (root2 !== null) {
              root2.return = firstChild.return;
              nextEffect = root2;
              break;
            }
            nextEffect = firstChild.return;
          }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current3, finishedWork) {
      var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          flags & 4 && commitHookLayoutEffects(finishedWork, Layout | HasEffect);
          break;
        case 1:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          if (flags & 4)
            if (finishedRoot = finishedWork.stateNode, current3 === null)
              finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), finishedRoot.state !== finishedWork.memoizedState && console.error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(finishedWork, callComponentDidMountInDEV, finishedWork, finishedRoot), recordEffectDuration()) : runWithFiberInDEV(finishedWork, callComponentDidMountInDEV, finishedWork, finishedRoot);
            else {
              var prevProps = resolveClassComponentProps(finishedWork.type, current3.memoizedProps);
              current3 = current3.memoizedState;
              finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), finishedRoot.state !== finishedWork.memoizedState && console.error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
              shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(finishedWork, callComponentDidUpdateInDEV, finishedWork, finishedRoot, prevProps, current3, finishedRoot.__reactInternalSnapshotBeforeUpdate), recordEffectDuration()) : runWithFiberInDEV(finishedWork, callComponentDidUpdateInDEV, finishedWork, finishedRoot, prevProps, current3, finishedRoot.__reactInternalSnapshotBeforeUpdate);
            }
          flags & 64 && commitClassCallbacks(finishedWork);
          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 3:
          current3 = pushNestedEffectDurations();
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          if (flags & 64 && (flags = finishedWork.updateQueue, flags !== null)) {
            prevProps = null;
            if (finishedWork.child !== null)
              switch (finishedWork.child.tag) {
                case 27:
                case 5:
                  prevProps = finishedWork.child.stateNode;
                  break;
                case 1:
                  prevProps = finishedWork.child.stateNode;
              }
            try {
              runWithFiberInDEV(finishedWork, commitCallbacks, flags, prevProps);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          finishedRoot.effectDuration += popNestedEffectDurations(current3);
          break;
        case 27:
          current3 === null && flags & 4 && commitHostSingletonAcquisition(finishedWork);
        case 26:
        case 5:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          if (current3 === null) {
            if (flags & 4)
              commitHostMount(finishedWork);
            else if (flags & 64) {
              finishedRoot = finishedWork.type;
              current3 = finishedWork.memoizedProps;
              prevProps = finishedWork.stateNode;
              try {
                runWithFiberInDEV(finishedWork, commitHydratedInstance, prevProps, finishedRoot, current3, finishedWork);
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
          }
          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 12:
          if (flags & 4) {
            flags = pushNestedEffectDurations();
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            finishedRoot = finishedWork.stateNode;
            finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
            try {
              runWithFiberInDEV(finishedWork, commitProfiler, finishedWork, current3, commitStartTime, finishedRoot.effectDuration);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          } else
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          break;
        case 31:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          flags & 4 && commitActivityHydrationCallbacks(finishedRoot, finishedWork);
          break;
        case 13:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          flags & 64 && (finishedRoot = finishedWork.memoizedState, finishedRoot !== null && (finishedRoot = finishedRoot.dehydrated, finishedRoot !== null && (flags = retryDehydratedSuspenseBoundary.bind(null, finishedWork), registerSuspenseInstanceRetry(finishedRoot, flags))));
          break;
        case 22:
          flags = finishedWork.memoizedState !== null || offscreenSubtreeIsHidden;
          if (!flags) {
            current3 = current3 !== null && current3.memoizedState !== null || offscreenSubtreeWasHidden;
            prevProps = offscreenSubtreeIsHidden;
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = flags;
            (offscreenSubtreeWasHidden = current3) && !prevOffscreenSubtreeWasHidden ? (recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, (finishedWork.subtreeFlags & 8772) !== 0), (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentReappeared(finishedWork, componentEffectStartTime, componentEffectEndTime)) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            offscreenSubtreeIsHidden = prevProps;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          }
          break;
        case 30:
          break;
        default:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      }
      (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && ((componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(finishedWork, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors), finishedWork.alternate === null && finishedWork.return !== null && finishedWork.return.alternate !== null && 0.05 < componentEffectEndTime - componentEffectStartTime && (isHydratingParent(finishedWork.return.alternate, finishedWork.return) || logComponentTrigger(finishedWork, componentEffectStartTime, componentEffectEndTime, "Mount")));
      popComponentEffectStart(prevEffectStart);
      popComponentEffectDuration(prevEffectDuration);
      componentEffectErrors = prevEffectErrors;
      componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
    }
    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      alternate !== null && (fiber.alternate = null, detachFiberAfterEffects(alternate));
      fiber.child = null;
      fiber.deletions = null;
      fiber.sibling = null;
      fiber.tag === 5 && (alternate = fiber.stateNode, alternate !== null && detachDeletedInstance(alternate));
      fiber.stateNode = null;
      fiber._debugOwner = null;
      fiber.return = null;
      fiber.dependencies = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.stateNode = null;
      fiber.updateQueue = null;
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
      for (parent = parent.child;parent !== null; )
        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function")
        try {
          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
        } catch (err) {
          hasLoggedError || (hasLoggedError = true, console.error("React instrumentation encountered an error: %o", err));
        }
      var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
      switch (deletedFiber.tag) {
        case 26:
          offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (finishedRoot = deletedFiber.stateNode, finishedRoot.parentNode.removeChild(finishedRoot));
          break;
        case 27:
          offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
          isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          runWithFiberInDEV(deletedFiber, releaseSingletonInstance, deletedFiber.stateNode);
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          break;
        case 5:
          offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        case 6:
          prevHostParent = hostParent;
          prevHostParentIsContainer = hostParentIsContainer;
          hostParent = null;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          if (hostParent !== null)
            if (hostParentIsContainer)
              try {
                runWithFiberInDEV(deletedFiber, removeChildFromContainer, hostParent, deletedFiber.stateNode);
              } catch (error) {
                captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
              }
            else
              try {
                runWithFiberInDEV(deletedFiber, removeChild, hostParent, deletedFiber.stateNode);
              } catch (error) {
                captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
              }
          break;
        case 18:
          hostParent !== null && (hostParentIsContainer ? (finishedRoot = hostParent, clearHydrationBoundary(finishedRoot.nodeType === 9 ? finishedRoot.body : finishedRoot.nodeName === "HTML" ? finishedRoot.ownerDocument.body : finishedRoot, deletedFiber.stateNode), retryIfBlockedOn(finishedRoot)) : clearHydrationBoundary(hostParent, deletedFiber.stateNode));
          break;
        case 4:
          prevHostParent = hostParent;
          prevHostParentIsContainer = hostParentIsContainer;
          hostParent = deletedFiber.stateNode.containerInfo;
          hostParentIsContainer = true;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          commitHookEffectListUnmount(Insertion, deletedFiber, nearestMountedAncestor);
          offscreenSubtreeWasHidden || commitHookLayoutUnmountEffects(deletedFiber, nearestMountedAncestor, Layout);
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          break;
        case 1:
          offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, typeof prevHostParent.componentWillUnmount === "function" && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, prevHostParent));
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          break;
        case 21:
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          break;
        case 22:
          offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || deletedFiber.memoizedState !== null;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          offscreenSubtreeWasHidden = prevHostParent;
          break;
        default:
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      }
      (deletedFiber.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(deletedFiber, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors);
      popComponentEffectStart(prevEffectStart);
      popComponentEffectDuration(prevEffectDuration);
      componentEffectErrors = prevEffectErrors;
      componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
    }
    function commitActivityHydrationCallbacks(finishedRoot, finishedWork) {
      if (finishedWork.memoizedState === null && (finishedRoot = finishedWork.alternate, finishedRoot !== null && (finishedRoot = finishedRoot.memoizedState, finishedRoot !== null))) {
        finishedRoot = finishedRoot.dehydrated;
        try {
          runWithFiberInDEV(finishedWork, commitHydratedActivityInstance, finishedRoot);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      if (finishedWork.memoizedState === null && (finishedRoot = finishedWork.alternate, finishedRoot !== null && (finishedRoot = finishedRoot.memoizedState, finishedRoot !== null && (finishedRoot = finishedRoot.dehydrated, finishedRoot !== null))))
        try {
          runWithFiberInDEV(finishedWork, commitHydratedSuspenseInstance, finishedRoot);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
    function getRetryCache(finishedWork) {
      switch (finishedWork.tag) {
        case 31:
        case 13:
        case 19:
          var retryCache = finishedWork.stateNode;
          retryCache === null && (retryCache = finishedWork.stateNode = new PossiblyWeakSet);
          return retryCache;
        case 22:
          return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, retryCache === null && (retryCache = finishedWork._retryCache = new PossiblyWeakSet), retryCache;
        default:
          throw Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React.");
      }
    }
    function attachSuspenseRetryListeners(finishedWork, wakeables) {
      var retryCache = getRetryCache(finishedWork);
      wakeables.forEach(function(wakeable) {
        if (!retryCache.has(wakeable)) {
          retryCache.add(wakeable);
          if (isDevToolsPresent)
            if (inProgressLanes !== null && inProgressRoot !== null)
              restorePendingUpdaters(inProgressRoot, inProgressLanes);
            else
              throw Error("Expected finished root and lanes to be set. This is a bug in React.");
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          wakeable.then(retry, retry);
        }
      });
    }
    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
      var deletions = parentFiber.deletions;
      if (deletions !== null)
        for (var i = 0;i < deletions.length; i++) {
          var root2 = root$jscomp$0, returnFiber = parentFiber, deletedFiber = deletions[i], prevEffectStart = pushComponentEffectStart(), parent = returnFiber;
          a:
            for (;parent !== null; ) {
              switch (parent.tag) {
                case 27:
                  if (isSingletonScope(parent.type)) {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break a;
                  }
                  break;
                case 5:
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break a;
                case 3:
                case 4:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break a;
              }
              parent = parent.return;
            }
          if (hostParent === null)
            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = false;
          (deletedFiber.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(deletedFiber, componentEffectStartTime, componentEffectEndTime, "Unmount");
          popComponentEffectStart(prevEffectStart);
          root2 = deletedFiber;
          returnFiber = root2.alternate;
          returnFiber !== null && (returnFiber.return = null);
          root2.return = null;
        }
      if (parentFiber.subtreeFlags & 13886)
        for (parentFiber = parentFiber.child;parentFiber !== null; )
          commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
    }
    function commitMutationEffectsOnFiber(finishedWork, root2) {
      var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), current3 = finishedWork.alternate, flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 4 && (commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return), commitHookEffectListMount(Insertion | HasEffect, finishedWork), commitHookLayoutUnmountEffects(finishedWork, finishedWork.return, Layout | HasEffect));
          break;
        case 1:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 && (offscreenSubtreeWasHidden || current3 === null || safelyDetachRef(current3, current3.return));
          if (flags & 64 && offscreenSubtreeIsHidden && (flags = finishedWork.updateQueue, flags !== null && (current3 = flags.callbacks, current3 !== null))) {
            var existingHiddenCallbacks = flags.shared.hiddenCallbacks;
            flags.shared.hiddenCallbacks = existingHiddenCallbacks === null ? current3 : existingHiddenCallbacks.concat(current3);
          }
          break;
        case 26:
          existingHiddenCallbacks = currentHoistableRoot;
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 && (offscreenSubtreeWasHidden || current3 === null || safelyDetachRef(current3, current3.return));
          if (flags & 4) {
            var currentResource = current3 !== null ? current3.memoizedState : null;
            flags = finishedWork.memoizedState;
            if (current3 === null)
              if (flags === null)
                if (finishedWork.stateNode === null) {
                  a: {
                    flags = finishedWork.type;
                    current3 = finishedWork.memoizedProps;
                    existingHiddenCallbacks = existingHiddenCallbacks.ownerDocument || existingHiddenCallbacks;
                    b:
                      switch (flags) {
                        case "title":
                          currentResource = existingHiddenCallbacks.getElementsByTagName("title")[0];
                          if (!currentResource || currentResource[internalHoistableMarker] || currentResource[internalInstanceKey] || currentResource.namespaceURI === SVG_NAMESPACE || currentResource.hasAttribute("itemprop"))
                            currentResource = existingHiddenCallbacks.createElement(flags), existingHiddenCallbacks.head.insertBefore(currentResource, existingHiddenCallbacks.querySelector("head > title"));
                          setInitialProperties(currentResource, flags, current3);
                          currentResource[internalInstanceKey] = finishedWork;
                          markNodeAsHoistable(currentResource);
                          flags = currentResource;
                          break a;
                        case "link":
                          var maybeNodes = getHydratableHoistableCache("link", "href", existingHiddenCallbacks).get(flags + (current3.href || ""));
                          if (maybeNodes) {
                            for (var i = 0;i < maybeNodes.length; i++)
                              if (currentResource = maybeNodes[i], currentResource.getAttribute("href") === (current3.href == null || current3.href === "" ? null : current3.href) && currentResource.getAttribute("rel") === (current3.rel == null ? null : current3.rel) && currentResource.getAttribute("title") === (current3.title == null ? null : current3.title) && currentResource.getAttribute("crossorigin") === (current3.crossOrigin == null ? null : current3.crossOrigin)) {
                                maybeNodes.splice(i, 1);
                                break b;
                              }
                          }
                          currentResource = existingHiddenCallbacks.createElement(flags);
                          setInitialProperties(currentResource, flags, current3);
                          existingHiddenCallbacks.head.appendChild(currentResource);
                          break;
                        case "meta":
                          if (maybeNodes = getHydratableHoistableCache("meta", "content", existingHiddenCallbacks).get(flags + (current3.content || ""))) {
                            for (i = 0;i < maybeNodes.length; i++)
                              if (currentResource = maybeNodes[i], checkAttributeStringCoercion(current3.content, "content"), currentResource.getAttribute("content") === (current3.content == null ? null : "" + current3.content) && currentResource.getAttribute("name") === (current3.name == null ? null : current3.name) && currentResource.getAttribute("property") === (current3.property == null ? null : current3.property) && currentResource.getAttribute("http-equiv") === (current3.httpEquiv == null ? null : current3.httpEquiv) && currentResource.getAttribute("charset") === (current3.charSet == null ? null : current3.charSet)) {
                                maybeNodes.splice(i, 1);
                                break b;
                              }
                          }
                          currentResource = existingHiddenCallbacks.createElement(flags);
                          setInitialProperties(currentResource, flags, current3);
                          existingHiddenCallbacks.head.appendChild(currentResource);
                          break;
                        default:
                          throw Error('getNodesForType encountered a type it did not expect: "' + flags + '". This is a bug in React.');
                      }
                    currentResource[internalInstanceKey] = finishedWork;
                    markNodeAsHoistable(currentResource);
                    flags = currentResource;
                  }
                  finishedWork.stateNode = flags;
                } else
                  mountHoistable(existingHiddenCallbacks, finishedWork.type, finishedWork.stateNode);
              else
                finishedWork.stateNode = acquireResource(existingHiddenCallbacks, flags, finishedWork.memoizedProps);
            else
              currentResource !== flags ? (currentResource === null ? current3.stateNode !== null && (current3 = current3.stateNode, current3.parentNode.removeChild(current3)) : currentResource.count--, flags === null ? mountHoistable(existingHiddenCallbacks, finishedWork.type, finishedWork.stateNode) : acquireResource(existingHiddenCallbacks, flags, finishedWork.memoizedProps)) : flags === null && finishedWork.stateNode !== null && commitHostUpdate(finishedWork, finishedWork.memoizedProps, current3.memoizedProps);
          }
          break;
        case 27:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 && (offscreenSubtreeWasHidden || current3 === null || safelyDetachRef(current3, current3.return));
          current3 !== null && flags & 4 && commitHostUpdate(finishedWork, finishedWork.memoizedProps, current3.memoizedProps);
          break;
        case 5:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 && (offscreenSubtreeWasHidden || current3 === null || safelyDetachRef(current3, current3.return));
          if (finishedWork.flags & 32) {
            existingHiddenCallbacks = finishedWork.stateNode;
            try {
              runWithFiberInDEV(finishedWork, resetTextContent, existingHiddenCallbacks);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          flags & 4 && finishedWork.stateNode != null && (existingHiddenCallbacks = finishedWork.memoizedProps, commitHostUpdate(finishedWork, existingHiddenCallbacks, current3 !== null ? current3.memoizedProps : existingHiddenCallbacks));
          flags & 1024 && (needsFormReset = true, finishedWork.type !== "form" && console.error("Unexpected host component type. Expected a form. This is a bug in React."));
          break;
        case 6:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & 4) {
            if (finishedWork.stateNode === null)
              throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            flags = finishedWork.memoizedProps;
            current3 = current3 !== null ? current3.memoizedProps : flags;
            existingHiddenCallbacks = finishedWork.stateNode;
            try {
              runWithFiberInDEV(finishedWork, commitTextUpdate, existingHiddenCallbacks, current3, flags);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          break;
        case 3:
          existingHiddenCallbacks = pushNestedEffectDurations();
          tagCaches = null;
          currentResource = currentHoistableRoot;
          currentHoistableRoot = getHoistableRoot(root2.containerInfo);
          recursivelyTraverseMutationEffects(root2, finishedWork);
          currentHoistableRoot = currentResource;
          commitReconciliationEffects(finishedWork);
          if (flags & 4 && current3 !== null && current3.memoizedState.isDehydrated)
            try {
              runWithFiberInDEV(finishedWork, commitHydratedContainer, root2.containerInfo);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
          root2.effectDuration += popNestedEffectDurations(existingHiddenCallbacks);
          break;
        case 4:
          flags = currentHoistableRoot;
          currentHoistableRoot = getHoistableRoot(finishedWork.stateNode.containerInfo);
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          currentHoistableRoot = flags;
          break;
        case 12:
          flags = pushNestedEffectDurations();
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          finishedWork.stateNode.effectDuration += bubbleNestedEffectDurations(flags);
          break;
        case 31:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 4 && (flags = finishedWork.updateQueue, flags !== null && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
          break;
        case 13:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          finishedWork.child.flags & 8192 && finishedWork.memoizedState !== null !== (current3 !== null && current3.memoizedState !== null) && (globalMostRecentFallbackTime = now$1());
          flags & 4 && (flags = finishedWork.updateQueue, flags !== null && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
          break;
        case 22:
          existingHiddenCallbacks = finishedWork.memoizedState !== null;
          var wasHidden = current3 !== null && current3.memoizedState !== null, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || existingHiddenCallbacks;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
          recursivelyTraverseMutationEffects(root2, finishedWork);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
          wasHidden && !existingHiddenCallbacks && !prevOffscreenSubtreeIsHidden && !prevOffscreenSubtreeWasHidden && (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentReappeared(finishedWork, componentEffectStartTime, componentEffectEndTime);
          commitReconciliationEffects(finishedWork);
          if (flags & 8192)
            a:
              for (root2 = finishedWork.stateNode, root2._visibility = existingHiddenCallbacks ? root2._visibility & ~OffscreenVisible : root2._visibility | OffscreenVisible, !existingHiddenCallbacks || current3 === null || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || (recursivelyTraverseDisappearLayoutEffects(finishedWork), (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(finishedWork, componentEffectStartTime, componentEffectEndTime, "Disconnect")), current3 = null, root2 = finishedWork;; ) {
                if (root2.tag === 5 || root2.tag === 26) {
                  if (current3 === null) {
                    wasHidden = current3 = root2;
                    try {
                      currentResource = wasHidden.stateNode, existingHiddenCallbacks ? runWithFiberInDEV(wasHidden, hideInstance, currentResource) : runWithFiberInDEV(wasHidden, unhideInstance, wasHidden.stateNode, wasHidden.memoizedProps);
                    } catch (error) {
                      captureCommitPhaseError(wasHidden, wasHidden.return, error);
                    }
                  }
                } else if (root2.tag === 6) {
                  if (current3 === null) {
                    wasHidden = root2;
                    try {
                      maybeNodes = wasHidden.stateNode, existingHiddenCallbacks ? runWithFiberInDEV(wasHidden, hideTextInstance, maybeNodes) : runWithFiberInDEV(wasHidden, unhideTextInstance, maybeNodes, wasHidden.memoizedProps);
                    } catch (error) {
                      captureCommitPhaseError(wasHidden, wasHidden.return, error);
                    }
                  }
                } else if (root2.tag === 18) {
                  if (current3 === null) {
                    wasHidden = root2;
                    try {
                      i = wasHidden.stateNode, existingHiddenCallbacks ? runWithFiberInDEV(wasHidden, hideDehydratedBoundary, i) : runWithFiberInDEV(wasHidden, unhideDehydratedBoundary, wasHidden.stateNode);
                    } catch (error) {
                      captureCommitPhaseError(wasHidden, wasHidden.return, error);
                    }
                  }
                } else if ((root2.tag !== 22 && root2.tag !== 23 || root2.memoizedState === null || root2 === finishedWork) && root2.child !== null) {
                  root2.child.return = root2;
                  root2 = root2.child;
                  continue;
                }
                if (root2 === finishedWork)
                  break a;
                for (;root2.sibling === null; ) {
                  if (root2.return === null || root2.return === finishedWork)
                    break a;
                  current3 === root2 && (current3 = null);
                  root2 = root2.return;
                }
                current3 === root2 && (current3 = null);
                root2.sibling.return = root2.return;
                root2 = root2.sibling;
              }
          flags & 4 && (flags = finishedWork.updateQueue, flags !== null && (current3 = flags.retryQueue, current3 !== null && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current3))));
          break;
        case 19:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 4 && (flags = finishedWork.updateQueue, flags !== null && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
          break;
        case 30:
          break;
        case 21:
          break;
        default:
          recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
      }
      (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && ((componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(finishedWork, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors), finishedWork.alternate === null && finishedWork.return !== null && finishedWork.return.alternate !== null && 0.05 < componentEffectEndTime - componentEffectStartTime && (isHydratingParent(finishedWork.return.alternate, finishedWork.return) || logComponentTrigger(finishedWork, componentEffectStartTime, componentEffectEndTime, "Mount")));
      popComponentEffectStart(prevEffectStart);
      popComponentEffectDuration(prevEffectDuration);
      componentEffectErrors = prevEffectErrors;
      componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
    }
    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;
      if (flags & 2) {
        try {
          runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
        finishedWork.flags &= -3;
      }
      flags & 4096 && (finishedWork.flags &= -4097);
    }
    function recursivelyResetForms(parentFiber) {
      if (parentFiber.subtreeFlags & 1024)
        for (parentFiber = parentFiber.child;parentFiber !== null; ) {
          var fiber = parentFiber;
          recursivelyResetForms(fiber);
          fiber.tag === 5 && fiber.flags & 1024 && fiber.stateNode.reset();
          parentFiber = parentFiber.sibling;
        }
    }
    function recursivelyTraverseLayoutEffects(root2, parentFiber) {
      if (parentFiber.subtreeFlags & 8772)
        for (parentFiber = parentFiber.child;parentFiber !== null; )
          commitLayoutEffectOnFiber(root2, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
    }
    function disappearLayoutEffects(finishedWork) {
      var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          commitHookLayoutUnmountEffects(finishedWork, finishedWork.return, Layout);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 1:
          safelyDetachRef(finishedWork, finishedWork.return);
          var instance = finishedWork.stateNode;
          typeof instance.componentWillUnmount === "function" && safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 27:
          runWithFiberInDEV(finishedWork, releaseSingletonInstance, finishedWork.stateNode);
        case 26:
        case 5:
          safelyDetachRef(finishedWork, finishedWork.return);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 22:
          finishedWork.memoizedState === null && recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 30:
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        default:
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
      }
      (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(finishedWork, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors);
      popComponentEffectStart(prevEffectStart);
      popComponentEffectDuration(prevEffectDuration);
      componentEffectErrors = prevEffectErrors;
      componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
    }
    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
      for (parentFiber = parentFiber.child;parentFiber !== null; )
        disappearLayoutEffects(parentFiber), parentFiber = parentFiber.sibling;
    }
    function reappearLayoutEffects(finishedRoot, current3, finishedWork, includeWorkInProgressEffects) {
      var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          commitHookLayoutEffects(finishedWork, Layout);
          break;
        case 1:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          current3 = finishedWork.stateNode;
          typeof current3.componentDidMount === "function" && runWithFiberInDEV(finishedWork, callComponentDidMountInDEV, finishedWork, current3);
          current3 = finishedWork.updateQueue;
          if (current3 !== null) {
            finishedRoot = finishedWork.stateNode;
            try {
              runWithFiberInDEV(finishedWork, commitHiddenCallbacks, current3, finishedRoot);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 27:
          commitHostSingletonAcquisition(finishedWork);
        case 26:
        case 5:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          includeWorkInProgressEffects && current3 === null && flags & 4 && commitHostMount(finishedWork);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 12:
          if (includeWorkInProgressEffects && flags & 4) {
            flags = pushNestedEffectDurations();
            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
            includeWorkInProgressEffects = finishedWork.stateNode;
            includeWorkInProgressEffects.effectDuration += bubbleNestedEffectDurations(flags);
            try {
              runWithFiberInDEV(finishedWork, commitProfiler, finishedWork, current3, commitStartTime, includeWorkInProgressEffects.effectDuration);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          } else
            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          break;
        case 31:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          includeWorkInProgressEffects && flags & 4 && commitActivityHydrationCallbacks(finishedRoot, finishedWork);
          break;
        case 13:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          break;
        case 22:
          finishedWork.memoizedState === null && recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 30:
          break;
        default:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
      }
      (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(finishedWork, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors);
      popComponentEffectStart(prevEffectStart);
      popComponentEffectDuration(prevEffectDuration);
      componentEffectErrors = prevEffectErrors;
      componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
    }
    function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {
      includeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & 8772) !== 0;
      for (parentFiber = parentFiber.child;parentFiber !== null; )
        reappearLayoutEffects(finishedRoot, parentFiber.alternate, parentFiber, includeWorkInProgressEffects), parentFiber = parentFiber.sibling;
    }
    function commitOffscreenPassiveMountEffects(current3, finishedWork) {
      var previousCache = null;
      current3 !== null && current3.memoizedState !== null && current3.memoizedState.cachePool !== null && (previousCache = current3.memoizedState.cachePool.pool);
      current3 = null;
      finishedWork.memoizedState !== null && finishedWork.memoizedState.cachePool !== null && (current3 = finishedWork.memoizedState.cachePool.pool);
      current3 !== previousCache && (current3 != null && retainCache(current3), previousCache != null && releaseCache(previousCache));
    }
    function commitCachePassiveMountEffect(current3, finishedWork) {
      current3 = null;
      finishedWork.alternate !== null && (current3 = finishedWork.alternate.memoizedState.cache);
      finishedWork = finishedWork.memoizedState.cache;
      finishedWork !== current3 && (retainCache(finishedWork), current3 != null && releaseCache(current3));
    }
    function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions, endTime) {
      if (parentFiber.subtreeFlags & 10256 || parentFiber.actualDuration !== 0 && (parentFiber.alternate === null || parentFiber.alternate.child !== parentFiber.child))
        for (parentFiber = parentFiber.child;parentFiber !== null; ) {
          var nextSibling = parentFiber.sibling;
          commitPassiveMountOnFiber(root2, parentFiber, committedLanes, committedTransitions, nextSibling !== null ? nextSibling.actualStartTime : endTime);
          parentFiber = nextSibling;
        }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime) {
      var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), prevDeepEquality = alreadyWarnedForDeepEquality, flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          (finishedWork.mode & ProfileMode) !== NoMode && 0 < finishedWork.actualStartTime && (finishedWork.flags & 1) !== 0 && logComponentRender(finishedWork, finishedWork.actualStartTime, endTime, inHydratedSubtree, committedLanes);
          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime);
          flags & 2048 && commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
          break;
        case 1:
          (finishedWork.mode & ProfileMode) !== NoMode && 0 < finishedWork.actualStartTime && ((finishedWork.flags & 128) !== 0 ? logComponentErrored(finishedWork, finishedWork.actualStartTime, endTime, []) : (finishedWork.flags & 1) !== 0 && logComponentRender(finishedWork, finishedWork.actualStartTime, endTime, inHydratedSubtree, committedLanes));
          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime);
          break;
        case 3:
          var prevProfilerEffectDuration = pushNestedEffectDurations(), wasInHydratedSubtree = inHydratedSubtree;
          inHydratedSubtree = finishedWork.alternate !== null && finishedWork.alternate.memoizedState.isDehydrated && (finishedWork.flags & 256) === 0;
          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime);
          inHydratedSubtree = wasInHydratedSubtree;
          flags & 2048 && (committedLanes = null, finishedWork.alternate !== null && (committedLanes = finishedWork.alternate.memoizedState.cache), committedTransitions = finishedWork.memoizedState.cache, committedTransitions !== committedLanes && (retainCache(committedTransitions), committedLanes != null && releaseCache(committedLanes)));
          finishedRoot.passiveEffectDuration += popNestedEffectDurations(prevProfilerEffectDuration);
          break;
        case 12:
          if (flags & 2048) {
            flags = pushNestedEffectDurations();
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime);
            finishedRoot = finishedWork.stateNode;
            finishedRoot.passiveEffectDuration += bubbleNestedEffectDurations(flags);
            try {
              runWithFiberInDEV(finishedWork, commitProfilerPostCommitImpl, finishedWork, finishedWork.alternate, commitStartTime, finishedRoot.passiveEffectDuration);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          } else
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime);
          break;
        case 31:
          flags = inHydratedSubtree;
          prevProfilerEffectDuration = finishedWork.alternate !== null ? finishedWork.alternate.memoizedState : null;
          wasInHydratedSubtree = finishedWork.memoizedState;
          prevProfilerEffectDuration !== null && wasInHydratedSubtree === null ? (wasInHydratedSubtree = finishedWork.deletions, wasInHydratedSubtree !== null && 0 < wasInHydratedSubtree.length && wasInHydratedSubtree[0].tag === 18 ? (inHydratedSubtree = false, prevProfilerEffectDuration = prevProfilerEffectDuration.hydrationErrors, prevProfilerEffectDuration !== null && logComponentErrored(finishedWork, finishedWork.actualStartTime, endTime, prevProfilerEffectDuration)) : inHydratedSubtree = true) : inHydratedSubtree = false;
          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime);
          inHydratedSubtree = flags;
          break;
        case 13:
          flags = inHydratedSubtree;
          prevProfilerEffectDuration = finishedWork.alternate !== null ? finishedWork.alternate.memoizedState : null;
          wasInHydratedSubtree = finishedWork.memoizedState;
          prevProfilerEffectDuration === null || prevProfilerEffectDuration.dehydrated === null || wasInHydratedSubtree !== null && wasInHydratedSubtree.dehydrated !== null ? inHydratedSubtree = false : (wasInHydratedSubtree = finishedWork.deletions, wasInHydratedSubtree !== null && 0 < wasInHydratedSubtree.length && wasInHydratedSubtree[0].tag === 18 ? (inHydratedSubtree = false, prevProfilerEffectDuration = prevProfilerEffectDuration.hydrationErrors, prevProfilerEffectDuration !== null && logComponentErrored(finishedWork, finishedWork.actualStartTime, endTime, prevProfilerEffectDuration)) : inHydratedSubtree = true);
          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime);
          inHydratedSubtree = flags;
          break;
        case 23:
          break;
        case 22:
          wasInHydratedSubtree = finishedWork.stateNode;
          prevProfilerEffectDuration = finishedWork.alternate;
          finishedWork.memoizedState !== null ? wasInHydratedSubtree._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime) : wasInHydratedSubtree._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime) : (wasInHydratedSubtree._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, (finishedWork.subtreeFlags & 10256) !== 0 || finishedWork.actualDuration !== 0 && (finishedWork.alternate === null || finishedWork.alternate.child !== finishedWork.child), endTime), (finishedWork.mode & ProfileMode) === NoMode || inHydratedSubtree || (finishedRoot = finishedWork.actualStartTime, 0 <= finishedRoot && 0.05 < endTime - finishedRoot && logComponentReappeared(finishedWork, finishedRoot, endTime), 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentReappeared(finishedWork, componentEffectStartTime, componentEffectEndTime)));
          flags & 2048 && commitOffscreenPassiveMountEffects(prevProfilerEffectDuration, finishedWork);
          break;
        case 24:
          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime);
          flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime);
      }
      if ((finishedWork.mode & ProfileMode) !== NoMode) {
        if (finishedRoot = !inHydratedSubtree && finishedWork.alternate === null && finishedWork.return !== null && finishedWork.return.alternate !== null)
          committedLanes = finishedWork.actualStartTime, 0 <= committedLanes && 0.05 < endTime - committedLanes && logComponentTrigger(finishedWork, committedLanes, endTime, "Mount");
        0 <= componentEffectStartTime && 0 <= componentEffectEndTime && ((componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(finishedWork, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors), finishedRoot && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(finishedWork, componentEffectStartTime, componentEffectEndTime, "Mount"));
      }
      popComponentEffectStart(prevEffectStart);
      popComponentEffectDuration(prevEffectDuration);
      componentEffectErrors = prevEffectErrors;
      componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
      alreadyWarnedForDeepEquality = prevDeepEquality;
    }
    function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects, endTime) {
      includeWorkInProgressEffects = includeWorkInProgressEffects && ((parentFiber.subtreeFlags & 10256) !== 0 || parentFiber.actualDuration !== 0 && (parentFiber.alternate === null || parentFiber.alternate.child !== parentFiber.child));
      for (parentFiber = parentFiber.child;parentFiber !== null; ) {
        var nextSibling = parentFiber.sibling;
        reconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects, nextSibling !== null ? nextSibling.actualStartTime : endTime);
        parentFiber = nextSibling;
      }
    }
    function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects, endTime) {
      var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), prevDeepEquality = alreadyWarnedForDeepEquality;
      includeWorkInProgressEffects && (finishedWork.mode & ProfileMode) !== NoMode && 0 < finishedWork.actualStartTime && (finishedWork.flags & 1) !== 0 && logComponentRender(finishedWork, finishedWork.actualStartTime, endTime, inHydratedSubtree, committedLanes);
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects, endTime);
          commitHookPassiveMountEffects(finishedWork, Passive);
          break;
        case 23:
          break;
        case 22:
          var _instance2 = finishedWork.stateNode;
          finishedWork.memoizedState !== null ? _instance2._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects, endTime) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime) : (_instance2._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects, endTime));
          includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
          break;
        case 24:
          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects, endTime);
          includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects, endTime);
      }
      (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(finishedWork, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors);
      popComponentEffectStart(prevEffectStart);
      popComponentEffectDuration(prevEffectDuration);
      componentEffectErrors = prevEffectErrors;
      componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
      alreadyWarnedForDeepEquality = prevDeepEquality;
    }
    function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, endTime$jscomp$0) {
      if (parentFiber.subtreeFlags & 10256 || parentFiber.actualDuration !== 0 && (parentFiber.alternate === null || parentFiber.alternate.child !== parentFiber.child))
        for (var child = parentFiber.child;child !== null; ) {
          parentFiber = child.sibling;
          var finishedRoot = finishedRoot$jscomp$0, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, endTime = parentFiber !== null ? parentFiber.actualStartTime : endTime$jscomp$0, prevDeepEquality = alreadyWarnedForDeepEquality;
          (child.mode & ProfileMode) !== NoMode && 0 < child.actualStartTime && (child.flags & 1) !== 0 && logComponentRender(child, child.actualStartTime, endTime, inHydratedSubtree, committedLanes);
          var flags = child.flags;
          switch (child.tag) {
            case 22:
              recursivelyTraverseAtomicPassiveEffects(finishedRoot, child, committedLanes, committedTransitions, endTime);
              flags & 2048 && commitOffscreenPassiveMountEffects(child.alternate, child);
              break;
            case 24:
              recursivelyTraverseAtomicPassiveEffects(finishedRoot, child, committedLanes, committedTransitions, endTime);
              flags & 2048 && commitCachePassiveMountEffect(child.alternate, child);
              break;
            default:
              recursivelyTraverseAtomicPassiveEffects(finishedRoot, child, committedLanes, committedTransitions, endTime);
          }
          alreadyWarnedForDeepEquality = prevDeepEquality;
          child = parentFiber;
        }
    }
    function recursivelyAccumulateSuspenseyCommit(parentFiber, committedLanes, suspendedState) {
      if (parentFiber.subtreeFlags & suspenseyCommitFlag)
        for (parentFiber = parentFiber.child;parentFiber !== null; )
          accumulateSuspenseyCommitOnFiber(parentFiber, committedLanes, suspendedState), parentFiber = parentFiber.sibling;
    }
    function accumulateSuspenseyCommitOnFiber(fiber, committedLanes, suspendedState) {
      switch (fiber.tag) {
        case 26:
          recursivelyAccumulateSuspenseyCommit(fiber, committedLanes, suspendedState);
          fiber.flags & suspenseyCommitFlag && fiber.memoizedState !== null && suspendResource(suspendedState, currentHoistableRoot, fiber.memoizedState, fiber.memoizedProps);
          break;
        case 5:
          recursivelyAccumulateSuspenseyCommit(fiber, committedLanes, suspendedState);
          break;
        case 3:
        case 4:
          var previousHoistableRoot = currentHoistableRoot;
          currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
          recursivelyAccumulateSuspenseyCommit(fiber, committedLanes, suspendedState);
          currentHoistableRoot = previousHoistableRoot;
          break;
        case 22:
          fiber.memoizedState === null && (previousHoistableRoot = fiber.alternate, previousHoistableRoot !== null && previousHoistableRoot.memoizedState !== null ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber, committedLanes, suspendedState), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber, committedLanes, suspendedState));
          break;
        default:
          recursivelyAccumulateSuspenseyCommit(fiber, committedLanes, suspendedState);
      }
    }
    function detachAlternateSiblings(parentFiber) {
      var previousFiber = parentFiber.alternate;
      if (previousFiber !== null && (parentFiber = previousFiber.child, parentFiber !== null)) {
        previousFiber.child = null;
        do
          previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
        while (parentFiber !== null);
      }
    }
    function recursivelyTraversePassiveUnmountEffects(parentFiber) {
      var deletions = parentFiber.deletions;
      if ((parentFiber.flags & 16) !== 0) {
        if (deletions !== null)
          for (var i = 0;i < deletions.length; i++) {
            var childToDelete = deletions[i], prevEffectStart = pushComponentEffectStart();
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
            (childToDelete.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(childToDelete, componentEffectStartTime, componentEffectEndTime, "Unmount");
            popComponentEffectStart(prevEffectStart);
          }
        detachAlternateSiblings(parentFiber);
      }
      if (parentFiber.subtreeFlags & 10256)
        for (parentFiber = parentFiber.child;parentFiber !== null; )
          commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
      var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraversePassiveUnmountEffects(finishedWork);
          finishedWork.flags & 2048 && commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive | HasEffect);
          break;
        case 3:
          var prevProfilerEffectDuration = pushNestedEffectDurations();
          recursivelyTraversePassiveUnmountEffects(finishedWork);
          finishedWork.stateNode.passiveEffectDuration += popNestedEffectDurations(prevProfilerEffectDuration);
          break;
        case 12:
          prevProfilerEffectDuration = pushNestedEffectDurations();
          recursivelyTraversePassiveUnmountEffects(finishedWork);
          finishedWork.stateNode.passiveEffectDuration += bubbleNestedEffectDurations(prevProfilerEffectDuration);
          break;
        case 22:
          prevProfilerEffectDuration = finishedWork.stateNode;
          finishedWork.memoizedState !== null && prevProfilerEffectDuration._visibility & OffscreenPassiveEffectsConnected && (finishedWork.return === null || finishedWork.return.tag !== 13) ? (prevProfilerEffectDuration._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork), (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(finishedWork, componentEffectStartTime, componentEffectEndTime, "Disconnect")) : recursivelyTraversePassiveUnmountEffects(finishedWork);
          break;
        default:
          recursivelyTraversePassiveUnmountEffects(finishedWork);
      }
      (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(finishedWork, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors);
      popComponentEffectStart(prevEffectStart);
      popComponentEffectDuration(prevEffectDuration);
      componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
      componentEffectErrors = prevEffectErrors;
    }
    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
      var deletions = parentFiber.deletions;
      if ((parentFiber.flags & 16) !== 0) {
        if (deletions !== null)
          for (var i = 0;i < deletions.length; i++) {
            var childToDelete = deletions[i], prevEffectStart = pushComponentEffectStart();
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
            (childToDelete.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(childToDelete, componentEffectStartTime, componentEffectEndTime, "Unmount");
            popComponentEffectStart(prevEffectStart);
          }
        detachAlternateSiblings(parentFiber);
      }
      for (parentFiber = parentFiber.child;parentFiber !== null; )
        disconnectPassiveEffect(parentFiber), parentFiber = parentFiber.sibling;
    }
    function disconnectPassiveEffect(finishedWork) {
      var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive);
          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
          break;
        case 22:
          var instance = finishedWork.stateNode;
          instance._visibility & OffscreenPassiveEffectsConnected && (instance._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork));
          break;
        default:
          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
      }
      (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(finishedWork, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors);
      popComponentEffectStart(prevEffectStart);
      popComponentEffectDuration(prevEffectDuration);
      componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
      componentEffectErrors = prevEffectErrors;
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor$jscomp$0) {
      for (;nextEffect !== null; ) {
        var fiber = nextEffect, current3 = fiber, nearestMountedAncestor = nearestMountedAncestor$jscomp$0, prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
        switch (current3.tag) {
          case 0:
          case 11:
          case 15:
            commitHookPassiveUnmountEffects(current3, nearestMountedAncestor, Passive);
            break;
          case 23:
          case 22:
            current3.memoizedState !== null && current3.memoizedState.cachePool !== null && (nearestMountedAncestor = current3.memoizedState.cachePool.pool, nearestMountedAncestor != null && retainCache(nearestMountedAncestor));
            break;
          case 24:
            releaseCache(current3.memoizedState.cache);
        }
        (current3.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(current3, componentEffectStartTime, componentEffectEndTime, componentEffectDuration, componentEffectErrors);
        popComponentEffectStart(prevEffectStart);
        popComponentEffectDuration(prevEffectDuration);
        componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
        componentEffectErrors = prevEffectErrors;
        current3 = fiber.child;
        if (current3 !== null)
          current3.return = fiber, nextEffect = current3;
        else
          a:
            for (fiber = deletedSubtreeRoot;nextEffect !== null; ) {
              current3 = nextEffect;
              prevEffectStart = current3.sibling;
              prevEffectDuration = current3.return;
              detachFiberAfterEffects(current3);
              if (current3 === fiber) {
                nextEffect = null;
                break a;
              }
              if (prevEffectStart !== null) {
                prevEffectStart.return = prevEffectDuration;
                nextEffect = prevEffectStart;
                break a;
              }
              nextEffect = prevEffectDuration;
            }
      }
    }
    function onCommitRoot() {
      commitHooks.forEach(function(commitHook) {
        return commitHook();
      });
    }
    function isConcurrentActEnvironment() {
      var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
      isReactActEnvironmentGlobal || ReactSharedInternals.actQueue === null || console.error("The current testing environment is not configured to support act(...)");
      return isReactActEnvironmentGlobal;
    }
    function requestUpdateLane(fiber) {
      if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== 0)
        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
      var transition = ReactSharedInternals.T;
      return transition !== null ? (transition._updatedFibers || (transition._updatedFibers = new Set), transition._updatedFibers.add(fiber), requestTransitionLane()) : resolveUpdatePriority();
    }
    function requestDeferredLane() {
      if (workInProgressDeferredLane === 0)
        if ((workInProgressRootRenderLanes & 536870912) === 0 || isHydrating) {
          var lane = nextTransitionDeferredLane;
          nextTransitionDeferredLane <<= 1;
          (nextTransitionDeferredLane & 3932160) === 0 && (nextTransitionDeferredLane = 262144);
          workInProgressDeferredLane = lane;
        } else
          workInProgressDeferredLane = 536870912;
      lane = suspenseHandlerStackCursor.current;
      lane !== null && (lane.flags |= 32);
      return workInProgressDeferredLane;
    }
    function scheduleUpdateOnFiber(root2, fiber, lane) {
      isRunningInsertionEffect && console.error("useInsertionEffect must not schedule updates.");
      isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = true);
      if (root2 === workInProgressRoot && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || root2.cancelPendingCommit !== null)
        prepareFreshStack(root2, 0), markRootSuspended(root2, workInProgressRootRenderLanes, workInProgressDeferredLane, false);
      markRootUpdated$1(root2, lane);
      if ((executionContext & RenderContext) !== NoContext && root2 === workInProgressRoot) {
        if (isRendering)
          switch (fiber.tag) {
            case 0:
            case 11:
            case 15:
              root2 = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
              didWarnAboutUpdateInRenderForAnotherComponent.has(root2) || (didWarnAboutUpdateInRenderForAnotherComponent.add(root2), fiber = getComponentNameFromFiber(fiber) || "Unknown", console.error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render", fiber, root2, root2));
              break;
            case 1:
              didWarnAboutUpdateInRender || (console.error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), didWarnAboutUpdateInRender = true);
          }
      } else
        isDevToolsPresent && addFiberToLanesMap(root2, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root2 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes |= lane), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended(root2, workInProgressRootRenderLanes, workInProgressDeferredLane, false)), ensureRootIsScheduled(root2);
    }
    function performWorkOnRoot(root2, lanes, forceSync) {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
        throw Error("Should not already be working.");
      if (workInProgressRootRenderLanes !== 0 && workInProgress !== null) {
        var yieldedFiber = workInProgress, yieldEndTime = now$1();
        switch (yieldReason) {
          case SuspendedOnImmediate:
          case SuspendedOnData:
            var startTime = yieldStartTime;
            supportsUserTiming && ((yieldedFiber = yieldedFiber._debugTask) ? yieldedFiber.run(console.timeStamp.bind(console, "Suspended", startTime, yieldEndTime, COMPONENTS_TRACK, undefined, "primary-light")) : console.timeStamp("Suspended", startTime, yieldEndTime, COMPONENTS_TRACK, undefined, "primary-light"));
            break;
          case SuspendedOnAction:
            startTime = yieldStartTime;
            supportsUserTiming && ((yieldedFiber = yieldedFiber._debugTask) ? yieldedFiber.run(console.timeStamp.bind(console, "Action", startTime, yieldEndTime, COMPONENTS_TRACK, undefined, "primary-light")) : console.timeStamp("Action", startTime, yieldEndTime, COMPONENTS_TRACK, undefined, "primary-light"));
            break;
          default:
            supportsUserTiming && (yieldedFiber = yieldEndTime - yieldStartTime, 3 > yieldedFiber || console.timeStamp("Blocked", yieldStartTime, yieldEndTime, COMPONENTS_TRACK, undefined, 5 > yieldedFiber ? "primary-light" : 10 > yieldedFiber ? "primary" : 100 > yieldedFiber ? "primary-dark" : "error"));
        }
      }
      startTime = (forceSync = !forceSync && (lanes & 127) === 0 && (lanes & root2.expiredLanes) === 0 || checkIfRootIsPrerendering(root2, lanes)) ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes, true);
      var renderWasConcurrent = forceSync;
      do {
        if (startTime === RootInProgress) {
          workInProgressRootIsPrerendering && !forceSync && markRootSuspended(root2, lanes, 0, false);
          lanes = workInProgressSuspendedReason;
          yieldStartTime = now();
          yieldReason = lanes;
          break;
        } else {
          yieldedFiber = now$1();
          yieldEndTime = root2.current.alternate;
          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(yieldEndTime)) {
            setCurrentTrackFromLanes(lanes);
            yieldEndTime = renderStartTime;
            startTime = yieldedFiber;
            !supportsUserTiming || startTime <= yieldEndTime || (workInProgressUpdateTask ? workInProgressUpdateTask.run(console.timeStamp.bind(console, "Teared Render", yieldEndTime, startTime, currentTrack, LANES_TRACK_GROUP, "error")) : console.timeStamp("Teared Render", yieldEndTime, startTime, currentTrack, LANES_TRACK_GROUP, "error"));
            finalizeRender(lanes, yieldedFiber);
            startTime = renderRootSync(root2, lanes, false);
            renderWasConcurrent = false;
            continue;
          }
          if (startTime === RootErrored) {
            renderWasConcurrent = lanes;
            if (root2.errorRecoveryDisabledLanes & renderWasConcurrent)
              var errorRetryLanes = 0;
            else
              errorRetryLanes = root2.pendingLanes & -536870913, errorRetryLanes = errorRetryLanes !== 0 ? errorRetryLanes : errorRetryLanes & 536870912 ? 536870912 : 0;
            if (errorRetryLanes !== 0) {
              setCurrentTrackFromLanes(lanes);
              logErroredRenderPhase(renderStartTime, yieldedFiber, lanes, workInProgressUpdateTask);
              finalizeRender(lanes, yieldedFiber);
              lanes = errorRetryLanes;
              a: {
                yieldedFiber = root2;
                startTime = renderWasConcurrent;
                renderWasConcurrent = workInProgressRootConcurrentErrors;
                var wasRootDehydrated = yieldedFiber.current.memoizedState.isDehydrated;
                wasRootDehydrated && (prepareFreshStack(yieldedFiber, errorRetryLanes).flags |= 256);
                errorRetryLanes = renderRootSync(yieldedFiber, errorRetryLanes, false);
                if (errorRetryLanes !== RootErrored) {
                  if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                    yieldedFiber.errorRecoveryDisabledLanes |= startTime;
                    workInProgressRootInterleavedUpdatedLanes |= startTime;
                    startTime = RootSuspendedWithDelay;
                    break a;
                  }
                  yieldedFiber = workInProgressRootRecoverableErrors;
                  workInProgressRootRecoverableErrors = renderWasConcurrent;
                  yieldedFiber !== null && (workInProgressRootRecoverableErrors === null ? workInProgressRootRecoverableErrors = yieldedFiber : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, yieldedFiber));
                }
                startTime = errorRetryLanes;
              }
              renderWasConcurrent = false;
              if (startTime !== RootErrored)
                continue;
              else
                yieldedFiber = now$1();
            }
          }
          if (startTime === RootFatalErrored) {
            setCurrentTrackFromLanes(lanes);
            logErroredRenderPhase(renderStartTime, yieldedFiber, lanes, workInProgressUpdateTask);
            finalizeRender(lanes, yieldedFiber);
            prepareFreshStack(root2, 0);
            markRootSuspended(root2, lanes, 0, true);
            break;
          }
          a: {
            forceSync = root2;
            switch (startTime) {
              case RootInProgress:
              case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
              case RootSuspendedWithDelay:
                if ((lanes & 4194048) !== lanes)
                  break;
              case RootSuspendedAtTheShell:
                setCurrentTrackFromLanes(lanes);
                logSuspendedRenderPhase(renderStartTime, yieldedFiber, lanes, workInProgressUpdateTask);
                finalizeRender(lanes, yieldedFiber);
                yieldEndTime = lanes;
                (yieldEndTime & 127) !== 0 ? blockingSuspendedTime = yieldedFiber : (yieldEndTime & 4194048) !== 0 && (transitionSuspendedTime = yieldedFiber);
                markRootSuspended(forceSync, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                break a;
              case RootErrored:
                workInProgressRootRecoverableErrors = null;
                break;
              case RootSuspended:
              case RootCompleted:
                break;
              default:
                throw Error("Unknown root exit status.");
            }
            if (ReactSharedInternals.actQueue !== null)
              commitRoot(forceSync, yieldEndTime, lanes, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, startTime, null, null, renderStartTime, yieldedFiber);
            else {
              if ((lanes & 62914560) === lanes && (renderWasConcurrent = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(), 10 < renderWasConcurrent)) {
                markRootSuspended(forceSync, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                if (getNextLanes(forceSync, 0, true) !== 0)
                  break a;
                pendingEffectsLanes = lanes;
                forceSync.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, forceSync, yieldEndTime, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, startTime, "Throttled", renderStartTime, yieldedFiber), renderWasConcurrent);
                break a;
              }
              commitRootWhenReady(forceSync, yieldEndTime, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, startTime, null, renderStartTime, yieldedFiber);
            }
          }
        }
        break;
      } while (1);
      ensureRootIsScheduled(root2);
    }
    function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
      root2.timeoutHandle = noTimeout;
      var subtreeFlags = finishedWork.subtreeFlags, suspendedState = null;
      if (subtreeFlags & 8192 || (subtreeFlags & 16785408) === 16785408) {
        if (suspendedState = {
          stylesheets: null,
          count: 0,
          imgCount: 0,
          imgBytes: 0,
          suspenseyImages: [],
          waitingForImages: true,
          waitingForViewTransition: false,
          unsuspend: noop$1
        }, accumulateSuspenseyCommitOnFiber(finishedWork, lanes, suspendedState), subtreeFlags = (lanes & 62914560) === lanes ? globalMostRecentFallbackTime - now$1() : (lanes & 4194048) === lanes ? globalMostRecentTransitionTime - now$1() : 0, subtreeFlags = waitForCommitToBeReady(suspendedState, subtreeFlags), subtreeFlags !== null) {
          pendingEffectsLanes = lanes;
          root2.cancelPendingCommit = subtreeFlags(commitRoot.bind(null, root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes, exitStatus, suspendedState, suspendedState.waitingForViewTransition ? "Waiting for the previous Animation" : 0 < suspendedState.count ? 0 < suspendedState.imgCount ? "Suspended on CSS and Images" : "Suspended on CSS" : suspendedState.imgCount === 1 ? "Suspended on an Image" : 0 < suspendedState.imgCount ? "Suspended on Images" : null, completedRenderStartTime, completedRenderEndTime));
          markRootSuspended(root2, lanes, spawnedLane, !didSkipSuspendedSiblings);
          return;
        }
      }
      commitRoot(root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes, exitStatus, suspendedState, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime);
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
      for (var node = finishedWork;; ) {
        var tag = node.tag;
        if ((tag === 0 || tag === 11 || tag === 15) && node.flags & 16384 && (tag = node.updateQueue, tag !== null && (tag = tag.stores, tag !== null)))
          for (var i = 0;i < tag.length; i++) {
            var check = tag[i], getSnapshot = check.getSnapshot;
            check = check.value;
            try {
              if (!objectIs(getSnapshot(), check))
                return false;
            } catch (error) {
              return false;
            }
          }
        tag = node.child;
        if (node.subtreeFlags & 16384 && tag !== null)
          tag.return = node, node = tag;
        else {
          if (node === finishedWork)
            break;
          for (;node.sibling === null; ) {
            if (node.return === null || node.return === finishedWork)
              return true;
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      return true;
    }
    function markRootSuspended(root2, suspendedLanes, spawnedLane, didAttemptEntireTree) {
      suspendedLanes &= ~workInProgressRootPingedLanes;
      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
      root2.suspendedLanes |= suspendedLanes;
      root2.pingedLanes &= ~suspendedLanes;
      didAttemptEntireTree && (root2.warmLanes |= suspendedLanes);
      didAttemptEntireTree = root2.expirationTimes;
      for (var lanes = suspendedLanes;0 < lanes; ) {
        var index = 31 - clz32(lanes), lane = 1 << index;
        didAttemptEntireTree[index] = -1;
        lanes &= ~lane;
      }
      spawnedLane !== 0 && markSpawnedDeferredLane(root2, spawnedLane, suspendedLanes);
    }
    function flushSyncWork$1() {
      return (executionContext & (RenderContext | CommitContext)) === NoContext ? (flushSyncWorkAcrossRoots_impl(0, false), false) : true;
    }
    function resetWorkInProgressStack() {
      if (workInProgress !== null) {
        if (workInProgressSuspendedReason === NotSuspended)
          var interruptedWork = workInProgress.return;
        else
          interruptedWork = workInProgress, resetContextDependencies(), resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
        for (;interruptedWork !== null; )
          unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
        workInProgress = null;
      }
    }
    function finalizeRender(lanes, finalizationTime) {
      (lanes & 127) !== 0 && (blockingClampTime = finalizationTime);
      (lanes & 4194048) !== 0 && (transitionClampTime = finalizationTime);
      (lanes & 62914560) !== 0 && (retryClampTime = finalizationTime);
      (lanes & 2080374784) !== 0 && (idleClampTime = finalizationTime);
    }
    function prepareFreshStack(root2, lanes) {
      supportsUserTiming && (console.timeStamp("Blocking Track", 0.003, 0.003, "Blocking", LANES_TRACK_GROUP, "primary-light"), console.timeStamp("Transition Track", 0.003, 0.003, "Transition", LANES_TRACK_GROUP, "primary-light"), console.timeStamp("Suspense Track", 0.003, 0.003, "Suspense", LANES_TRACK_GROUP, "primary-light"), console.timeStamp("Idle Track", 0.003, 0.003, "Idle", LANES_TRACK_GROUP, "primary-light"));
      var previousRenderStartTime = renderStartTime;
      renderStartTime = now();
      if (workInProgressRootRenderLanes !== 0 && 0 < previousRenderStartTime) {
        setCurrentTrackFromLanes(workInProgressRootRenderLanes);
        if (workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootSuspendedWithDelay)
          logSuspendedRenderPhase(previousRenderStartTime, renderStartTime, lanes, workInProgressUpdateTask);
        else {
          var endTime = renderStartTime, debugTask = workInProgressUpdateTask;
          if (supportsUserTiming && !(endTime <= previousRenderStartTime)) {
            var color = (lanes & 738197653) === lanes ? "tertiary-dark" : "primary-dark", label = (lanes & 536870912) === lanes ? "Prewarm" : (lanes & 201326741) === lanes ? "Interrupted Hydration" : "Interrupted Render";
            debugTask ? debugTask.run(console.timeStamp.bind(console, label, previousRenderStartTime, endTime, currentTrack, LANES_TRACK_GROUP, color)) : console.timeStamp(label, previousRenderStartTime, endTime, currentTrack, LANES_TRACK_GROUP, color);
          }
        }
        finalizeRender(workInProgressRootRenderLanes, renderStartTime);
      }
      previousRenderStartTime = workInProgressUpdateTask;
      workInProgressUpdateTask = null;
      if ((lanes & 127) !== 0) {
        workInProgressUpdateTask = blockingUpdateTask;
        debugTask = 0 <= blockingUpdateTime && blockingUpdateTime < blockingClampTime ? blockingClampTime : blockingUpdateTime;
        endTime = 0 <= blockingEventTime && blockingEventTime < blockingClampTime ? blockingClampTime : blockingEventTime;
        color = 0 <= endTime ? endTime : 0 <= debugTask ? debugTask : renderStartTime;
        0 <= blockingSuspendedTime ? (setCurrentTrackFromLanes(2), logSuspendedWithDelayPhase(blockingSuspendedTime, color, lanes, previousRenderStartTime)) : (animatingLanes & 127) !== 0 && (setCurrentTrackFromLanes(2), logAnimatingPhase(blockingClampTime, color, animatingTask));
        previousRenderStartTime = debugTask;
        var eventTime = endTime, eventType = blockingEventType, eventIsRepeat = 0 < blockingEventRepeatTime, isSpawnedUpdate = blockingUpdateType === SPAWNED_UPDATE, isPingedUpdate = blockingUpdateType === PINGED_UPDATE;
        debugTask = renderStartTime;
        endTime = blockingUpdateTask;
        color = blockingUpdateMethodName;
        label = blockingUpdateComponentName;
        if (supportsUserTiming) {
          currentTrack = "Blocking";
          0 < previousRenderStartTime ? previousRenderStartTime > debugTask && (previousRenderStartTime = debugTask) : previousRenderStartTime = debugTask;
          0 < eventTime ? eventTime > previousRenderStartTime && (eventTime = previousRenderStartTime) : eventTime = previousRenderStartTime;
          if (eventType !== null && previousRenderStartTime > eventTime) {
            var color$jscomp$0 = eventIsRepeat ? "secondary-light" : "warning";
            endTime ? endTime.run(console.timeStamp.bind(console, eventIsRepeat ? "Consecutive" : "Event: " + eventType, eventTime, previousRenderStartTime, currentTrack, LANES_TRACK_GROUP, color$jscomp$0)) : console.timeStamp(eventIsRepeat ? "Consecutive" : "Event: " + eventType, eventTime, previousRenderStartTime, currentTrack, LANES_TRACK_GROUP, color$jscomp$0);
          }
          debugTask > previousRenderStartTime && (eventTime = isSpawnedUpdate ? "error" : (lanes & 738197653) === lanes ? "tertiary-light" : "primary-light", isSpawnedUpdate = isPingedUpdate ? "Promise Resolved" : isSpawnedUpdate ? "Cascading Update" : 5 < debugTask - previousRenderStartTime ? "Update Blocked" : "Update", isPingedUpdate = [], label != null && isPingedUpdate.push(["Component name", label]), color != null && isPingedUpdate.push(["Method name", color]), previousRenderStartTime = {
            start: previousRenderStartTime,
            end: debugTask,
            detail: {
              devtools: {
                properties: isPingedUpdate,
                track: currentTrack,
                trackGroup: LANES_TRACK_GROUP,
                color: eventTime
              }
            }
          }, endTime ? endTime.run(performance.measure.bind(performance, isSpawnedUpdate, previousRenderStartTime)) : performance.measure(isSpawnedUpdate, previousRenderStartTime));
        }
        blockingUpdateTime = -1.1;
        blockingUpdateType = 0;
        blockingUpdateComponentName = blockingUpdateMethodName = null;
        blockingSuspendedTime = -1.1;
        blockingEventRepeatTime = blockingEventTime;
        blockingEventTime = -1.1;
        blockingClampTime = now();
      }
      (lanes & 4194048) !== 0 && (workInProgressUpdateTask = transitionUpdateTask, debugTask = 0 <= transitionStartTime && transitionStartTime < transitionClampTime ? transitionClampTime : transitionStartTime, previousRenderStartTime = 0 <= transitionUpdateTime && transitionUpdateTime < transitionClampTime ? transitionClampTime : transitionUpdateTime, endTime = 0 <= transitionEventTime && transitionEventTime < transitionClampTime ? transitionClampTime : transitionEventTime, color = 0 <= endTime ? endTime : 0 <= previousRenderStartTime ? previousRenderStartTime : renderStartTime, 0 <= transitionSuspendedTime ? (setCurrentTrackFromLanes(256), logSuspendedWithDelayPhase(transitionSuspendedTime, color, lanes, workInProgressUpdateTask)) : (animatingLanes & 4194048) !== 0 && (setCurrentTrackFromLanes(256), logAnimatingPhase(transitionClampTime, color, animatingTask)), isPingedUpdate = endTime, eventTime = transitionEventType, eventType = 0 < transitionEventRepeatTime, eventIsRepeat = transitionUpdateType === PINGED_UPDATE, color = renderStartTime, endTime = transitionUpdateTask, label = transitionUpdateMethodName, isSpawnedUpdate = transitionUpdateComponentName, supportsUserTiming && (currentTrack = "Transition", 0 < previousRenderStartTime ? previousRenderStartTime > color && (previousRenderStartTime = color) : previousRenderStartTime = color, 0 < debugTask ? debugTask > previousRenderStartTime && (debugTask = previousRenderStartTime) : debugTask = previousRenderStartTime, 0 < isPingedUpdate ? isPingedUpdate > debugTask && (isPingedUpdate = debugTask) : isPingedUpdate = debugTask, debugTask > isPingedUpdate && eventTime !== null && (color$jscomp$0 = eventType ? "secondary-light" : "warning", endTime ? endTime.run(console.timeStamp.bind(console, eventType ? "Consecutive" : "Event: " + eventTime, isPingedUpdate, debugTask, currentTrack, LANES_TRACK_GROUP, color$jscomp$0)) : console.timeStamp(eventType ? "Consecutive" : "Event: " + eventTime, isPingedUpdate, debugTask, currentTrack, LANES_TRACK_GROUP, color$jscomp$0)), previousRenderStartTime > debugTask && (endTime ? endTime.run(console.timeStamp.bind(console, "Action", debugTask, previousRenderStartTime, currentTrack, LANES_TRACK_GROUP, "primary-dark")) : console.timeStamp("Action", debugTask, previousRenderStartTime, currentTrack, LANES_TRACK_GROUP, "primary-dark")), color > previousRenderStartTime && (debugTask = eventIsRepeat ? "Promise Resolved" : 5 < color - previousRenderStartTime ? "Update Blocked" : "Update", isPingedUpdate = [], isSpawnedUpdate != null && isPingedUpdate.push(["Component name", isSpawnedUpdate]), label != null && isPingedUpdate.push(["Method name", label]), previousRenderStartTime = {
        start: previousRenderStartTime,
        end: color,
        detail: {
          devtools: {
            properties: isPingedUpdate,
            track: currentTrack,
            trackGroup: LANES_TRACK_GROUP,
            color: "primary-light"
          }
        }
      }, endTime ? endTime.run(performance.measure.bind(performance, debugTask, previousRenderStartTime)) : performance.measure(debugTask, previousRenderStartTime))), transitionUpdateTime = transitionStartTime = -1.1, transitionUpdateType = 0, transitionSuspendedTime = -1.1, transitionEventRepeatTime = transitionEventTime, transitionEventTime = -1.1, transitionClampTime = now());
      (lanes & 62914560) !== 0 && (animatingLanes & 62914560) !== 0 && (setCurrentTrackFromLanes(4194304), logAnimatingPhase(retryClampTime, renderStartTime, animatingTask));
      (lanes & 2080374784) !== 0 && (animatingLanes & 2080374784) !== 0 && (setCurrentTrackFromLanes(268435456), logAnimatingPhase(idleClampTime, renderStartTime, animatingTask));
      previousRenderStartTime = root2.timeoutHandle;
      previousRenderStartTime !== noTimeout && (root2.timeoutHandle = noTimeout, cancelTimeout(previousRenderStartTime));
      previousRenderStartTime = root2.cancelPendingCommit;
      previousRenderStartTime !== null && (root2.cancelPendingCommit = null, previousRenderStartTime());
      pendingEffectsLanes = 0;
      resetWorkInProgressStack();
      workInProgressRoot = root2;
      workInProgress = previousRenderStartTime = createWorkInProgress(root2.current, null);
      workInProgressRootRenderLanes = lanes;
      workInProgressSuspendedReason = NotSuspended;
      workInProgressThrownValue = null;
      workInProgressRootDidSkipSuspendedSiblings = false;
      workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes);
      workInProgressRootDidAttachPingListener = false;
      workInProgressRootExitStatus = RootInProgress;
      workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
      workInProgressRootDidIncludeRecursiveRenderUpdate = false;
      (lanes & 8) !== 0 && (lanes |= lanes & 32);
      endTime = root2.entangledLanes;
      if (endTime !== 0)
        for (root2 = root2.entanglements, endTime &= lanes;0 < endTime; )
          debugTask = 31 - clz32(endTime), color = 1 << debugTask, lanes |= root2[debugTask], endTime &= ~color;
      entangledRenderLanes = lanes;
      finishQueueingConcurrentUpdates();
      root2 = getCurrentTime();
      1000 < root2 - lastResetTime && (ReactSharedInternals.recentlyCreatedOwnerStacks = 0, lastResetTime = root2);
      ReactStrictModeWarnings.discardPendingWarnings();
      return previousRenderStartTime;
    }
    function handleThrow(root2, thrownValue) {
      currentlyRenderingFiber = null;
      ReactSharedInternals.H = ContextOnlyDispatcher;
      ReactSharedInternals.getCurrentStack = null;
      isRendering = false;
      current2 = null;
      thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnImmediate) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnInstance) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? SuspendedOnHydration : thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function" ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;
      workInProgressThrownValue = thrownValue;
      var erroredWork = workInProgress;
      erroredWork === null ? (workInProgressRootExitStatus = RootFatalErrored, logUncaughtError(root2, createCapturedValueAtFiber(thrownValue, root2.current))) : erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDuration(erroredWork);
    }
    function shouldRemainOnPreviousScreen() {
      var handler = suspenseHandlerStackCursor.current;
      return handler === null ? true : (workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? shellBoundary === null ? true : false : (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes || (workInProgressRootRenderLanes & 536870912) !== 0 ? handler === shellBoundary : false;
    }
    function pushDispatcher() {
      var prevDispatcher = ReactSharedInternals.H;
      ReactSharedInternals.H = ContextOnlyDispatcher;
      return prevDispatcher === null ? ContextOnlyDispatcher : prevDispatcher;
    }
    function pushAsyncDispatcher() {
      var prevAsyncDispatcher = ReactSharedInternals.A;
      ReactSharedInternals.A = DefaultAsyncDispatcher;
      return prevAsyncDispatcher;
    }
    function markRenderDerivedCause(fiber) {
      workInProgressUpdateTask === null && (workInProgressUpdateTask = fiber._debugTask == null ? null : fiber._debugTask);
    }
    function renderDidSuspendDelayIfPossible() {
      workInProgressRootExitStatus = RootSuspendedWithDelay;
      workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && suspenseHandlerStackCursor.current !== null || (workInProgressRootIsPrerendering = true);
      (workInProgressRootSkippedLanes & 134217727) === 0 && (workInProgressRootInterleavedUpdatedLanes & 134217727) === 0 || workInProgressRoot === null || markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane, false);
    }
    function renderRootSync(root2, lanes, shouldYieldForPrerendering) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
      if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          0 < memoizedUpdaters.size && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear());
          movePendingFibersToMemoized(root2, lanes);
        }
        workInProgressTransitions = null;
        prepareFreshStack(root2, lanes);
      }
      lanes = false;
      memoizedUpdaters = workInProgressRootExitStatus;
      a:
        do
          try {
            if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {
              var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
              switch (workInProgressSuspendedReason) {
                case SuspendedOnHydration:
                  resetWorkInProgressStack();
                  memoizedUpdaters = RootSuspendedAtTheShell;
                  break a;
                case SuspendedOnImmediate:
                case SuspendedOnData:
                case SuspendedOnAction:
                case SuspendedOnDeprecatedThrowPromise:
                  suspenseHandlerStackCursor.current === null && (lanes = true);
                  var reason = workInProgressSuspendedReason;
                  workInProgressSuspendedReason = NotSuspended;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
                  if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                    memoizedUpdaters = RootInProgress;
                    break a;
                  }
                  break;
                default:
                  reason = workInProgressSuspendedReason, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
              }
            }
            workLoopSync();
            memoizedUpdaters = workInProgressRootExitStatus;
            break;
          } catch (thrownValue$8) {
            handleThrow(root2, thrownValue$8);
          }
        while (1);
      lanes && root2.shellSuspendCounter++;
      resetContextDependencies();
      executionContext = prevExecutionContext;
      ReactSharedInternals.H = prevDispatcher;
      ReactSharedInternals.A = prevAsyncDispatcher;
      workInProgress === null && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
      return memoizedUpdaters;
    }
    function workLoopSync() {
      for (;workInProgress !== null; )
        performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root2, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
      if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          0 < memoizedUpdaters.size && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear());
          movePendingFibersToMemoized(root2, lanes);
        }
        workInProgressTransitions = null;
        workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
        prepareFreshStack(root2, lanes);
      } else
        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes);
      a:
        do
          try {
            if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null)
              b:
                switch (lanes = workInProgress, memoizedUpdaters = workInProgressThrownValue, workInProgressSuspendedReason) {
                  case SuspendedOnError:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root2, lanes, memoizedUpdaters, SuspendedOnError);
                    break;
                  case SuspendedOnData:
                  case SuspendedOnAction:
                    if (isThenableResolved(memoizedUpdaters)) {
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      replaySuspendedUnitOfWork(lanes);
                      break;
                    }
                    lanes = function() {
                      workInProgressSuspendedReason !== SuspendedOnData && workInProgressSuspendedReason !== SuspendedOnAction || workInProgressRoot !== root2 || (workInProgressSuspendedReason = SuspendedAndReadyToContinue);
                      ensureRootIsScheduled(root2);
                    };
                    memoizedUpdaters.then(lanes, lanes);
                    break a;
                  case SuspendedOnImmediate:
                    workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                    break a;
                  case SuspendedOnInstance:
                    workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;
                    break a;
                  case SuspendedAndReadyToContinue:
                    isThenableResolved(memoizedUpdaters) ? (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, lanes, memoizedUpdaters, SuspendedAndReadyToContinue));
                    break;
                  case SuspendedOnInstanceAndReadyToContinue:
                    var resource = null;
                    switch (workInProgress.tag) {
                      case 26:
                        resource = workInProgress.memoizedState;
                      case 5:
                      case 27:
                        var hostFiber = workInProgress;
                        if (resource ? preloadResource(resource) : hostFiber.stateNode.complete) {
                          workInProgressSuspendedReason = NotSuspended;
                          workInProgressThrownValue = null;
                          var sibling = hostFiber.sibling;
                          if (sibling !== null)
                            workInProgress = sibling;
                          else {
                            var returnFiber = hostFiber.return;
                            returnFiber !== null ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                          }
                          break b;
                        }
                        break;
                      default:
                        console.error("Unexpected type of fiber triggered a suspensey commit. This is a bug in React.");
                    }
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root2, lanes, memoizedUpdaters, SuspendedOnInstanceAndReadyToContinue);
                    break;
                  case SuspendedOnDeprecatedThrowPromise:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root2, lanes, memoizedUpdaters, SuspendedOnDeprecatedThrowPromise);
                    break;
                  case SuspendedOnHydration:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = RootSuspendedAtTheShell;
                    break a;
                  default:
                    throw Error("Unexpected SuspendedReason. This is a bug in React.");
                }
            ReactSharedInternals.actQueue !== null ? workLoopSync() : workLoopConcurrentByScheduler();
            break;
          } catch (thrownValue$9) {
            handleThrow(root2, thrownValue$9);
          }
        while (1);
      resetContextDependencies();
      ReactSharedInternals.H = prevDispatcher;
      ReactSharedInternals.A = prevAsyncDispatcher;
      executionContext = prevExecutionContext;
      if (workInProgress !== null)
        return RootInProgress;
      workInProgressRoot = null;
      workInProgressRootRenderLanes = 0;
      finishQueueingConcurrentUpdates();
      return workInProgressRootExitStatus;
    }
    function workLoopConcurrentByScheduler() {
      for (;workInProgress !== null && !shouldYield(); )
        performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
      var current3 = unitOfWork.alternate;
      (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), current3 = runWithFiberInDEV(unitOfWork, beginWork, current3, unitOfWork, entangledRenderLanes), stopProfilerTimerIfRunningAndRecordDuration(unitOfWork)) : current3 = runWithFiberInDEV(unitOfWork, beginWork, current3, unitOfWork, entangledRenderLanes);
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      current3 === null ? completeUnitOfWork(unitOfWork) : workInProgress = current3;
    }
    function replaySuspendedUnitOfWork(unitOfWork) {
      var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      next === null ? completeUnitOfWork(unitOfWork) : workInProgress = next;
    }
    function replayBeginWork(unitOfWork) {
      var current3 = unitOfWork.alternate, isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
      isProfilingMode && startProfilerTimer(unitOfWork);
      switch (unitOfWork.tag) {
        case 15:
        case 0:
          current3 = replayFunctionComponent(current3, unitOfWork, unitOfWork.pendingProps, unitOfWork.type, undefined, workInProgressRootRenderLanes);
          break;
        case 11:
          current3 = replayFunctionComponent(current3, unitOfWork, unitOfWork.pendingProps, unitOfWork.type.render, unitOfWork.ref, workInProgressRootRenderLanes);
          break;
        case 5:
          resetHooksOnUnwind(unitOfWork);
        default:
          unwindInterruptedWork(current3, unitOfWork), unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes), current3 = beginWork(current3, unitOfWork, entangledRenderLanes);
      }
      isProfilingMode && stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
      return current3;
    }
    function throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, suspendedReason) {
      resetContextDependencies();
      resetHooksOnUnwind(unitOfWork);
      thenableState$1 = null;
      thenableIndexCounter$1 = 0;
      var returnFiber = unitOfWork.return;
      try {
        if (throwException(root2, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes)) {
          workInProgressRootExitStatus = RootFatalErrored;
          logUncaughtError(root2, createCapturedValueAtFiber(thrownValue, root2.current));
          workInProgress = null;
          return;
        }
      } catch (error) {
        if (returnFiber !== null)
          throw workInProgress = returnFiber, error;
        workInProgressRootExitStatus = RootFatalErrored;
        logUncaughtError(root2, createCapturedValueAtFiber(thrownValue, root2.current));
        workInProgress = null;
        return;
      }
      if (unitOfWork.flags & 32768) {
        if (isHydrating || suspendedReason === SuspendedOnError)
          root2 = true;
        else if (workInProgressRootIsPrerendering || (workInProgressRootRenderLanes & 536870912) !== 0)
          root2 = false;
        else if (workInProgressRootDidSkipSuspendedSiblings = root2 = true, suspendedReason === SuspendedOnData || suspendedReason === SuspendedOnAction || suspendedReason === SuspendedOnImmediate || suspendedReason === SuspendedOnDeprecatedThrowPromise)
          suspendedReason = suspenseHandlerStackCursor.current, suspendedReason !== null && suspendedReason.tag === 13 && (suspendedReason.flags |= 16384);
        unwindUnitOfWork(unitOfWork, root2);
      } else
        completeUnitOfWork(unitOfWork);
    }
    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;
      do {
        if ((completedWork.flags & 32768) !== 0) {
          unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings);
          return;
        }
        var current3 = completedWork.alternate;
        unitOfWork = completedWork.return;
        startProfilerTimer(completedWork);
        current3 = runWithFiberInDEV(completedWork, completeWork, current3, completedWork, entangledRenderLanes);
        (completedWork.mode & ProfileMode) !== NoMode && stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
        if (current3 !== null) {
          workInProgress = current3;
          return;
        }
        completedWork = completedWork.sibling;
        if (completedWork !== null) {
          workInProgress = completedWork;
          return;
        }
        workInProgress = completedWork = unitOfWork;
      } while (completedWork !== null);
      workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
    }
    function unwindUnitOfWork(unitOfWork, skipSiblings) {
      do {
        var next = unwindWork(unitOfWork.alternate, unitOfWork);
        if (next !== null) {
          next.flags &= 32767;
          workInProgress = next;
          return;
        }
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
          next = unitOfWork.actualDuration;
          for (var child = unitOfWork.child;child !== null; )
            next += child.actualDuration, child = child.sibling;
          unitOfWork.actualDuration = next;
        }
        next = unitOfWork.return;
        next !== null && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
        if (!skipSiblings && (unitOfWork = unitOfWork.sibling, unitOfWork !== null)) {
          workInProgress = unitOfWork;
          return;
        }
        workInProgress = unitOfWork = next;
      } while (unitOfWork !== null);
      workInProgressRootExitStatus = RootSuspendedAtTheShell;
      workInProgress = null;
    }
    function commitRoot(root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes, exitStatus, suspendedState, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
      root2.cancelPendingCommit = null;
      do
        flushPendingEffects();
      while (pendingEffectsStatus !== NO_PENDING_EFFECTS);
      ReactStrictModeWarnings.flushLegacyContextWarning();
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
        throw Error("Should not already be working.");
      setCurrentTrackFromLanes(lanes);
      exitStatus === RootErrored ? logErroredRenderPhase(completedRenderStartTime, completedRenderEndTime, lanes, workInProgressUpdateTask) : recoverableErrors !== null ? logRecoveredRenderPhase(completedRenderStartTime, completedRenderEndTime, lanes, recoverableErrors, finishedWork !== null && finishedWork.alternate !== null && finishedWork.alternate.memoizedState.isDehydrated && (finishedWork.flags & 256) !== 0, workInProgressUpdateTask) : logRenderPhase(completedRenderStartTime, completedRenderEndTime, lanes, workInProgressUpdateTask);
      if (finishedWork !== null) {
        lanes === 0 && console.error("finishedLanes should not be empty during a commit. This is a bug in React.");
        if (finishedWork === root2.current)
          throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
        didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
        markRootFinished(root2, lanes, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes);
        root2 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
        pendingFinishedWork = finishedWork;
        pendingEffectsRoot = root2;
        pendingEffectsLanes = lanes;
        pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
        pendingPassiveTransitions = transitions;
        pendingRecoverableErrors = recoverableErrors;
        pendingEffectsRenderEndTime = completedRenderEndTime;
        pendingSuspendedCommitReason = suspendedCommitReason;
        pendingDelayedCommitReason = IMMEDIATE_COMMIT;
        pendingSuspendedViewTransitionReason = null;
        finishedWork.actualDuration !== 0 || (finishedWork.subtreeFlags & 10256) !== 0 || (finishedWork.flags & 10256) !== 0 ? (root2.callbackNode = null, root2.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
          schedulerEvent = window.event;
          pendingDelayedCommitReason === IMMEDIATE_COMMIT && (pendingDelayedCommitReason = DELAYED_PASSIVE_COMMIT);
          flushPassiveEffects();
          return null;
        })) : (root2.callbackNode = null, root2.callbackPriority = 0);
        commitErrors = null;
        commitStartTime = now();
        suspendedCommitReason !== null && logSuspendedCommitPhase(completedRenderEndTime, commitStartTime, suspendedCommitReason, workInProgressUpdateTask);
        recoverableErrors = (finishedWork.flags & 13878) !== 0;
        if ((finishedWork.subtreeFlags & 13878) !== 0 || recoverableErrors) {
          recoverableErrors = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          transitions = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = DiscreteEventPriority;
          spawnedLane = executionContext;
          executionContext |= CommitContext;
          try {
            commitBeforeMutationEffects(root2, finishedWork, lanes);
          } finally {
            executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals.T = recoverableErrors;
          }
        }
        pendingEffectsStatus = PENDING_MUTATION_PHASE;
        flushMutationEffects();
        flushLayoutEffects();
        flushSpawnedWork();
      }
    }
    function flushMutationEffects() {
      if (pendingEffectsStatus === PENDING_MUTATION_PHASE) {
        pendingEffectsStatus = NO_PENDING_EFFECTS;
        var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, rootMutationHasEffect = (finishedWork.flags & 13878) !== 0;
        if ((finishedWork.subtreeFlags & 13878) !== 0 || rootMutationHasEffect) {
          rootMutationHasEffect = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = DiscreteEventPriority;
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          try {
            inProgressLanes = lanes;
            inProgressRoot = root2;
            resetComponentEffectTimers();
            commitMutationEffectsOnFiber(finishedWork, root2);
            inProgressRoot = inProgressLanes = null;
            lanes = selectionInformation;
            var curFocusedElem = getActiveElementDeep(root2.containerInfo), priorFocusedElem = lanes.focusedElem, priorSelectionRange = lanes.selectionRange;
            if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(priorFocusedElem.ownerDocument.documentElement, priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                var { start, end } = priorSelectionRange;
                end === undefined && (end = start);
                if ("selectionStart" in priorFocusedElem)
                  priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(end, priorFocusedElem.value.length);
                else {
                  var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
                  if (win.getSelection) {
                    var selection = win.getSelection(), length2 = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(priorSelectionRange.start, length2), end$jscomp$0 = priorSelectionRange.end === undefined ? start$jscomp$0 : Math.min(priorSelectionRange.end, length2);
                    !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                    var startMarker = getNodeForCharacterOffset(priorFocusedElem, start$jscomp$0), endMarker = getNodeForCharacterOffset(priorFocusedElem, end$jscomp$0);
                    if (startMarker && endMarker && (selection.rangeCount !== 1 || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                      var range = doc.createRange();
                      range.setStart(startMarker.node, startMarker.offset);
                      selection.removeAllRanges();
                      start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
                    }
                  }
                }
              }
              doc = [];
              for (selection = priorFocusedElem;selection = selection.parentNode; )
                selection.nodeType === 1 && doc.push({
                  element: selection,
                  left: selection.scrollLeft,
                  top: selection.scrollTop
                });
              typeof priorFocusedElem.focus === "function" && priorFocusedElem.focus();
              for (priorFocusedElem = 0;priorFocusedElem < doc.length; priorFocusedElem++) {
                var info = doc[priorFocusedElem];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
            _enabled = !!eventsEnabled;
            selectionInformation = eventsEnabled = null;
          } finally {
            executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootMutationHasEffect;
          }
        }
        root2.current = finishedWork;
        pendingEffectsStatus = PENDING_LAYOUT_PHASE;
      }
    }
    function flushLayoutEffects() {
      if (pendingEffectsStatus === PENDING_LAYOUT_PHASE) {
        pendingEffectsStatus = NO_PENDING_EFFECTS;
        var suspendedViewTransitionReason = pendingSuspendedViewTransitionReason;
        if (suspendedViewTransitionReason !== null) {
          commitStartTime = now();
          var startTime = commitEndTime, endTime = commitStartTime;
          !supportsUserTiming || endTime <= startTime || (animatingTask ? animatingTask.run(console.timeStamp.bind(console, suspendedViewTransitionReason, startTime, endTime, currentTrack, LANES_TRACK_GROUP, "secondary-light")) : console.timeStamp(suspendedViewTransitionReason, startTime, endTime, currentTrack, LANES_TRACK_GROUP, "secondary-light"));
        }
        suspendedViewTransitionReason = pendingEffectsRoot;
        startTime = pendingFinishedWork;
        endTime = pendingEffectsLanes;
        var rootHasLayoutEffect = (startTime.flags & 8772) !== 0;
        if ((startTime.subtreeFlags & 8772) !== 0 || rootHasLayoutEffect) {
          rootHasLayoutEffect = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var _previousPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = DiscreteEventPriority;
          var _prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          try {
            inProgressLanes = endTime, inProgressRoot = suspendedViewTransitionReason, resetComponentEffectTimers(), commitLayoutEffectOnFiber(suspendedViewTransitionReason, startTime.alternate, startTime), inProgressRoot = inProgressLanes = null;
          } finally {
            executionContext = _prevExecutionContext, ReactDOMSharedInternals.p = _previousPriority, ReactSharedInternals.T = rootHasLayoutEffect;
          }
        }
        suspendedViewTransitionReason = pendingEffectsRenderEndTime;
        startTime = pendingSuspendedCommitReason;
        commitEndTime = now();
        suspendedViewTransitionReason = startTime === null ? suspendedViewTransitionReason : commitStartTime;
        startTime = commitEndTime;
        endTime = pendingDelayedCommitReason === ABORTED_VIEW_TRANSITION_COMMIT;
        rootHasLayoutEffect = workInProgressUpdateTask;
        commitErrors !== null ? logCommitErrored(suspendedViewTransitionReason, startTime, commitErrors, false, rootHasLayoutEffect) : !supportsUserTiming || startTime <= suspendedViewTransitionReason || (rootHasLayoutEffect ? rootHasLayoutEffect.run(console.timeStamp.bind(console, endTime ? "Commit Interrupted View Transition" : "Commit", suspendedViewTransitionReason, startTime, currentTrack, LANES_TRACK_GROUP, endTime ? "error" : "secondary-dark")) : console.timeStamp(endTime ? "Commit Interrupted View Transition" : "Commit", suspendedViewTransitionReason, startTime, currentTrack, LANES_TRACK_GROUP, endTime ? "error" : "secondary-dark"));
        pendingEffectsStatus = PENDING_AFTER_MUTATION_PHASE;
      }
    }
    function flushSpawnedWork() {
      if (pendingEffectsStatus === PENDING_SPAWNED_WORK || pendingEffectsStatus === PENDING_AFTER_MUTATION_PHASE) {
        if (pendingEffectsStatus === PENDING_SPAWNED_WORK) {
          var startViewTransitionStartTime = commitEndTime;
          commitEndTime = now();
          var endTime = commitEndTime, abortedViewTransition = pendingDelayedCommitReason === ABORTED_VIEW_TRANSITION_COMMIT;
          !supportsUserTiming || endTime <= startViewTransitionStartTime || (animatingTask ? animatingTask.run(console.timeStamp.bind(console, abortedViewTransition ? "Interrupted View Transition" : "Starting Animation", startViewTransitionStartTime, endTime, currentTrack, LANES_TRACK_GROUP, abortedViewTransition ? "error" : "secondary-light")) : console.timeStamp(abortedViewTransition ? "Interrupted View Transition" : "Starting Animation", startViewTransitionStartTime, endTime, currentTrack, LANES_TRACK_GROUP, abortedViewTransition ? " error" : "secondary-light"));
          pendingDelayedCommitReason !== ABORTED_VIEW_TRANSITION_COMMIT && (pendingDelayedCommitReason = ANIMATION_STARTED_COMMIT);
        }
        pendingEffectsStatus = NO_PENDING_EFFECTS;
        requestPaint();
        startViewTransitionStartTime = pendingEffectsRoot;
        var finishedWork = pendingFinishedWork;
        endTime = pendingEffectsLanes;
        abortedViewTransition = pendingRecoverableErrors;
        var rootDidHavePassiveEffects = finishedWork.actualDuration !== 0 || (finishedWork.subtreeFlags & 10256) !== 0 || (finishedWork.flags & 10256) !== 0;
        rootDidHavePassiveEffects ? pendingEffectsStatus = PENDING_PASSIVE_PHASE : (pendingEffectsStatus = NO_PENDING_EFFECTS, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(startViewTransitionStartTime, startViewTransitionStartTime.pendingLanes), nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null);
        var remainingLanes = startViewTransitionStartTime.pendingLanes;
        remainingLanes === 0 && (legacyErrorBoundariesThatAlreadyFailed = null);
        rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(startViewTransitionStartTime);
        remainingLanes = lanesToEventPriority(endTime);
        finishedWork = finishedWork.stateNode;
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function")
          try {
            var didError = (finishedWork.current.flags & 128) === 128;
            switch (remainingLanes) {
              case DiscreteEventPriority:
                var schedulerPriority = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriority = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriority = NormalPriority$1;
                break;
              case IdleEventPriority:
                schedulerPriority = IdlePriority;
                break;
              default:
                schedulerPriority = NormalPriority$1;
            }
            injectedHook.onCommitFiberRoot(rendererID, finishedWork, schedulerPriority, didError);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, console.error("React instrumentation encountered an error: %o", err));
          }
        isDevToolsPresent && startViewTransitionStartTime.memoizedUpdaters.clear();
        onCommitRoot();
        if (abortedViewTransition !== null) {
          didError = ReactSharedInternals.T;
          schedulerPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = DiscreteEventPriority;
          ReactSharedInternals.T = null;
          try {
            var onRecoverableError = startViewTransitionStartTime.onRecoverableError;
            for (finishedWork = 0;finishedWork < abortedViewTransition.length; finishedWork++) {
              var recoverableError = abortedViewTransition[finishedWork], errorInfo = makeErrorInfo(recoverableError.stack);
              runWithFiberInDEV(recoverableError.source, onRecoverableError, recoverableError.value, errorInfo);
            }
          } finally {
            ReactSharedInternals.T = didError, ReactDOMSharedInternals.p = schedulerPriority;
          }
        }
        (pendingEffectsLanes & 3) !== 0 && flushPendingEffects();
        ensureRootIsScheduled(startViewTransitionStartTime);
        remainingLanes = startViewTransitionStartTime.pendingLanes;
        (endTime & 261930) !== 0 && (remainingLanes & 42) !== 0 ? (nestedUpdateScheduled = true, startViewTransitionStartTime === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = startViewTransitionStartTime)) : nestedUpdateCount = 0;
        rootDidHavePassiveEffects || finalizeRender(endTime, commitEndTime);
        flushSyncWorkAcrossRoots_impl(0, false);
      }
    }
    function makeErrorInfo(componentStack) {
      componentStack = { componentStack };
      Object.defineProperty(componentStack, "digest", {
        get: function() {
          console.error('You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.');
        }
      });
      return componentStack;
    }
    function releaseRootPooledCache(root2, remainingLanes) {
      (root2.pooledCacheLanes &= remainingLanes) === 0 && (remainingLanes = root2.pooledCache, remainingLanes != null && (root2.pooledCache = null, releaseCache(remainingLanes)));
    }
    function flushPendingEffects() {
      flushMutationEffects();
      flushLayoutEffects();
      flushSpawnedWork();
      return flushPassiveEffects();
    }
    function flushPassiveEffects() {
      if (pendingEffectsStatus !== PENDING_PASSIVE_PHASE)
        return false;
      var root2 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
      pendingEffectsRemainingLanes = 0;
      var renderPriority = lanesToEventPriority(pendingEffectsLanes), priority = DefaultEventPriority === 0 || DefaultEventPriority > renderPriority ? DefaultEventPriority : renderPriority;
      renderPriority = ReactSharedInternals.T;
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        ReactDOMSharedInternals.p = priority;
        ReactSharedInternals.T = null;
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        priority = pendingEffectsRoot;
        var lanes = pendingEffectsLanes;
        pendingEffectsStatus = NO_PENDING_EFFECTS;
        pendingFinishedWork = pendingEffectsRoot = null;
        pendingEffectsLanes = 0;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw Error("Cannot flush passive effects while already rendering.");
        setCurrentTrackFromLanes(lanes);
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
        var passiveEffectStartTime = 0;
        commitErrors = null;
        passiveEffectStartTime = now$1();
        if (pendingDelayedCommitReason === ANIMATION_STARTED_COMMIT)
          logAnimatingPhase(commitEndTime, passiveEffectStartTime, animatingTask);
        else {
          var startTime = commitEndTime, endTime = passiveEffectStartTime, delayedUntilPaint = pendingDelayedCommitReason === DELAYED_PASSIVE_COMMIT;
          !supportsUserTiming || endTime <= startTime || (workInProgressUpdateTask ? workInProgressUpdateTask.run(console.timeStamp.bind(console, delayedUntilPaint ? "Waiting for Paint" : "Waiting", startTime, endTime, currentTrack, LANES_TRACK_GROUP, "secondary-light")) : console.timeStamp(delayedUntilPaint ? "Waiting for Paint" : "Waiting", startTime, endTime, currentTrack, LANES_TRACK_GROUP, "secondary-light"));
        }
        startTime = executionContext;
        executionContext |= CommitContext;
        var finishedWork = priority.current;
        resetComponentEffectTimers();
        commitPassiveUnmountOnFiber(finishedWork);
        var finishedWork$jscomp$0 = priority.current;
        finishedWork = pendingEffectsRenderEndTime;
        resetComponentEffectTimers();
        commitPassiveMountOnFiber(priority, finishedWork$jscomp$0, lanes, transitions, finishedWork);
        commitDoubleInvokeEffectsInDEV(priority);
        executionContext = startTime;
        var passiveEffectsEndTime = now$1();
        finishedWork$jscomp$0 = passiveEffectStartTime;
        finishedWork = workInProgressUpdateTask;
        commitErrors !== null ? logCommitErrored(finishedWork$jscomp$0, passiveEffectsEndTime, commitErrors, true, finishedWork) : !supportsUserTiming || passiveEffectsEndTime <= finishedWork$jscomp$0 || (finishedWork ? finishedWork.run(console.timeStamp.bind(console, "Remaining Effects", finishedWork$jscomp$0, passiveEffectsEndTime, currentTrack, LANES_TRACK_GROUP, "secondary-dark")) : console.timeStamp("Remaining Effects", finishedWork$jscomp$0, passiveEffectsEndTime, currentTrack, LANES_TRACK_GROUP, "secondary-dark"));
        finalizeRender(lanes, passiveEffectsEndTime);
        flushSyncWorkAcrossRoots_impl(0, false);
        didScheduleUpdateDuringPassiveEffects ? priority === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = priority) : nestedPassiveUpdateCount = 0;
        didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = false;
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function")
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, priority);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, console.error("React instrumentation encountered an error: %o", err));
          }
        var stateNode = priority.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        return true;
      } finally {
        ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = renderPriority, releaseRootPooledCache(root2, remainingLanes);
      }
    }
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
      sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
      recordEffectError(sourceFiber);
      sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
      rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
      rootFiber !== null && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
      isRunningInsertionEffect = false;
      if (sourceFiber.tag === 3)
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
      else {
        for (;nearestMountedAncestor !== null; ) {
          if (nearestMountedAncestor.tag === 3) {
            captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
            return;
          }
          if (nearestMountedAncestor.tag === 1) {
            var instance = nearestMountedAncestor.stateNode;
            if (typeof nearestMountedAncestor.type.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && (legacyErrorBoundariesThatAlreadyFailed === null || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
              sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
              recordEffectError(sourceFiber);
              error = createClassErrorUpdate(2);
              instance = enqueueUpdate(nearestMountedAncestor, error, 2);
              instance !== null && (initializeClassErrorUpdate(error, instance, nearestMountedAncestor, sourceFiber), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
              return;
            }
          }
          nearestMountedAncestor = nearestMountedAncestor.return;
        }
        console.error(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, error);
      }
    }
    function attachPingListener(root2, wakeable, lanes) {
      var pingCache = root2.pingCache;
      if (pingCache === null) {
        pingCache = root2.pingCache = new PossiblyWeakMap;
        var threadIDs = new Set;
        pingCache.set(wakeable, threadIDs);
      } else
        threadIDs = pingCache.get(wakeable), threadIDs === undefined && (threadIDs = new Set, pingCache.set(wakeable, threadIDs));
      threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), pingCache = pingSuspendedRoot.bind(null, root2, wakeable, lanes), isDevToolsPresent && restorePendingUpdaters(root2, lanes), wakeable.then(pingCache, pingCache));
    }
    function pingSuspendedRoot(root2, wakeable, pingedLanes) {
      var pingCache = root2.pingCache;
      pingCache !== null && pingCache.delete(wakeable);
      root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      root2.warmLanes &= ~pingedLanes;
      (pingedLanes & 127) !== 0 ? 0 > blockingUpdateTime && (blockingClampTime = blockingUpdateTime = now(), blockingUpdateTask = createTask("Promise Resolved"), blockingUpdateType = PINGED_UPDATE) : (pingedLanes & 4194048) !== 0 && 0 > transitionUpdateTime && (transitionClampTime = transitionUpdateTime = now(), transitionUpdateTask = createTask("Promise Resolved"), transitionUpdateType = PINGED_UPDATE);
      isConcurrentActEnvironment() && ReactSharedInternals.actQueue === null && console.error(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act`);
      workInProgressRoot === root2 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? (executionContext & RenderContext) === NoContext && prepareFreshStack(root2, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
      ensureRootIsScheduled(root2);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      retryLane === 0 && (retryLane = claimNextRetryLane());
      boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
      boundaryFiber !== null && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
      suspenseState !== null && (retryLane = suspenseState.retryLane);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = 0;
      switch (boundaryFiber.tag) {
        case 31:
        case 13:
          var retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          suspenseState !== null && (retryLane = suspenseState.retryLane);
          break;
        case 19:
          retryCache = boundaryFiber.stateNode;
          break;
        case 22:
          retryCache = boundaryFiber.stateNode._retryCache;
          break;
        default:
          throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      retryCache !== null && retryCache.delete(wakeable);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function recursivelyTraverseAndDoubleInvokeEffectsInDEV(root$jscomp$0, parentFiber, isInStrictMode) {
      if ((parentFiber.subtreeFlags & 67117056) !== 0)
        for (parentFiber = parentFiber.child;parentFiber !== null; ) {
          var root2 = root$jscomp$0, fiber = parentFiber, isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
          isStrictModeFiber = isInStrictMode || isStrictModeFiber;
          fiber.tag !== 22 ? fiber.flags & 67108864 ? isStrictModeFiber && runWithFiberInDEV(fiber, doubleInvokeEffectsOnFiber, root2, fiber) : recursivelyTraverseAndDoubleInvokeEffectsInDEV(root2, fiber, isStrictModeFiber) : fiber.memoizedState === null && (isStrictModeFiber && fiber.flags & 8192 ? runWithFiberInDEV(fiber, doubleInvokeEffectsOnFiber, root2, fiber) : fiber.subtreeFlags & 67108864 && runWithFiberInDEV(fiber, recursivelyTraverseAndDoubleInvokeEffectsInDEV, root2, fiber, isStrictModeFiber));
          parentFiber = parentFiber.sibling;
        }
    }
    function doubleInvokeEffectsOnFiber(root2, fiber) {
      setIsStrictModeForDevtools(true);
      try {
        disappearLayoutEffects(fiber), disconnectPassiveEffect(fiber), reappearLayoutEffects(root2, fiber.alternate, fiber, false), reconnectPassiveEffects(root2, fiber, 0, null, false, 0);
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }
    function commitDoubleInvokeEffectsInDEV(root2) {
      var doubleInvokeEffects = true;
      root2.current.mode & (StrictLegacyMode | StrictEffectsMode) || (doubleInvokeEffects = false);
      recursivelyTraverseAndDoubleInvokeEffectsInDEV(root2, root2.current, doubleInvokeEffects);
    }
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      if ((executionContext & RenderContext) === NoContext) {
        var tag = fiber.tag;
        if (tag === 3 || tag === 1 || tag === 0 || tag === 11 || tag === 14 || tag === 15) {
          tag = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(tag))
              return;
            didWarnStateUpdateForNotYetMountedComponent.add(tag);
          } else
            didWarnStateUpdateForNotYetMountedComponent = new Set([tag]);
          runWithFiberInDEV(fiber, function() {
            console.error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously tries to update the component. Move this work to useEffect instead.");
          });
        }
      }
    }
    function restorePendingUpdaters(root2, lanes) {
      isDevToolsPresent && root2.memoizedUpdaters.forEach(function(schedulingFiber) {
        addFiberToLanesMap(root2, schedulingFiber, lanes);
      });
    }
    function scheduleCallback$1(priorityLevel, callback) {
      var actQueue = ReactSharedInternals.actQueue;
      return actQueue !== null ? (actQueue.push(callback), fakeActCallbackNode$1) : scheduleCallback$3(priorityLevel, callback);
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
      isConcurrentActEnvironment() && ReactSharedInternals.actQueue === null && runWithFiberInDEV(fiber, function() {
        console.error(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act`, getComponentNameFromFiber(fiber));
      });
    }
    function ensureRootIsScheduled(root2) {
      root2 !== lastScheduledRoot && root2.next === null && (lastScheduledRoot === null ? firstScheduledRoot = lastScheduledRoot = root2 : lastScheduledRoot = lastScheduledRoot.next = root2);
      mightHavePendingSyncWork = true;
      ReactSharedInternals.actQueue !== null ? didScheduleMicrotask_act || (didScheduleMicrotask_act = true, scheduleImmediateRootScheduleTask()) : didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
    }
    function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
      if (!isFlushingWork && mightHavePendingSyncWork) {
        isFlushingWork = true;
        do {
          var didPerformSomeWork = false;
          for (var root2 = firstScheduledRoot;root2 !== null; ) {
            if (!onlyLegacy)
              if (syncTransitionLanes !== 0) {
                var pendingLanes = root2.pendingLanes;
                if (pendingLanes === 0)
                  var nextLanes = 0;
                else {
                  var { suspendedLanes, pingedLanes } = root2;
                  nextLanes = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                  nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                  nextLanes = nextLanes & 201326741 ? nextLanes & 201326741 | 1 : nextLanes ? nextLanes | 2 : 0;
                }
                nextLanes !== 0 && (didPerformSomeWork = true, performSyncWorkOnRoot(root2, nextLanes));
              } else
                nextLanes = workInProgressRootRenderLanes, nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? nextLanes : 0, root2.cancelPendingCommit !== null || root2.timeoutHandle !== noTimeout), (nextLanes & 3) === 0 || checkIfRootIsPrerendering(root2, nextLanes) || (didPerformSomeWork = true, performSyncWorkOnRoot(root2, nextLanes));
            root2 = root2.next;
          }
        } while (didPerformSomeWork);
        isFlushingWork = false;
      }
    }
    function processRootScheduleInImmediateTask() {
      schedulerEvent = window.event;
      processRootScheduleInMicrotask();
    }
    function processRootScheduleInMicrotask() {
      mightHavePendingSyncWork = didScheduleMicrotask_act = didScheduleMicrotask = false;
      var syncTransitionLanes = 0;
      currentEventTransitionLane !== 0 && shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane);
      for (var currentTime = now$1(), prev = null, root2 = firstScheduledRoot;root2 !== null; ) {
        var next = root2.next, nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime);
        if (nextLanes === 0)
          root2.next = null, prev === null ? firstScheduledRoot = next : prev.next = next, next === null && (lastScheduledRoot = prev);
        else if (prev = root2, syncTransitionLanes !== 0 || (nextLanes & 3) !== 0)
          mightHavePendingSyncWork = true;
        root2 = next;
      }
      pendingEffectsStatus !== NO_PENDING_EFFECTS && pendingEffectsStatus !== PENDING_PASSIVE_PHASE || flushSyncWorkAcrossRoots_impl(syncTransitionLanes, false);
      currentEventTransitionLane !== 0 && (currentEventTransitionLane = 0);
    }
    function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
      for (var { suspendedLanes, pingedLanes, expirationTimes } = root2, lanes = root2.pendingLanes & -62914561;0 < lanes; ) {
        var index = 31 - clz32(lanes), lane = 1 << index, expirationTime = expirationTimes[index];
        if (expirationTime === -1) {
          if ((lane & suspendedLanes) === 0 || (lane & pingedLanes) !== 0)
            expirationTimes[index] = computeExpirationTime(lane, currentTime);
        } else
          expirationTime <= currentTime && (root2.expiredLanes |= lane);
        lanes &= ~lane;
      }
      currentTime = workInProgressRoot;
      suspendedLanes = workInProgressRootRenderLanes;
      suspendedLanes = getNextLanes(root2, root2 === currentTime ? suspendedLanes : 0, root2.cancelPendingCommit !== null || root2.timeoutHandle !== noTimeout);
      pingedLanes = root2.callbackNode;
      if (suspendedLanes === 0 || root2 === currentTime && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || root2.cancelPendingCommit !== null)
        return pingedLanes !== null && cancelCallback(pingedLanes), root2.callbackNode = null, root2.callbackPriority = 0;
      if ((suspendedLanes & 3) === 0 || checkIfRootIsPrerendering(root2, suspendedLanes)) {
        currentTime = suspendedLanes & -suspendedLanes;
        if (currentTime !== root2.callbackPriority || ReactSharedInternals.actQueue !== null && pingedLanes !== fakeActCallbackNode)
          cancelCallback(pingedLanes);
        else
          return currentTime;
        switch (lanesToEventPriority(suspendedLanes)) {
          case DiscreteEventPriority:
          case ContinuousEventPriority:
            suspendedLanes = UserBlockingPriority;
            break;
          case DefaultEventPriority:
            suspendedLanes = NormalPriority$1;
            break;
          case IdleEventPriority:
            suspendedLanes = IdlePriority;
            break;
          default:
            suspendedLanes = NormalPriority$1;
        }
        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root2);
        ReactSharedInternals.actQueue !== null ? (ReactSharedInternals.actQueue.push(pingedLanes), suspendedLanes = fakeActCallbackNode) : suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
        root2.callbackPriority = currentTime;
        root2.callbackNode = suspendedLanes;
        return currentTime;
      }
      pingedLanes !== null && cancelCallback(pingedLanes);
      root2.callbackPriority = 2;
      root2.callbackNode = null;
      return 2;
    }
    function performWorkOnRootViaSchedulerTask(root2, didTimeout) {
      nestedUpdateScheduled = currentUpdateIsNested = false;
      schedulerEvent = window.event;
      if (pendingEffectsStatus !== NO_PENDING_EFFECTS && pendingEffectsStatus !== PENDING_PASSIVE_PHASE)
        return root2.callbackNode = null, root2.callbackPriority = 0, null;
      var originalCallbackNode = root2.callbackNode;
      pendingDelayedCommitReason === IMMEDIATE_COMMIT && (pendingDelayedCommitReason = DELAYED_PASSIVE_COMMIT);
      if (flushPendingEffects() && root2.callbackNode !== originalCallbackNode)
        return null;
      var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
      workInProgressRootRenderLanes$jscomp$0 = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0, root2.cancelPendingCommit !== null || root2.timeoutHandle !== noTimeout);
      if (workInProgressRootRenderLanes$jscomp$0 === 0)
        return null;
      performWorkOnRoot(root2, workInProgressRootRenderLanes$jscomp$0, didTimeout);
      scheduleTaskForRootDuringMicrotask(root2, now$1());
      return root2.callbackNode != null && root2.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root2) : null;
    }
    function performSyncWorkOnRoot(root2, lanes) {
      if (flushPendingEffects())
        return null;
      currentUpdateIsNested = nestedUpdateScheduled;
      nestedUpdateScheduled = false;
      performWorkOnRoot(root2, lanes, true);
    }
    function cancelCallback(callbackNode) {
      callbackNode !== fakeActCallbackNode && callbackNode !== null && cancelCallback$1(callbackNode);
    }
    function scheduleImmediateRootScheduleTask() {
      ReactSharedInternals.actQueue !== null && ReactSharedInternals.actQueue.push(function() {
        processRootScheduleInMicrotask();
        return null;
      });
      scheduleMicrotask(function() {
        (executionContext & (RenderContext | CommitContext)) !== NoContext ? scheduleCallback$3(ImmediatePriority, processRootScheduleInImmediateTask) : processRootScheduleInMicrotask();
      });
    }
    function requestTransitionLane() {
      if (currentEventTransitionLane === 0) {
        var actionScopeLane = currentEntangledLane;
        actionScopeLane === 0 && (actionScopeLane = nextTransitionUpdateLane, nextTransitionUpdateLane <<= 1, (nextTransitionUpdateLane & 261888) === 0 && (nextTransitionUpdateLane = 256));
        currentEventTransitionLane = actionScopeLane;
      }
      return currentEventTransitionLane;
    }
    function coerceFormActionProp(actionProp) {
      if (actionProp == null || typeof actionProp === "symbol" || typeof actionProp === "boolean")
        return null;
      if (typeof actionProp === "function")
        return actionProp;
      checkAttributeStringCoercion(actionProp, "action");
      return sanitizeURL("" + actionProp);
    }
    function createFormDataWithSubmitter(form, submitter) {
      var temp = submitter.ownerDocument.createElement("input");
      temp.name = submitter.name;
      temp.value = submitter.value;
      form.id && temp.setAttribute("form", form.id);
      submitter.parentNode.insertBefore(temp, submitter);
      form = new FormData(form);
      temp.parentNode.removeChild(temp);
      return form;
    }
    function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
      if (domEventName === "submit" && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
        var action = coerceFormActionProp((nativeEventTarget[internalPropsKey] || null).action), submitter = nativeEvent.submitter;
        submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), domEventName !== null && (action = domEventName, submitter = null));
        var event = new SyntheticEvent("action", "action", null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners: [
            {
              instance: null,
              listener: function() {
                if (nativeEvent.defaultPrevented) {
                  if (currentEventTransitionLane !== 0) {
                    var formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget), pendingState = {
                      pending: true,
                      data: formData,
                      method: nativeEventTarget.method,
                      action
                    };
                    Object.freeze(pendingState);
                    startHostTransition(maybeTargetInst, pendingState, null, formData);
                  }
                } else
                  typeof action === "function" && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget), pendingState = {
                    pending: true,
                    data: formData,
                    method: nativeEventTarget.method,
                    action
                  }, Object.freeze(pendingState), startHostTransition(maybeTargetInst, pendingState, action, formData));
              },
              currentTarget: nativeEventTarget
            }
          ]
        });
      }
    }
    function executeDispatch(event, listener, currentTarget) {
      event.currentTarget = currentTarget;
      try {
        listener(event);
      } catch (error) {
        reportGlobalError(error);
      }
      event.currentTarget = null;
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      eventSystemFlags = (eventSystemFlags & 4) !== 0;
      for (var i = 0;i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i];
        a: {
          var previousInstance = undefined, event = _dispatchQueue$i.event;
          _dispatchQueue$i = _dispatchQueue$i.listeners;
          if (eventSystemFlags)
            for (var i$jscomp$0 = _dispatchQueue$i.length - 1;0 <= i$jscomp$0; i$jscomp$0--) {
              var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
              _dispatchListeners$i = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped())
                break a;
              instance !== null ? runWithFiberInDEV(instance, executeDispatch, event, _dispatchListeners$i, currentTarget) : executeDispatch(event, _dispatchListeners$i, currentTarget);
              previousInstance = instance;
            }
          else
            for (i$jscomp$0 = 0;i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
              _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
              instance = _dispatchListeners$i.instance;
              currentTarget = _dispatchListeners$i.currentTarget;
              _dispatchListeners$i = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped())
                break a;
              instance !== null ? runWithFiberInDEV(instance, executeDispatch, event, _dispatchListeners$i, currentTarget) : executeDispatch(event, _dispatchListeners$i, currentTarget);
              previousInstance = instance;
            }
        }
      }
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      nonDelegatedEvents.has(domEventName) || console.error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
      var listenerSet = targetElement[internalEventHandlersKey];
      listenerSet === undefined && (listenerSet = targetElement[internalEventHandlersKey] = new Set);
      var listenerSetKey = domEventName + "__bubble";
      listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), listenerSet.add(listenerSetKey));
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
      nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && console.error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
      var eventSystemFlags = 0;
      isCapturePhaseListener && (eventSystemFlags |= 4);
      addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    }
    function listenToAllSupportedEvents(rootContainerElement) {
      if (!rootContainerElement[listeningMarker]) {
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
          domEventName !== "selectionchange" && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
        });
        var ownerDocument = rootContainerElement.nodeType === 9 ? rootContainerElement : rootContainerElement.ownerDocument;
        ownerDocument === null || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
      switch (getEventPriority(domEventName)) {
        case DiscreteEventPriority:
          var listenerWrapper = dispatchDiscreteEvent;
          break;
        case ContinuousEventPriority:
          listenerWrapper = dispatchContinuousEvent;
          break;
        default:
          listenerWrapper = dispatchEvent;
      }
      eventSystemFlags = listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      listenerWrapper = undefined;
      !passiveBrowserEventsSupported || domEventName !== "touchstart" && domEventName !== "touchmove" && domEventName !== "wheel" || (listenerWrapper = true);
      isCapturePhaseListener ? listenerWrapper !== undefined ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
        capture: true,
        passive: listenerWrapper
      }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : listenerWrapper !== undefined ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
        passive: listenerWrapper
      }) : targetContainer.addEventListener(domEventName, eventSystemFlags, false);
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
      var ancestorInst = targetInst$jscomp$0;
      if ((eventSystemFlags & 1) === 0 && (eventSystemFlags & 2) === 0 && targetInst$jscomp$0 !== null)
        a:
          for (;; ) {
            if (targetInst$jscomp$0 === null)
              return;
            var nodeTag = targetInst$jscomp$0.tag;
            if (nodeTag === 3 || nodeTag === 4) {
              var container = targetInst$jscomp$0.stateNode.containerInfo;
              if (container === targetContainer)
                break;
              if (nodeTag === 4)
                for (nodeTag = targetInst$jscomp$0.return;nodeTag !== null; ) {
                  var grandTag = nodeTag.tag;
                  if ((grandTag === 3 || grandTag === 4) && nodeTag.stateNode.containerInfo === targetContainer)
                    return;
                  nodeTag = nodeTag.return;
                }
              for (;container !== null; ) {
                nodeTag = getClosestInstanceFromNode(container);
                if (nodeTag === null)
                  return;
                grandTag = nodeTag.tag;
                if (grandTag === 5 || grandTag === 6 || grandTag === 26 || grandTag === 27) {
                  targetInst$jscomp$0 = ancestorInst = nodeTag;
                  continue a;
                }
                container = container.parentNode;
              }
            }
            targetInst$jscomp$0 = targetInst$jscomp$0.return;
          }
      batchedUpdates$1(function() {
        var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
        a: {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName !== undefined) {
            var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0)
                  break a;
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2)
                  break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
              case "scrollend":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
              case "toggle":
              case "beforetoggle":
                SyntheticEventCtor = SyntheticToggleEvent;
            }
            var inCapturePhase = (eventSystemFlags & 4) !== 0, accumulateTargetOnly = !inCapturePhase && (domEventName === "scroll" || domEventName === "scrollend"), reactEventName = inCapturePhase ? reactName !== null ? reactName + "Capture" : null : reactName;
            inCapturePhase = [];
            for (var instance = targetInst, lastHostComponent;instance !== null; ) {
              var _instance2 = instance;
              lastHostComponent = _instance2.stateNode;
              _instance2 = _instance2.tag;
              _instance2 !== 5 && _instance2 !== 26 && _instance2 !== 27 || lastHostComponent === null || reactEventName === null || (_instance2 = getListener(instance, reactEventName), _instance2 != null && inCapturePhase.push(createDispatchListener(instance, _instance2, lastHostComponent)));
              if (accumulateTargetOnly)
                break;
              instance = instance.return;
            }
            0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget), dispatchQueue.push({
              event: reactName,
              listeners: inCapturePhase
            }));
          }
        }
        if ((eventSystemFlags & 7) === 0) {
          a: {
            reactName = domEventName === "mouseover" || domEventName === "pointerover";
            SyntheticEventCtor = domEventName === "mouseout" || domEventName === "pointerout";
            if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
              break a;
            if (SyntheticEventCtor || reactName) {
              reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
              if (SyntheticEventCtor) {
                if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, reactEventType !== null && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || inCapturePhase !== 5 && inCapturePhase !== 27 && inCapturePhase !== 6))
                  reactEventType = null;
              } else
                SyntheticEventCtor = null, reactEventType = targetInst;
              if (SyntheticEventCtor !== reactEventType) {
                inCapturePhase = SyntheticMouseEvent;
                _instance2 = "onMouseLeave";
                reactEventName = "onMouseEnter";
                instance = "mouse";
                if (domEventName === "pointerout" || domEventName === "pointerover")
                  inCapturePhase = SyntheticPointerEvent, _instance2 = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                accumulateTargetOnly = SyntheticEventCtor == null ? reactName : getNodeFromInstance(SyntheticEventCtor);
                lastHostComponent = reactEventType == null ? reactName : getNodeFromInstance(reactEventType);
                reactName = new inCapturePhase(_instance2, instance + "leave", SyntheticEventCtor, nativeEvent, nativeEventTarget);
                reactName.target = accumulateTargetOnly;
                reactName.relatedTarget = lastHostComponent;
                _instance2 = null;
                getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(reactEventName, instance + "enter", reactEventType, nativeEvent, nativeEventTarget), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance2 = inCapturePhase);
                accumulateTargetOnly = _instance2;
                if (SyntheticEventCtor && reactEventType)
                  b: {
                    inCapturePhase = getParent;
                    reactEventName = SyntheticEventCtor;
                    instance = reactEventType;
                    lastHostComponent = 0;
                    for (_instance2 = reactEventName;_instance2; _instance2 = inCapturePhase(_instance2))
                      lastHostComponent++;
                    _instance2 = 0;
                    for (var tempB = instance;tempB; tempB = inCapturePhase(tempB))
                      _instance2++;
                    for (;0 < lastHostComponent - _instance2; )
                      reactEventName = inCapturePhase(reactEventName), lastHostComponent--;
                    for (;0 < _instance2 - lastHostComponent; )
                      instance = inCapturePhase(instance), _instance2--;
                    for (;lastHostComponent--; ) {
                      if (reactEventName === instance || instance !== null && reactEventName === instance.alternate) {
                        inCapturePhase = reactEventName;
                        break b;
                      }
                      reactEventName = inCapturePhase(reactEventName);
                      instance = inCapturePhase(instance);
                    }
                    inCapturePhase = null;
                  }
                else
                  inCapturePhase = null;
                SyntheticEventCtor !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, reactName, SyntheticEventCtor, inCapturePhase, false);
                reactEventType !== null && accumulateTargetOnly !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, accumulateTargetOnly, reactEventType, inCapturePhase, true);
              }
            }
          }
          a: {
            reactName = targetInst ? getNodeFromInstance(targetInst) : window;
            SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
            if (SyntheticEventCtor === "select" || SyntheticEventCtor === "input" && reactName.type === "file")
              var getTargetInstFunc = getTargetInstForChangeEvent;
            else if (isTextInputElement(reactName))
              if (isInputEventSupported)
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                var handleEventFunc = handleEventsForInputEventPolyfill;
              }
            else
              SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || SyntheticEventCtor.toLowerCase() !== "input" || reactName.type !== "checkbox" && reactName.type !== "radio" ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
            if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
              createAndAccumulateChangeEvent(dispatchQueue, getTargetInstFunc, nativeEvent, nativeEventTarget);
              break a;
            }
            handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
            domEventName === "focusout" && targetInst && reactName.type === "number" && targetInst.memoizedProps.value != null && setDefaultValue(reactName, "number", reactName.value);
          }
          handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(handleEventFunc) || handleEventFunc.contentEditable === "true")
                activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
              break;
            case "focusout":
              lastSelection = activeElementInst = activeElement = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent)
                break;
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
          var fallbackData;
          if (canUseCompositionEvent)
            b: {
              switch (domEventName) {
                case "compositionstart":
                  var eventType = "onCompositionStart";
                  break b;
                case "compositionend":
                  eventType = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  eventType = "onCompositionUpdate";
                  break b;
              }
              eventType = undefined;
            }
          else
            isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE && (eventType = "onCompositionStart");
          eventType && (useFallbackCompositionData && nativeEvent.locale !== "ko" && (isComposing || eventType !== "onCompositionStart" ? eventType === "onCompositionEnd" && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = ("value" in root) ? root.value : root.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget), dispatchQueue.push({
            event: eventType,
            listeners: handleEventFunc
          }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), fallbackData !== null && (eventType.data = fallbackData))));
          if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
            eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput"), 0 < eventType.length && (handleEventFunc = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget), dispatchQueue.push({
              event: handleEventFunc,
              listeners: eventType
            }), handleEventFunc.data = fallbackData);
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      });
    }
    function createDispatchListener(instance, listener, currentTarget) {
      return {
        instance,
        listener,
        currentTarget
      };
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      for (var captureName = reactName + "Capture", listeners = [];targetFiber !== null; ) {
        var _instance3 = targetFiber, stateNode = _instance3.stateNode;
        _instance3 = _instance3.tag;
        _instance3 !== 5 && _instance3 !== 26 && _instance3 !== 27 || stateNode === null || (_instance3 = getListener(targetFiber, captureName), _instance3 != null && listeners.unshift(createDispatchListener(targetFiber, _instance3, stateNode)), _instance3 = getListener(targetFiber, reactName), _instance3 != null && listeners.push(createDispatchListener(targetFiber, _instance3, stateNode)));
        if (targetFiber.tag === 3)
          return listeners;
        targetFiber = targetFiber.return;
      }
      return [];
    }
    function getParent(inst) {
      if (inst === null)
        return null;
      do
        inst = inst.return;
      while (inst && inst.tag !== 5 && inst.tag !== 27);
      return inst ? inst : null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      for (var registrationName = event._reactName, listeners = [];target !== null && target !== common; ) {
        var _instance4 = target, alternate = _instance4.alternate, stateNode = _instance4.stateNode;
        _instance4 = _instance4.tag;
        if (alternate !== null && alternate === common)
          break;
        _instance4 !== 5 && _instance4 !== 26 && _instance4 !== 27 || stateNode === null || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), stateNode != null && listeners.unshift(createDispatchListener(target, stateNode, alternate))) : inCapturePhase || (stateNode = getListener(target, registrationName), stateNode != null && listeners.push(createDispatchListener(target, stateNode, alternate))));
        target = target.return;
      }
      listeners.length !== 0 && dispatchQueue.push({ event, listeners });
    }
    function validatePropertiesInDevelopment(type, props) {
      validateProperties$2(type, props);
      type !== "input" && type !== "textarea" && type !== "select" || props == null || props.value !== null || didWarnValueNull || (didWarnValueNull = true, type === "select" && props.multiple ? console.error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : console.error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
      var eventRegistry = {
        registrationNameDependencies,
        possibleRegistrationNames
      };
      isCustomElement(type) || typeof props.is === "string" || warnUnknownProperties(type, props, eventRegistry);
      props.contentEditable && !props.suppressContentEditableWarning && props.children != null && console.error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
    }
    function warnForPropDifference(propName, serverValue, clientValue, serverDifferences) {
      serverValue !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(serverValue) !== clientValue && (serverDifferences[propName] = serverValue));
    }
    function warnForExtraAttributes(domElement, attributeNames, serverDifferences) {
      attributeNames.forEach(function(attributeName) {
        serverDifferences[getPropNameFromAttributeName(attributeName)] = attributeName === "style" ? getStylesObjectFromElement(domElement) : domElement.getAttribute(attributeName);
      });
    }
    function warnForInvalidEventListener(registrationName, listener) {
      listener === false ? console.error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName) : console.error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    }
    function normalizeHTML(parent, html) {
      parent = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName) : parent.ownerDocument.createElement(parent.tagName);
      parent.innerHTML = html;
      return parent.innerHTML;
    }
    function normalizeMarkupForTextOrAttribute(markup) {
      willCoercionThrow(markup) && (console.error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.", typeName(markup)), testStringCoercion(markup));
      return (typeof markup === "string" ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText) {
      clientText = normalizeMarkupForTextOrAttribute(clientText);
      return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
    }
    function setProp(domElement, tag, key, value, props, prevValue) {
      switch (key) {
        case "children":
          if (typeof value === "string")
            validateTextNesting(value, tag, false), tag === "body" || tag === "textarea" && value === "" || setTextContent(domElement, value);
          else if (typeof value === "number" || typeof value === "bigint")
            validateTextNesting("" + value, tag, false), tag !== "body" && setTextContent(domElement, "" + value);
          break;
        case "className":
          setValueForKnownAttribute(domElement, "class", value);
          break;
        case "tabIndex":
          setValueForKnownAttribute(domElement, "tabindex", value);
          break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
          setValueForKnownAttribute(domElement, key, value);
          break;
        case "style":
          setValueForStyles(domElement, value, prevValue);
          break;
        case "data":
          if (tag !== "object") {
            setValueForKnownAttribute(domElement, "data", value);
            break;
          }
        case "src":
        case "href":
          if (value === "" && (tag !== "a" || key !== "href")) {
            key === "src" ? console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', key, key) : console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', key, key);
            domElement.removeAttribute(key);
            break;
          }
          if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
            domElement.removeAttribute(key);
            break;
          }
          checkAttributeStringCoercion(value, key);
          value = sanitizeURL("" + value);
          domElement.setAttribute(key, value);
          break;
        case "action":
        case "formAction":
          value != null && (tag === "form" ? key === "formAction" ? console.error("You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>.") : typeof value === "function" && (props.encType == null && props.method == null || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.")), props.target == null || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."))) : tag === "input" || tag === "button" ? key === "action" ? console.error("You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>.") : tag !== "input" || props.type === "submit" || props.type === "image" || didWarnFormActionType ? tag !== "button" || props.type == null || props.type === "submit" || didWarnFormActionType ? typeof value === "function" && (props.name == null || didWarnFormActionName || (didWarnFormActionName = true, console.error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.')), props.formEncType == null && props.formMethod == null || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.")), props.formTarget == null || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."))) : (didWarnFormActionType = true, console.error('A button can only specify a formAction along with type="submit" or no type.')) : (didWarnFormActionType = true, console.error('An input can only specify a formAction along with type="submit" or type="image".')) : key === "action" ? console.error("You can only pass the action prop to <form>.") : console.error("You can only pass the formAction prop to <input> or <button>."));
          if (typeof value === "function") {
            domElement.setAttribute(key, "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");
            break;
          } else
            typeof prevValue === "function" && (key === "formAction" ? (tag !== "input" && setProp(domElement, tag, "name", props.name, props, null), setProp(domElement, tag, "formEncType", props.formEncType, props, null), setProp(domElement, tag, "formMethod", props.formMethod, props, null), setProp(domElement, tag, "formTarget", props.formTarget, props, null)) : (setProp(domElement, tag, "encType", props.encType, props, null), setProp(domElement, tag, "method", props.method, props, null), setProp(domElement, tag, "target", props.target, props, null)));
          if (value == null || typeof value === "symbol" || typeof value === "boolean") {
            domElement.removeAttribute(key);
            break;
          }
          checkAttributeStringCoercion(value, key);
          value = sanitizeURL("" + value);
          domElement.setAttribute(key, value);
          break;
        case "onClick":
          value != null && (typeof value !== "function" && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
          break;
        case "onScroll":
          value != null && (typeof value !== "function" && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
          break;
        case "onScrollEnd":
          value != null && (typeof value !== "function" && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
          break;
        case "dangerouslySetInnerHTML":
          if (value != null) {
            if (typeof value !== "object" || !("__html" in value))
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");
            key = value.__html;
            if (key != null) {
              if (props.children != null)
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              domElement.innerHTML = key;
            }
          }
          break;
        case "multiple":
          domElement.multiple = value && typeof value !== "function" && typeof value !== "symbol";
          break;
        case "muted":
          domElement.muted = value && typeof value !== "function" && typeof value !== "symbol";
          break;
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "ref":
          break;
        case "autoFocus":
          break;
        case "xlinkHref":
          if (value == null || typeof value === "function" || typeof value === "boolean" || typeof value === "symbol") {
            domElement.removeAttribute("xlink:href");
            break;
          }
          checkAttributeStringCoercion(value, key);
          key = sanitizeURL("" + value);
          domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
          break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
          value != null && typeof value !== "function" && typeof value !== "symbol" ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, "" + value)) : domElement.removeAttribute(key);
          break;
        case "inert":
          value !== "" || didWarnForNewBooleanPropsWithEmptyValue[key] || (didWarnForNewBooleanPropsWithEmptyValue[key] = true, console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.", key));
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
          value && typeof value !== "function" && typeof value !== "symbol" ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
          break;
        case "capture":
        case "download":
          value === true ? domElement.setAttribute(key, "") : value !== false && value != null && typeof value !== "function" && typeof value !== "symbol" ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
          break;
        case "cols":
        case "rows":
        case "size":
        case "span":
          value != null && typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && 1 <= value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
          break;
        case "rowSpan":
        case "start":
          value == null || typeof value === "function" || typeof value === "symbol" || isNaN(value) ? domElement.removeAttribute(key) : (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value));
          break;
        case "popover":
          listenToNonDelegatedEvent("beforetoggle", domElement);
          listenToNonDelegatedEvent("toggle", domElement);
          setValueForAttribute(domElement, "popover", value);
          break;
        case "xlinkActuate":
          setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:actuate", value);
          break;
        case "xlinkArcrole":
          setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:arcrole", value);
          break;
        case "xlinkRole":
          setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:role", value);
          break;
        case "xlinkShow":
          setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:show", value);
          break;
        case "xlinkTitle":
          setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:title", value);
          break;
        case "xlinkType":
          setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:type", value);
          break;
        case "xmlBase":
          setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:base", value);
          break;
        case "xmlLang":
          setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:lang", value);
          break;
        case "xmlSpace":
          setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:space", value);
          break;
        case "is":
          prevValue != null && console.error('Cannot update the "is" prop after it has been initialized.');
          setValueForAttribute(domElement, "is", value);
          break;
        case "innerText":
        case "textContent":
          break;
        case "popoverTarget":
          didWarnPopoverTargetObject || value == null || typeof value !== "object" || (didWarnPopoverTargetObject = true, console.error("The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.", value));
        default:
          !(2 < key.length) || key[0] !== "o" && key[0] !== "O" || key[1] !== "n" && key[1] !== "N" ? (key = getAttributeAlias(key), setValueForAttribute(domElement, key, value)) : registrationNameDependencies.hasOwnProperty(key) && value != null && typeof value !== "function" && warnForInvalidEventListener(key, value);
      }
    }
    function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
      switch (key) {
        case "style":
          setValueForStyles(domElement, value, prevValue);
          break;
        case "dangerouslySetInnerHTML":
          if (value != null) {
            if (typeof value !== "object" || !("__html" in value))
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");
            key = value.__html;
            if (key != null) {
              if (props.children != null)
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              domElement.innerHTML = key;
            }
          }
          break;
        case "children":
          typeof value === "string" ? setTextContent(domElement, value) : (typeof value === "number" || typeof value === "bigint") && setTextContent(domElement, "" + value);
          break;
        case "onScroll":
          value != null && (typeof value !== "function" && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
          break;
        case "onScrollEnd":
          value != null && (typeof value !== "function" && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
          break;
        case "onClick":
          value != null && (typeof value !== "function" && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
          break;
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "innerHTML":
        case "ref":
          break;
        case "innerText":
        case "textContent":
          break;
        default:
          if (registrationNameDependencies.hasOwnProperty(key))
            value != null && typeof value !== "function" && warnForInvalidEventListener(key, value);
          else
            a: {
              if (key[0] === "o" && key[1] === "n" && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : undefined), prevValue = domElement[internalPropsKey] || null, prevValue = prevValue != null ? prevValue[key] : null, typeof prevValue === "function" && domElement.removeEventListener(tag, prevValue, props), typeof value === "function")) {
                typeof prevValue !== "function" && prevValue !== null && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                domElement.addEventListener(tag, value, props);
                break a;
              }
              key in domElement ? domElement[key] = value : value === true ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
            }
      }
    }
    function setInitialProperties(domElement, tag, props) {
      validatePropertiesInDevelopment(tag, props);
      switch (tag) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "img":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          var hasSrc = false, hasSrcSet = false, propKey;
          for (propKey in props)
            if (props.hasOwnProperty(propKey)) {
              var propValue = props[propKey];
              if (propValue != null)
                switch (propKey) {
                  case "src":
                    hasSrc = true;
                    break;
                  case "srcSet":
                    hasSrcSet = true;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  default:
                    setProp(domElement, tag, propKey, propValue, props, null);
                }
            }
          hasSrcSet && setProp(domElement, tag, "srcSet", props.srcSet, props, null);
          hasSrc && setProp(domElement, tag, "src", props.src, props, null);
          return;
        case "input":
          checkControlledValueProps("input", props);
          listenToNonDelegatedEvent("invalid", domElement);
          var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
          for (hasSrc in props)
            if (props.hasOwnProperty(hasSrc)) {
              var _propValue = props[hasSrc];
              if (_propValue != null)
                switch (hasSrc) {
                  case "name":
                    hasSrcSet = _propValue;
                    break;
                  case "type":
                    propValue = _propValue;
                    break;
                  case "checked":
                    checked = _propValue;
                    break;
                  case "defaultChecked":
                    defaultChecked = _propValue;
                    break;
                  case "value":
                    propKey = _propValue;
                    break;
                  case "defaultValue":
                    defaultValue = _propValue;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (_propValue != null)
                      throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                    break;
                  default:
                    setProp(domElement, tag, hasSrc, _propValue, props, null);
                }
            }
          validateInputProps(domElement, props);
          initInput(domElement, propKey, defaultValue, checked, defaultChecked, propValue, hasSrcSet, false);
          return;
        case "select":
          checkControlledValueProps("select", props);
          listenToNonDelegatedEvent("invalid", domElement);
          hasSrc = propValue = propKey = null;
          for (hasSrcSet in props)
            if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], defaultValue != null))
              switch (hasSrcSet) {
                case "value":
                  propKey = defaultValue;
                  break;
                case "defaultValue":
                  propValue = defaultValue;
                  break;
                case "multiple":
                  hasSrc = defaultValue;
                default:
                  setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
              }
          validateSelectProps(domElement, props);
          tag = propKey;
          props = propValue;
          domElement.multiple = !!hasSrc;
          tag != null ? updateOptions(domElement, !!hasSrc, tag, false) : props != null && updateOptions(domElement, !!hasSrc, props, true);
          return;
        case "textarea":
          checkControlledValueProps("textarea", props);
          listenToNonDelegatedEvent("invalid", domElement);
          propKey = hasSrcSet = hasSrc = null;
          for (propValue in props)
            if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], defaultValue != null))
              switch (propValue) {
                case "value":
                  hasSrc = defaultValue;
                  break;
                case "defaultValue":
                  hasSrcSet = defaultValue;
                  break;
                case "children":
                  propKey = defaultValue;
                  break;
                case "dangerouslySetInnerHTML":
                  if (defaultValue != null)
                    throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                  break;
                default:
                  setProp(domElement, tag, propValue, defaultValue, props, null);
              }
          validateTextareaProps(domElement, props);
          initTextarea(domElement, hasSrc, hasSrcSet, propKey);
          return;
        case "option":
          validateOptionProps(domElement, props);
          for (checked in props)
            if (props.hasOwnProperty(checked) && (hasSrc = props[checked], hasSrc != null))
              switch (checked) {
                case "selected":
                  domElement.selected = hasSrc && typeof hasSrc !== "function" && typeof hasSrc !== "symbol";
                  break;
                default:
                  setProp(domElement, tag, checked, hasSrc, props, null);
              }
          return;
        case "dialog":
          listenToNonDelegatedEvent("beforetoggle", domElement);
          listenToNonDelegatedEvent("toggle", domElement);
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          break;
        case "iframe":
        case "object":
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "video":
        case "audio":
          for (hasSrc = 0;hasSrc < mediaEventTypes.length; hasSrc++)
            listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
          break;
        case "image":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          break;
        case "embed":
        case "source":
        case "link":
          listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
        case "area":
        case "base":
        case "br":
        case "col":
        case "hr":
        case "keygen":
        case "meta":
        case "param":
        case "track":
        case "wbr":
        case "menuitem":
          for (defaultChecked in props)
            if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], hasSrc != null))
              switch (defaultChecked) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  setProp(domElement, tag, defaultChecked, hasSrc, props, null);
              }
          return;
        default:
          if (isCustomElement(tag)) {
            for (_propValue in props)
              props.hasOwnProperty(_propValue) && (hasSrc = props[_propValue], hasSrc !== undefined && setPropOnCustomElement(domElement, tag, _propValue, hasSrc, props, undefined));
            return;
          }
      }
      for (defaultValue in props)
        props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], hasSrc != null && setProp(domElement, tag, defaultValue, hasSrc, props, null));
    }
    function updateProperties(domElement, tag, lastProps, nextProps) {
      validatePropertiesInDevelopment(tag, nextProps);
      switch (tag) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "input":
          var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
          for (propKey in lastProps) {
            var lastProp = lastProps[propKey];
            if (lastProps.hasOwnProperty(propKey) && lastProp != null)
              switch (propKey) {
                case "checked":
                  break;
                case "value":
                  break;
                case "defaultValue":
                  lastDefaultValue = lastProp;
                default:
                  nextProps.hasOwnProperty(propKey) || setProp(domElement, tag, propKey, null, nextProps, lastProp);
              }
          }
          for (var _propKey8 in nextProps) {
            var propKey = nextProps[_propKey8];
            lastProp = lastProps[_propKey8];
            if (nextProps.hasOwnProperty(_propKey8) && (propKey != null || lastProp != null))
              switch (_propKey8) {
                case "type":
                  type = propKey;
                  break;
                case "name":
                  name = propKey;
                  break;
                case "checked":
                  checked = propKey;
                  break;
                case "defaultChecked":
                  defaultChecked = propKey;
                  break;
                case "value":
                  value = propKey;
                  break;
                case "defaultValue":
                  defaultValue = propKey;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  if (propKey != null)
                    throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  break;
                default:
                  propKey !== lastProp && setProp(domElement, tag, _propKey8, propKey, nextProps, lastProp);
              }
          }
          tag = lastProps.type === "checkbox" || lastProps.type === "radio" ? lastProps.checked != null : lastProps.value != null;
          nextProps = nextProps.type === "checkbox" || nextProps.type === "radio" ? nextProps.checked != null : nextProps.value != null;
          tag || !nextProps || didWarnUncontrolledToControlled || (console.error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"), didWarnUncontrolledToControlled = true);
          !tag || nextProps || didWarnControlledToUncontrolled || (console.error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"), didWarnControlledToUncontrolled = true);
          updateInput(domElement, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name);
          return;
        case "select":
          propKey = value = defaultValue = _propKey8 = null;
          for (type in lastProps)
            if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && lastDefaultValue != null)
              switch (type) {
                case "value":
                  break;
                case "multiple":
                  propKey = lastDefaultValue;
                default:
                  nextProps.hasOwnProperty(type) || setProp(domElement, tag, type, null, nextProps, lastDefaultValue);
              }
          for (name in nextProps)
            if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (type != null || lastDefaultValue != null))
              switch (name) {
                case "value":
                  _propKey8 = type;
                  break;
                case "defaultValue":
                  defaultValue = type;
                  break;
                case "multiple":
                  value = type;
                default:
                  type !== lastDefaultValue && setProp(domElement, tag, name, type, nextProps, lastDefaultValue);
              }
          nextProps = defaultValue;
          tag = value;
          lastProps = propKey;
          _propKey8 != null ? updateOptions(domElement, !!tag, _propKey8, false) : !!lastProps !== !!tag && (nextProps != null ? updateOptions(domElement, !!tag, nextProps, true) : updateOptions(domElement, !!tag, tag ? [] : "", false));
          return;
        case "textarea":
          propKey = _propKey8 = null;
          for (defaultValue in lastProps)
            if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && name != null && !nextProps.hasOwnProperty(defaultValue))
              switch (defaultValue) {
                case "value":
                  break;
                case "children":
                  break;
                default:
                  setProp(domElement, tag, defaultValue, null, nextProps, name);
              }
          for (value in nextProps)
            if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (name != null || type != null))
              switch (value) {
                case "value":
                  _propKey8 = name;
                  break;
                case "defaultValue":
                  propKey = name;
                  break;
                case "children":
                  break;
                case "dangerouslySetInnerHTML":
                  if (name != null)
                    throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                  break;
                default:
                  name !== type && setProp(domElement, tag, value, name, nextProps, type);
              }
          updateTextarea(domElement, _propKey8, propKey);
          return;
        case "option":
          for (var _propKey13 in lastProps)
            if (_propKey8 = lastProps[_propKey13], lastProps.hasOwnProperty(_propKey13) && _propKey8 != null && !nextProps.hasOwnProperty(_propKey13))
              switch (_propKey13) {
                case "selected":
                  domElement.selected = false;
                  break;
                default:
                  setProp(domElement, tag, _propKey13, null, nextProps, _propKey8);
              }
          for (lastDefaultValue in nextProps)
            if (_propKey8 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && _propKey8 !== propKey && (_propKey8 != null || propKey != null))
              switch (lastDefaultValue) {
                case "selected":
                  domElement.selected = _propKey8 && typeof _propKey8 !== "function" && typeof _propKey8 !== "symbol";
                  break;
                default:
                  setProp(domElement, tag, lastDefaultValue, _propKey8, nextProps, propKey);
              }
          return;
        case "img":
        case "link":
        case "area":
        case "base":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "keygen":
        case "meta":
        case "param":
        case "source":
        case "track":
        case "wbr":
        case "menuitem":
          for (var _propKey15 in lastProps)
            _propKey8 = lastProps[_propKey15], lastProps.hasOwnProperty(_propKey15) && _propKey8 != null && !nextProps.hasOwnProperty(_propKey15) && setProp(domElement, tag, _propKey15, null, nextProps, _propKey8);
          for (checked in nextProps)
            if (_propKey8 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && _propKey8 !== propKey && (_propKey8 != null || propKey != null))
              switch (checked) {
                case "children":
                case "dangerouslySetInnerHTML":
                  if (_propKey8 != null)
                    throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  break;
                default:
                  setProp(domElement, tag, checked, _propKey8, nextProps, propKey);
              }
          return;
        default:
          if (isCustomElement(tag)) {
            for (var _propKey17 in lastProps)
              _propKey8 = lastProps[_propKey17], lastProps.hasOwnProperty(_propKey17) && _propKey8 !== undefined && !nextProps.hasOwnProperty(_propKey17) && setPropOnCustomElement(domElement, tag, _propKey17, undefined, nextProps, _propKey8);
            for (defaultChecked in nextProps)
              _propKey8 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || _propKey8 === propKey || _propKey8 === undefined && propKey === undefined || setPropOnCustomElement(domElement, tag, defaultChecked, _propKey8, nextProps, propKey);
            return;
          }
      }
      for (var _propKey19 in lastProps)
        _propKey8 = lastProps[_propKey19], lastProps.hasOwnProperty(_propKey19) && _propKey8 != null && !nextProps.hasOwnProperty(_propKey19) && setProp(domElement, tag, _propKey19, null, nextProps, _propKey8);
      for (lastProp in nextProps)
        _propKey8 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || _propKey8 === propKey || _propKey8 == null && propKey == null || setProp(domElement, tag, lastProp, _propKey8, nextProps, propKey);
    }
    function getPropNameFromAttributeName(attrName) {
      switch (attrName) {
        case "class":
          return "className";
        case "for":
          return "htmlFor";
        default:
          return attrName;
      }
    }
    function getStylesObjectFromElement(domElement) {
      var serverValueInObjectForm = {};
      domElement = domElement.style;
      for (var i = 0;i < domElement.length; i++) {
        var styleName = domElement[i];
        serverValueInObjectForm[styleName] = domElement.getPropertyValue(styleName);
      }
      return serverValueInObjectForm;
    }
    function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
      if (value$jscomp$0 != null && typeof value$jscomp$0 !== "object")
        console.error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      else {
        var clientValue;
        var delimiter = clientValue = "", styleName;
        for (styleName in value$jscomp$0)
          if (value$jscomp$0.hasOwnProperty(styleName)) {
            var value = value$jscomp$0[styleName];
            value != null && typeof value !== "boolean" && value !== "" && (styleName.indexOf("--") === 0 ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName + ":" + ("" + value).trim()) : typeof value !== "number" || value === 0 || unitlessNumbers.has(styleName) ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + ("" + value).trim()) : clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + value + "px", delimiter = ";");
          }
        clientValue = clientValue || null;
        value$jscomp$0 = domElement.getAttribute("style");
        value$jscomp$0 !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue && (serverDifferences.style = getStylesObjectFromElement(domElement)));
      }
    }
    function hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (domElement === null)
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            return;
        }
      else if (value != null)
        switch (typeof value) {
          case "function":
          case "symbol":
          case "boolean":
            break;
          default:
            if (checkAttributeStringCoercion(value, propKey), domElement === "" + value)
              return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (domElement === null) {
        switch (typeof value) {
          case "function":
          case "symbol":
            return;
        }
        if (!value)
          return;
      } else
        switch (typeof value) {
          case "function":
          case "symbol":
            break;
          default:
            if (value)
              return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (domElement === null)
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
            return;
        }
      else if (value != null)
        switch (typeof value) {
          case "function":
          case "symbol":
            break;
          default:
            if (checkAttributeStringCoercion(value, attributeName), domElement === "" + value)
              return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (domElement === null)
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            return;
          default:
            if (isNaN(value))
              return;
        }
      else if (value != null)
        switch (typeof value) {
          case "function":
          case "symbol":
          case "boolean":
            break;
          default:
            if (!isNaN(value) && (checkAttributeStringCoercion(value, propKey), domElement === "" + value))
              return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (domElement === null)
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            return;
        }
      else if (value != null)
        switch (typeof value) {
          case "function":
          case "symbol":
          case "boolean":
            break;
          default:
            if (checkAttributeStringCoercion(value, propKey), attributeName = sanitizeURL("" + value), domElement === attributeName)
              return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function diffHydratedProperties(domElement, tag, props, hostContext) {
      for (var serverDifferences = {}, extraAttributes = new Set, attributes = domElement.attributes, i = 0;i < attributes.length; i++)
        switch (attributes[i].name.toLowerCase()) {
          case "value":
            break;
          case "checked":
            break;
          case "selected":
            break;
          default:
            extraAttributes.add(attributes[i].name);
        }
      if (isCustomElement(tag))
        for (var propKey in props) {
          if (props.hasOwnProperty(propKey)) {
            var value = props[propKey];
            if (value != null) {
              if (registrationNameDependencies.hasOwnProperty(propKey))
                typeof value !== "function" && warnForInvalidEventListener(propKey, value);
              else if (props.suppressHydrationWarning !== true)
                switch (propKey) {
                  case "children":
                    typeof value !== "string" && typeof value !== "number" || warnForPropDifference("children", domElement.textContent, value, serverDifferences);
                    continue;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                  case "defaultValue":
                  case "defaultChecked":
                  case "innerHTML":
                  case "ref":
                    continue;
                  case "dangerouslySetInnerHTML":
                    attributes = domElement.innerHTML;
                    value = value ? value.__html : undefined;
                    value != null && (value = normalizeHTML(domElement, value), warnForPropDifference(propKey, attributes, value, serverDifferences));
                    continue;
                  case "style":
                    extraAttributes.delete(propKey);
                    diffHydratedStyles(domElement, value, serverDifferences);
                    continue;
                  case "offsetParent":
                  case "offsetTop":
                  case "offsetLeft":
                  case "offsetWidth":
                  case "offsetHeight":
                  case "isContentEditable":
                  case "outerText":
                  case "outerHTML":
                    extraAttributes.delete(propKey.toLowerCase());
                    console.error("Assignment to read-only property will result in a no-op: `%s`", propKey);
                    continue;
                  case "className":
                    extraAttributes.delete("class");
                    attributes = getValueForAttributeOnCustomComponent(domElement, "class", value);
                    warnForPropDifference("className", attributes, value, serverDifferences);
                    continue;
                  default:
                    hostContext.context === HostContextNamespaceNone && tag !== "svg" && tag !== "math" ? extraAttributes.delete(propKey.toLowerCase()) : extraAttributes.delete(propKey), attributes = getValueForAttributeOnCustomComponent(domElement, propKey, value), warnForPropDifference(propKey, attributes, value, serverDifferences);
                }
            }
          }
        }
      else
        for (value in props)
          if (props.hasOwnProperty(value) && (propKey = props[value], propKey != null)) {
            if (registrationNameDependencies.hasOwnProperty(value))
              typeof propKey !== "function" && warnForInvalidEventListener(value, propKey);
            else if (props.suppressHydrationWarning !== true)
              switch (value) {
                case "children":
                  typeof propKey !== "string" && typeof propKey !== "number" || warnForPropDifference("children", domElement.textContent, propKey, serverDifferences);
                  continue;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                case "value":
                case "checked":
                case "selected":
                case "defaultValue":
                case "defaultChecked":
                case "innerHTML":
                case "ref":
                  continue;
                case "dangerouslySetInnerHTML":
                  attributes = domElement.innerHTML;
                  propKey = propKey ? propKey.__html : undefined;
                  propKey != null && (propKey = normalizeHTML(domElement, propKey), attributes !== propKey && (serverDifferences[value] = { __html: attributes }));
                  continue;
                case "className":
                  hydrateAttribute(domElement, value, "class", propKey, extraAttributes, serverDifferences);
                  continue;
                case "tabIndex":
                  hydrateAttribute(domElement, value, "tabindex", propKey, extraAttributes, serverDifferences);
                  continue;
                case "style":
                  extraAttributes.delete(value);
                  diffHydratedStyles(domElement, propKey, serverDifferences);
                  continue;
                case "multiple":
                  extraAttributes.delete(value);
                  warnForPropDifference(value, domElement.multiple, propKey, serverDifferences);
                  continue;
                case "muted":
                  extraAttributes.delete(value);
                  warnForPropDifference(value, domElement.muted, propKey, serverDifferences);
                  continue;
                case "autoFocus":
                  extraAttributes.delete("autofocus");
                  warnForPropDifference(value, domElement.autofocus, propKey, serverDifferences);
                  continue;
                case "data":
                  if (tag !== "object") {
                    extraAttributes.delete(value);
                    attributes = domElement.getAttribute("data");
                    warnForPropDifference(value, attributes, propKey, serverDifferences);
                    continue;
                  }
                case "src":
                case "href":
                  if (!(propKey !== "" || tag === "a" && value === "href" || tag === "object" && value === "data")) {
                    value === "src" ? console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', value, value) : console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', value, value);
                    continue;
                  }
                  hydrateSanitizedAttribute(domElement, value, value, propKey, extraAttributes, serverDifferences);
                  continue;
                case "action":
                case "formAction":
                  attributes = domElement.getAttribute(value);
                  if (typeof propKey === "function") {
                    extraAttributes.delete(value.toLowerCase());
                    value === "formAction" ? (extraAttributes.delete("name"), extraAttributes.delete("formenctype"), extraAttributes.delete("formmethod"), extraAttributes.delete("formtarget")) : (extraAttributes.delete("enctype"), extraAttributes.delete("method"), extraAttributes.delete("target"));
                    continue;
                  } else if (attributes === EXPECTED_FORM_ACTION_URL) {
                    extraAttributes.delete(value.toLowerCase());
                    warnForPropDifference(value, "function", propKey, serverDifferences);
                    continue;
                  }
                  hydrateSanitizedAttribute(domElement, value, value.toLowerCase(), propKey, extraAttributes, serverDifferences);
                  continue;
                case "xlinkHref":
                  hydrateSanitizedAttribute(domElement, value, "xlink:href", propKey, extraAttributes, serverDifferences);
                  continue;
                case "contentEditable":
                  hydrateBooleanishAttribute(domElement, value, "contenteditable", propKey, extraAttributes, serverDifferences);
                  continue;
                case "spellCheck":
                  hydrateBooleanishAttribute(domElement, value, "spellcheck", propKey, extraAttributes, serverDifferences);
                  continue;
                case "draggable":
                case "autoReverse":
                case "externalResourcesRequired":
                case "focusable":
                case "preserveAlpha":
                  hydrateBooleanishAttribute(domElement, value, value, propKey, extraAttributes, serverDifferences);
                  continue;
                case "allowFullScreen":
                case "async":
                case "autoPlay":
                case "controls":
                case "default":
                case "defer":
                case "disabled":
                case "disablePictureInPicture":
                case "disableRemotePlayback":
                case "formNoValidate":
                case "hidden":
                case "loop":
                case "noModule":
                case "noValidate":
                case "open":
                case "playsInline":
                case "readOnly":
                case "required":
                case "reversed":
                case "scoped":
                case "seamless":
                case "itemScope":
                  hydrateBooleanAttribute(domElement, value, value.toLowerCase(), propKey, extraAttributes, serverDifferences);
                  continue;
                case "capture":
                case "download":
                  a: {
                    i = domElement;
                    var attributeName = attributes = value, serverDifferences$jscomp$0 = serverDifferences;
                    extraAttributes.delete(attributeName);
                    i = i.getAttribute(attributeName);
                    if (i === null)
                      switch (typeof propKey) {
                        case "undefined":
                        case "function":
                        case "symbol":
                          break a;
                        default:
                          if (propKey === false)
                            break a;
                      }
                    else if (propKey != null)
                      switch (typeof propKey) {
                        case "function":
                        case "symbol":
                          break;
                        case "boolean":
                          if (propKey === true && i === "")
                            break a;
                          break;
                        default:
                          if (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey)
                            break a;
                      }
                    warnForPropDifference(attributes, i, propKey, serverDifferences$jscomp$0);
                  }
                  continue;
                case "cols":
                case "rows":
                case "size":
                case "span":
                  a: {
                    i = domElement;
                    attributeName = attributes = value;
                    serverDifferences$jscomp$0 = serverDifferences;
                    extraAttributes.delete(attributeName);
                    i = i.getAttribute(attributeName);
                    if (i === null)
                      switch (typeof propKey) {
                        case "undefined":
                        case "function":
                        case "symbol":
                        case "boolean":
                          break a;
                        default:
                          if (isNaN(propKey) || 1 > propKey)
                            break a;
                      }
                    else if (propKey != null)
                      switch (typeof propKey) {
                        case "function":
                        case "symbol":
                        case "boolean":
                          break;
                        default:
                          if (!(isNaN(propKey) || 1 > propKey) && (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey))
                            break a;
                      }
                    warnForPropDifference(attributes, i, propKey, serverDifferences$jscomp$0);
                  }
                  continue;
                case "rowSpan":
                  hydrateNumericAttribute(domElement, value, "rowspan", propKey, extraAttributes, serverDifferences);
                  continue;
                case "start":
                  hydrateNumericAttribute(domElement, value, value, propKey, extraAttributes, serverDifferences);
                  continue;
                case "xHeight":
                  hydrateAttribute(domElement, value, "x-height", propKey, extraAttributes, serverDifferences);
                  continue;
                case "xlinkActuate":
                  hydrateAttribute(domElement, value, "xlink:actuate", propKey, extraAttributes, serverDifferences);
                  continue;
                case "xlinkArcrole":
                  hydrateAttribute(domElement, value, "xlink:arcrole", propKey, extraAttributes, serverDifferences);
                  continue;
                case "xlinkRole":
                  hydrateAttribute(domElement, value, "xlink:role", propKey, extraAttributes, serverDifferences);
                  continue;
                case "xlinkShow":
                  hydrateAttribute(domElement, value, "xlink:show", propKey, extraAttributes, serverDifferences);
                  continue;
                case "xlinkTitle":
                  hydrateAttribute(domElement, value, "xlink:title", propKey, extraAttributes, serverDifferences);
                  continue;
                case "xlinkType":
                  hydrateAttribute(domElement, value, "xlink:type", propKey, extraAttributes, serverDifferences);
                  continue;
                case "xmlBase":
                  hydrateAttribute(domElement, value, "xml:base", propKey, extraAttributes, serverDifferences);
                  continue;
                case "xmlLang":
                  hydrateAttribute(domElement, value, "xml:lang", propKey, extraAttributes, serverDifferences);
                  continue;
                case "xmlSpace":
                  hydrateAttribute(domElement, value, "xml:space", propKey, extraAttributes, serverDifferences);
                  continue;
                case "inert":
                  propKey !== "" || didWarnForNewBooleanPropsWithEmptyValue[value] || (didWarnForNewBooleanPropsWithEmptyValue[value] = true, console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.", value));
                  hydrateBooleanAttribute(domElement, value, value, propKey, extraAttributes, serverDifferences);
                  continue;
                default:
                  if (!(2 < value.length) || value[0] !== "o" && value[0] !== "O" || value[1] !== "n" && value[1] !== "N") {
                    i = getAttributeAlias(value);
                    attributes = false;
                    hostContext.context === HostContextNamespaceNone && tag !== "svg" && tag !== "math" ? extraAttributes.delete(i.toLowerCase()) : (attributeName = value.toLowerCase(), attributeName = possibleStandardNames.hasOwnProperty(attributeName) ? possibleStandardNames[attributeName] || null : null, attributeName !== null && attributeName !== value && (attributes = true, extraAttributes.delete(attributeName)), extraAttributes.delete(i));
                    a:
                      if (attributeName = domElement, serverDifferences$jscomp$0 = i, i = propKey, isAttributeNameSafe(serverDifferences$jscomp$0))
                        if (attributeName.hasAttribute(serverDifferences$jscomp$0))
                          attributeName = attributeName.getAttribute(serverDifferences$jscomp$0), checkAttributeStringCoercion(i, serverDifferences$jscomp$0), i = attributeName === "" + i ? i : attributeName;
                        else {
                          switch (typeof i) {
                            case "function":
                            case "symbol":
                              break a;
                            case "boolean":
                              if (attributeName = serverDifferences$jscomp$0.toLowerCase().slice(0, 5), attributeName !== "data-" && attributeName !== "aria-")
                                break a;
                          }
                          i = i === undefined ? undefined : null;
                        }
                      else
                        i = undefined;
                    attributes || warnForPropDifference(value, i, propKey, serverDifferences);
                  }
              }
          }
      0 < extraAttributes.size && props.suppressHydrationWarning !== true && warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
      return Object.keys(serverDifferences).length === 0 ? null : serverDifferences;
    }
    function propNamesListJoin(list, combinator) {
      switch (list.length) {
        case 0:
          return "";
        case 1:
          return list[0];
        case 2:
          return list[0] + " " + combinator + " " + list[1];
        default:
          return list.slice(0, -1).join(", ") + ", " + combinator + " " + list[list.length - 1];
      }
    }
    function isLikelyStaticResource(initiatorType) {
      switch (initiatorType) {
        case "css":
        case "script":
        case "font":
        case "img":
        case "image":
        case "input":
        case "link":
          return true;
        default:
          return false;
      }
    }
    function estimateBandwidth() {
      if (typeof performance.getEntriesByType === "function") {
        for (var count = 0, bits = 0, resourceEntries = performance.getEntriesByType("resource"), i = 0;i < resourceEntries.length; i++) {
          var entry = resourceEntries[i], transferSize = entry.transferSize, initiatorType = entry.initiatorType, duration = entry.duration;
          if (transferSize && duration && isLikelyStaticResource(initiatorType)) {
            initiatorType = 0;
            duration = entry.responseEnd;
            for (i += 1;i < resourceEntries.length; i++) {
              var overlapEntry = resourceEntries[i], overlapStartTime = overlapEntry.startTime;
              if (overlapStartTime > duration)
                break;
              var { transferSize: overlapTransferSize, initiatorType: overlapInitiatorType } = overlapEntry;
              overlapTransferSize && isLikelyStaticResource(overlapInitiatorType) && (overlapEntry = overlapEntry.responseEnd, initiatorType += overlapTransferSize * (overlapEntry < duration ? 1 : (duration - overlapStartTime) / (overlapEntry - overlapStartTime)));
            }
            --i;
            bits += 8 * (transferSize + initiatorType) / (entry.duration / 1000);
            count++;
            if (10 < count)
              break;
          }
        }
        if (0 < count)
          return bits / count / 1e6;
      }
      return navigator.connection && (count = navigator.connection.downlink, typeof count === "number") ? count : 5;
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === 9 ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function getOwnHostContext(namespaceURI) {
      switch (namespaceURI) {
        case SVG_NAMESPACE:
          return HostContextNamespaceSvg;
        case MATH_NAMESPACE:
          return HostContextNamespaceMath;
        default:
          return HostContextNamespaceNone;
      }
    }
    function getChildHostContextProd(parentNamespace, type) {
      if (parentNamespace === HostContextNamespaceNone)
        switch (type) {
          case "svg":
            return HostContextNamespaceSvg;
          case "math":
            return HostContextNamespaceMath;
          default:
            return HostContextNamespaceNone;
        }
      return parentNamespace === HostContextNamespaceSvg && type === "foreignObject" ? HostContextNamespaceNone : parentNamespace;
    }
    function shouldSetTextContent(type, props) {
      return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.children === "bigint" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function shouldAttemptEagerTransition() {
      var event = window.event;
      if (event && event.type === "popstate") {
        if (event === currentPopstateTransitionEvent)
          return false;
        currentPopstateTransitionEvent = event;
        return true;
      }
      currentPopstateTransitionEvent = null;
      return false;
    }
    function resolveEventType() {
      var event = window.event;
      return event && event !== schedulerEvent ? event.type : null;
    }
    function resolveEventTimeStamp() {
      var event = window.event;
      return event && event !== schedulerEvent ? event.timeStamp : -1.1;
    }
    function handleErrorInNextTick(error) {
      setTimeout(function() {
        throw error;
      });
    }
    function commitMount(domElement, type, newProps) {
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          newProps.autoFocus && domElement.focus();
          break;
        case "img":
          newProps.src ? domElement.src = newProps.src : newProps.srcSet && (domElement.srcset = newProps.srcSet);
      }
    }
    function commitHydratedInstance() {}
    function commitUpdate(domElement, type, oldProps, newProps) {
      updateProperties(domElement, type, oldProps, newProps);
      domElement[internalPropsKey] = newProps;
    }
    function resetTextContent(domElement) {
      setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }
    function warnForReactChildrenConflict(container) {
      if (!container.__reactWarnedAboutChildrenConflict) {
        var props = container[internalPropsKey] || null;
        if (props !== null) {
          var fiber = getInstanceFromNode(container);
          fiber !== null && (typeof props.children === "string" || typeof props.children === "number" ? (container.__reactWarnedAboutChildrenConflict = true, runWithFiberInDEV(fiber, function() {
            console.error('Cannot use a ref on a React element as a container to `createRoot` or `createPortal` if that element also sets "children" text content using React. It should be a leaf with no children. Otherwise it\'s ambiguous which children should be used.');
          })) : props.dangerouslySetInnerHTML != null && (container.__reactWarnedAboutChildrenConflict = true, runWithFiberInDEV(fiber, function() {
            console.error('Cannot use a ref on a React element as a container to `createRoot` or `createPortal` if that element also sets "dangerouslySetInnerHTML" using React. It should be a leaf with no children. Otherwise it\'s ambiguous which children should be used.');
          })));
        }
      }
    }
    function isSingletonScope(type) {
      return type === "head";
    }
    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
      (container.nodeType === 9 ? container.body : container.nodeName === "HTML" ? container.ownerDocument.body : container).removeChild(child);
    }
    function clearHydrationBoundary(parentInstance, hydrationInstance) {
      var node = hydrationInstance, depth = 0;
      do {
        var nextNode = node.nextSibling;
        parentInstance.removeChild(node);
        if (nextNode && nextNode.nodeType === 8)
          if (node = nextNode.data, node === SUSPENSE_END_DATA || node === ACTIVITY_END_DATA) {
            if (depth === 0) {
              parentInstance.removeChild(nextNode);
              retryIfBlockedOn(hydrationInstance);
              return;
            }
            depth--;
          } else if (node === SUSPENSE_START_DATA || node === SUSPENSE_PENDING_START_DATA || node === SUSPENSE_QUEUED_START_DATA || node === SUSPENSE_FALLBACK_START_DATA || node === ACTIVITY_START_DATA)
            depth++;
          else if (node === PREAMBLE_CONTRIBUTION_HTML)
            releaseSingletonInstance(parentInstance.ownerDocument.documentElement);
          else if (node === PREAMBLE_CONTRIBUTION_HEAD) {
            node = parentInstance.ownerDocument.head;
            releaseSingletonInstance(node);
            for (var node$jscomp$0 = node.firstChild;node$jscomp$0; ) {
              var { nextSibling: nextNode$jscomp$0, nodeName } = node$jscomp$0;
              node$jscomp$0[internalHoistableMarker] || nodeName === "SCRIPT" || nodeName === "STYLE" || nodeName === "LINK" && node$jscomp$0.rel.toLowerCase() === "stylesheet" || node.removeChild(node$jscomp$0);
              node$jscomp$0 = nextNode$jscomp$0;
            }
          } else
            node === PREAMBLE_CONTRIBUTION_BODY && releaseSingletonInstance(parentInstance.ownerDocument.body);
        node = nextNode;
      } while (node);
      retryIfBlockedOn(hydrationInstance);
    }
    function hideOrUnhideDehydratedBoundary(suspenseInstance, isHidden) {
      var node = suspenseInstance;
      suspenseInstance = 0;
      do {
        var nextNode = node.nextSibling;
        node.nodeType === 1 ? isHidden ? (node._stashedDisplay = node.style.display, node.style.display = "none") : (node.style.display = node._stashedDisplay || "", node.getAttribute("style") === "" && node.removeAttribute("style")) : node.nodeType === 3 && (isHidden ? (node._stashedText = node.nodeValue, node.nodeValue = "") : node.nodeValue = node._stashedText || "");
        if (nextNode && nextNode.nodeType === 8)
          if (node = nextNode.data, node === SUSPENSE_END_DATA)
            if (suspenseInstance === 0)
              break;
            else
              suspenseInstance--;
          else
            node !== SUSPENSE_START_DATA && node !== SUSPENSE_PENDING_START_DATA && node !== SUSPENSE_QUEUED_START_DATA && node !== SUSPENSE_FALLBACK_START_DATA || suspenseInstance++;
        node = nextNode;
      } while (node);
    }
    function hideDehydratedBoundary(suspenseInstance) {
      hideOrUnhideDehydratedBoundary(suspenseInstance, true);
    }
    function hideInstance(instance) {
      instance = instance.style;
      typeof instance.setProperty === "function" ? instance.setProperty("display", "none", "important") : instance.display = "none";
    }
    function hideTextInstance(textInstance) {
      textInstance.nodeValue = "";
    }
    function unhideDehydratedBoundary(dehydratedInstance) {
      hideOrUnhideDehydratedBoundary(dehydratedInstance, false);
    }
    function unhideInstance(instance, props) {
      props = props[STYLE];
      props = props !== undefined && props !== null && props.hasOwnProperty("display") ? props.display : null;
      instance.style.display = props == null || typeof props === "boolean" ? "" : ("" + props).trim();
    }
    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }
    function clearContainerSparingly(container) {
      var nextNode = container.firstChild;
      nextNode && nextNode.nodeType === 10 && (nextNode = nextNode.nextSibling);
      for (;nextNode; ) {
        var node = nextNode;
        nextNode = nextNode.nextSibling;
        switch (node.nodeName) {
          case "HTML":
          case "HEAD":
          case "BODY":
            clearContainerSparingly(node);
            detachDeletedInstance(node);
            continue;
          case "SCRIPT":
          case "STYLE":
            continue;
          case "LINK":
            if (node.rel.toLowerCase() === "stylesheet")
              continue;
        }
        container.removeChild(node);
      }
    }
    function canHydrateInstance(instance, type, props, inRootOrSingleton) {
      for (;instance.nodeType === 1; ) {
        var anyProps = props;
        if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
          if (!inRootOrSingleton && (instance.nodeName !== "INPUT" || instance.type !== "hidden"))
            break;
        } else if (!inRootOrSingleton)
          if (type === "input" && instance.type === "hidden") {
            checkAttributeStringCoercion(anyProps.name, "name");
            var name = anyProps.name == null ? null : "" + anyProps.name;
            if (anyProps.type === "hidden" && instance.getAttribute("name") === name)
              return instance;
          } else
            return instance;
        else if (!instance[internalHoistableMarker])
          switch (type) {
            case "meta":
              if (!instance.hasAttribute("itemprop"))
                break;
              return instance;
            case "link":
              name = instance.getAttribute("rel");
              if (name === "stylesheet" && instance.hasAttribute("data-precedence"))
                break;
              else if (name !== anyProps.rel || instance.getAttribute("href") !== (anyProps.href == null || anyProps.href === "" ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (anyProps.title == null ? null : anyProps.title))
                break;
              return instance;
            case "style":
              if (instance.hasAttribute("data-precedence"))
                break;
              return instance;
            case "script":
              name = instance.getAttribute("src");
              if ((name !== (anyProps.src == null ? null : anyProps.src) || instance.getAttribute("type") !== (anyProps.type == null ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
                break;
              return instance;
            default:
              return instance;
          }
        instance = getNextHydratable(instance.nextSibling);
        if (instance === null)
          break;
      }
      return null;
    }
    function canHydrateTextInstance(instance, text, inRootOrSingleton) {
      if (text === "")
        return null;
      for (;instance.nodeType !== 3; ) {
        if ((instance.nodeType !== 1 || instance.nodeName !== "INPUT" || instance.type !== "hidden") && !inRootOrSingleton)
          return null;
        instance = getNextHydratable(instance.nextSibling);
        if (instance === null)
          return null;
      }
      return instance;
    }
    function canHydrateHydrationBoundary(instance, inRootOrSingleton) {
      for (;instance.nodeType !== 8; ) {
        if ((instance.nodeType !== 1 || instance.nodeName !== "INPUT" || instance.type !== "hidden") && !inRootOrSingleton)
          return null;
        instance = getNextHydratable(instance.nextSibling);
        if (instance === null)
          return null;
      }
      return instance;
    }
    function isSuspenseInstancePending(instance) {
      return instance.data === SUSPENSE_PENDING_START_DATA || instance.data === SUSPENSE_QUEUED_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
      return instance.data === SUSPENSE_FALLBACK_START_DATA || instance.data === SUSPENSE_PENDING_START_DATA && instance.ownerDocument.readyState !== DOCUMENT_READY_STATE_LOADING;
    }
    function registerSuspenseInstanceRetry(instance, callback) {
      var ownerDocument = instance.ownerDocument;
      if (instance.data === SUSPENSE_QUEUED_START_DATA)
        instance._reactRetry = callback;
      else if (instance.data !== SUSPENSE_PENDING_START_DATA || ownerDocument.readyState !== DOCUMENT_READY_STATE_LOADING)
        callback();
      else {
        var listener = function() {
          callback();
          ownerDocument.removeEventListener("DOMContentLoaded", listener);
        };
        ownerDocument.addEventListener("DOMContentLoaded", listener);
        instance._reactRetry = listener;
      }
    }
    function getNextHydratable(node) {
      for (;node != null; node = node.nextSibling) {
        var nodeType = node.nodeType;
        if (nodeType === 1 || nodeType === 3)
          break;
        if (nodeType === 8) {
          nodeType = node.data;
          if (nodeType === SUSPENSE_START_DATA || nodeType === SUSPENSE_FALLBACK_START_DATA || nodeType === SUSPENSE_PENDING_START_DATA || nodeType === SUSPENSE_QUEUED_START_DATA || nodeType === ACTIVITY_START_DATA || nodeType === FORM_STATE_IS_MATCHING || nodeType === FORM_STATE_IS_NOT_MATCHING)
            break;
          if (nodeType === SUSPENSE_END_DATA || nodeType === ACTIVITY_END_DATA)
            return null;
        }
      }
      return node;
    }
    function describeHydratableInstanceForDevWarnings(instance) {
      if (instance.nodeType === 1) {
        for (var JSCompiler_temp_const = instance.nodeName.toLowerCase(), serverDifferences = {}, attributes = instance.attributes, i = 0;i < attributes.length; i++) {
          var attr = attributes[i];
          serverDifferences[getPropNameFromAttributeName(attr.name)] = attr.name.toLowerCase() === "style" ? getStylesObjectFromElement(instance) : attr.value;
        }
        return { type: JSCompiler_temp_const, props: serverDifferences };
      }
      return instance.nodeType === 8 ? instance.data === ACTIVITY_START_DATA ? { type: "Activity", props: {} } : { type: "Suspense", props: {} } : instance.nodeValue;
    }
    function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
      return parentProps === null || parentProps[SUPPRESS_HYDRATION_WARNING] !== true ? (textInstance.nodeValue === text ? textInstance = null : (text = normalizeMarkupForTextOrAttribute(text), textInstance = normalizeMarkupForTextOrAttribute(textInstance.nodeValue) === text ? null : textInstance.nodeValue), textInstance) : null;
    }
    function getNextHydratableInstanceAfterHydrationBoundary(hydrationInstance) {
      hydrationInstance = hydrationInstance.nextSibling;
      for (var depth = 0;hydrationInstance; ) {
        if (hydrationInstance.nodeType === 8) {
          var data = hydrationInstance.data;
          if (data === SUSPENSE_END_DATA || data === ACTIVITY_END_DATA) {
            if (depth === 0)
              return getNextHydratable(hydrationInstance.nextSibling);
            depth--;
          } else
            data !== SUSPENSE_START_DATA && data !== SUSPENSE_FALLBACK_START_DATA && data !== SUSPENSE_PENDING_START_DATA && data !== SUSPENSE_QUEUED_START_DATA && data !== ACTIVITY_START_DATA || depth++;
        }
        hydrationInstance = hydrationInstance.nextSibling;
      }
      return null;
    }
    function getParentHydrationBoundary(targetInstance) {
      targetInstance = targetInstance.previousSibling;
      for (var depth = 0;targetInstance; ) {
        if (targetInstance.nodeType === 8) {
          var data = targetInstance.data;
          if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_QUEUED_START_DATA || data === ACTIVITY_START_DATA) {
            if (depth === 0)
              return targetInstance;
            depth--;
          } else
            data !== SUSPENSE_END_DATA && data !== ACTIVITY_END_DATA || depth++;
        }
        targetInstance = targetInstance.previousSibling;
      }
      return null;
    }
    function commitHydratedContainer(container) {
      retryIfBlockedOn(container);
    }
    function commitHydratedActivityInstance(activityInstance) {
      retryIfBlockedOn(activityInstance);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
      retryIfBlockedOn(suspenseInstance);
    }
    function resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {
      validateDOMNestingDev && validateDOMNesting(type, hostContext.ancestorInfo);
      props = getOwnerDocumentFromRootContainer(rootContainerInstance);
      switch (type) {
        case "html":
          type = props.documentElement;
          if (!type)
            throw Error("React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page.");
          return type;
        case "head":
          type = props.head;
          if (!type)
            throw Error("React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page.");
          return type;
        case "body":
          type = props.body;
          if (!type)
            throw Error("React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page.");
          return type;
        default:
          throw Error("resolveSingletonInstance was called with an element type that is not supported. This is a bug in React.");
      }
    }
    function acquireSingletonInstance(type, props, instance, internalInstanceHandle) {
      if (!instance[internalContainerInstanceKey] && getInstanceFromNode(instance)) {
        var tagName = instance.tagName.toLowerCase();
        console.error("You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.", tagName, tagName, tagName);
      }
      switch (type) {
        case "html":
        case "head":
        case "body":
          break;
        default:
          console.error("acquireSingletonInstance was called with an element type that is not supported. This is a bug in React.");
      }
      for (tagName = instance.attributes;tagName.length; )
        instance.removeAttributeNode(tagName[0]);
      setInitialProperties(instance, type, props);
      instance[internalInstanceKey] = internalInstanceHandle;
      instance[internalPropsKey] = props;
    }
    function releaseSingletonInstance(instance) {
      for (var attributes = instance.attributes;attributes.length; )
        instance.removeAttributeNode(attributes[0]);
      detachDeletedInstance(instance);
    }
    function getHoistableRoot(container) {
      return typeof container.getRootNode === "function" ? container.getRootNode() : container.nodeType === 9 ? container : container.ownerDocument;
    }
    function preconnectAs(rel, href, crossOrigin) {
      var ownerDocument = globalDocument;
      if (ownerDocument && typeof href === "string" && href) {
        var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
        limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
        typeof crossOrigin === "string" && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
        preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, ownerDocument.querySelector(limitedEscapedHref) === null && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
      }
    }
    function getResource(type, currentProps, pendingProps, currentResource) {
      var resourceRoot = (resourceRoot = rootInstanceStackCursor.current) ? getHoistableRoot(resourceRoot) : null;
      if (!resourceRoot)
        throw Error('"resourceRoot" was expected to exist. This is a bug in React.');
      switch (type) {
        case "meta":
        case "title":
          return null;
        case "style":
          return typeof pendingProps.precedence === "string" && typeof pendingProps.href === "string" ? (pendingProps = getStyleKey(pendingProps.href), currentProps = getResourcesFromRoot(resourceRoot).hoistableStyles, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
            type: "style",
            instance: null,
            count: 0,
            state: null
          }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
        case "link":
          if (pendingProps.rel === "stylesheet" && typeof pendingProps.href === "string" && typeof pendingProps.precedence === "string") {
            type = getStyleKey(pendingProps.href);
            var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles, _resource = _styles.get(type);
            if (!_resource && (resourceRoot = resourceRoot.ownerDocument || resourceRoot, _resource = {
              type: "stylesheet",
              instance: null,
              count: 0,
              state: { loading: NotLoaded, preload: null }
            }, _styles.set(type, _resource), (_styles = resourceRoot.querySelector(getStylesheetSelectorFromKey(type))) && !_styles._p && (_resource.instance = _styles, _resource.state.loading = Loaded | Inserted), !preloadPropsMap.has(type))) {
              var preloadProps = {
                rel: "preload",
                as: "style",
                href: pendingProps.href,
                crossOrigin: pendingProps.crossOrigin,
                integrity: pendingProps.integrity,
                media: pendingProps.media,
                hrefLang: pendingProps.hrefLang,
                referrerPolicy: pendingProps.referrerPolicy
              };
              preloadPropsMap.set(type, preloadProps);
              _styles || preloadStylesheet(resourceRoot, type, preloadProps, _resource.state);
            }
            if (currentProps && currentResource === null)
              throw pendingProps = `

  - ` + describeLinkForResourceErrorDEV(currentProps) + `
  + ` + describeLinkForResourceErrorDEV(pendingProps), Error("Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps);
            return _resource;
          }
          if (currentProps && currentResource !== null)
            throw pendingProps = `

  - ` + describeLinkForResourceErrorDEV(currentProps) + `
  + ` + describeLinkForResourceErrorDEV(pendingProps), Error("Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps);
          return null;
        case "script":
          return currentProps = pendingProps.async, pendingProps = pendingProps.src, typeof pendingProps === "string" && currentProps && typeof currentProps !== "function" && typeof currentProps !== "symbol" ? (pendingProps = getScriptKey(pendingProps), currentProps = getResourcesFromRoot(resourceRoot).hoistableScripts, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
            type: "script",
            instance: null,
            count: 0,
            state: null
          }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
        default:
          throw Error('getResource encountered a type it did not expect: "' + type + '". this is a bug in React.');
      }
    }
    function describeLinkForResourceErrorDEV(props) {
      var describedProps = 0, description = "<link";
      typeof props.rel === "string" ? (describedProps++, description += ' rel="' + props.rel + '"') : hasOwnProperty.call(props, "rel") && (describedProps++, description += ' rel="' + (props.rel === null ? "null" : "invalid type " + typeof props.rel) + '"');
      typeof props.href === "string" ? (describedProps++, description += ' href="' + props.href + '"') : hasOwnProperty.call(props, "href") && (describedProps++, description += ' href="' + (props.href === null ? "null" : "invalid type " + typeof props.href) + '"');
      typeof props.precedence === "string" ? (describedProps++, description += ' precedence="' + props.precedence + '"') : hasOwnProperty.call(props, "precedence") && (describedProps++, description += " precedence={" + (props.precedence === null ? "null" : "invalid type " + typeof props.precedence) + "}");
      Object.getOwnPropertyNames(props).length > describedProps && (description += " ...");
      return description + " />";
    }
    function getStyleKey(href) {
      return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
    }
    function getStylesheetSelectorFromKey(key) {
      return 'link[rel="stylesheet"][' + key + "]";
    }
    function stylesheetPropsFromRawProps(rawProps) {
      return assign({}, rawProps, {
        "data-precedence": rawProps.precedence,
        precedence: null
      });
    }
    function preloadStylesheet(ownerDocument, key, preloadProps, state) {
      ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]") ? state.loading = Loaded : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
        return state.loading |= Loaded;
      }), key.addEventListener("error", function() {
        return state.loading |= Errored;
      }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
    }
    function getScriptKey(src) {
      return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
    }
    function getScriptSelectorFromKey(key) {
      return "script[async]" + key;
    }
    function acquireResource(hoistableRoot, resource, props) {
      resource.count++;
      if (resource.instance === null)
        switch (resource.type) {
          case "style":
            var instance = hoistableRoot.querySelector('style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]');
            if (instance)
              return resource.instance = instance, markNodeAsHoistable(instance), instance;
            var styleProps = assign({}, props, {
              "data-href": props.href,
              "data-precedence": props.precedence,
              href: null,
              precedence: null
            });
            instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("style");
            markNodeAsHoistable(instance);
            setInitialProperties(instance, "style", styleProps);
            insertStylesheet(instance, props.precedence, hoistableRoot);
            return resource.instance = instance;
          case "stylesheet":
            styleProps = getStyleKey(props.href);
            var _instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(styleProps));
            if (_instance)
              return resource.state.loading |= Inserted, resource.instance = _instance, markNodeAsHoistable(_instance), _instance;
            instance = stylesheetPropsFromRawProps(props);
            (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
            _instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
            markNodeAsHoistable(_instance);
            var linkInstance = _instance;
            linkInstance._p = new Promise(function(resolve, reject) {
              linkInstance.onload = resolve;
              linkInstance.onerror = reject;
            });
            setInitialProperties(_instance, "link", instance);
            resource.state.loading |= Inserted;
            insertStylesheet(_instance, props.precedence, hoistableRoot);
            return resource.instance = _instance;
          case "script":
            _instance = getScriptKey(props.src);
            if (styleProps = hoistableRoot.querySelector(getScriptSelectorFromKey(_instance)))
              return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
            instance = props;
            if (styleProps = preloadPropsMap.get(_instance))
              instance = assign({}, props), adoptPreloadPropsForScript(instance, styleProps);
            hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
            styleProps = hoistableRoot.createElement("script");
            markNodeAsHoistable(styleProps);
            setInitialProperties(styleProps, "link", instance);
            hoistableRoot.head.appendChild(styleProps);
            return resource.instance = styleProps;
          case "void":
            return null;
          default:
            throw Error('acquireResource encountered a resource type it did not expect: "' + resource.type + '". this is a bug in React.');
        }
      else
        resource.type === "stylesheet" && (resource.state.loading & Inserted) === NotLoaded && (instance = resource.instance, resource.state.loading |= Inserted, insertStylesheet(instance, props.precedence, hoistableRoot));
      return resource.instance;
    }
    function insertStylesheet(instance, precedence, root2) {
      for (var nodes = root2.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'), last = nodes.length ? nodes[nodes.length - 1] : null, prior = last, i = 0;i < nodes.length; i++) {
        var node = nodes[i];
        if (node.dataset.precedence === precedence)
          prior = node;
        else if (prior !== last)
          break;
      }
      prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = root2.nodeType === 9 ? root2.head : root2, precedence.insertBefore(instance, precedence.firstChild));
    }
    function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
      stylesheetProps.crossOrigin == null && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
      stylesheetProps.referrerPolicy == null && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
      stylesheetProps.title == null && (stylesheetProps.title = preloadProps.title);
    }
    function adoptPreloadPropsForScript(scriptProps, preloadProps) {
      scriptProps.crossOrigin == null && (scriptProps.crossOrigin = preloadProps.crossOrigin);
      scriptProps.referrerPolicy == null && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
      scriptProps.integrity == null && (scriptProps.integrity = preloadProps.integrity);
    }
    function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
      if (tagCaches === null) {
        var cache = new Map;
        var caches = tagCaches = new Map;
        caches.set(ownerDocument, cache);
      } else
        caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = new Map, caches.set(ownerDocument, cache));
      if (cache.has(type))
        return cache;
      cache.set(type, null);
      ownerDocument = ownerDocument.getElementsByTagName(type);
      for (caches = 0;caches < ownerDocument.length; caches++) {
        var node = ownerDocument[caches];
        if (!(node[internalHoistableMarker] || node[internalInstanceKey] || type === "link" && node.getAttribute("rel") === "stylesheet") && node.namespaceURI !== SVG_NAMESPACE) {
          var nodeKey = node.getAttribute(keyAttribute) || "";
          nodeKey = type + nodeKey;
          var existing = cache.get(nodeKey);
          existing ? existing.push(node) : cache.set(nodeKey, [node]);
        }
      }
      return cache;
    }
    function mountHoistable(hoistableRoot, type, instance) {
      hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
      hoistableRoot.head.insertBefore(instance, type === "title" ? hoistableRoot.querySelector("head > title") : null);
    }
    function isHostHoistableType(type, props, hostContext) {
      var outsideHostContainerContext = !hostContext.ancestorInfo.containerTagInScope;
      if (hostContext.context === HostContextNamespaceSvg || props.itemProp != null)
        return !outsideHostContainerContext || props.itemProp == null || type !== "meta" && type !== "title" && type !== "style" && type !== "link" && type !== "script" || console.error("Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.", type, type), false;
      switch (type) {
        case "meta":
        case "title":
          return true;
        case "style":
          if (typeof props.precedence !== "string" || typeof props.href !== "string" || props.href === "") {
            outsideHostContainerContext && console.error('Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflict with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`.');
            break;
          }
          return true;
        case "link":
          if (typeof props.rel !== "string" || typeof props.href !== "string" || props.href === "" || props.onLoad || props.onError) {
            if (props.rel === "stylesheet" && typeof props.precedence === "string") {
              type = props.href;
              var { onError, disabled } = props;
              hostContext = [];
              props.onLoad && hostContext.push("`onLoad`");
              onError && hostContext.push("`onError`");
              disabled != null && hostContext.push("`disabled`");
              onError = propNamesListJoin(hostContext, "and");
              onError += hostContext.length === 1 ? " prop" : " props";
              disabled = hostContext.length === 1 ? "an " + onError : "the " + onError;
              hostContext.length && console.error('React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', type, disabled, onError);
            }
            outsideHostContainerContext && (typeof props.rel !== "string" || typeof props.href !== "string" || props.href === "" ? console.error("Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag") : (props.onError || props.onLoad) && console.error("Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."));
            break;
          }
          switch (props.rel) {
            case "stylesheet":
              return type = props.precedence, props = props.disabled, typeof type !== "string" && outsideHostContainerContext && console.error('Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'), typeof type === "string" && props == null;
            default:
              return true;
          }
        case "script":
          type = props.async && typeof props.async !== "function" && typeof props.async !== "symbol";
          if (!type || props.onLoad || props.onError || !props.src || typeof props.src !== "string") {
            outsideHostContainerContext && (type ? props.onLoad || props.onError ? console.error("Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>.") : console.error("Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>.") : console.error('Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'));
            break;
          }
          return true;
        case "noscript":
        case "template":
          outsideHostContainerContext && console.error("Cannot render <%s> outside the main document. Try moving it into the root <head> tag.", type);
      }
      return false;
    }
    function preloadResource(resource) {
      return resource.type === "stylesheet" && (resource.state.loading & Settled) === NotLoaded ? false : true;
    }
    function suspendResource(state, hoistableRoot, resource, props) {
      if (resource.type === "stylesheet" && (typeof props.media !== "string" || matchMedia(props.media).matches !== false) && (resource.state.loading & Inserted) === NotLoaded) {
        if (resource.instance === null) {
          var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));
          if (instance) {
            hoistableRoot = instance._p;
            hoistableRoot !== null && typeof hoistableRoot === "object" && typeof hoistableRoot.then === "function" && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
            resource.state.loading |= Inserted;
            resource.instance = instance;
            markNodeAsHoistable(instance);
            return;
          }
          instance = hoistableRoot.ownerDocument || hoistableRoot;
          props = stylesheetPropsFromRawProps(props);
          (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
          instance = instance.createElement("link");
          markNodeAsHoistable(instance);
          var linkInstance = instance;
          linkInstance._p = new Promise(function(resolve, reject) {
            linkInstance.onload = resolve;
            linkInstance.onerror = reject;
          });
          setInitialProperties(instance, "link", props);
          resource.instance = instance;
        }
        state.stylesheets === null && (state.stylesheets = new Map);
        state.stylesheets.set(resource, hoistableRoot);
        (hoistableRoot = resource.state.preload) && (resource.state.loading & Settled) === NotLoaded && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
      }
    }
    function waitForCommitToBeReady(state, timeoutOffset) {
      state.stylesheets && state.count === 0 && insertSuspendedStylesheets(state, state.stylesheets);
      return 0 < state.count || 0 < state.imgCount ? function(commit) {
        var stylesheetTimer = setTimeout(function() {
          state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
          if (state.unsuspend) {
            var unsuspend = state.unsuspend;
            state.unsuspend = null;
            unsuspend();
          }
        }, SUSPENSEY_STYLESHEET_TIMEOUT + timeoutOffset);
        0 < state.imgBytes && estimatedBytesWithinLimit === 0 && (estimatedBytesWithinLimit = 125 * estimateBandwidth() * SUSPENSEY_IMAGE_TIME_ESTIMATE);
        var imgTimer = setTimeout(function() {
          state.waitingForImages = false;
          if (state.count === 0 && (state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets), state.unsuspend)) {
            var unsuspend = state.unsuspend;
            state.unsuspend = null;
            unsuspend();
          }
        }, (state.imgBytes > estimatedBytesWithinLimit ? 50 : SUSPENSEY_IMAGE_TIMEOUT) + timeoutOffset);
        state.unsuspend = commit;
        return function() {
          state.unsuspend = null;
          clearTimeout(stylesheetTimer);
          clearTimeout(imgTimer);
        };
      } : null;
    }
    function onUnsuspend() {
      this.count--;
      if (this.count === 0 && (this.imgCount === 0 || !this.waitingForImages)) {
        if (this.stylesheets)
          insertSuspendedStylesheets(this, this.stylesheets);
        else if (this.unsuspend) {
          var unsuspend = this.unsuspend;
          this.unsuspend = null;
          unsuspend();
        }
      }
    }
    function insertSuspendedStylesheets(state, resources) {
      state.stylesheets = null;
      state.unsuspend !== null && (state.count++, precedencesByRoot = new Map, resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
    }
    function insertStylesheetIntoRoot(root2, resource) {
      if (!(resource.state.loading & Inserted)) {
        var precedences = precedencesByRoot.get(root2);
        if (precedences)
          var last = precedences.get(LAST_PRECEDENCE);
        else {
          precedences = new Map;
          precedencesByRoot.set(root2, precedences);
          for (var nodes = root2.querySelectorAll("link[data-precedence],style[data-precedence]"), i = 0;i < nodes.length; i++) {
            var node = nodes[i];
            if (node.nodeName === "LINK" || node.getAttribute("media") !== "not all")
              precedences.set(node.dataset.precedence, node), last = node;
          }
          last && precedences.set(LAST_PRECEDENCE, last);
        }
        nodes = resource.instance;
        node = nodes.getAttribute("data-precedence");
        i = precedences.get(node) || last;
        i === last && precedences.set(LAST_PRECEDENCE, nodes);
        precedences.set(node, nodes);
        this.count++;
        last = onUnsuspend.bind(this);
        nodes.addEventListener("load", last);
        nodes.addEventListener("error", last);
        i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root2 = root2.nodeType === 9 ? root2.head : root2, root2.insertBefore(nodes, root2.firstChild));
        resource.state.loading |= Inserted;
      }
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, onDefaultTransitionIndicator, formState) {
      this.tag = 1;
      this.containerInfo = containerInfo;
      this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = noTimeout;
      this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
      this.callbackPriority = 0;
      this.expirationTimes = createLaneMap(-1);
      this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = createLaneMap(0);
      this.hiddenUpdates = createLaneMap(null);
      this.identifierPrefix = identifierPrefix;
      this.onUncaughtError = onUncaughtError;
      this.onCaughtError = onCaughtError;
      this.onRecoverableError = onRecoverableError;
      this.pooledCache = null;
      this.pooledCacheLanes = 0;
      this.formState = formState;
      this.incompleteTransitions = new Map;
      this.passiveEffectDuration = this.effectDuration = -0;
      this.memoizedUpdaters = new Set;
      containerInfo = this.pendingUpdatersLaneMap = [];
      for (tag = 0;31 > tag; tag++)
        containerInfo.push(new Set);
      this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, formState, onUncaughtError, onCaughtError, onRecoverableError, onDefaultTransitionIndicator) {
      containerInfo = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, onDefaultTransitionIndicator, formState);
      tag = ConcurrentMode;
      isStrictMode === true && (tag |= StrictLegacyMode | StrictEffectsMode);
      tag |= ProfileMode;
      isStrictMode = createFiber(3, null, null, tag);
      containerInfo.current = isStrictMode;
      isStrictMode.stateNode = containerInfo;
      tag = createCache();
      retainCache(tag);
      containerInfo.pooledCache = tag;
      retainCache(tag);
      isStrictMode.memoizedState = {
        element: initialChildren,
        isDehydrated: hydrate,
        cache: tag
      };
      initializeUpdateQueue(isStrictMode);
      return containerInfo;
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent)
        return emptyContextObject;
      parentComponent = emptyContextObject;
      return parentComponent;
    }
    function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
      if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function")
        try {
          injectedHook.onScheduleFiberRoot(rendererID, container, element);
        } catch (err) {
          hasLoggedError || (hasLoggedError = true, console.error("React instrumentation encountered an error: %o", err));
        }
      parentComponent = getContextForSubtree(parentComponent);
      container.context === null ? container.context = parentComponent : container.pendingContext = parentComponent;
      isRendering && current2 !== null && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = true, console.error(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, getComponentNameFromFiber(current2) || "Unknown"));
      container = createUpdate(lane);
      container.payload = { element };
      callback = callback === undefined ? null : callback;
      callback !== null && (typeof callback !== "function" && console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.", callback), container.callback = callback);
      element = enqueueUpdate(rootFiber, container, lane);
      element !== null && (startUpdateTimerByLane(lane, "root.render()", null), scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
    }
    function markRetryLaneImpl(fiber, retryLane) {
      fiber = fiber.memoizedState;
      if (fiber !== null && fiber.dehydrated !== null) {
        var a = fiber.retryLane;
        fiber.retryLane = a !== 0 && a < retryLane ? a : retryLane;
      }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
    }
    function attemptContinuousHydration(fiber) {
      if (fiber.tag === 13 || fiber.tag === 31) {
        var root2 = enqueueConcurrentRenderForLane(fiber, 67108864);
        root2 !== null && scheduleUpdateOnFiber(root2, fiber, 67108864);
        markRetryLaneIfNotHydrated(fiber, 67108864);
      }
    }
    function attemptHydrationAtCurrentPriority(fiber) {
      if (fiber.tag === 13 || fiber.tag === 31) {
        var lane = requestUpdateLane(fiber);
        lane = getBumpedLaneForHydrationByLane(lane);
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        root2 !== null && scheduleUpdateOnFiber(root2, fiber, lane);
        markRetryLaneIfNotHydrated(fiber, lane);
      }
    }
    function getCurrentFiberForDevTools() {
      return current2;
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var prevTransition = ReactSharedInternals.T;
      ReactSharedInternals.T = null;
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        ReactDOMSharedInternals.p = DiscreteEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
      }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var prevTransition = ReactSharedInternals.T;
      ReactSharedInternals.T = null;
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        ReactDOMSharedInternals.p = ContinuousEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
      }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (_enabled) {
        var blockedOn = findInstanceBlockingEvent(nativeEvent);
        if (blockedOn === null)
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), clearIfContinuousEvent(domEventName, nativeEvent);
        else if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent))
          nativeEvent.stopPropagation();
        else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
          for (;blockedOn !== null; ) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null)
              switch (fiber.tag) {
                case 3:
                  fiber = fiber.stateNode;
                  if (fiber.current.memoizedState.isDehydrated) {
                    var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                    if (lanes !== 0) {
                      var root2 = fiber;
                      root2.pendingLanes |= 2;
                      for (root2.entangledLanes |= 2;lanes; ) {
                        var lane = 1 << 31 - clz32(lanes);
                        root2.entanglements[1] |= lane;
                        lanes &= ~lane;
                      }
                      ensureRootIsScheduled(fiber);
                      (executionContext & (RenderContext | CommitContext)) === NoContext && (workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS, flushSyncWorkAcrossRoots_impl(0, false));
                    }
                  }
                  break;
                case 31:
                case 13:
                  root2 = enqueueConcurrentRenderForLane(fiber, 2), root2 !== null && scheduleUpdateOnFiber(root2, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
              }
            fiber = findInstanceBlockingEvent(nativeEvent);
            fiber === null && dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            if (fiber === blockedOn)
              break;
            blockedOn = fiber;
          }
          blockedOn !== null && nativeEvent.stopPropagation();
        } else
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
    }
    function findInstanceBlockingEvent(nativeEvent) {
      nativeEvent = getEventTarget(nativeEvent);
      return findInstanceBlockingTarget(nativeEvent);
    }
    function findInstanceBlockingTarget(targetNode) {
      return_targetInst = null;
      targetNode = getClosestInstanceFromNode(targetNode);
      if (targetNode !== null) {
        var nearestMounted = getNearestMountedFiber(targetNode);
        if (nearestMounted === null)
          targetNode = null;
        else {
          var tag = nearestMounted.tag;
          if (tag === 13) {
            targetNode = getSuspenseInstanceFromFiber(nearestMounted);
            if (targetNode !== null)
              return targetNode;
            targetNode = null;
          } else if (tag === 31) {
            targetNode = getActivityInstanceFromFiber(nearestMounted);
            if (targetNode !== null)
              return targetNode;
            targetNode = null;
          } else if (tag === 3) {
            if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
              return nearestMounted.tag === 3 ? nearestMounted.stateNode.containerInfo : null;
            targetNode = null;
          } else
            nearestMounted !== targetNode && (targetNode = null);
        }
      }
      return_targetInst = targetNode;
      return null;
    }
    function getEventPriority(domEventName) {
      switch (domEventName) {
        case "beforetoggle":
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "toggle":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return DiscreteEventPriority;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return ContinuousEventPriority;
        case "message":
          switch (getCurrentPriorityLevel()) {
            case ImmediatePriority:
              return DiscreteEventPriority;
            case UserBlockingPriority:
              return ContinuousEventPriority;
            case NormalPriority$1:
            case LowPriority:
              return DefaultEventPriority;
            case IdlePriority:
              return IdleEventPriority;
            default:
              return DefaultEventPriority;
          }
        default:
          return DefaultEventPriority;
      }
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case "focusin":
        case "focusout":
          queuedFocus = null;
          break;
        case "dragenter":
        case "dragleave":
          queuedDrag = null;
          break;
        case "mouseover":
        case "mouseout":
          queuedMouse = null;
          break;
        case "pointerover":
        case "pointerout":
          queuedPointers.delete(nativeEvent.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          queuedPointerCaptures.delete(nativeEvent.pointerId);
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent)
        return existingQueuedEvent = {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        }, blockedOn !== null && (blockedOn = getInstanceFromNode(blockedOn), blockedOn !== null && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      blockedOn = existingQueuedEvent.targetContainers;
      targetContainer !== null && blockedOn.indexOf(targetContainer) === -1 && blockedOn.push(targetContainer);
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      switch (domEventName) {
        case "focusin":
          return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), true;
        case "dragenter":
          return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), true;
        case "mouseover":
          return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), true;
        case "pointerover":
          var pointerId = nativeEvent.pointerId;
          queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent));
          return true;
        case "gotpointercapture":
          return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)), true;
      }
      return false;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted !== null) {
          if (targetInst = nearestMounted.tag, targetInst === 13) {
            if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), targetInst !== null) {
              queuedTarget.blockedOn = targetInst;
              runWithPriority(queuedTarget.priority, function() {
                attemptHydrationAtCurrentPriority(nearestMounted);
              });
              return;
            }
          } else if (targetInst === 31) {
            if (targetInst = getActivityInstanceFromFiber(nearestMounted), targetInst !== null) {
              queuedTarget.blockedOn = targetInst;
              runWithPriority(queuedTarget.priority, function() {
                attemptHydrationAtCurrentPriority(nearestMounted);
              });
              return;
            }
          } else if (targetInst === 3 && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
            queuedTarget.blockedOn = nearestMounted.tag === 3 ? nearestMounted.stateNode.containerInfo : null;
            return;
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (queuedEvent.blockedOn !== null)
        return false;
      for (var targetContainers = queuedEvent.targetContainers;0 < targetContainers.length; ) {
        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
        if (nextBlockedOn === null) {
          nextBlockedOn = queuedEvent.nativeEvent;
          var nativeEventClone = new nextBlockedOn.constructor(nextBlockedOn.type, nextBlockedOn), event = nativeEventClone;
          currentReplayingEvent !== null && console.error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
          currentReplayingEvent = event;
          nextBlockedOn.target.dispatchEvent(nativeEventClone);
          currentReplayingEvent === null && console.error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
          currentReplayingEvent = null;
        } else
          return targetContainers = getInstanceFromNode(nextBlockedOn), targetContainers !== null && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
        targetContainers.shift();
      }
      return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
      attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = false;
      queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
      queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
      queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)));
    }
    function scheduleReplayQueueIfNeeded(formReplayingQueue) {
      lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, function() {
        lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
        for (var i = 0;i < formReplayingQueue.length; i += 3) {
          var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
          if (typeof submitterOrAction !== "function")
            if (findInstanceBlockingTarget(submitterOrAction || form) === null)
              continue;
            else
              break;
          var formInst = getInstanceFromNode(form);
          formInst !== null && (formReplayingQueue.splice(i, 3), i -= 3, form = {
            pending: true,
            data: formData,
            method: form.method,
            action: submitterOrAction
          }, Object.freeze(form), startHostTransition(formInst, form, submitterOrAction, formData));
        }
      }));
    }
    function retryIfBlockedOn(unblocked) {
      function unblock(queuedEvent) {
        return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
      }
      queuedFocus !== null && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      queuedDrag !== null && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      queuedMouse !== null && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      queuedPointers.forEach(unblock);
      queuedPointerCaptures.forEach(unblock);
      for (var i = 0;i < queuedExplicitHydrationTargets.length; i++) {
        var queuedTarget = queuedExplicitHydrationTargets[i];
        queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
      }
      for (;0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], i.blockedOn === null); )
        attemptExplicitHydrationTarget(i), i.blockedOn === null && queuedExplicitHydrationTargets.shift();
      i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
      if (i != null)
        for (queuedTarget = 0;queuedTarget < i.length; queuedTarget += 3) {
          var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
          if (typeof submitterOrAction === "function")
            formProps || scheduleReplayQueueIfNeeded(i);
          else if (formProps) {
            var action = null;
            if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
              if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
                action = formProps.formAction;
              else {
                if (findInstanceBlockingTarget(form) !== null)
                  continue;
              }
            else
              action = formProps.action;
            typeof action === "function" ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
            scheduleReplayQueueIfNeeded(i);
          }
        }
    }
    function defaultOnDefaultTransitionIndicator() {
      function handleNavigate(event) {
        event.canIntercept && event.info === "react-transition" && event.intercept({
          handler: function() {
            return new Promise(function(resolve) {
              return pendingResolve = resolve;
            });
          },
          focusReset: "manual",
          scroll: "manual"
        });
      }
      function handleNavigateComplete() {
        pendingResolve !== null && (pendingResolve(), pendingResolve = null);
        isCancelled || setTimeout(startFakeNavigation, 20);
      }
      function startFakeNavigation() {
        if (!isCancelled && !navigation.transition) {
          var currentEntry = navigation.currentEntry;
          currentEntry && currentEntry.url != null && navigation.navigate(currentEntry.url, {
            state: currentEntry.getState(),
            info: "react-transition",
            history: "replace"
          });
        }
      }
      if (typeof navigation === "object") {
        var isCancelled = false, pendingResolve = null;
        navigation.addEventListener("navigate", handleNavigate);
        navigation.addEventListener("navigatesuccess", handleNavigateComplete);
        navigation.addEventListener("navigateerror", handleNavigateComplete);
        setTimeout(startFakeNavigation, 100);
        return function() {
          isCancelled = true;
          navigation.removeEventListener("navigate", handleNavigate);
          navigation.removeEventListener("navigatesuccess", handleNavigateComplete);
          navigation.removeEventListener("navigateerror", handleNavigateComplete);
          pendingResolve !== null && (pendingResolve(), pendingResolve = null);
        };
      }
    }
    function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function ReactDOMHydrationRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function warnIfReactDOMContainerInDEV(container) {
      container[internalContainerInstanceKey] && (container._reactRootContainer ? console.error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : console.error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var assign = Object.assign, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.tracing_marker");
    var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
    Symbol.for("react.view_transition");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), isArrayImpl = Array.isArray, ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, NotPending = Object.freeze({
      pending: false,
      data: null,
      method: null,
      action: null
    }), valueStack = [];
    var fiberStack = [];
    var index$jscomp$0 = -1, contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null), disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = true;
    var prefix, suffix, reentry = false;
    var componentFrameCache = new (typeof WeakMap === "function" ? WeakMap : Map);
    var current2 = null, isRendering = false, hasOwnProperty = Object.prototype.hasOwnProperty, scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now$1 = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue2 = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, hasLoggedError = false, isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined", clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log2 = Math.log, LN2 = Math.LN2, nextTransitionUpdateLane = 256, nextTransitionDeferredLane = 262144, nextRetryLane = 4194304, DiscreteEventPriority = 2, ContinuousEventPriority = 8, DefaultEventPriority = 32, IdleEventPriority = 268435456, randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, internalRootNodeResourcesKey = "__reactResources$" + randomKey, internalHoistableMarker = "__reactMarker$" + randomKey, allNativeEvents = new Set, registrationNameDependencies = {}, possibleRegistrationNames = {}, hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    }, VALID_ATTRIBUTE_NAME_REGEX = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {}, escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g, didWarnValueDefaultValue$1 = false, didWarnCheckedDefaultChecked = false, didWarnSelectedSetOnOption = false, didWarnInvalidChild = false, didWarnInvalidInnerHTML = false;
    var didWarnValueDefaultValue = false;
    var valuePropNames = ["value", "defaultValue"], didWarnValDefaultVal = false, needsEscaping = /["'&<>\n\t]|^\s|\s$/, specialTags = "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(" "), inScopeTags = "applet caption html table td th marquee object template foreignObject desc title".split(" "), buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = "dd dt li option optgroup p rp rt".split(" "), emptyAncestorInfoDev = {
      current: null,
      formTag: null,
      aTagInScope: null,
      buttonTagInScope: null,
      nobrTagInScope: null,
      pTagInButtonScope: null,
      listItemTagAutoclosing: null,
      dlItemTagAutoclosing: null,
      containerTagInScope: null,
      implicitRootScope: false
    }, didWarn = {}, shorthandToLonghand = {
      animation: "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(" "),
      background: "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(" "),
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(" "),
      borderBlockEnd: [
        "borderBlockEndColor",
        "borderBlockEndStyle",
        "borderBlockEndWidth"
      ],
      borderBlockStart: [
        "borderBlockStartColor",
        "borderBlockStartStyle",
        "borderBlockStartWidth"
      ],
      borderBottom: [
        "borderBottomColor",
        "borderBottomStyle",
        "borderBottomWidth"
      ],
      borderColor: [
        "borderBottomColor",
        "borderLeftColor",
        "borderRightColor",
        "borderTopColor"
      ],
      borderImage: [
        "borderImageOutset",
        "borderImageRepeat",
        "borderImageSlice",
        "borderImageSource",
        "borderImageWidth"
      ],
      borderInlineEnd: [
        "borderInlineEndColor",
        "borderInlineEndStyle",
        "borderInlineEndWidth"
      ],
      borderInlineStart: [
        "borderInlineStartColor",
        "borderInlineStartStyle",
        "borderInlineStartWidth"
      ],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: [
        "borderBottomLeftRadius",
        "borderBottomRightRadius",
        "borderTopLeftRadius",
        "borderTopRightRadius"
      ],
      borderRight: [
        "borderRightColor",
        "borderRightStyle",
        "borderRightWidth"
      ],
      borderStyle: [
        "borderBottomStyle",
        "borderLeftStyle",
        "borderRightStyle",
        "borderTopStyle"
      ],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: [
        "borderBottomWidth",
        "borderLeftWidth",
        "borderRightWidth",
        "borderTopWidth"
      ],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(" "),
      fontVariant: "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(" "),
      gap: ["columnGap", "rowGap"],
      grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(" "),
      gridArea: [
        "gridColumnEnd",
        "gridColumnStart",
        "gridRowEnd",
        "gridRowStart"
      ],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: [
        "gridTemplateAreas",
        "gridTemplateColumns",
        "gridTemplateRows"
      ],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(" "),
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: [
        "textDecorationColor",
        "textDecorationLine",
        "textDecorationStyle"
      ],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: [
        "transitionDelay",
        "transitionDuration",
        "transitionProperty",
        "transitionTimingFunction"
      ],
      wordWrap: ["overflowWrap"]
    }, uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/, badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = false, warnedForInfinityValue = false, unitlessNumbers = new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" ")), MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", aliases = new Map([
      ["acceptCharset", "accept-charset"],
      ["htmlFor", "for"],
      ["httpEquiv", "http-equiv"],
      ["crossOrigin", "crossorigin"],
      ["accentHeight", "accent-height"],
      ["alignmentBaseline", "alignment-baseline"],
      ["arabicForm", "arabic-form"],
      ["baselineShift", "baseline-shift"],
      ["capHeight", "cap-height"],
      ["clipPath", "clip-path"],
      ["clipRule", "clip-rule"],
      ["colorInterpolation", "color-interpolation"],
      ["colorInterpolationFilters", "color-interpolation-filters"],
      ["colorProfile", "color-profile"],
      ["colorRendering", "color-rendering"],
      ["dominantBaseline", "dominant-baseline"],
      ["enableBackground", "enable-background"],
      ["fillOpacity", "fill-opacity"],
      ["fillRule", "fill-rule"],
      ["floodColor", "flood-color"],
      ["floodOpacity", "flood-opacity"],
      ["fontFamily", "font-family"],
      ["fontSize", "font-size"],
      ["fontSizeAdjust", "font-size-adjust"],
      ["fontStretch", "font-stretch"],
      ["fontStyle", "font-style"],
      ["fontVariant", "font-variant"],
      ["fontWeight", "font-weight"],
      ["glyphName", "glyph-name"],
      ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
      ["glyphOrientationVertical", "glyph-orientation-vertical"],
      ["horizAdvX", "horiz-adv-x"],
      ["horizOriginX", "horiz-origin-x"],
      ["imageRendering", "image-rendering"],
      ["letterSpacing", "letter-spacing"],
      ["lightingColor", "lighting-color"],
      ["markerEnd", "marker-end"],
      ["markerMid", "marker-mid"],
      ["markerStart", "marker-start"],
      ["overlinePosition", "overline-position"],
      ["overlineThickness", "overline-thickness"],
      ["paintOrder", "paint-order"],
      ["panose-1", "panose-1"],
      ["pointerEvents", "pointer-events"],
      ["renderingIntent", "rendering-intent"],
      ["shapeRendering", "shape-rendering"],
      ["stopColor", "stop-color"],
      ["stopOpacity", "stop-opacity"],
      ["strikethroughPosition", "strikethrough-position"],
      ["strikethroughThickness", "strikethrough-thickness"],
      ["strokeDasharray", "stroke-dasharray"],
      ["strokeDashoffset", "stroke-dashoffset"],
      ["strokeLinecap", "stroke-linecap"],
      ["strokeLinejoin", "stroke-linejoin"],
      ["strokeMiterlimit", "stroke-miterlimit"],
      ["strokeOpacity", "stroke-opacity"],
      ["strokeWidth", "stroke-width"],
      ["textAnchor", "text-anchor"],
      ["textDecoration", "text-decoration"],
      ["textRendering", "text-rendering"],
      ["transformOrigin", "transform-origin"],
      ["underlinePosition", "underline-position"],
      ["underlineThickness", "underline-thickness"],
      ["unicodeBidi", "unicode-bidi"],
      ["unicodeRange", "unicode-range"],
      ["unitsPerEm", "units-per-em"],
      ["vAlphabetic", "v-alphabetic"],
      ["vHanging", "v-hanging"],
      ["vIdeographic", "v-ideographic"],
      ["vMathematical", "v-mathematical"],
      ["vectorEffect", "vector-effect"],
      ["vertAdvY", "vert-adv-y"],
      ["vertOriginX", "vert-origin-x"],
      ["vertOriginY", "vert-origin-y"],
      ["wordSpacing", "word-spacing"],
      ["writingMode", "writing-mode"],
      ["xmlnsXlink", "xmlns:xlink"],
      ["xHeight", "x-height"]
    ]), possibleStandardNames = {
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      fetchpriority: "fetchPriority",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      inert: "inert",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      popover: "popover",
      popovertarget: "popoverTarget",
      popovertargetaction: "popoverTargetAction",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      transformorigin: "transformOrigin",
      "transform-origin": "transformOrigin",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
    }, ariaProperties = {
      "aria-current": 0,
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      "aria-hidden": 0,
      "aria-invalid": 0,
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0,
      "aria-braillelabel": 0,
      "aria-brailleroledescription": 0,
      "aria-colindextext": 0,
      "aria-rowindextext": 0
    }, warnedProperties$1 = {}, rARIA$1 = RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), rARIACamel$1 = RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), didWarnValueNull = false, warnedProperties = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA = RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), rARIACamel = RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i, currentReplayingEvent = null, restoreTarget = null, restoreQueue = null, isInsideEventHandler = false, canUseDOM = !(typeof window === "undefined" || typeof window.document === "undefined" || typeof window.document.createElement === "undefined"), passiveBrowserEventsSupported = false;
    if (canUseDOM)
      try {
        var options$jscomp$0 = {};
        Object.defineProperty(options$jscomp$0, "passive", {
          get: function() {
            passiveBrowserEventsSupported = true;
          }
        });
        window.addEventListener("test", options$jscomp$0, options$jscomp$0);
        window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
      } catch (e3) {
        passiveBrowserEventsSupported = false;
      }
    var root = null, startText = null, fallbackText = null, EventInterface = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign({}, UIEventInterface, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: getEventModifierState,
      button: 0,
      buttons: 0,
      relatedTarget: function(event) {
        return event.relatedTarget === undefined ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
      },
      movementX: function(event) {
        if ("movementX" in event)
          return event.movementX;
        event !== lastMouseEvent && (lastMouseEvent && event.type === "mousemove" ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
        return lastMovementX;
      },
      movementY: function(event) {
        return "movementY" in event ? event.movementY : lastMovementY;
      }
    }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
      clipboardData: function(event) {
        return "clipboardData" in event ? event.clipboardData : window.clipboardData;
      }
    }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, { data: 0 }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, translateToKey = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    }, modifierKeyToProp = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    }, KeyboardEventInterface = assign({}, UIEventInterface, {
      key: function(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified")
            return key;
        }
        return nativeEvent.type === "keypress" ? (nativeEvent = getEventCharCode(nativeEvent), nativeEvent === 13 ? "Enter" : String.fromCharCode(nativeEvent)) : nativeEvent.type === "keydown" || nativeEvent.type === "keyup" ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
      },
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: getEventModifierState,
      charCode: function(event) {
        return event.type === "keypress" ? getEventCharCode(event) : 0;
      },
      keyCode: function(event) {
        return event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
      },
      which: function(event) {
        return event.type === "keypress" ? getEventCharCode(event) : event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
      }
    }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: getEventModifierState
    }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
      deltaX: function(event) {
        return "deltaX" in event ? event.deltaX : ("wheelDeltaX" in event) ? -event.wheelDeltaX : 0;
      },
      deltaY: function(event) {
        return "deltaY" in event ? event.deltaY : ("wheelDeltaY" in event) ? -event.wheelDeltaY : ("wheelDelta" in event) ? -event.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), ToggleEventInterface = assign({}, EventInterface, {
      newState: 0,
      oldState: 0
    }), SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
    canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE), hasSpaceKeypress = false, isComposing = false, supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      "datetime-local": true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    }, activeElement$1 = null, activeElementInst$1 = null, isInputEventSupported = false;
    canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || 9 < document.documentMode));
    var objectIs = typeof Object.is === "function" ? Object.is : is2, skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = false, vendorPrefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      animationiteration: makePrefixMap("Animation", "AnimationIteration"),
      animationstart: makePrefixMap("Animation", "AnimationStart"),
      transitionrun: makePrefixMap("Transition", "TransitionRun"),
      transitionstart: makePrefixMap("Transition", "TransitionStart"),
      transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    }, prefixedEventNames = {}, style = {};
    canUseDOM && (style = document.createElement("div").style, ("AnimationEvent" in window) || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), ("TransitionEvent" in window) || delete vendorPrefixes.transitionend.transition);
    var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"), TRANSITION_START = getVendorPrefixedEventName("transitionstart"), TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = new Map, simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    simpleEventPluginEvents.push("scrollEnd");
    var lastResetTime = 0;
    if (typeof performance === "object" && typeof performance.now === "function") {
      var localPerformance = performance;
      var getCurrentTime = function() {
        return localPerformance.now();
      };
    } else {
      var localDate = Date;
      getCurrentTime = function() {
        return localDate.now();
      };
    }
    var reportGlobalError = typeof reportError === "function" ? reportError : function(error) {
      if (typeof window === "object" && typeof window.ErrorEvent === "function") {
        var event = new window.ErrorEvent("error", {
          bubbles: true,
          cancelable: true,
          message: typeof error === "object" && error !== null && typeof error.message === "string" ? String(error.message) : String(error),
          error
        });
        if (!window.dispatchEvent(event))
          return;
      } else if (typeof process === "object" && typeof process.emit === "function") {
        process.emit("uncaughtException", error);
        return;
      }
      console.error(error);
    }, OMITTED_PROP_ERROR = "This object has been omitted by React in the console log to avoid sending too much data from the server. Try logging smaller or more specific objects.", EMPTY_ARRAY = 0, COMPLEX_ARRAY = 1, PRIMITIVE_ARRAY = 2, ENTRIES_ARRAY = 3, REMOVED = "– ", ADDED = "+ ", UNCHANGED = "  ", supportsUserTiming = typeof console !== "undefined" && typeof console.timeStamp === "function" && typeof performance !== "undefined" && typeof performance.measure === "function", COMPONENTS_TRACK = "Components ⚛", LANES_TRACK_GROUP = "Scheduler ⚛", currentTrack = "Blocking", alreadyWarnedForDeepEquality = false, reusableComponentDevToolDetails = {
      color: "primary",
      properties: null,
      tooltipText: "",
      track: COMPONENTS_TRACK
    }, reusableComponentOptions = {
      start: -0,
      end: -0,
      detail: { devtools: reusableComponentDevToolDetails }
    }, resuableChangedPropsEntry = ["Changed Props", ""], DEEP_EQUALITY_WARNING = "This component received deeply equal props. It might benefit from useMemo or the React Compiler in its owner.", reusableDeeplyEqualPropsEntry = ["Changed Props", DEEP_EQUALITY_WARNING], OffscreenVisible = 1, OffscreenPassiveEffectsConnected = 2, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0, emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var resolveFamily = null, failedBoundaries = null, NoMode = 0, ConcurrentMode = 1, ProfileMode = 2, StrictLegacyMode = 8, StrictEffectsMode = 16, SuspenseyImagesMode = 32;
    var hasBadMapPolyfill = false;
    try {
      var nonExtensibleObject = Object.preventExtensions({});
      new Map([[nonExtensibleObject, null]]);
      new Set([nonExtensibleObject]);
    } catch (e$3) {
      hasBadMapPolyfill = true;
    }
    var CapturedStacks = new WeakMap, forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "", hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, hydrationErrors = null, rootOrSingletonContext = false, HydrationMismatchException = Error("Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."), valueCursor = createCursor(null);
    var rendererCursorDEV = createCursor(null);
    var rendererSigil = {};
    var currentlyRenderingFiber$1 = null, lastContextDependency = null, isDisallowedContextReadInDEV = false, AbortControllerLocal = typeof AbortController !== "undefined" ? AbortController : function() {
      var listeners = [], signal = this.signal = {
        aborted: false,
        addEventListener: function(type, listener) {
          listeners.push(listener);
        }
      };
      this.abort = function() {
        signal.aborted = true;
        listeners.forEach(function(listener) {
          return listener();
        });
      };
    }, scheduleCallback$2 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
      $$typeof: REACT_CONTEXT_TYPE,
      Consumer: null,
      Provider: null,
      _currentValue: null,
      _currentValue2: null,
      _threadCount: 0,
      _currentRenderer: null,
      _currentRenderer2: null
    }, now = Scheduler.unstable_now, createTask = console.createTask ? console.createTask : function() {
      return null;
    }, SPAWNED_UPDATE = 1, PINGED_UPDATE = 2, renderStartTime = -0, commitStartTime = -0, commitEndTime = -0, commitErrors = null, profilerStartTime = -1.1, profilerEffectDuration = -0, componentEffectDuration = -0, componentEffectStartTime = -1.1, componentEffectEndTime = -1.1, componentEffectErrors = null, componentEffectSpawnedUpdate = false, blockingClampTime = -0, blockingUpdateTime = -1.1, blockingUpdateTask = null, blockingUpdateType = 0, blockingUpdateMethodName = null, blockingUpdateComponentName = null, blockingEventTime = -1.1, blockingEventType = null, blockingEventRepeatTime = -1.1, blockingSuspendedTime = -1.1, transitionClampTime = -0, transitionStartTime = -1.1, transitionUpdateTime = -1.1, transitionUpdateType = 0, transitionUpdateTask = null, transitionUpdateMethodName = null, transitionUpdateComponentName = null, transitionEventTime = -1.1, transitionEventType = null, transitionEventRepeatTime = -1.1, transitionSuspendedTime = -1.1, retryClampTime = -0, idleClampTime = -0, animatingLanes = 0, animatingTask = null, yieldReason = 0, yieldStartTime = -1.1, currentUpdateIsNested = false, nestedUpdateScheduled = false, currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null, prevOnStartTransitionFinish = ReactSharedInternals.S;
    ReactSharedInternals.S = function(transition, returnValue) {
      globalMostRecentTransitionTime = now$1();
      if (typeof returnValue === "object" && returnValue !== null && typeof returnValue.then === "function") {
        if (0 > transitionStartTime && 0 > transitionUpdateTime) {
          transitionStartTime = now();
          var newEventTime = resolveEventTimeStamp(), newEventType = resolveEventType();
          if (newEventTime !== transitionEventRepeatTime || newEventType !== transitionEventType)
            transitionEventRepeatTime = -1.1;
          transitionEventTime = newEventTime;
          transitionEventType = newEventType;
        }
        entangleAsyncAction(transition, returnValue);
      }
      prevOnStartTransitionFinish !== null && prevOnStartTransitionFinish(transition, returnValue);
    };
    var resumedCache = createCursor(null), ReactStrictModeWarnings = {
      recordUnsafeLifecycleWarnings: function() {},
      flushPendingUnsafeLifecycleWarnings: function() {},
      recordLegacyContextWarning: function() {},
      flushLegacyContextWarning: function() {},
      discardPendingWarnings: function() {}
    }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = new Set;
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
      didWarnAboutUnsafeLifecycles.has(fiber.type) || (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function" && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function" && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function" && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
      var componentWillMountUniqueNames = new Set;
      0 < pendingComponentWillMountWarnings.length && (pendingComponentWillMountWarnings.forEach(function(fiber) {
        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingComponentWillMountWarnings = []);
      var UNSAFE_componentWillMountUniqueNames = new Set;
      0 < pendingUNSAFE_ComponentWillMountWarnings.length && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingUNSAFE_ComponentWillMountWarnings = []);
      var componentWillReceivePropsUniqueNames = new Set;
      0 < pendingComponentWillReceivePropsWarnings.length && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingComponentWillReceivePropsWarnings = []);
      var UNSAFE_componentWillReceivePropsUniqueNames = new Set;
      0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
      var componentWillUpdateUniqueNames = new Set;
      0 < pendingComponentWillUpdateWarnings.length && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingComponentWillUpdateWarnings = []);
      var UNSAFE_componentWillUpdateUniqueNames = new Set;
      0 < pendingUNSAFE_ComponentWillUpdateWarnings.length && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingUNSAFE_ComponentWillUpdateWarnings = []);
      if (0 < UNSAFE_componentWillMountUniqueNames.size) {
        var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
        console.error(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, sortedNames);
      }
      0 < UNSAFE_componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames), console.error(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state

Please update the following components: %s`, sortedNames));
      0 < UNSAFE_componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(UNSAFE_componentWillUpdateUniqueNames), console.error(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, sortedNames));
      0 < componentWillMountUniqueNames.size && (sortedNames = setToSortedString(componentWillMountUniqueNames), console.warn(`componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, sortedNames));
      0 < componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(componentWillReceivePropsUniqueNames), console.warn(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, sortedNames));
      0 < componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(componentWillUpdateUniqueNames), console.warn(`componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, sortedNames));
    };
    var pendingLegacyContextWarning = new Map, didWarnAboutLegacyContext = new Set;
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
      var strictRoot = null;
      for (var node = fiber;node !== null; )
        node.mode & StrictLegacyMode && (strictRoot = node), node = node.return;
      strictRoot === null ? console.error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.") : !didWarnAboutLegacyContext.has(fiber.type) && (node = pendingLegacyContextWarning.get(strictRoot), fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") && (node === undefined && (node = [], pendingLegacyContextWarning.set(strictRoot, node)), node.push(fiber));
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
      pendingLegacyContextWarning.forEach(function(fiberArray) {
        if (fiberArray.length !== 0) {
          var firstFiber = fiberArray[0], uniqueNames = new Set;
          fiberArray.forEach(function(fiber) {
            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          runWithFiberInDEV(firstFiber, function() {
            console.error(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://react.dev/link/legacy-context`, sortedNames);
          });
        }
      });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
      pendingComponentWillMountWarnings = [];
      pendingUNSAFE_ComponentWillMountWarnings = [];
      pendingComponentWillReceivePropsWarnings = [];
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      pendingComponentWillUpdateWarnings = [];
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
      pendingLegacyContextWarning = new Map;
    };
    var callComponent = {
      react_stack_bottom_frame: function(Component, props, secondArg) {
        var wasRendering = isRendering;
        isRendering = true;
        try {
          return Component(props, secondArg);
        } finally {
          isRendering = wasRendering;
        }
      }
    }, callComponentInDEV = callComponent.react_stack_bottom_frame.bind(callComponent), callRender = {
      react_stack_bottom_frame: function(instance) {
        var wasRendering = isRendering;
        isRendering = true;
        try {
          return instance.render();
        } finally {
          isRendering = wasRendering;
        }
      }
    }, callRenderInDEV = callRender.react_stack_bottom_frame.bind(callRender), callComponentDidMount = {
      react_stack_bottom_frame: function(finishedWork, instance) {
        try {
          instance.componentDidMount();
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
    }, callComponentDidMountInDEV = callComponentDidMount.react_stack_bottom_frame.bind(callComponentDidMount), callComponentDidUpdate = {
      react_stack_bottom_frame: function(finishedWork, instance, prevProps, prevState, snapshot) {
        try {
          instance.componentDidUpdate(prevProps, prevState, snapshot);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
    }, callComponentDidUpdateInDEV = callComponentDidUpdate.react_stack_bottom_frame.bind(callComponentDidUpdate), callComponentDidCatch = {
      react_stack_bottom_frame: function(instance, errorInfo) {
        var stack = errorInfo.stack;
        instance.componentDidCatch(errorInfo.value, {
          componentStack: stack !== null ? stack : ""
        });
      }
    }, callComponentDidCatchInDEV = callComponentDidCatch.react_stack_bottom_frame.bind(callComponentDidCatch), callComponentWillUnmount = {
      react_stack_bottom_frame: function(current3, nearestMountedAncestor, instance) {
        try {
          instance.componentWillUnmount();
        } catch (error) {
          captureCommitPhaseError(current3, nearestMountedAncestor, error);
        }
      }
    }, callComponentWillUnmountInDEV = callComponentWillUnmount.react_stack_bottom_frame.bind(callComponentWillUnmount), callCreate = {
      react_stack_bottom_frame: function(effect) {
        var create = effect.create;
        effect = effect.inst;
        create = create();
        return effect.destroy = create;
      }
    }, callCreateInDEV = callCreate.react_stack_bottom_frame.bind(callCreate), callDestroy = {
      react_stack_bottom_frame: function(current3, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error) {
          captureCommitPhaseError(current3, nearestMountedAncestor, error);
        }
      }
    }, callDestroyInDEV = callDestroy.react_stack_bottom_frame.bind(callDestroy), callLazyInit = {
      react_stack_bottom_frame: function(lazy) {
        var init = lazy._init;
        return init(lazy._payload);
      }
    }, callLazyInitInDEV = callLazyInit.react_stack_bottom_frame.bind(callLazyInit), SuspenseException = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`."), SuspenseyCommitException = Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."), SuspenseActionException = Error("Suspense Exception: This is not a real error! It's an implementation detail of `useActionState` to interrupt the current render. You must either rethrow it immediately, or move the `useActionState` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary."), noopSuspenseyCommitThenable = {
      then: function() {
        console.error('Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.');
      }
    }, suspendedThenable = null, needsToResetSuspendedThenableDEV = false, thenableState$1 = null, thenableIndexCounter$1 = 0, currentDebugInfo = null, didWarnAboutMaps;
    var didWarnAboutGenerators = didWarnAboutMaps = false;
    var ownerHasKeyUseWarning = {};
    var ownerHasFunctionTypeWarning = {};
    var ownerHasSymbolTypeWarning = {};
    warnForMissingKey = function(returnFiber, workInProgress2, child) {
      if (child !== null && typeof child === "object" && child._store && (!child._store.validated && child.key == null || child._store.validated === 2)) {
        if (typeof child._store !== "object")
          throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = 1;
        var componentName2 = getComponentNameFromFiber(returnFiber), componentKey = componentName2 || "null";
        if (!ownerHasKeyUseWarning[componentKey]) {
          ownerHasKeyUseWarning[componentKey] = true;
          child = child._owner;
          returnFiber = returnFiber._debugOwner;
          var currentComponentErrorInfo = "";
          returnFiber && typeof returnFiber.tag === "number" && (componentKey = getComponentNameFromFiber(returnFiber)) && (currentComponentErrorInfo = `

Check the render method of \`` + componentKey + "`.");
          currentComponentErrorInfo || componentName2 && (currentComponentErrorInfo = `

Check the top-level render call using <` + componentName2 + ">.");
          var childOwnerAppendix = "";
          child != null && returnFiber !== child && (componentName2 = null, typeof child.tag === "number" ? componentName2 = getComponentNameFromFiber(child) : typeof child.name === "string" && (componentName2 = child.name), componentName2 && (childOwnerAppendix = " It was passed a child from " + componentName2 + "."));
          runWithFiberInDEV(workInProgress2, function() {
            console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', currentComponentErrorInfo, childOwnerAppendix);
          });
        }
      }
    };
    var reconcileChildFibers = createChildReconciler(true), mountChildFibers = createChildReconciler(false), UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = false;
    var didWarnUpdateInsideUpdate = false;
    var currentlyProcessingQueue = null;
    var didReadFromEntangledAsyncAction = false, currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0), suspenseHandlerStackCursor = createCursor(null), shellBoundary = null, SubtreeSuspenseContextMask = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(0), NoFlags = 0, HasEffect = 1, Insertion = 2, Layout = 4, Passive = 8, didWarnUncachedGetSnapshot;
    var didWarnAboutMismatchedHooksForComponent = new Set;
    var didWarnAboutUseWrappedInTryCatch = new Set;
    var didWarnAboutAsyncClientComponent = new Set;
    var didWarnAboutUseFormState = new Set;
    var renderLanes = 0, currentlyRenderingFiber = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, shouldDoubleInvokeUserFnsInHooksDEV = false, localIdCounter = 0, thenableIndexCounter = 0, thenableState = null, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = false, ContextOnlyDispatcher = {
      readContext,
      use,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      useHostTransitionStatus: throwInvalidHookError,
      useFormState: throwInvalidHookError,
      useActionState: throwInvalidHookError,
      useOptimistic: throwInvalidHookError,
      useMemoCache: throwInvalidHookError,
      useCacheRefresh: throwInvalidHookError
    };
    ContextOnlyDispatcher.useEffectEvent = throwInvalidHookError;
    var HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    HooksDispatcherOnMountInDEV = {
      readContext: function(context) {
        return readContext(context);
      },
      use,
      useCallback: function(callback, deps) {
        currentHookNameInDev = "useCallback";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountCallback(callback, deps);
      },
      useContext: function(context) {
        currentHookNameInDev = "useContext";
        mountHookTypesDev();
        return readContext(context);
      },
      useEffect: function(create, deps) {
        currentHookNameInDev = "useEffect";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountEffect(create, deps);
      },
      useImperativeHandle: function(ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function(create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        mountEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function(create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountLayoutEffect(create, deps);
      },
      useMemo: function(create, deps) {
        currentHookNameInDev = "useMemo";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function(reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function(initialValue) {
        currentHookNameInDev = "useRef";
        mountHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function(initialState) {
        currentHookNameInDev = "useState";
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountState(initialState);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function() {
        currentHookNameInDev = "useDebugValue";
        mountHookTypesDev();
      },
      useDeferredValue: function(value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        mountHookTypesDev();
        return mountDeferredValue(value, initialValue);
      },
      useTransition: function() {
        currentHookNameInDev = "useTransition";
        mountHookTypesDev();
        return mountTransition();
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        currentHookNameInDev = "useSyncExternalStore";
        mountHookTypesDev();
        return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      },
      useId: function() {
        currentHookNameInDev = "useId";
        mountHookTypesDev();
        return mountId();
      },
      useFormState: function(action, initialState) {
        currentHookNameInDev = "useFormState";
        mountHookTypesDev();
        warnOnUseFormStateInDev();
        return mountActionState(action, initialState);
      },
      useActionState: function(action, initialState) {
        currentHookNameInDev = "useActionState";
        mountHookTypesDev();
        return mountActionState(action, initialState);
      },
      useOptimistic: function(passthrough) {
        currentHookNameInDev = "useOptimistic";
        mountHookTypesDev();
        return mountOptimistic(passthrough);
      },
      useHostTransitionStatus,
      useMemoCache,
      useCacheRefresh: function() {
        currentHookNameInDev = "useCacheRefresh";
        mountHookTypesDev();
        return mountRefresh();
      },
      useEffectEvent: function(callback) {
        currentHookNameInDev = "useEffectEvent";
        mountHookTypesDev();
        return mountEvent(callback);
      }
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
      readContext: function(context) {
        return readContext(context);
      },
      use,
      useCallback: function(callback, deps) {
        currentHookNameInDev = "useCallback";
        updateHookTypesDev();
        return mountCallback(callback, deps);
      },
      useContext: function(context) {
        currentHookNameInDev = "useContext";
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function(create, deps) {
        currentHookNameInDev = "useEffect";
        updateHookTypesDev();
        return mountEffect(create, deps);
      },
      useImperativeHandle: function(ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        updateHookTypesDev();
        return mountImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function(create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        updateHookTypesDev();
        mountEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function(create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        updateHookTypesDev();
        return mountLayoutEffect(create, deps);
      },
      useMemo: function(create, deps) {
        currentHookNameInDev = "useMemo";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function(reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function(initialValue) {
        currentHookNameInDev = "useRef";
        updateHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function(initialState) {
        currentHookNameInDev = "useState";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountState(initialState);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function() {
        currentHookNameInDev = "useDebugValue";
        updateHookTypesDev();
      },
      useDeferredValue: function(value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        updateHookTypesDev();
        return mountDeferredValue(value, initialValue);
      },
      useTransition: function() {
        currentHookNameInDev = "useTransition";
        updateHookTypesDev();
        return mountTransition();
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        currentHookNameInDev = "useSyncExternalStore";
        updateHookTypesDev();
        return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      },
      useId: function() {
        currentHookNameInDev = "useId";
        updateHookTypesDev();
        return mountId();
      },
      useActionState: function(action, initialState) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return mountActionState(action, initialState);
      },
      useFormState: function(action, initialState) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return mountActionState(action, initialState);
      },
      useOptimistic: function(passthrough) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return mountOptimistic(passthrough);
      },
      useHostTransitionStatus,
      useMemoCache,
      useCacheRefresh: function() {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return mountRefresh();
      },
      useEffectEvent: function(callback) {
        currentHookNameInDev = "useEffectEvent";
        updateHookTypesDev();
        return mountEvent(callback);
      }
    };
    HooksDispatcherOnUpdateInDEV = {
      readContext: function(context) {
        return readContext(context);
      },
      use,
      useCallback: function(callback, deps) {
        currentHookNameInDev = "useCallback";
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function(context) {
        currentHookNameInDev = "useContext";
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function(create, deps) {
        currentHookNameInDev = "useEffect";
        updateHookTypesDev();
        updateEffectImpl(2048, Passive, create, deps);
      },
      useImperativeHandle: function(ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function(create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        updateHookTypesDev();
        return updateEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function(create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        updateHookTypesDev();
        return updateEffectImpl(4, Layout, create, deps);
      },
      useMemo: function(create, deps) {
        currentHookNameInDev = "useMemo";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function(reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function() {
        currentHookNameInDev = "useRef";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useState: function() {
        currentHookNameInDev = "useState";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(basicStateReducer);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function() {
        currentHookNameInDev = "useDebugValue";
        updateHookTypesDev();
      },
      useDeferredValue: function(value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        updateHookTypesDev();
        return updateDeferredValue(value, initialValue);
      },
      useTransition: function() {
        currentHookNameInDev = "useTransition";
        updateHookTypesDev();
        return updateTransition();
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        currentHookNameInDev = "useSyncExternalStore";
        updateHookTypesDev();
        return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      },
      useId: function() {
        currentHookNameInDev = "useId";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useFormState: function(action) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return updateActionState(action);
      },
      useActionState: function(action) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return updateActionState(action);
      },
      useOptimistic: function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return updateOptimistic(passthrough, reducer);
      },
      useHostTransitionStatus,
      useMemoCache,
      useCacheRefresh: function() {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useEffectEvent: function(callback) {
        currentHookNameInDev = "useEffectEvent";
        updateHookTypesDev();
        return updateEvent(callback);
      }
    };
    HooksDispatcherOnRerenderInDEV = {
      readContext: function(context) {
        return readContext(context);
      },
      use,
      useCallback: function(callback, deps) {
        currentHookNameInDev = "useCallback";
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function(context) {
        currentHookNameInDev = "useContext";
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function(create, deps) {
        currentHookNameInDev = "useEffect";
        updateHookTypesDev();
        updateEffectImpl(2048, Passive, create, deps);
      },
      useImperativeHandle: function(ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function(create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        updateHookTypesDev();
        return updateEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function(create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        updateHookTypesDev();
        return updateEffectImpl(4, Layout, create, deps);
      },
      useMemo: function(create, deps) {
        currentHookNameInDev = "useMemo";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function(reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
        try {
          return rerenderReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function() {
        currentHookNameInDev = "useRef";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useState: function() {
        currentHookNameInDev = "useState";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
        try {
          return rerenderReducer(basicStateReducer);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function() {
        currentHookNameInDev = "useDebugValue";
        updateHookTypesDev();
      },
      useDeferredValue: function(value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        updateHookTypesDev();
        return rerenderDeferredValue(value, initialValue);
      },
      useTransition: function() {
        currentHookNameInDev = "useTransition";
        updateHookTypesDev();
        return rerenderTransition();
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        currentHookNameInDev = "useSyncExternalStore";
        updateHookTypesDev();
        return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      },
      useId: function() {
        currentHookNameInDev = "useId";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useFormState: function(action) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return rerenderActionState(action);
      },
      useActionState: function(action) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return rerenderActionState(action);
      },
      useOptimistic: function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return rerenderOptimistic(passthrough, reducer);
      },
      useHostTransitionStatus,
      useMemoCache,
      useCacheRefresh: function() {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useEffectEvent: function(callback) {
        currentHookNameInDev = "useEffectEvent";
        updateHookTypesDev();
        return updateEvent(callback);
      }
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
      readContext: function(context) {
        warnInvalidContextAccess();
        return readContext(context);
      },
      use: function(usable) {
        warnInvalidHookAccess();
        return use(usable);
      },
      useCallback: function(callback, deps) {
        currentHookNameInDev = "useCallback";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountCallback(callback, deps);
      },
      useContext: function(context) {
        currentHookNameInDev = "useContext";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return readContext(context);
      },
      useEffect: function(create, deps) {
        currentHookNameInDev = "useEffect";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountEffect(create, deps);
      },
      useImperativeHandle: function(ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function(create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        warnInvalidHookAccess();
        mountHookTypesDev();
        mountEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function(create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountLayoutEffect(create, deps);
      },
      useMemo: function(create, deps) {
        currentHookNameInDev = "useMemo";
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function(reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function(initialValue) {
        currentHookNameInDev = "useRef";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function(initialState) {
        currentHookNameInDev = "useState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountState(initialState);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function() {
        currentHookNameInDev = "useDebugValue";
        warnInvalidHookAccess();
        mountHookTypesDev();
      },
      useDeferredValue: function(value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountDeferredValue(value, initialValue);
      },
      useTransition: function() {
        currentHookNameInDev = "useTransition";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountTransition();
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        currentHookNameInDev = "useSyncExternalStore";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      },
      useId: function() {
        currentHookNameInDev = "useId";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountId();
      },
      useFormState: function(action, initialState) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountActionState(action, initialState);
      },
      useActionState: function(action, initialState) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountActionState(action, initialState);
      },
      useOptimistic: function(passthrough) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountOptimistic(passthrough);
      },
      useMemoCache: function(size2) {
        warnInvalidHookAccess();
        return useMemoCache(size2);
      },
      useHostTransitionStatus,
      useCacheRefresh: function() {
        currentHookNameInDev = "useCacheRefresh";
        mountHookTypesDev();
        return mountRefresh();
      },
      useEffectEvent: function(callback) {
        currentHookNameInDev = "useEffectEvent";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountEvent(callback);
      }
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
      readContext: function(context) {
        warnInvalidContextAccess();
        return readContext(context);
      },
      use: function(usable) {
        warnInvalidHookAccess();
        return use(usable);
      },
      useCallback: function(callback, deps) {
        currentHookNameInDev = "useCallback";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function(context) {
        currentHookNameInDev = "useContext";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function(create, deps) {
        currentHookNameInDev = "useEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        updateEffectImpl(2048, Passive, create, deps);
      },
      useImperativeHandle: function(ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function(create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function(create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffectImpl(4, Layout, create, deps);
      },
      useMemo: function(create, deps) {
        currentHookNameInDev = "useMemo";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function(reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function() {
        currentHookNameInDev = "useRef";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useState: function() {
        currentHookNameInDev = "useState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(basicStateReducer);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function() {
        currentHookNameInDev = "useDebugValue";
        warnInvalidHookAccess();
        updateHookTypesDev();
      },
      useDeferredValue: function(value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateDeferredValue(value, initialValue);
      },
      useTransition: function() {
        currentHookNameInDev = "useTransition";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateTransition();
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        currentHookNameInDev = "useSyncExternalStore";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      },
      useId: function() {
        currentHookNameInDev = "useId";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useFormState: function(action) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateActionState(action);
      },
      useActionState: function(action) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateActionState(action);
      },
      useOptimistic: function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateOptimistic(passthrough, reducer);
      },
      useMemoCache: function(size2) {
        warnInvalidHookAccess();
        return useMemoCache(size2);
      },
      useHostTransitionStatus,
      useCacheRefresh: function() {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useEffectEvent: function(callback) {
        currentHookNameInDev = "useEffectEvent";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEvent(callback);
      }
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
      readContext: function(context) {
        warnInvalidContextAccess();
        return readContext(context);
      },
      use: function(usable) {
        warnInvalidHookAccess();
        return use(usable);
      },
      useCallback: function(callback, deps) {
        currentHookNameInDev = "useCallback";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function(context) {
        currentHookNameInDev = "useContext";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function(create, deps) {
        currentHookNameInDev = "useEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        updateEffectImpl(2048, Passive, create, deps);
      },
      useImperativeHandle: function(ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function(create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function(create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffectImpl(4, Layout, create, deps);
      },
      useMemo: function(create, deps) {
        currentHookNameInDev = "useMemo";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function(reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return rerenderReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function() {
        currentHookNameInDev = "useRef";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useState: function() {
        currentHookNameInDev = "useState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return rerenderReducer(basicStateReducer);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function() {
        currentHookNameInDev = "useDebugValue";
        warnInvalidHookAccess();
        updateHookTypesDev();
      },
      useDeferredValue: function(value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderDeferredValue(value, initialValue);
      },
      useTransition: function() {
        currentHookNameInDev = "useTransition";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderTransition();
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        currentHookNameInDev = "useSyncExternalStore";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      },
      useId: function() {
        currentHookNameInDev = "useId";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useFormState: function(action) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderActionState(action);
      },
      useActionState: function(action) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderActionState(action);
      },
      useOptimistic: function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderOptimistic(passthrough, reducer);
      },
      useMemoCache: function(size2) {
        warnInvalidHookAccess();
        return useMemoCache(size2);
      },
      useHostTransitionStatus,
      useCacheRefresh: function() {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useEffectEvent: function(callback) {
        currentHookNameInDev = "useEffectEvent";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEvent(callback);
      }
    };
    var fakeInternalInstance = {};
    var didWarnAboutStateAssignmentForComponent = new Set;
    var didWarnAboutUninitializedState = new Set;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set;
    var didWarnAboutLegacyLifecyclesAndDerivedState = new Set;
    var didWarnAboutDirectlyAssigningPropsToState = new Set;
    var didWarnAboutUndefinedDerivedState = new Set;
    var didWarnAboutContextTypes$1 = new Set;
    var didWarnAboutChildContextTypes = new Set;
    var didWarnAboutInvalidateContextType = new Set;
    var didWarnOnInvalidCallback = new Set;
    Object.freeze(fakeInternalInstance);
    var classComponentUpdater = {
      enqueueSetState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.payload = payload;
        callback !== undefined && callback !== null && (warnOnInvalidCallback(callback), update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        payload !== null && (startUpdateTimerByLane(lane, "this.setState()", inst), scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
      },
      enqueueReplaceState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = ReplaceState;
        update.payload = payload;
        callback !== undefined && callback !== null && (warnOnInvalidCallback(callback), update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        payload !== null && (startUpdateTimerByLane(lane, "this.replaceState()", inst), scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
      },
      enqueueForceUpdate: function(inst, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = ForceUpdate;
        callback !== undefined && callback !== null && (warnOnInvalidCallback(callback), update.callback = callback);
        callback = enqueueUpdate(inst, update, lane);
        callback !== null && (startUpdateTimerByLane(lane, "this.forceUpdate()", inst), scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
      }
    }, componentName = null, errorBoundaryName = null, SelectiveHydrationException = Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."), didReceiveUpdate = false;
    var didWarnAboutBadClass = {};
    var didWarnAboutContextTypeOnFunctionComponent = {};
    var didWarnAboutContextTypes = {};
    var didWarnAboutGetDerivedStateOnFunctionComponent = {};
    var didWarnAboutReassigningProps = false;
    var didWarnAboutRevealOrder = {};
    var didWarnAboutTailOptions = {};
    var SUSPENDED_MARKER = {
      dehydrated: null,
      treeContext: null,
      retryLane: 0,
      hydrationErrors: null
    }, hasWarnedAboutUsingNoValuePropOnContextProvider = false, didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set;
    var offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, needsFormReset = false, PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null, hostParent = null, hostParentIsContainer = false, currentHoistableRoot = null, inHydratedSubtree = false, suspenseyCommitFlag = 8192, DefaultAsyncDispatcher = {
      getCacheForType: function(resourceType) {
        var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
        cacheForType === undefined && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
        return cacheForType;
      },
      cacheSignal: function() {
        return readContext(CacheContext).controller.signal;
      },
      getOwner: function() {
        return current2;
      }
    };
    if (typeof Symbol === "function" && Symbol.for) {
      var symbolFor = Symbol.for;
      symbolFor("selector.component");
      symbolFor("selector.has_pseudo_class");
      symbolFor("selector.role");
      symbolFor("selector.test_id");
      symbolFor("selector.text");
    }
    var commitHooks = [], PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map, NoContext = 0, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootSuspendedAtTheShell = 6, RootCompleted = 5, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, NotSuspended = 0, SuspendedOnError = 1, SuspendedOnData = 2, SuspendedOnImmediate = 3, SuspendedOnInstance = 4, SuspendedOnInstanceAndReadyToContinue = 5, SuspendedOnDeprecatedThrowPromise = 6, SuspendedAndReadyToContinue = 7, SuspendedOnHydration = 8, SuspendedOnAction = 9, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = false, workInProgressRootIsPrerendering = false, workInProgressRootDidAttachPingListener = false, entangledRenderLanes = 0, workInProgressRootExitStatus = RootInProgress, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = false, globalMostRecentFallbackTime = 0, globalMostRecentTransitionTime = 0, FALLBACK_THROTTLE_MS = 300, workInProgressRootRenderTargetTime = Infinity, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null, workInProgressUpdateTask = null, legacyErrorBoundariesThatAlreadyFailed = null, IMMEDIATE_COMMIT = 0, ABORTED_VIEW_TRANSITION_COMMIT = 1, DELAYED_PASSIVE_COMMIT = 2, ANIMATION_STARTED_COMMIT = 3, NO_PENDING_EFFECTS = 0, PENDING_MUTATION_PHASE = 1, PENDING_LAYOUT_PHASE = 2, PENDING_AFTER_MUTATION_PHASE = 3, PENDING_SPAWNED_WORK = 4, PENDING_PASSIVE_PHASE = 5, pendingEffectsStatus = 0, pendingEffectsRoot = null, pendingFinishedWork = null, pendingEffectsLanes = 0, pendingEffectsRemainingLanes = 0, pendingEffectsRenderEndTime = -0, pendingPassiveTransitions = null, pendingRecoverableErrors = null, pendingSuspendedCommitReason = null, pendingDelayedCommitReason = IMMEDIATE_COMMIT, pendingSuspendedViewTransitionReason = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = false, didScheduleUpdateDuringPassiveEffects = false, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, isRunningInsertionEffect = false, didWarnStateUpdateForNotYetMountedComponent = null, didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent = new Set;
    var fakeActCallbackNode$1 = {}, firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = false, didScheduleMicrotask_act = false, mightHavePendingSyncWork = false, isFlushingWork = false, currentEventTransitionLane = 0, fakeActCallbackNode = {};
    (function() {
      for (var i = 0;i < simpleEventPluginEvents.length; i++) {
        var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase();
        eventName = eventName[0].toUpperCase() + eventName.slice(1);
        registerSimpleEvent(domEventName, "on" + eventName);
      }
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
      registerSimpleEvent("dblclick", "onDoubleClick");
      registerSimpleEvent("focusin", "onFocus");
      registerSimpleEvent("focusout", "onBlur");
      registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
      registerSimpleEvent(TRANSITION_START, "onTransitionStart");
      registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    })();
    registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
    registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
    registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
    registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
    registerTwoPhaseEvent("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    registerTwoPhaseEvent("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    registerTwoPhaseEvent("onBeforeInput", [
      "compositionend",
      "keypress",
      "textInput",
      "paste"
    ]);
    registerTwoPhaseEvent("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    registerTwoPhaseEvent("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    registerTwoPhaseEvent("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), nonDelegatedEvents = new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)), listeningMarker = "_reactListening" + Math.random().toString(36).slice(2), didWarnControlledToUncontrolled = false, didWarnUncontrolledToControlled = false, didWarnFormActionType = false, didWarnFormActionName = false, didWarnFormActionTarget = false, didWarnFormActionMethod = false, didWarnPopoverTargetObject = false;
    var didWarnForNewBooleanPropsWithEmptyValue = {};
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g, xlinkNamespace = "http://www.w3.org/1999/xlink", xmlNamespace = "http://www.w3.org/XML/1998/namespace", EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('React form unexpectedly submitted.')", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", ACTIVITY_START_DATA = "&", ACTIVITY_END_DATA = "/&", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_QUEUED_START_DATA = "$~", SUSPENSE_FALLBACK_START_DATA = "$!", PREAMBLE_CONTRIBUTION_HTML = "html", PREAMBLE_CONTRIBUTION_BODY = "body", PREAMBLE_CONTRIBUTION_HEAD = "head", FORM_STATE_IS_MATCHING = "F!", FORM_STATE_IS_NOT_MATCHING = "F", DOCUMENT_READY_STATE_LOADING = "loading", STYLE = "style", HostContextNamespaceNone = 0, HostContextNamespaceSvg = 1, HostContextNamespaceMath = 2, eventsEnabled = null, selectionInformation = null, warnedUnknownTags = { dialog: true, webview: true }, currentPopstateTransitionEvent = null, schedulerEvent = undefined, scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined, cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined, noTimeout = -1, localPromise = typeof Promise === "function" ? Promise : undefined, scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
      return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout, previousHydratableOnEnteringScopedSingleton = null, NotLoaded = 0, Loaded = 1, Errored = 2, Settled = 3, Inserted = 4, preloadPropsMap = new Map, preconnectsSet = new Set, previousDispatcher = ReactDOMSharedInternals.d;
    ReactDOMSharedInternals.d = {
      f: function() {
        var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
        return previousWasRendering || wasRendering;
      },
      r: function(form) {
        var formInst = getInstanceFromNode(form);
        formInst !== null && formInst.tag === 5 && formInst.type === "form" ? requestFormReset$1(formInst) : previousDispatcher.r(form);
      },
      D: function(href) {
        previousDispatcher.D(href);
        preconnectAs("dns-prefetch", href, null);
      },
      C: function(href, crossOrigin) {
        previousDispatcher.C(href, crossOrigin);
        preconnectAs("preconnect", href, crossOrigin);
      },
      L: function(href, as2, options) {
        previousDispatcher.L(href, as2, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && href && as2) {
          var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as2) + '"]';
          as2 === "image" ? options && options.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSrcSet) + '"]', typeof options.imageSizes === "string" && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSizes) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
          var key = preloadSelector;
          switch (as2) {
            case "style":
              key = getStyleKey(href);
              break;
            case "script":
              key = getScriptKey(href);
          }
          preloadPropsMap.has(key) || (href = assign({
            rel: "preload",
            href: as2 === "image" && options && options.imageSrcSet ? undefined : href,
            as: as2
          }, options), preloadPropsMap.set(key, href), ownerDocument.querySelector(preloadSelector) !== null || as2 === "style" && ownerDocument.querySelector(getStylesheetSelectorFromKey(key)) || as2 === "script" && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as2 = ownerDocument.createElement("link"), setInitialProperties(as2, "link", href), markNodeAsHoistable(as2), ownerDocument.head.appendChild(as2)));
        }
      },
      m: function(href, options) {
        previousDispatcher.m(href, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && href) {
          var as2 = options && typeof options.as === "string" ? options.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as2) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
          switch (as2) {
            case "audioworklet":
            case "paintworklet":
            case "serviceworker":
            case "sharedworker":
            case "worker":
            case "script":
              key = getScriptKey(href);
          }
          if (!preloadPropsMap.has(key) && (href = assign({ rel: "modulepreload", href }, options), preloadPropsMap.set(key, href), ownerDocument.querySelector(preloadSelector) === null)) {
            switch (as2) {
              case "audioworklet":
              case "paintworklet":
              case "serviceworker":
              case "sharedworker":
              case "worker":
              case "script":
                if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                  return;
            }
            as2 = ownerDocument.createElement("link");
            setInitialProperties(as2, "link", href);
            markNodeAsHoistable(as2);
            ownerDocument.head.appendChild(as2);
          }
        }
      },
      X: function(src, options) {
        previousDispatcher.X(src, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && src) {
          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
          resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign({ src, async: true }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
            type: "script",
            instance: resource,
            count: 1,
            state: null
          }, scripts.set(key, resource));
        }
      },
      S: function(href, precedence, options) {
        previousDispatcher.S(href, precedence, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && href) {
          var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
          precedence = precedence || "default";
          var resource = styles.get(key);
          if (!resource) {
            var state = { loading: NotLoaded, preload: null };
            if (resource = ownerDocument.querySelector(getStylesheetSelectorFromKey(key)))
              state.loading = Loaded | Inserted;
            else {
              href = assign({
                rel: "stylesheet",
                href,
                "data-precedence": precedence
              }, options);
              (options = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options);
              var link = resource = ownerDocument.createElement("link");
              markNodeAsHoistable(link);
              setInitialProperties(link, "link", href);
              link._p = new Promise(function(resolve, reject) {
                link.onload = resolve;
                link.onerror = reject;
              });
              link.addEventListener("load", function() {
                state.loading |= Loaded;
              });
              link.addEventListener("error", function() {
                state.loading |= Errored;
              });
              state.loading |= Inserted;
              insertStylesheet(resource, precedence, ownerDocument);
            }
            resource = {
              type: "stylesheet",
              instance: resource,
              count: 1,
              state
            };
            styles.set(key, resource);
          }
        }
      },
      M: function(src, options) {
        previousDispatcher.M(src, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && src) {
          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
          resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign({ src, async: true, type: "module" }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
            type: "script",
            instance: resource,
            count: 1,
            state: null
          }, scripts.set(key, resource));
        }
      }
    };
    var globalDocument = typeof document === "undefined" ? null : document, tagCaches = null, SUSPENSEY_STYLESHEET_TIMEOUT = 60000, SUSPENSEY_IMAGE_TIMEOUT = 800, SUSPENSEY_IMAGE_TIME_ESTIMATE = 500, estimatedBytesWithinLimit = 0, LAST_PRECEDENCE = null, precedencesByRoot = null, NotPendingTransition = NotPending, HostTransitionContext = {
      $$typeof: REACT_CONTEXT_TYPE,
      Provider: null,
      Consumer: null,
      _currentValue: NotPendingTransition,
      _currentValue2: NotPendingTransition,
      _threadCount: 0
    }, badgeFormat = "%c%s%c", badgeStyle = "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px", resetStyle = "", pad = " ", bind = Function.prototype.bind;
    var didWarnAboutNestedUpdates = false;
    var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, scheduleRetry = null, setErrorHandler = null, setSuspenseHandler = null;
    overrideHookState = function(fiber, id, path, value) {
      id = findHook(fiber, id);
      id !== null && (path = copyWithSetImpl(id.memoizedState, path, 0, value), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), path !== null && scheduleUpdateOnFiber(path, fiber, 2));
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
      id = findHook(fiber, id);
      id !== null && (path = copyWithDeleteImpl(id.memoizedState, path, 0), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), path !== null && scheduleUpdateOnFiber(path, fiber, 2));
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
      id = findHook(fiber, id);
      id !== null && (oldPath = copyWithRename(id.memoizedState, oldPath, newPath), id.memoizedState = oldPath, id.baseState = oldPath, fiber.memoizedProps = assign({}, fiber.memoizedProps), oldPath = enqueueConcurrentRenderForLane(fiber, 2), oldPath !== null && scheduleUpdateOnFiber(oldPath, fiber, 2));
    };
    overrideProps = function(fiber, path, value) {
      fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
      path = enqueueConcurrentRenderForLane(fiber, 2);
      path !== null && scheduleUpdateOnFiber(path, fiber, 2);
    };
    overridePropsDeletePath = function(fiber, path) {
      fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
      path = enqueueConcurrentRenderForLane(fiber, 2);
      path !== null && scheduleUpdateOnFiber(path, fiber, 2);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
      fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
      oldPath = enqueueConcurrentRenderForLane(fiber, 2);
      oldPath !== null && scheduleUpdateOnFiber(oldPath, fiber, 2);
    };
    scheduleUpdate = function(fiber) {
      var root2 = enqueueConcurrentRenderForLane(fiber, 2);
      root2 !== null && scheduleUpdateOnFiber(root2, fiber, 2);
    };
    scheduleRetry = function(fiber) {
      var lane = claimNextRetryLane(), root2 = enqueueConcurrentRenderForLane(fiber, lane);
      root2 !== null && scheduleUpdateOnFiber(root2, fiber, lane);
    };
    setErrorHandler = function(newShouldErrorImpl) {
      shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
      shouldSuspendImpl = newShouldSuspendImpl;
    };
    var _enabled = true, return_targetInst = null, hasScheduledReplayAttempt = false, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = new Map, queuedPointerCaptures = new Map, queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" "), lastScheduledReplayQueue = null;
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
      var root2 = this._internalRoot;
      if (root2 === null)
        throw Error("Cannot update an unmounted root.");
      var args = arguments;
      typeof args[1] === "function" ? console.error("does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : isValidContainer(args[1]) ? console.error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : typeof args[1] !== "undefined" && console.error("You passed a second argument to root.render(...) but it only accepts one argument.");
      args = children;
      var current3 = root2.current, lane = requestUpdateLane(current3);
      updateContainerImpl(current3, lane, args, root2, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
      var args = arguments;
      typeof args[0] === "function" && console.error("does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
      args = this._internalRoot;
      if (args !== null) {
        this._internalRoot = null;
        var container = args.containerInfo;
        (executionContext & (RenderContext | CommitContext)) !== NoContext && console.error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
        updateContainerImpl(args.current, 2, null, args, null, null);
        flushSyncWork$1();
        container[internalContainerInstanceKey] = null;
      }
    };
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
      if (target) {
        var updatePriority = resolveUpdatePriority();
        target = { blockedOn: null, target, priority: updatePriority };
        for (var i = 0;i < queuedExplicitHydrationTargets.length && updatePriority !== 0 && updatePriority < queuedExplicitHydrationTargets[i].priority; i++)
          ;
        queuedExplicitHydrationTargets.splice(i, 0, target);
        i === 0 && attemptExplicitHydrationTarget(target);
      }
    };
    (function() {
      var isomorphicReactPackageVersion = React.version;
      if (isomorphicReactPackageVersion !== "19.2.0")
        throw Error(`Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:
  - react:      ` + (isomorphicReactPackageVersion + `
  - react-dom:  19.2.0
Learn more: https://react.dev/warnings/version-mismatch`));
    })();
    typeof Map === "function" && Map.prototype != null && typeof Map.prototype.forEach === "function" && typeof Set === "function" && Set.prototype != null && typeof Set.prototype.clear === "function" && typeof Set.prototype.forEach === "function" || console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills");
    ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
      var fiber = componentOrElement._reactInternals;
      if (fiber === undefined) {
        if (typeof componentOrElement.render === "function")
          throw Error("Unable to find node on an unmounted component.");
        componentOrElement = Object.keys(componentOrElement).join(",");
        throw Error("Argument appears to not be a ReactComponent. Keys: " + componentOrElement);
      }
      componentOrElement = findCurrentFiberUsingSlowPath(fiber);
      componentOrElement = componentOrElement !== null ? findCurrentHostFiberImpl(componentOrElement) : null;
      componentOrElement = componentOrElement === null ? null : componentOrElement.stateNode;
      return componentOrElement;
    };
    if (!function() {
      var internals = {
        bundleType: 1,
        version: "19.2.0",
        rendererPackageName: "react-dom",
        currentDispatcherRef: ReactSharedInternals,
        reconcilerVersion: "19.2.0"
      };
      internals.overrideHookState = overrideHookState;
      internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
      internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
      internals.overrideProps = overrideProps;
      internals.overridePropsDeletePath = overridePropsDeletePath;
      internals.overridePropsRenamePath = overridePropsRenamePath;
      internals.scheduleUpdate = scheduleUpdate;
      internals.scheduleRetry = scheduleRetry;
      internals.setErrorHandler = setErrorHandler;
      internals.setSuspenseHandler = setSuspenseHandler;
      internals.scheduleRefresh = scheduleRefresh;
      internals.scheduleRoot = scheduleRoot;
      internals.setRefreshHandler = setRefreshHandler;
      internals.getCurrentFiber = getCurrentFiberForDevTools;
      return injectInternals(internals);
    }() && canUseDOM && window.top === window.self && (-1 < navigator.userAgent.indexOf("Chrome") && navigator.userAgent.indexOf("Edge") === -1 || -1 < navigator.userAgent.indexOf("Firefox"))) {
      var protocol = window.location.protocol;
      /^(https?|file):$/.test(protocol) && console.info("%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" + (protocol === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq` : ""), "font-weight:bold");
    }
    exports.createRoot = function(container, options) {
      if (!isValidContainer(container))
        throw Error("Target container is not a DOM element.");
      warnIfReactDOMContainerInDEV(container);
      var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError;
      options !== null && options !== undefined && (options.hydrate ? console.warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.") : typeof options === "object" && options !== null && options.$$typeof === REACT_ELEMENT_TYPE && console.error(`You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:

  let root = createRoot(domContainer);
  root.render(<App />);`), options.unstable_strictMode === true && (isStrictMode = true), options.identifierPrefix !== undefined && (identifierPrefix = options.identifierPrefix), options.onUncaughtError !== undefined && (onUncaughtError = options.onUncaughtError), options.onCaughtError !== undefined && (onCaughtError = options.onCaughtError), options.onRecoverableError !== undefined && (onRecoverableError = options.onRecoverableError));
      options = createFiberRoot(container, 1, false, null, null, isStrictMode, identifierPrefix, null, onUncaughtError, onCaughtError, onRecoverableError, defaultOnDefaultTransitionIndicator);
      container[internalContainerInstanceKey] = options.current;
      listenToAllSupportedEvents(container);
      return new ReactDOMRoot(options);
    };
    exports.hydrateRoot = function(container, initialChildren, options) {
      if (!isValidContainer(container))
        throw Error("Target container is not a DOM element.");
      warnIfReactDOMContainerInDEV(container);
      initialChildren === undefined && console.error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
      var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, formState = null;
      options !== null && options !== undefined && (options.unstable_strictMode === true && (isStrictMode = true), options.identifierPrefix !== undefined && (identifierPrefix = options.identifierPrefix), options.onUncaughtError !== undefined && (onUncaughtError = options.onUncaughtError), options.onCaughtError !== undefined && (onCaughtError = options.onCaughtError), options.onRecoverableError !== undefined && (onRecoverableError = options.onRecoverableError), options.formState !== undefined && (formState = options.formState));
      initialChildren = createFiberRoot(container, 1, true, initialChildren, options != null ? options : null, isStrictMode, identifierPrefix, formState, onUncaughtError, onCaughtError, onRecoverableError, defaultOnDefaultTransitionIndicator);
      initialChildren.context = getContextForSubtree(null);
      options = initialChildren.current;
      isStrictMode = requestUpdateLane(options);
      isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
      identifierPrefix = createUpdate(isStrictMode);
      identifierPrefix.callback = null;
      enqueueUpdate(options, identifierPrefix, isStrictMode);
      startUpdateTimerByLane(isStrictMode, "hydrateRoot()", null);
      options = isStrictMode;
      initialChildren.current.lanes = options;
      markRootUpdated$1(initialChildren, options);
      ensureRootIsScheduled(initialChildren);
      container[internalContainerInstanceKey] = initialChildren.current;
      listenToAllSupportedEvents(container);
      return new ReactDOMHydrationRoot(initialChildren);
    };
    exports.version = "19.2.0";
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();
});

// node_modules/react-dom/client.js
var require_client = __commonJS((exports, module) => {
  var react_dom_client_development = __toESM(require_react_dom_client_development());
  if (false) {} else {
    module.exports = react_dom_client_development;
  }
});

// node_modules/react/cjs/react-jsx-dev-runtime.development.js
var require_react_jsx_dev_runtime_development = __commonJS((exports) => {
  var React = __toESM(require_react());
  (function() {
    function getComponentNameFromType(type) {
      if (type == null)
        return null;
      if (typeof type === "function")
        return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
      if (typeof type === "string")
        return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
        case REACT_ACTIVITY_TYPE:
          return "Activity";
      }
      if (typeof type === "object")
        switch (typeof type.tag === "number" && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof) {
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_CONTEXT_TYPE:
            return type.displayName || "Context";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = type !== "" ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, innerType !== null ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {}
        }
      return null;
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      try {
        testStringCoercion(value);
        var JSCompiler_inline_result = false;
      } catch (e3) {
        JSCompiler_inline_result = true;
      }
      if (JSCompiler_inline_result) {
        JSCompiler_inline_result = console;
        var JSCompiler_temp_const = JSCompiler_inline_result.error;
        var JSCompiler_inline_result$jscomp$0 = typeof Symbol === "function" && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
        return testStringCoercion(value);
      }
    }
    function getTaskName(type) {
      if (type === REACT_FRAGMENT_TYPE)
        return "<>";
      if (typeof type === "object" && type !== null && type.$$typeof === REACT_LAZY_TYPE)
        return "<...>";
      try {
        var name = getComponentNameFromType(type);
        return name ? "<" + name + ">" : "<...>";
      } catch (x) {
        return "<...>";
      }
    }
    function getOwner() {
      var dispatcher = ReactSharedInternals.A;
      return dispatcher === null ? null : dispatcher.getOwner();
    }
    function UnknownOwner() {
      return Error("react-stack-top-frame");
    }
    function hasValidKey(config) {
      if (hasOwnProperty.call(config, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
        if (getter && getter.isReactWarning)
          return false;
      }
      return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      function warnAboutAccessingKey() {
        specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
      }
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, "key", {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }
    function elementRefGetterWithDeprecationWarning() {
      var componentName = getComponentNameFromType(this.type);
      didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
      componentName = this.props.ref;
      return componentName !== undefined ? componentName : null;
    }
    function ReactElement(type, key, props, owner, debugStack, debugTask) {
      var refProp = props.ref;
      type = {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        props,
        _owner: owner
      };
      (refProp !== undefined ? refProp : null) !== null ? Object.defineProperty(type, "ref", {
        enumerable: false,
        get: elementRefGetterWithDeprecationWarning
      }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
      type._store = {};
      Object.defineProperty(type._store, "validated", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: 0
      });
      Object.defineProperty(type, "_debugInfo", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: null
      });
      Object.defineProperty(type, "_debugStack", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: debugStack
      });
      Object.defineProperty(type, "_debugTask", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: debugTask
      });
      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
      return type;
    }
    function jsxDEVImpl(type, config, maybeKey, isStaticChildren, debugStack, debugTask) {
      var children = config.children;
      if (children !== undefined)
        if (isStaticChildren)
          if (isArrayImpl(children)) {
            for (isStaticChildren = 0;isStaticChildren < children.length; isStaticChildren++)
              validateChildKeys(children[isStaticChildren]);
            Object.freeze && Object.freeze(children);
          } else
            console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
        else
          validateChildKeys(children);
      if (hasOwnProperty.call(config, "key")) {
        children = getComponentNameFromType(type);
        var keys = Object.keys(config).filter(function(k3) {
          return k3 !== "key";
        });
        isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
        didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error(`A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`, isStaticChildren, children, keys, children), didWarnAboutKeySpread[children + isStaticChildren] = true);
      }
      children = null;
      maybeKey !== undefined && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
      hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
      if ("key" in config) {
        maybeKey = {};
        for (var propName in config)
          propName !== "key" && (maybeKey[propName] = config[propName]);
      } else
        maybeKey = config;
      children && defineKeyPropWarningGetter(maybeKey, typeof type === "function" ? type.displayName || type.name || "Unknown" : type);
      return ReactElement(type, children, maybeKey, getOwner(), debugStack, debugTask);
    }
    function validateChildKeys(node) {
      isValidElement(node) ? node._store && (node._store.validated = 1) : typeof node === "object" && node !== null && node.$$typeof === REACT_LAZY_TYPE && (node._payload.status === "fulfilled" ? isValidElement(node._payload.value) && node._payload.value._store && (node._payload.value._store.validated = 1) : node._store && (node._store.validated = 1));
    }
    function isValidElement(object) {
      return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {
      return null;
    };
    React = {
      react_stack_bottom_frame: function(callStackForError) {
        return callStackForError();
      }
    };
    var specialPropKeyWarningShown;
    var didWarnAboutElementRef = {};
    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(React, UnknownOwner)();
    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
    var didWarnAboutKeySpread = {};
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = function(type, config, maybeKey, isStaticChildren) {
      var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
      return jsxDEVImpl(type, config, maybeKey, isStaticChildren, trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack, trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask);
    };
  })();
});

// node_modules/react/jsx-dev-runtime.js
var require_jsx_dev_runtime = __commonJS((exports, module) => {
  var react_jsx_dev_runtime_development = __toESM(require_react_jsx_dev_runtime_development());
  if (false) {} else {
    module.exports = react_jsx_dev_runtime_development;
  }
});

// node_modules/circuit-to-svg/dist/index.js
var import_svgson = __toESM(require_svgson_umd(), 1);

// node_modules/transformation-matrix/src/applyToPoint.js
function applyToPoint(matrix, point) {
  return Array.isArray(point) ? [
    matrix.a * point[0] + matrix.c * point[1] + matrix.e,
    matrix.b * point[0] + matrix.d * point[1] + matrix.f
  ] : {
    x: matrix.a * point.x + matrix.c * point.y + matrix.e,
    y: matrix.b * point.x + matrix.d * point.y + matrix.f
  };
}
// node_modules/transformation-matrix/src/utils.js
function isUndefined(val) {
  return typeof val === "undefined";
}
// node_modules/transformation-matrix/src/translate.js
function translate(tx, ty = 0) {
  return {
    a: 1,
    c: 0,
    e: tx,
    b: 0,
    d: 1,
    f: ty
  };
}

// node_modules/transformation-matrix/src/transform.js
function transform(...matrices) {
  matrices = Array.isArray(matrices[0]) ? matrices[0] : matrices;
  const multiply = (m1, m2) => {
    return {
      a: m1.a * m2.a + m1.c * m2.b,
      c: m1.a * m2.c + m1.c * m2.d,
      e: m1.a * m2.e + m1.c * m2.f + m1.e,
      b: m1.b * m2.a + m1.d * m2.b,
      d: m1.b * m2.c + m1.d * m2.d,
      f: m1.b * m2.e + m1.d * m2.f + m1.f
    };
  };
  switch (matrices.length) {
    case 0:
      throw new Error("no matrices provided");
    case 1:
      return matrices[0];
    case 2:
      return multiply(matrices[0], matrices[1]);
    default: {
      const [m1, m2, ...rest] = matrices;
      const m = multiply(m1, m2);
      return transform(m, ...rest);
    }
  }
}
function compose(...matrices) {
  return transform(...matrices);
}

// node_modules/transformation-matrix/src/rotate.js
var { cos, sin, PI } = Math;
function rotate(angle, cx, cy) {
  const cosAngle = cos(angle);
  const sinAngle = sin(angle);
  const rotationMatrix = {
    a: cosAngle,
    c: -sinAngle,
    e: 0,
    b: sinAngle,
    d: cosAngle,
    f: 0
  };
  if (isUndefined(cx) || isUndefined(cy)) {
    return rotationMatrix;
  }
  return transform([
    translate(cx, cy),
    rotationMatrix,
    translate(-cx, -cy)
  ]);
}
// node_modules/transformation-matrix/src/scale.js
function scale(sx, sy = undefined, cx = undefined, cy = undefined) {
  if (isUndefined(sy))
    sy = sx;
  const scaleMatrix = {
    a: sx,
    c: 0,
    e: 0,
    b: 0,
    d: sy,
    f: 0
  };
  if (isUndefined(cx) || isUndefined(cy)) {
    return scaleMatrix;
  }
  return transform([
    translate(cx, cy),
    scaleMatrix,
    translate(-cx, -cy)
  ]);
}
// node_modules/transformation-matrix/src/toString.js
function toString(matrix) {
  return `matrix(${matrix.a},${matrix.b},${matrix.c},${matrix.d},${matrix.e},${matrix.f})`;
}
// node_modules/transformation-matrix/src/fromTransformAttribute.autogenerated.js
function peg$subclass(child, parent) {
  function C() {
    this.constructor = child;
  }
  C.prototype = parent.prototype;
  child.prototype = new C;
}
function peg$SyntaxError(message, expected, found, location) {
  var self2 = Error.call(this, message);
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
  }
  self2.expected = expected;
  self2.found = found;
  self2.location = location;
  self2.name = "SyntaxError";
  return self2;
}
peg$subclass(peg$SyntaxError, Error);
function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}
peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0;k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, " ");
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = last - s.column || 1;
      str += `
 --> ` + loc + `
` + filler + ` |
` + offset_s.line + " | " + line + `
` + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
    } else {
      str += `
 at ` + loc;
    }
  }
  return str;
};
peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return '"' + literalEscape(expectation.text) + '"';
    },
    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
      });
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },
    any: function() {
      return "any character";
    },
    end: function() {
      return "end of input";
    },
    other: function(expectation) {
      return expectation.description;
    }
  };
  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }
  function literalEscape(s) {
    return s.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
      return "\\x0" + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
      return "\\x" + hex(ch);
    });
  }
  function classEscape(s) {
    return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
      return "\\x0" + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
      return "\\x" + hex(ch);
    });
  }
  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }
  function describeExpected(expected2) {
    var descriptions = expected2.map(describeExpectation);
    var i, j;
    descriptions.sort();
    if (descriptions.length > 0) {
      for (i = 1, j = 1;i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }
    switch (descriptions.length) {
      case 1:
        return descriptions[0];
      case 2:
        return descriptions[0] + " or " + descriptions[1];
      default:
        return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
    }
  }
  function describeFound(found2) {
    return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
  }
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};
// node_modules/circuit-json-to-connectivity-map/dist/index.js
function findConnectedNetworks(connections) {
  const networks = /* @__PURE__ */ new Map;
  let netCounter = 0;
  function getOrCreateNetwork(nodeId) {
    for (const [, network] of networks) {
      if (network.has(nodeId)) {
        return network;
      }
    }
    const newNetwork = /* @__PURE__ */ new Set;
    networks.set(`connectivity_net${netCounter++}`, newNetwork);
    return newNetwork;
  }
  for (const connection of connections) {
    let network = null;
    for (const nodeId of connection) {
      if (!network) {
        network = getOrCreateNetwork(nodeId);
      } else if (!network.has(nodeId)) {
        const existingNetwork = getOrCreateNetwork(nodeId);
        if (existingNetwork !== network) {
          for (const node of existingNetwork) {
            network.add(node);
          }
          networks.delete(Array.from(networks.entries()).find(([, net]) => net === existingNetwork)[0]);
        }
      }
      network.add(nodeId);
    }
  }
  return Object.fromEntries(Array.from(networks.entries()).map(([netId, connectedNodes]) => [
    netId,
    Array.from(connectedNodes)
  ]));
}
var ConnectivityMap = class {
  netMap;
  idToNetMap;
  constructor(netMap) {
    this.netMap = netMap;
    this.idToNetMap = {};
    for (const [netId, ids] of Object.entries(netMap)) {
      for (const id of ids) {
        this.idToNetMap[id] = netId;
      }
    }
  }
  addConnections(connections) {
    for (const connection of connections) {
      const existingNets = /* @__PURE__ */ new Set;
      for (const id of connection) {
        const existingNetId = this.idToNetMap[id];
        if (existingNetId) {
          existingNets.add(existingNetId);
        }
      }
      let targetNetId;
      if (existingNets.size === 0) {
        targetNetId = `connectivity_net${Object.keys(this.netMap).length}`;
        this.netMap[targetNetId] = [];
      } else if (existingNets.size === 1) {
        targetNetId = existingNets.values().next().value ?? `connectivity_net${Object.keys(this.netMap).length}`;
      } else {
        targetNetId = existingNets.values().next().value ?? `connectivity_net${Object.keys(this.netMap).length}`;
        for (const netId of existingNets) {
          if (netId !== targetNetId) {
            this.netMap[targetNetId].push(...this.netMap[netId]);
            this.netMap[netId] = this.netMap[targetNetId];
            for (const id of this.netMap[targetNetId]) {
              this.idToNetMap[id] = targetNetId;
            }
          }
        }
      }
      for (const id of connection) {
        if (!this.netMap[targetNetId].includes(id)) {
          this.netMap[targetNetId].push(id);
        }
        this.idToNetMap[id] = targetNetId;
      }
    }
  }
  getIdsConnectedToNet(netId) {
    return this.netMap[netId] || [];
  }
  getNetConnectedToId(id) {
    return this.idToNetMap[id];
  }
  areIdsConnected(id1, id2) {
    const netId1 = this.getNetConnectedToId(id1);
    const netId2 = this.getNetConnectedToId(id2);
    return netId1 === netId2 || netId2 === id1 || netId2 === id1;
  }
  areAllIdsConnected(ids) {
    const netId = this.getNetConnectedToId(ids[0]);
    for (const id of ids) {
      const nextNetId = this.getNetConnectedToId(id);
      if (nextNetId === undefined) {
        return false;
      }
      if (nextNetId !== netId) {
        return false;
      }
    }
    return true;
  }
};
var getFullConnectivityMapFromCircuitJson = (circuitJson) => {
  const connections = [];
  for (const element of circuitJson) {
    if (element.type === "source_trace") {
      connections.push([
        element.source_trace_id,
        ...element.connected_source_port_ids ?? [],
        ...element.connected_source_net_ids ?? []
      ].filter(Boolean));
    } else if (element.type === "pcb_port") {
      const { pcb_port_id, source_port_id } = element;
      if (source_port_id && pcb_port_id) {
        connections.push([source_port_id, pcb_port_id]);
      }
    } else if (element.type === "pcb_smtpad") {
      const { pcb_smtpad_id, pcb_port_id } = element;
      if (pcb_port_id && pcb_smtpad_id) {
        connections.push([pcb_smtpad_id, pcb_port_id]);
      }
    } else if (element.type === "pcb_plated_hole") {
      const { pcb_plated_hole_id, pcb_port_id } = element;
      if (pcb_port_id && pcb_plated_hole_id) {
        connections.push([pcb_plated_hole_id, pcb_port_id]);
      }
    } else if (element.type === "pcb_trace") {
      const { pcb_trace_id, source_trace_id } = element;
      if (source_trace_id && pcb_trace_id) {
        connections.push([pcb_trace_id, source_trace_id]);
      }
    }
  }
  const netMap = findConnectedNetworks(connections);
  return new ConnectivityMap(netMap);
};

// node_modules/circuit-to-svg/dist/index.js
var import_svgson2 = __toESM(require_svgson_umd(), 1);

// node_modules/circuit-json/dist/index.mjs
var exports_dist = {};
__export(exports_dist, {
  wave_shape: () => wave_shape,
  voltage: () => voltage,
  visible_layer: () => visible_layer,
  timestamp: () => timestamp,
  time: () => time,
  supplier_name: () => supplier_name,
  source_trace_not_connected_error: () => source_trace_not_connected_error,
  source_trace: () => source_trace,
  source_simple_transistor: () => source_simple_transistor,
  source_simple_test_point: () => source_simple_test_point,
  source_simple_switch: () => source_simple_switch,
  source_simple_resonator: () => source_simple_resonator,
  source_simple_resistor: () => source_simple_resistor,
  source_simple_push_button: () => source_simple_push_button,
  source_simple_power_source: () => source_simple_power_source,
  source_simple_potentiometer: () => source_simple_potentiometer,
  source_simple_pinout: () => source_simple_pinout,
  source_simple_pin_header: () => source_simple_pin_header,
  source_simple_mosfet: () => source_simple_mosfet,
  source_simple_led: () => source_simple_led,
  source_simple_inductor: () => source_simple_inductor,
  source_simple_ground: () => source_simple_ground,
  source_simple_diode: () => source_simple_diode,
  source_simple_crystal: () => source_simple_crystal,
  source_simple_chip: () => source_simple_chip,
  source_simple_capacitor: () => source_simple_capacitor,
  source_simple_battery: () => source_simple_battery,
  source_property_ignored_warning: () => source_property_ignored_warning,
  source_project_metadata: () => source_project_metadata,
  source_port: () => source_port,
  source_pin_missing_trace_warning: () => source_pin_missing_trace_warning,
  source_pcb_ground_plane: () => source_pcb_ground_plane,
  source_net: () => source_net,
  source_missing_property_error: () => source_missing_property_error,
  source_manually_placed_via: () => source_manually_placed_via,
  source_group: () => source_group,
  source_failed_to_create_component_error: () => source_failed_to_create_component_error,
  source_component_base: () => source_component_base,
  source_board: () => source_board,
  size: () => size,
  simulation_voltage_source: () => simulation_voltage_source,
  simulation_voltage_probe: () => simulation_voltage_probe,
  simulation_transient_voltage_graph: () => simulation_transient_voltage_graph,
  simulation_switch: () => simulation_switch,
  simulation_experiment: () => simulation_experiment,
  simulation_dc_voltage_source: () => simulation_dc_voltage_source,
  simulation_ac_voltage_source: () => simulation_ac_voltage_source,
  schematic_voltage_probe: () => schematic_voltage_probe,
  schematic_trace: () => schematic_trace,
  schematic_text: () => schematic_text,
  schematic_table_cell: () => schematic_table_cell,
  schematic_table: () => schematic_table,
  schematic_rect: () => schematic_rect,
  schematic_port: () => schematic_port,
  schematic_pin_styles: () => schematic_pin_styles,
  schematic_path: () => schematic_path,
  schematic_net_label: () => schematic_net_label,
  schematic_manual_edit_conflict_warning: () => schematic_manual_edit_conflict_warning,
  schematic_line: () => schematic_line,
  schematic_layout_error: () => schematic_layout_error,
  schematic_group: () => schematic_group,
  schematic_error: () => schematic_error,
  schematic_debug_rect: () => schematic_debug_rect,
  schematic_debug_point: () => schematic_debug_point,
  schematic_debug_object_base: () => schematic_debug_object_base,
  schematic_debug_object: () => schematic_debug_object,
  schematic_debug_line: () => schematic_debug_line,
  schematic_component_port_arrangement_by_size: () => schematic_component_port_arrangement_by_size,
  schematic_component_port_arrangement_by_sides: () => schematic_component_port_arrangement_by_sides,
  schematic_component: () => schematic_component,
  schematic_circle: () => schematic_circle,
  schematic_box: () => schematic_box,
  schematic_arc: () => schematic_arc,
  route_hint_point: () => route_hint_point,
  rotation: () => rotation,
  ring: () => ring,
  resistance: () => resistance,
  position3: () => position3,
  position: () => position,
  port_arrangement: () => port_arrangement,
  point_with_bulge: () => point_with_bulge,
  point3: () => point3,
  point: () => point,
  pcb_via_clearance_error: () => pcb_via_clearance_error,
  pcb_via: () => pcb_via,
  pcb_trace_route_point_wire: () => pcb_trace_route_point_wire,
  pcb_trace_route_point_via: () => pcb_trace_route_point_via,
  pcb_trace_route_point: () => pcb_trace_route_point,
  pcb_trace_missing_error: () => pcb_trace_missing_error,
  pcb_trace_hint: () => pcb_trace_hint,
  pcb_trace_error: () => pcb_trace_error,
  pcb_trace: () => pcb_trace,
  pcb_thermal_spoke: () => pcb_thermal_spoke,
  pcb_text: () => pcb_text,
  pcb_solder_paste: () => pcb_solder_paste,
  pcb_smtpad_pill: () => pcb_smtpad_pill,
  pcb_smtpad: () => pcb_smtpad,
  pcb_silkscreen_text: () => pcb_silkscreen_text,
  pcb_silkscreen_rect: () => pcb_silkscreen_rect,
  pcb_silkscreen_path: () => pcb_silkscreen_path,
  pcb_silkscreen_oval: () => pcb_silkscreen_oval,
  pcb_silkscreen_line: () => pcb_silkscreen_line,
  pcb_silkscreen_circle: () => pcb_silkscreen_circle,
  pcb_route_hints: () => pcb_route_hints,
  pcb_route_hint: () => pcb_route_hint,
  pcb_port_not_matched_error: () => pcb_port_not_matched_error,
  pcb_port_not_connected_error: () => pcb_port_not_connected_error,
  pcb_port: () => pcb_port,
  pcb_plated_hole: () => pcb_plated_hole,
  pcb_placement_error: () => pcb_placement_error,
  pcb_note_text: () => pcb_note_text,
  pcb_note_rect: () => pcb_note_rect,
  pcb_note_path: () => pcb_note_path,
  pcb_note_line: () => pcb_note_line,
  pcb_note_dimension: () => pcb_note_dimension,
  pcb_net: () => pcb_net,
  pcb_missing_footprint_error: () => pcb_missing_footprint_error,
  pcb_manual_edit_conflict_warning: () => pcb_manual_edit_conflict_warning,
  pcb_keepout: () => pcb_keepout,
  pcb_hole_rotated_pill_shape: () => pcb_hole_rotated_pill_shape,
  pcb_hole_pill_shape: () => pcb_hole_pill_shape,
  pcb_hole_oval_shape: () => pcb_hole_oval_shape,
  pcb_hole_circle_or_square_shape: () => pcb_hole_circle_or_square_shape,
  pcb_hole: () => pcb_hole,
  pcb_group: () => pcb_group,
  pcb_ground_plane_region: () => pcb_ground_plane_region,
  pcb_ground_plane: () => pcb_ground_plane,
  pcb_footprint_overlap_error: () => pcb_footprint_overlap_error,
  pcb_fabrication_note_text: () => pcb_fabrication_note_text,
  pcb_fabrication_note_rect: () => pcb_fabrication_note_rect,
  pcb_fabrication_note_path: () => pcb_fabrication_note_path,
  pcb_fabrication_note_dimension: () => pcb_fabrication_note_dimension,
  pcb_cutout_rect: () => pcb_cutout_rect,
  pcb_cutout_polygon: () => pcb_cutout_polygon,
  pcb_cutout_circle: () => pcb_cutout_circle,
  pcb_cutout: () => pcb_cutout,
  pcb_courtyard_rect: () => pcb_courtyard_rect,
  pcb_courtyard_outline: () => pcb_courtyard_outline,
  pcb_copper_pour_rect: () => pcb_copper_pour_rect,
  pcb_copper_pour_polygon: () => pcb_copper_pour_polygon,
  pcb_copper_pour_brep: () => pcb_copper_pour_brep,
  pcb_copper_pour: () => pcb_copper_pour,
  pcb_component_outside_board_error: () => pcb_component_outside_board_error,
  pcb_component: () => pcb_component,
  pcb_breakout_point: () => pcb_breakout_point,
  pcb_board: () => pcb_board,
  pcb_autorouting_error: () => pcb_autorouting_error,
  ninePointAnchor: () => ninePointAnchor,
  ms: () => ms,
  length: () => length,
  layer_string: () => layer_string,
  layer_ref: () => layer_ref,
  inductance: () => inductance,
  getZodPrefixedIdWithDefault: () => getZodPrefixedIdWithDefault,
  frequency: () => frequency,
  external_footprint_load_error: () => external_footprint_load_error,
  experiment_type: () => experiment_type,
  duration_ms: () => duration_ms,
  distance: () => distance2,
  current: () => current,
  circuit_json_footprint_load_error: () => circuit_json_footprint_load_error,
  capacitance: () => capacitance,
  cad_component: () => cad_component,
  brep_shape: () => brep_shape,
  battery_capacity: () => battery_capacity,
  any_source_component: () => any_source_component,
  any_soup_element: () => any_soup_element,
  any_circuit_element: () => any_circuit_element,
  all_layers: () => all_layers
});

// node_modules/zod/v3/external.js
var exports_external = {};
__export(exports_external, {
  void: () => voidType,
  util: () => util,
  unknown: () => unknownType,
  union: () => unionType,
  undefined: () => undefinedType,
  tuple: () => tupleType,
  transformer: () => effectsType,
  symbol: () => symbolType,
  string: () => stringType,
  strictObject: () => strictObjectType,
  setErrorMap: () => setErrorMap,
  set: () => setType,
  record: () => recordType,
  quotelessJson: () => quotelessJson,
  promise: () => promiseType,
  preprocess: () => preprocessType,
  pipeline: () => pipelineType,
  ostring: () => ostring,
  optional: () => optionalType,
  onumber: () => onumber,
  oboolean: () => oboolean,
  objectUtil: () => objectUtil,
  object: () => objectType,
  number: () => numberType,
  nullable: () => nullableType,
  null: () => nullType,
  never: () => neverType,
  nativeEnum: () => nativeEnumType,
  nan: () => nanType,
  map: () => mapType,
  makeIssue: () => makeIssue,
  literal: () => literalType,
  lazy: () => lazyType,
  late: () => late,
  isValid: () => isValid,
  isDirty: () => isDirty,
  isAsync: () => isAsync,
  isAborted: () => isAborted,
  intersection: () => intersectionType,
  instanceof: () => instanceOfType,
  getParsedType: () => getParsedType,
  getErrorMap: () => getErrorMap,
  function: () => functionType,
  enum: () => enumType,
  effect: () => effectsType,
  discriminatedUnion: () => discriminatedUnionType,
  defaultErrorMap: () => en_default,
  datetimeRegex: () => datetimeRegex,
  date: () => dateType,
  custom: () => custom,
  coerce: () => coerce,
  boolean: () => booleanType,
  bigint: () => bigIntType,
  array: () => arrayType,
  any: () => anyType,
  addIssueToContext: () => addIssueToContext,
  ZodVoid: () => ZodVoid,
  ZodUnknown: () => ZodUnknown,
  ZodUnion: () => ZodUnion,
  ZodUndefined: () => ZodUndefined,
  ZodType: () => ZodType,
  ZodTuple: () => ZodTuple,
  ZodTransformer: () => ZodEffects,
  ZodSymbol: () => ZodSymbol,
  ZodString: () => ZodString,
  ZodSet: () => ZodSet,
  ZodSchema: () => ZodType,
  ZodRecord: () => ZodRecord,
  ZodReadonly: () => ZodReadonly,
  ZodPromise: () => ZodPromise,
  ZodPipeline: () => ZodPipeline,
  ZodParsedType: () => ZodParsedType,
  ZodOptional: () => ZodOptional,
  ZodObject: () => ZodObject,
  ZodNumber: () => ZodNumber,
  ZodNullable: () => ZodNullable,
  ZodNull: () => ZodNull,
  ZodNever: () => ZodNever,
  ZodNativeEnum: () => ZodNativeEnum,
  ZodNaN: () => ZodNaN,
  ZodMap: () => ZodMap,
  ZodLiteral: () => ZodLiteral,
  ZodLazy: () => ZodLazy,
  ZodIssueCode: () => ZodIssueCode,
  ZodIntersection: () => ZodIntersection,
  ZodFunction: () => ZodFunction,
  ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,
  ZodError: () => ZodError,
  ZodEnum: () => ZodEnum,
  ZodEffects: () => ZodEffects,
  ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,
  ZodDefault: () => ZodDefault,
  ZodDate: () => ZodDate,
  ZodCatch: () => ZodCatch,
  ZodBranded: () => ZodBranded,
  ZodBoolean: () => ZodBoolean,
  ZodBigInt: () => ZodBigInt,
  ZodArray: () => ZodArray,
  ZodAny: () => ZodAny,
  Schema: () => ZodType,
  ParseStatus: () => ParseStatus,
  OK: () => OK,
  NEVER: () => NEVER,
  INVALID: () => INVALID,
  EMPTY_PATH: () => EMPTY_PATH,
  DIRTY: () => DIRTY,
  BRAND: () => BRAND
});

// node_modules/zod/v3/helpers/util.js
var util;
(function(util2) {
  util2.assertEqual = (_) => {};
  function assertIs(_arg) {}
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error;
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};

// node_modules/zod/v3/ZodError.js
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};

class ZodError extends Error {
  get errors() {
    return this.issues;
  }
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        const firstEl = sub.path[0];
        fieldErrors[firstEl] = fieldErrors[firstEl] || [];
        fieldErrors[firstEl].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
}
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};

// node_modules/zod/v3/locales/en.js
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "bigint")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var en_default = errorMap;

// node_modules/zod/v3/errors.js
var overrideErrorMap = en_default;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
// node_modules/zod/v3/helpers/parseUtil.js
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== undefined) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideMap,
      overrideMap === en_default ? undefined : en_default
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}

class ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
}
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
// node_modules/zod/v3/helpers/errorUtil.js
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message?.message;
})(errorUtil || (errorUtil = {}));

// node_modules/zod/v3/types.js
class ParseInputLazyPath {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (Array.isArray(this._key)) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
}
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message ?? ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: message ?? required_error ?? ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: message ?? invalid_type_error ?? ctx.defaultError };
  };
  return { errorMap: customMap, description };
}

class ZodType {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus,
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    const ctx = {
      common: {
        issues: [],
        async: params?.async ?? false,
        contextualErrorMap: params?.errorMap
      },
      path: params?.path || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  "~validate"(data) {
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    if (!this["~standard"].async) {
      try {
        const result = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if (err?.message?.toLowerCase()?.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
      value: result.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params?.errorMap,
        async: true
      },
      path: params?.path || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform3) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform: transform3 }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(undefined).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let secondsRegexSource = `[0-5]\\d`;
  if (args.precision) {
    secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
  }
  const secondsQuantifier = args.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    if (!header)
      return false;
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if ("typ" in decoded && decoded?.typ !== "JWT")
      return false;
    if (!decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch {
    return false;
  }
}
function isValidCidr(ip, version) {
  if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}

class ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus;
    let ctx = undefined;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "jwt") {
        if (!isValidJWT(input.data, check.alg)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "jwt",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cidr") {
        if (!isValidCidr(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cidr",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64url") {
        if (!base64urlRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  base64url(message) {
    return this._addCheck({
      kind: "base64url",
      ...errorUtil.errToObj(message)
    });
  }
  jwt(options) {
    return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  cidr(options) {
    return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof options?.precision === "undefined" ? null : options?.precision,
      offset: options?.offset ?? false,
      local: options?.local ?? false,
      ...errorUtil.errToObj(options?.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof options?.precision === "undefined" ? null : options?.precision,
      ...errorUtil.errToObj(options?.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options?.position,
      ...errorUtil.errToObj(options?.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((ch) => ch.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((ch) => ch.kind === "base64url");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
}
ZodString.create = (params) => {
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: params?.coerce ?? false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}

class ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = undefined;
    const status = new ParseStatus;
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null;
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
}
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: params?.coerce || false,
    ...processCreateParams(params)
  });
};

class ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      try {
        input.data = BigInt(input.data);
      } catch {
        return this._getInvalidInput(input);
      }
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      return this._getInvalidInput(input);
    }
    let ctx = undefined;
    const status = new ParseStatus;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _getInvalidInput(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.bigint,
      received: ctx.parsedType
    });
    return INVALID;
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
}
ZodBigInt.create = (params) => {
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: params?.coerce ?? false,
    ...processCreateParams(params)
  });
};

class ZodBoolean extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: params?.coerce || false,
    ...processCreateParams(params)
  });
};

class ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (Number.isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus;
    let ctx = undefined;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
}
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: params?.coerce || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};

class ZodSymbol extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};

class ZodUndefined extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};

class ZodNull extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};

class ZodAny extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};

class ZodUnknown extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};

class ZodNever extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
}
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};

class ZodVoid extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};

class ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : undefined,
          maximum: tooBig ? def.exactLength.value : undefined,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}

class ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    this._cached = { shape, keys };
    return this._cached;
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip") {} else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== undefined ? {
        errorMap: (issue, ctx) => {
          const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: errorUtil.errToObj(message).message ?? defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  extend(augmentation) {
    return new ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    for (const key of util.objectKeys(mask)) {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
}
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};

class ZodUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = undefined;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
}
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [undefined];
  } else if (type instanceof ZodNull) {
    return [null];
  } else if (type instanceof ZodOptional) {
    return [undefined, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};

class ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  static create(discriminator, options, params) {
    const optionsMap = new Map;
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
}
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0;index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}

class ZodIntersection extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
}
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};

class ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
}
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};

class ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
}

class ZodMap extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = new Map;
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = new Map;
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
}
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};

class ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = new Set;
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};

class ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
}

class ZodLazy extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
}
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};

class ZodLiteral extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
}
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}

class ZodEnum extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(this._def.values);
    }
    if (!this._cache.has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
}
ZodEnum.create = createZodEnum;

class ZodNativeEnum extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(util.getValidEnumValues(this._def.values));
    }
    if (!this._cache.has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
}
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};

class ZodPromise extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
}
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};

class ZodEffects extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return INVALID;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return INVALID;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
            status: status.value,
            value: result
          }));
        });
      }
    }
    util.assertNever(effect);
  }
}
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
class ZodOptional extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(undefined);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};

class ZodNullable extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};

class ZodDefault extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};

class ZodCatch extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
}
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};

class ZodNaN extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
}
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");

class ZodBranded extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
}

class ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
}

class ZodReadonly extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function cleanParams(params, data) {
  const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p2 = typeof p === "string" ? { message: p } : p;
  return p2;
}
function custom(check, _params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      const r = check(data);
      if (r instanceof Promise) {
        return r.then((r2) => {
          if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = params.fatal ?? fatal ?? true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r) {
        const params = cleanParams(_params, data);
        const _fatal = params.fatal ?? fatal ?? true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
// node_modules/circuit-json/dist/index.mjs
var unitMappings = {
  Hz: {
    baseUnit: "Hz",
    variants: {
      MHz: 1e6,
      kHz: 1000,
      Hz: 1
    }
  },
  g: {
    baseUnit: "g",
    variants: {
      kg: 1000,
      g: 1
    }
  },
  Ω: {
    baseUnit: "Ω",
    variants: {
      mΩ: 0.001,
      Ω: 1,
      kΩ: 1000,
      KΩ: 1000,
      kohm: 1000,
      MΩ: 1e6,
      GΩ: 1e9,
      TΩ: 1000000000000
    }
  },
  V: {
    baseUnit: "V",
    variants: {
      mV: 0.001,
      V: 1,
      kV: 1000,
      KV: 1000,
      MV: 1e6,
      GV: 1e9,
      TV: 1000000000000
    }
  },
  A: {
    baseUnit: "A",
    variants: {
      µA: 0.000001,
      mA: 0.001,
      ma: 0.001,
      A: 1,
      kA: 1000,
      MA: 1e6
    }
  },
  F: {
    baseUnit: "F",
    variants: {
      pF: 0.000000000001,
      nF: 0.000000001,
      µF: 0.000001,
      uF: 0.000001,
      mF: 0.001,
      F: 1
    }
  },
  ml: {
    baseUnit: "ml",
    variants: {
      ml: 1,
      mL: 1,
      l: 1000,
      L: 1000
    }
  },
  deg: {
    baseUnit: "deg",
    variants: {
      rad: 180 / Math.PI
    }
  },
  ms: {
    baseUnit: "ms",
    variants: {
      fs: 0.000000000001,
      ps: 0.000000001,
      ns: 0.000001,
      us: 0.001,
      µs: 0.001,
      ms: 1,
      s: 1000
    }
  },
  mm: {
    baseUnit: "mm",
    variants: {
      nm: 0.000001,
      µm: 0.001,
      um: 0.001,
      mm: 1,
      cm: 10,
      dm: 100,
      m: 1000,
      km: 1e6,
      in: 25.4,
      ft: 304.8,
      IN: 25.4,
      FT: 304.8,
      yd: 914.4,
      mi: 1609344,
      mil: 0.0254
    }
  }
};
var unitMappingAndVariantSuffixes = /* @__PURE__ */ new Set;
for (const [baseUnit, info] of Object.entries(unitMappings)) {
  unitMappingAndVariantSuffixes.add(baseUnit);
  for (const variant of Object.keys(info.variants)) {
    unitMappingAndVariantSuffixes.add(variant);
  }
}
function getBaseTscircuitUnit(unit) {
  for (const [baseUnit, info] of Object.entries(unitMappings)) {
    if (unit in info.variants) {
      return {
        baseUnit: info.baseUnit,
        conversionFactor: info.variants[unit]
      };
    }
  }
  return {
    baseUnit: unit,
    conversionFactor: 1
  };
}
var si_prefix_multiplier = {
  tera: 1000000000000,
  T: 1000000000000,
  giga: 1e9,
  G: 1e9,
  mega: 1e6,
  M: 1e6,
  kilo: 1000,
  k: 1000,
  deci: 0.1,
  d: 0.1,
  centi: 0.01,
  c: 0.01,
  milli: 0.001,
  m: 0.001,
  micro: 0.000001,
  u: 0.000001,
  µ: 0.000001,
  nano: 0.000000001,
  n: 0.000000001,
  pico: 0.000000000001,
  p: 0.000000000001
};
function parseAndConvertSiUnit(v) {
  if (v === undefined || v === null)
    return { parsedUnit: null, unitOfValue: null, value: null };
  if (typeof v === "string" && v.match(/^-?[\d\.]+$/))
    return {
      value: Number.parseFloat(v),
      parsedUnit: null,
      unitOfValue: null
    };
  if (typeof v === "number")
    return { value: v, parsedUnit: null, unitOfValue: null };
  if (typeof v === "object" && "x" in v && "y" in v) {
    const { parsedUnit, unitOfValue } = parseAndConvertSiUnit(v.x);
    const xResult = parseAndConvertSiUnit(v.x);
    const yResult = parseAndConvertSiUnit(v.y);
    if (xResult.value === null || yResult.value === null) {
      return { parsedUnit: null, unitOfValue: null, value: null };
    }
    return {
      parsedUnit,
      unitOfValue,
      value: {
        x: xResult.value,
        y: yResult.value
      }
    };
  }
  const reversed_input_string = v.toString().split("").reverse().join("");
  const unit_reversed = reversed_input_string.match(/[^\d\s]+/)?.[0];
  if (!unit_reversed) {
    throw new Error(`Could not determine unit: "${v}"`);
  }
  const unit = unit_reversed.split("").reverse().join("");
  const numberPart = v.slice(0, -unit.length);
  if (unit in si_prefix_multiplier && !unitMappingAndVariantSuffixes.has(unit)) {
    const siMultiplier = si_prefix_multiplier[unit];
    return {
      parsedUnit: null,
      unitOfValue: null,
      value: Number.parseFloat(numberPart) * siMultiplier
    };
  }
  const { baseUnit, conversionFactor } = getBaseTscircuitUnit(unit);
  return {
    parsedUnit: unit,
    unitOfValue: baseUnit,
    value: conversionFactor * Number.parseFloat(numberPart)
  };
}
var resistance = exports_external.string().or(exports_external.number()).transform((v) => parseAndConvertSiUnit(v).value);
var capacitance = exports_external.string().or(exports_external.number()).transform((v) => parseAndConvertSiUnit(v).value).transform((value) => {
  return Number.parseFloat(value.toPrecision(12));
});
var inductance = exports_external.string().or(exports_external.number()).transform((v) => parseAndConvertSiUnit(v).value);
var voltage = exports_external.string().or(exports_external.number()).transform((v) => parseAndConvertSiUnit(v).value);
var length = exports_external.string().or(exports_external.number()).transform((v) => parseAndConvertSiUnit(v).value);
var frequency = exports_external.string().or(exports_external.number()).transform((v) => parseAndConvertSiUnit(v).value);
var distance2 = length;
var current = exports_external.string().or(exports_external.number()).transform((v) => parseAndConvertSiUnit(v).value);
var duration_ms = exports_external.string().or(exports_external.number()).transform((v) => parseAndConvertSiUnit(v).value);
var time = duration_ms;
var ms = duration_ms;
var timestamp = exports_external.string().datetime();
var rotation = exports_external.string().or(exports_external.number()).transform((arg) => {
  if (typeof arg === "number")
    return arg;
  if (arg.endsWith("deg")) {
    return Number.parseFloat(arg.split("deg")[0]);
  }
  if (arg.endsWith("rad")) {
    return Number.parseFloat(arg.split("rad")[0]) * 180 / Math.PI;
  }
  return Number.parseFloat(arg);
});
var battery_capacity = exports_external.number().or(exports_external.string().endsWith("mAh")).transform((v) => {
  if (typeof v === "string") {
    const valString = v.replace("mAh", "");
    const num = Number.parseFloat(valString);
    if (Number.isNaN(num)) {
      throw new Error("Invalid capacity");
    }
    return num;
  }
  return v;
}).describe("Battery capacity in mAh");
var expectTypesMatch = (shouldBe) => {};
expectTypesMatch("extra props b");
expectTypesMatch("missing props b");
expectTypesMatch(true);
expectTypesMatch("mismatched prop types: a");
var expectStringUnionsMatch = (shouldBe) => {};
expectStringUnionsMatch(true);
expectStringUnionsMatch('T1 has extra: "c", T2 has extra: "d"');
expectStringUnionsMatch('T1 has extra: "c"');
expectStringUnionsMatch('T2 has extra: "c"');
expectStringUnionsMatch('T1 has extra: "d", T2 has extra: "c"');
expectStringUnionsMatch(true);
var point = exports_external.object({
  x: distance2,
  y: distance2
});
var position = point;
expectTypesMatch(true);
expectTypesMatch(true);
var point3 = exports_external.object({
  x: distance2,
  y: distance2,
  z: distance2
});
var position3 = point3;
expectTypesMatch(true);
var size = exports_external.object({
  width: exports_external.number(),
  height: exports_external.number()
});
expectTypesMatch(true);
var randomId = (length3) => {
  const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  return Array.from({ length: length3 }, () => chars[Math.floor(Math.random() * chars.length)]).join("");
};
var getZodPrefixedIdWithDefault = (prefix) => {
  return exports_external.string().optional().default(() => `${prefix}_${randomId(10)}`);
};
var ninePointAnchor = exports_external.enum([
  "top_left",
  "top_center",
  "top_right",
  "center_left",
  "center",
  "center_right",
  "bottom_left",
  "bottom_center",
  "bottom_right"
]);
expectTypesMatch(true);
var supplier_name = exports_external.enum([
  "jlcpcb",
  "macrofab",
  "pcbway",
  "digikey",
  "mouser",
  "lcsc"
]);
expectTypesMatch(true);
var source_component_base = exports_external.object({
  type: exports_external.literal("source_component"),
  ftype: exports_external.string().optional(),
  source_component_id: exports_external.string(),
  name: exports_external.string(),
  manufacturer_part_number: exports_external.string().optional(),
  supplier_part_numbers: exports_external.record(supplier_name, exports_external.array(exports_external.string())).optional(),
  display_value: exports_external.string().optional(),
  are_pins_interchangeable: exports_external.boolean().optional(),
  internally_connected_source_port_ids: exports_external.array(exports_external.array(exports_external.string())).optional(),
  source_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional()
});
expectTypesMatch(true);
var source_simple_capacitor = source_component_base.extend({
  ftype: exports_external.literal("simple_capacitor"),
  capacitance,
  max_voltage_rating: voltage.optional(),
  display_capacitance: exports_external.string().optional(),
  max_decoupling_trace_length: distance2.optional()
});
expectTypesMatch(true);
var source_simple_resistor = source_component_base.extend({
  ftype: exports_external.literal("simple_resistor"),
  resistance,
  display_resistance: exports_external.string().optional()
});
expectTypesMatch(true);
var source_simple_diode = source_component_base.extend({
  ftype: exports_external.literal("simple_diode")
});
expectTypesMatch(true);
var source_simple_led = source_simple_diode.extend({
  ftype: exports_external.literal("simple_led"),
  color: exports_external.string().optional(),
  wavelength: exports_external.string().optional()
});
expectTypesMatch(true);
var source_simple_ground = source_component_base.extend({
  ftype: exports_external.literal("simple_ground")
});
expectTypesMatch(true);
var source_simple_chip = source_component_base.extend({
  ftype: exports_external.literal("simple_chip")
});
expectTypesMatch(true);
var source_simple_power_source = source_component_base.extend({
  ftype: exports_external.literal("simple_power_source"),
  voltage
});
expectTypesMatch(true);
var source_simple_fuse = source_component_base.extend({
  ftype: exports_external.literal("simple_fuse"),
  current_rating_amps: exports_external.number().describe("Nominal current in amps the fuse is rated for"),
  voltage_rating_volts: exports_external.number().describe("Voltage rating in volts, e.g. ±5V would be 5")
});
expectTypesMatch(true);
var source_simple_battery = source_component_base.extend({
  ftype: exports_external.literal("simple_battery"),
  capacity: battery_capacity
});
expectTypesMatch(true);
var source_simple_inductor = source_component_base.extend({
  ftype: exports_external.literal("simple_inductor"),
  inductance,
  max_current_rating: exports_external.number().optional()
});
expectTypesMatch(true);
var source_simple_push_button = source_component_base.extend({
  ftype: exports_external.literal("simple_push_button")
});
expectTypesMatch(true);
var source_simple_potentiometer = source_component_base.extend({
  ftype: exports_external.literal("simple_potentiometer"),
  max_resistance: resistance
});
expectTypesMatch(true);
var source_simple_crystal = source_component_base.extend({
  ftype: exports_external.literal("simple_crystal"),
  frequency: exports_external.number().describe("Frequency in Hz"),
  load_capacitance: exports_external.number().optional().describe("Load capacitance in pF")
});
expectTypesMatch(true);
var source_simple_pin_header = source_component_base.extend({
  ftype: exports_external.literal("simple_pin_header"),
  pin_count: exports_external.number(),
  gender: exports_external.enum(["male", "female"]).optional().default("male")
});
expectTypesMatch(true);
var source_simple_pinout = source_component_base.extend({
  ftype: exports_external.literal("simple_pinout")
});
expectTypesMatch(true);
var source_simple_resonator = source_component_base.extend({
  ftype: exports_external.literal("simple_resonator"),
  load_capacitance: capacitance,
  equivalent_series_resistance: resistance.optional(),
  frequency
});
expectTypesMatch(true);
var source_simple_transistor = source_component_base.extend({
  ftype: exports_external.literal("simple_transistor"),
  transistor_type: exports_external.enum(["npn", "pnp"])
});
expectTypesMatch(true);
var source_simple_test_point = source_component_base.extend({
  ftype: exports_external.literal("simple_test_point"),
  footprint_variant: exports_external.enum(["pad", "through_hole"]).optional(),
  pad_shape: exports_external.enum(["rect", "circle"]).optional(),
  pad_diameter: exports_external.union([exports_external.number(), exports_external.string()]).optional(),
  hole_diameter: exports_external.union([exports_external.number(), exports_external.string()]).optional(),
  width: exports_external.union([exports_external.number(), exports_external.string()]).optional(),
  height: exports_external.union([exports_external.number(), exports_external.string()]).optional()
});
expectTypesMatch(true);
var source_simple_mosfet = source_component_base.extend({
  ftype: exports_external.literal("simple_mosfet"),
  channel_type: exports_external.enum(["n", "p"]),
  mosfet_mode: exports_external.enum(["enhancement", "depletion"])
});
expectTypesMatch(true);
var source_simple_switch = source_component_base.extend({
  ftype: exports_external.literal("simple_switch")
});
expectTypesMatch(true);
var source_project_metadata = exports_external.object({
  type: exports_external.literal("source_project_metadata"),
  name: exports_external.string().optional(),
  software_used_string: exports_external.string().optional(),
  project_url: exports_external.string().optional(),
  created_at: timestamp.optional()
});
expectTypesMatch(true);
var source_missing_property_error = exports_external.object({
  type: exports_external.literal("source_missing_property_error"),
  source_missing_property_error_id: getZodPrefixedIdWithDefault("source_missing_property_error"),
  source_component_id: exports_external.string(),
  property_name: exports_external.string(),
  subcircuit_id: exports_external.string().optional(),
  error_type: exports_external.literal("source_missing_property_error").default("source_missing_property_error"),
  message: exports_external.string()
}).describe("The source code is missing a property");
expectTypesMatch(true);
var source_failed_to_create_component_error = exports_external.object({
  type: exports_external.literal("source_failed_to_create_component_error"),
  source_failed_to_create_component_error_id: getZodPrefixedIdWithDefault("source_failed_to_create_component_error"),
  error_type: exports_external.literal("source_failed_to_create_component_error").default("source_failed_to_create_component_error"),
  component_name: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  parent_source_component_id: exports_external.string().optional(),
  message: exports_external.string(),
  pcb_center: exports_external.object({
    x: exports_external.number().optional(),
    y: exports_external.number().optional()
  }).optional(),
  schematic_center: exports_external.object({
    x: exports_external.number().optional(),
    y: exports_external.number().optional()
  }).optional()
}).describe("Error emitted when a component fails to be constructed");
expectTypesMatch(true);
var source_trace_not_connected_error = exports_external.object({
  type: exports_external.literal("source_trace_not_connected_error"),
  source_trace_not_connected_error_id: getZodPrefixedIdWithDefault("source_trace_not_connected_error"),
  error_type: exports_external.literal("source_trace_not_connected_error").default("source_trace_not_connected_error"),
  message: exports_external.string(),
  subcircuit_id: exports_external.string().optional(),
  source_group_id: exports_external.string().optional(),
  source_trace_id: exports_external.string().optional(),
  connected_source_port_ids: exports_external.array(exports_external.string()).optional(),
  selectors_not_found: exports_external.array(exports_external.string()).optional()
}).describe("Occurs when a source trace selector does not match any ports");
expectTypesMatch(true);
var source_property_ignored_warning = exports_external.object({
  type: exports_external.literal("source_property_ignored_warning"),
  source_property_ignored_warning_id: getZodPrefixedIdWithDefault("source_property_ignored_warning"),
  source_component_id: exports_external.string(),
  property_name: exports_external.string(),
  subcircuit_id: exports_external.string().optional(),
  error_type: exports_external.literal("source_property_ignored_warning").default("source_property_ignored_warning"),
  message: exports_external.string()
}).describe("The source property was ignored");
expectTypesMatch(true);
var source_pin_missing_trace_warning = exports_external.object({
  type: exports_external.literal("source_pin_missing_trace_warning"),
  source_pin_missing_trace_warning_id: getZodPrefixedIdWithDefault("source_pin_missing_trace_warning"),
  warning_type: exports_external.literal("source_pin_missing_trace_warning").default("source_pin_missing_trace_warning"),
  message: exports_external.string(),
  source_component_id: exports_external.string(),
  source_port_id: exports_external.string(),
  subcircuit_id: exports_external.string().optional()
}).describe("Warning emitted when a source component pin is missing a trace connection");
expectTypesMatch(true);
var any_source_component = exports_external.union([
  source_simple_resistor,
  source_simple_capacitor,
  source_simple_diode,
  source_simple_led,
  source_simple_ground,
  source_simple_chip,
  source_simple_power_source,
  source_simple_battery,
  source_simple_inductor,
  source_simple_push_button,
  source_simple_potentiometer,
  source_simple_crystal,
  source_simple_pin_header,
  source_simple_pinout,
  source_simple_resonator,
  source_simple_switch,
  source_simple_transistor,
  source_simple_test_point,
  source_simple_mosfet,
  source_simple_fuse,
  source_project_metadata,
  source_missing_property_error,
  source_failed_to_create_component_error,
  source_trace_not_connected_error,
  source_property_ignored_warning,
  source_pin_missing_trace_warning
]);
expectTypesMatch(true);
var source_port = exports_external.object({
  type: exports_external.literal("source_port"),
  pin_number: exports_external.number().optional(),
  port_hints: exports_external.array(exports_external.string()).optional(),
  name: exports_external.string(),
  source_port_id: exports_external.string(),
  source_component_id: exports_external.string(),
  subcircuit_id: exports_external.string().optional(),
  subcircuit_connectivity_map_key: exports_external.string().optional()
});
expectTypesMatch(true);
var source_trace = exports_external.object({
  type: exports_external.literal("source_trace"),
  source_trace_id: exports_external.string(),
  connected_source_port_ids: exports_external.array(exports_external.string()),
  connected_source_net_ids: exports_external.array(exports_external.string()),
  subcircuit_id: exports_external.string().optional(),
  subcircuit_connectivity_map_key: exports_external.string().optional(),
  max_length: exports_external.number().optional(),
  min_trace_thickness: exports_external.number().optional(),
  display_name: exports_external.string().optional()
});
expectTypesMatch(true);
var source_group = exports_external.object({
  type: exports_external.literal("source_group"),
  source_group_id: exports_external.string(),
  subcircuit_id: exports_external.string().optional(),
  parent_subcircuit_id: exports_external.string().optional(),
  parent_source_group_id: exports_external.string().optional(),
  is_subcircuit: exports_external.boolean().optional(),
  show_as_schematic_box: exports_external.boolean().optional(),
  name: exports_external.string().optional(),
  was_automatically_named: exports_external.boolean().optional()
});
expectTypesMatch(true);
var source_net = exports_external.object({
  type: exports_external.literal("source_net"),
  source_net_id: exports_external.string(),
  name: exports_external.string(),
  member_source_group_ids: exports_external.array(exports_external.string()),
  is_power: exports_external.boolean().optional(),
  is_ground: exports_external.boolean().optional(),
  is_digital_signal: exports_external.boolean().optional(),
  is_analog_signal: exports_external.boolean().optional(),
  is_positive_voltage_source: exports_external.boolean().optional(),
  trace_width: exports_external.number().optional(),
  subcircuit_id: exports_external.string().optional(),
  subcircuit_connectivity_map_key: exports_external.string().optional()
});
expectTypesMatch(true);
var source_board = exports_external.object({
  type: exports_external.literal("source_board"),
  source_board_id: exports_external.string(),
  source_group_id: exports_external.string(),
  title: exports_external.string().optional()
}).describe("Defines a board in the source domain");
expectTypesMatch(true);
var source_pcb_ground_plane = exports_external.object({
  type: exports_external.literal("source_pcb_ground_plane"),
  source_pcb_ground_plane_id: exports_external.string(),
  source_group_id: exports_external.string(),
  source_net_id: exports_external.string(),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines a ground plane in the source domain");
expectTypesMatch(true);
var all_layers = [
  "top",
  "bottom",
  "inner1",
  "inner2",
  "inner3",
  "inner4",
  "inner5",
  "inner6"
];
var layer_string = exports_external.enum(all_layers);
var layer_ref = layer_string.or(exports_external.object({
  name: layer_string
})).transform((layer) => {
  if (typeof layer === "string") {
    return layer;
  }
  return layer.name;
});
expectTypesMatch(true);
var visible_layer = exports_external.enum(["top", "bottom"]);
var source_manually_placed_via = exports_external.object({
  type: exports_external.literal("source_manually_placed_via"),
  source_manually_placed_via_id: exports_external.string(),
  source_group_id: exports_external.string(),
  source_net_id: exports_external.string(),
  subcircuit_id: exports_external.string().optional(),
  source_trace_id: exports_external.string().optional()
}).describe("Defines a via that is manually placed in the source domain");
expectTypesMatch(true);
var schematic_box = exports_external.object({
  type: exports_external.literal("schematic_box"),
  schematic_component_id: exports_external.string().optional(),
  width: distance2,
  height: distance2,
  is_dashed: exports_external.boolean().default(false),
  x: distance2,
  y: distance2,
  subcircuit_id: exports_external.string().optional()
}).describe("Draws a box on the schematic");
expectTypesMatch(true);
var schematic_path = exports_external.object({
  type: exports_external.literal("schematic_path"),
  schematic_component_id: exports_external.string(),
  fill_color: exports_external.enum(["red", "blue"]).optional(),
  is_filled: exports_external.boolean().optional(),
  points: exports_external.array(point),
  subcircuit_id: exports_external.string().optional()
});
expectTypesMatch(true);
var schematic_pin_styles = exports_external.record(exports_external.object({
  left_margin: length.optional(),
  right_margin: length.optional(),
  top_margin: length.optional(),
  bottom_margin: length.optional()
}));
var schematic_component_port_arrangement_by_size = exports_external.object({
  left_size: exports_external.number(),
  right_size: exports_external.number(),
  top_size: exports_external.number().optional(),
  bottom_size: exports_external.number().optional()
});
expectTypesMatch(true);
var schematic_component_port_arrangement_by_sides = exports_external.object({
  left_side: exports_external.object({
    pins: exports_external.array(exports_external.number()),
    direction: exports_external.enum(["top-to-bottom", "bottom-to-top"]).optional()
  }).optional(),
  right_side: exports_external.object({
    pins: exports_external.array(exports_external.number()),
    direction: exports_external.enum(["top-to-bottom", "bottom-to-top"]).optional()
  }).optional(),
  top_side: exports_external.object({
    pins: exports_external.array(exports_external.number()),
    direction: exports_external.enum(["left-to-right", "right-to-left"]).optional()
  }).optional(),
  bottom_side: exports_external.object({
    pins: exports_external.array(exports_external.number()),
    direction: exports_external.enum(["left-to-right", "right-to-left"]).optional()
  }).optional()
});
expectTypesMatch(true);
var port_arrangement = exports_external.union([
  schematic_component_port_arrangement_by_size,
  schematic_component_port_arrangement_by_sides
]);
var schematic_component = exports_external.object({
  type: exports_external.literal("schematic_component"),
  size,
  center: point,
  source_component_id: exports_external.string().optional(),
  schematic_component_id: exports_external.string(),
  pin_spacing: length.optional(),
  pin_styles: schematic_pin_styles.optional(),
  box_width: length.optional(),
  symbol_name: exports_external.string().optional(),
  port_arrangement: port_arrangement.optional(),
  port_labels: exports_external.record(exports_external.string()).optional(),
  symbol_display_value: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  schematic_group_id: exports_external.string().optional(),
  is_schematic_group: exports_external.boolean().optional(),
  source_group_id: exports_external.string().optional(),
  is_box_with_pins: exports_external.boolean().optional().default(true)
});
expectTypesMatch(true);
var schematic_line = exports_external.object({
  type: exports_external.literal("schematic_line"),
  schematic_line_id: getZodPrefixedIdWithDefault("schematic_line"),
  schematic_component_id: exports_external.string(),
  x1: distance2,
  y1: distance2,
  x2: distance2,
  y2: distance2,
  stroke_width: distance2.nullable().optional(),
  color: exports_external.string().default("#000000"),
  is_dashed: exports_external.boolean().default(false),
  subcircuit_id: exports_external.string().optional()
}).describe("Draws a styled line on the schematic");
expectTypesMatch(true);
var schematic_rect = exports_external.object({
  type: exports_external.literal("schematic_rect"),
  schematic_rect_id: getZodPrefixedIdWithDefault("schematic_rect"),
  schematic_component_id: exports_external.string(),
  center: point,
  width: distance2,
  height: distance2,
  rotation: rotation.default(0),
  stroke_width: distance2.nullable().optional(),
  color: exports_external.string().default("#000000"),
  is_filled: exports_external.boolean().default(false),
  fill_color: exports_external.string().optional(),
  is_dashed: exports_external.boolean().default(false),
  subcircuit_id: exports_external.string().optional()
}).describe("Draws a styled rectangle on the schematic");
expectTypesMatch(true);
var schematic_circle = exports_external.object({
  type: exports_external.literal("schematic_circle"),
  schematic_circle_id: getZodPrefixedIdWithDefault("schematic_circle"),
  schematic_component_id: exports_external.string(),
  center: point,
  radius: distance2,
  stroke_width: distance2.nullable().optional(),
  color: exports_external.string().default("#000000"),
  is_filled: exports_external.boolean().default(false),
  fill_color: exports_external.string().optional(),
  is_dashed: exports_external.boolean().default(false),
  subcircuit_id: exports_external.string().optional()
}).describe("Draws a styled circle on the schematic");
expectTypesMatch(true);
var schematic_arc = exports_external.object({
  type: exports_external.literal("schematic_arc"),
  schematic_arc_id: getZodPrefixedIdWithDefault("schematic_arc"),
  schematic_component_id: exports_external.string(),
  center: point,
  radius: distance2,
  start_angle_degrees: rotation,
  end_angle_degrees: rotation,
  direction: exports_external.enum(["clockwise", "counterclockwise"]).default("counterclockwise"),
  stroke_width: distance2.nullable().optional(),
  color: exports_external.string().default("#000000"),
  is_dashed: exports_external.boolean().default(false),
  subcircuit_id: exports_external.string().optional()
}).describe("Draws a styled arc on the schematic");
expectTypesMatch(true);
var schematic_trace = exports_external.object({
  type: exports_external.literal("schematic_trace"),
  schematic_trace_id: exports_external.string(),
  source_trace_id: exports_external.string().optional(),
  junctions: exports_external.array(exports_external.object({
    x: exports_external.number(),
    y: exports_external.number()
  })),
  edges: exports_external.array(exports_external.object({
    from: exports_external.object({
      x: exports_external.number(),
      y: exports_external.number()
    }),
    to: exports_external.object({
      x: exports_external.number(),
      y: exports_external.number()
    }),
    is_crossing: exports_external.boolean().optional(),
    from_schematic_port_id: exports_external.string().optional(),
    to_schematic_port_id: exports_external.string().optional()
  })),
  subcircuit_id: exports_external.string().optional(),
  subcircuit_connectivity_map_key: exports_external.string().optional()
});
expectTypesMatch(true);
var fivePointAnchor = exports_external.enum([
  "center",
  "left",
  "right",
  "top",
  "bottom"
]);
expectTypesMatch(true);
var schematic_text = exports_external.object({
  type: exports_external.literal("schematic_text"),
  schematic_component_id: exports_external.string().optional(),
  schematic_text_id: exports_external.string(),
  text: exports_external.string(),
  font_size: exports_external.number().default(0.18),
  position: exports_external.object({
    x: distance2,
    y: distance2
  }),
  rotation: exports_external.number().default(0),
  anchor: exports_external.union([fivePointAnchor.describe("legacy"), ninePointAnchor]).default("center"),
  color: exports_external.string().default("#000000"),
  subcircuit_id: exports_external.string().optional()
});
expectTypesMatch(true);
var schematic_port = exports_external.object({
  type: exports_external.literal("schematic_port"),
  schematic_port_id: exports_external.string(),
  source_port_id: exports_external.string(),
  schematic_component_id: exports_external.string().optional(),
  center: point,
  facing_direction: exports_external.enum(["up", "down", "left", "right"]).optional(),
  distance_from_component_edge: exports_external.number().optional(),
  side_of_component: exports_external.enum(["top", "bottom", "left", "right"]).optional(),
  true_ccw_index: exports_external.number().optional(),
  pin_number: exports_external.number().optional(),
  display_pin_label: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  is_connected: exports_external.boolean().optional(),
  has_input_arrow: exports_external.boolean().optional(),
  has_output_arrow: exports_external.boolean().optional()
}).describe("Defines a port on a schematic component");
expectTypesMatch(true);
var schematic_net_label = exports_external.object({
  type: exports_external.literal("schematic_net_label"),
  schematic_net_label_id: getZodPrefixedIdWithDefault("schematic_net_label"),
  schematic_trace_id: exports_external.string().optional(),
  source_trace_id: exports_external.string().optional(),
  source_net_id: exports_external.string(),
  center: point,
  anchor_position: point.optional(),
  anchor_side: exports_external.enum(["top", "bottom", "left", "right"]),
  text: exports_external.string(),
  symbol_name: exports_external.string().optional(),
  is_movable: exports_external.boolean().optional(),
  subcircuit_id: exports_external.string().optional()
});
expectTypesMatch(true);
var schematic_error = exports_external.object({
  type: exports_external.literal("schematic_error"),
  schematic_error_id: exports_external.string(),
  error_type: exports_external.literal("schematic_port_not_found").default("schematic_port_not_found"),
  message: exports_external.string(),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines a schematic error on the schematic");
expectTypesMatch(true);
var schematic_layout_error = exports_external.object({
  type: exports_external.literal("schematic_layout_error"),
  schematic_layout_error_id: getZodPrefixedIdWithDefault("schematic_layout_error"),
  error_type: exports_external.literal("schematic_layout_error").default("schematic_layout_error"),
  message: exports_external.string(),
  source_group_id: exports_external.string(),
  schematic_group_id: exports_external.string(),
  subcircuit_id: exports_external.string().optional()
}).describe("Error emitted when schematic layout fails for a group");
expectTypesMatch(true);
var schematic_debug_object_base = exports_external.object({
  type: exports_external.literal("schematic_debug_object"),
  label: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional()
});
var schematic_debug_rect = schematic_debug_object_base.extend({
  shape: exports_external.literal("rect"),
  center: point,
  size
});
var schematic_debug_line = schematic_debug_object_base.extend({
  shape: exports_external.literal("line"),
  start: point,
  end: point
});
var schematic_debug_point = schematic_debug_object_base.extend({
  shape: exports_external.literal("point"),
  center: point
});
var schematic_debug_object = exports_external.discriminatedUnion("shape", [
  schematic_debug_rect,
  schematic_debug_line,
  schematic_debug_point
]);
expectTypesMatch(true);
var schematic_voltage_probe = exports_external.object({
  type: exports_external.literal("schematic_voltage_probe"),
  schematic_voltage_probe_id: exports_external.string(),
  position: point,
  schematic_trace_id: exports_external.string(),
  voltage: voltage.optional(),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines a voltage probe measurement point on a schematic trace");
expectTypesMatch(true);
var schematic_manual_edit_conflict_warning = exports_external.object({
  type: exports_external.literal("schematic_manual_edit_conflict_warning"),
  schematic_manual_edit_conflict_warning_id: getZodPrefixedIdWithDefault("schematic_manual_edit_conflict_warning"),
  warning_type: exports_external.literal("schematic_manual_edit_conflict_warning").default("schematic_manual_edit_conflict_warning"),
  message: exports_external.string(),
  schematic_component_id: exports_external.string(),
  schematic_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  source_component_id: exports_external.string()
}).describe("Warning emitted when a component has both manual placement and explicit schX/schY coordinates");
expectTypesMatch(true);
var schematic_group = exports_external.object({
  type: exports_external.literal("schematic_group"),
  schematic_group_id: getZodPrefixedIdWithDefault("schematic_group"),
  source_group_id: exports_external.string(),
  is_subcircuit: exports_external.boolean().optional(),
  subcircuit_id: exports_external.string().optional(),
  width: length,
  height: length,
  center: point,
  schematic_component_ids: exports_external.array(exports_external.string()),
  show_as_schematic_box: exports_external.boolean().optional(),
  name: exports_external.string().optional(),
  description: exports_external.string().optional()
}).describe("Defines a group of components on the schematic");
expectTypesMatch(true);
var schematic_table = exports_external.object({
  type: exports_external.literal("schematic_table"),
  schematic_table_id: getZodPrefixedIdWithDefault("schematic_table"),
  anchor_position: point,
  column_widths: exports_external.array(distance2),
  row_heights: exports_external.array(distance2),
  cell_padding: distance2.optional(),
  border_width: distance2.optional(),
  subcircuit_id: exports_external.string().optional(),
  schematic_component_id: exports_external.string().optional(),
  anchor: ninePointAnchor.optional()
}).describe("Defines a table on the schematic");
expectTypesMatch(true);
var schematic_table_cell = exports_external.object({
  type: exports_external.literal("schematic_table_cell"),
  schematic_table_cell_id: getZodPrefixedIdWithDefault("schematic_table_cell"),
  schematic_table_id: exports_external.string(),
  start_row_index: exports_external.number(),
  end_row_index: exports_external.number(),
  start_column_index: exports_external.number(),
  end_column_index: exports_external.number(),
  text: exports_external.string().optional(),
  center: point,
  width: distance2,
  height: distance2,
  horizontal_align: exports_external.enum(["left", "center", "right"]).optional(),
  vertical_align: exports_external.enum(["top", "middle", "bottom"]).optional(),
  font_size: distance2.optional(),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines a cell within a schematic_table");
expectTypesMatch(true);
var point_with_bulge = exports_external.object({
  x: distance2,
  y: distance2,
  bulge: exports_external.number().optional()
});
expectTypesMatch(true);
var ring = exports_external.object({
  vertices: exports_external.array(point_with_bulge)
});
expectTypesMatch(true);
var brep_shape = exports_external.object({
  outer_ring: ring,
  inner_rings: exports_external.array(ring).default([])
});
expectTypesMatch(true);
var pcb_route_hint = exports_external.object({
  x: distance2,
  y: distance2,
  via: exports_external.boolean().optional(),
  via_to_layer: layer_ref.optional()
});
var pcb_route_hints = exports_external.array(pcb_route_hint);
expectTypesMatch(true);
expectTypesMatch(true);
var route_hint_point = exports_external.object({
  x: distance2,
  y: distance2,
  via: exports_external.boolean().optional(),
  to_layer: layer_ref.optional(),
  trace_width: distance2.optional()
});
expectTypesMatch(true);
var pcb_component = exports_external.object({
  type: exports_external.literal("pcb_component"),
  pcb_component_id: getZodPrefixedIdWithDefault("pcb_component"),
  source_component_id: exports_external.string(),
  center: point,
  layer: layer_ref,
  rotation,
  width: length,
  height: length,
  do_not_place: exports_external.boolean().optional(),
  subcircuit_id: exports_external.string().optional(),
  pcb_group_id: exports_external.string().optional(),
  obstructs_within_bounds: exports_external.boolean().default(true).describe("Does this component take up all the space within its bounds on a layer. This is generally true except for when separated pin headers are being represented by a single component (in which case, chips can be placed between the pin headers) or for tall modules where chips fit underneath")
}).describe("Defines a component on the PCB");
expectTypesMatch(true);
var pcb_hole_circle_or_square = exports_external.object({
  type: exports_external.literal("pcb_hole"),
  pcb_hole_id: getZodPrefixedIdWithDefault("pcb_hole"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  hole_shape: exports_external.enum(["circle", "square"]),
  hole_diameter: exports_external.number(),
  x: distance2,
  y: distance2
});
var pcb_hole_circle_or_square_shape = pcb_hole_circle_or_square.describe("Defines a circular or square hole on the PCB");
expectTypesMatch(true);
var pcb_hole_oval = exports_external.object({
  type: exports_external.literal("pcb_hole"),
  pcb_hole_id: getZodPrefixedIdWithDefault("pcb_hole"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  hole_shape: exports_external.literal("oval"),
  hole_width: exports_external.number(),
  hole_height: exports_external.number(),
  x: distance2,
  y: distance2
});
var pcb_hole_oval_shape = pcb_hole_oval.describe("Defines an oval hole on the PCB");
expectTypesMatch(true);
var pcb_hole_pill = exports_external.object({
  type: exports_external.literal("pcb_hole"),
  pcb_hole_id: getZodPrefixedIdWithDefault("pcb_hole"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  hole_shape: exports_external.literal("pill"),
  hole_width: exports_external.number(),
  hole_height: exports_external.number(),
  x: distance2,
  y: distance2
});
var pcb_hole_pill_shape = pcb_hole_pill.describe("Defines a pill-shaped hole on the PCB");
expectTypesMatch(true);
var pcb_hole_rotated_pill = exports_external.object({
  type: exports_external.literal("pcb_hole"),
  pcb_hole_id: getZodPrefixedIdWithDefault("pcb_hole"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  hole_shape: exports_external.literal("rotated_pill"),
  hole_width: exports_external.number(),
  hole_height: exports_external.number(),
  x: distance2,
  y: distance2,
  ccw_rotation: rotation
});
var pcb_hole_rotated_pill_shape = pcb_hole_rotated_pill.describe("Defines a rotated pill-shaped hole on the PCB");
expectTypesMatch(true);
var pcb_hole = pcb_hole_circle_or_square.or(pcb_hole_oval).or(pcb_hole_pill).or(pcb_hole_rotated_pill);
var pcb_plated_hole_circle = exports_external.object({
  type: exports_external.literal("pcb_plated_hole"),
  shape: exports_external.literal("circle"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  outer_diameter: exports_external.number(),
  hole_diameter: exports_external.number(),
  x: distance2,
  y: distance2,
  layers: exports_external.array(layer_ref),
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  pcb_plated_hole_id: getZodPrefixedIdWithDefault("pcb_plated_hole")
});
var pcb_plated_hole_oval = exports_external.object({
  type: exports_external.literal("pcb_plated_hole"),
  shape: exports_external.enum(["oval", "pill"]),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  outer_width: exports_external.number(),
  outer_height: exports_external.number(),
  hole_width: exports_external.number(),
  hole_height: exports_external.number(),
  x: distance2,
  y: distance2,
  ccw_rotation: rotation,
  layers: exports_external.array(layer_ref),
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  pcb_plated_hole_id: getZodPrefixedIdWithDefault("pcb_plated_hole")
});
var pcb_circular_hole_with_rect_pad = exports_external.object({
  type: exports_external.literal("pcb_plated_hole"),
  shape: exports_external.literal("circular_hole_with_rect_pad"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  hole_shape: exports_external.literal("circle"),
  pad_shape: exports_external.literal("rect"),
  hole_diameter: exports_external.number(),
  rect_pad_width: exports_external.number(),
  rect_pad_height: exports_external.number(),
  rect_border_radius: exports_external.number().optional(),
  hole_offset_x: distance2.default(0),
  hole_offset_y: distance2.default(0),
  x: distance2,
  y: distance2,
  layers: exports_external.array(layer_ref),
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  pcb_plated_hole_id: getZodPrefixedIdWithDefault("pcb_plated_hole")
});
var pcb_pill_hole_with_rect_pad = exports_external.object({
  type: exports_external.literal("pcb_plated_hole"),
  shape: exports_external.literal("pill_hole_with_rect_pad"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  hole_shape: exports_external.literal("pill"),
  pad_shape: exports_external.literal("rect"),
  hole_width: exports_external.number(),
  hole_height: exports_external.number(),
  rect_pad_width: exports_external.number(),
  rect_pad_height: exports_external.number(),
  rect_border_radius: exports_external.number().optional(),
  hole_offset_x: distance2.default(0),
  hole_offset_y: distance2.default(0),
  x: distance2,
  y: distance2,
  layers: exports_external.array(layer_ref),
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  pcb_plated_hole_id: getZodPrefixedIdWithDefault("pcb_plated_hole")
});
var pcb_rotated_pill_hole_with_rect_pad = exports_external.object({
  type: exports_external.literal("pcb_plated_hole"),
  shape: exports_external.literal("rotated_pill_hole_with_rect_pad"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  hole_shape: exports_external.literal("rotated_pill"),
  pad_shape: exports_external.literal("rect"),
  hole_width: exports_external.number(),
  hole_height: exports_external.number(),
  hole_ccw_rotation: rotation,
  rect_pad_width: exports_external.number(),
  rect_pad_height: exports_external.number(),
  rect_border_radius: exports_external.number().optional(),
  rect_ccw_rotation: rotation,
  hole_offset_x: distance2.default(0),
  hole_offset_y: distance2.default(0),
  x: distance2,
  y: distance2,
  layers: exports_external.array(layer_ref),
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  pcb_plated_hole_id: getZodPrefixedIdWithDefault("pcb_plated_hole")
});
var pcb_plated_hole = exports_external.union([
  pcb_plated_hole_circle,
  pcb_plated_hole_oval,
  pcb_circular_hole_with_rect_pad,
  pcb_pill_hole_with_rect_pad,
  pcb_rotated_pill_hole_with_rect_pad
]);
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
var pcb_port = exports_external.object({
  type: exports_external.literal("pcb_port"),
  pcb_port_id: getZodPrefixedIdWithDefault("pcb_port"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  source_port_id: exports_external.string(),
  pcb_component_id: exports_external.string(),
  x: distance2,
  y: distance2,
  layers: exports_external.array(layer_ref),
  is_board_pinout: exports_external.boolean().optional()
}).describe("Defines a port on the PCB");
expectTypesMatch(true);
var pcb_smtpad_circle = exports_external.object({
  type: exports_external.literal("pcb_smtpad"),
  shape: exports_external.literal("circle"),
  pcb_smtpad_id: getZodPrefixedIdWithDefault("pcb_smtpad"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  radius: exports_external.number(),
  layer: layer_ref,
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  is_covered_with_solder_mask: exports_external.boolean().optional()
});
var pcb_smtpad_rect = exports_external.object({
  type: exports_external.literal("pcb_smtpad"),
  shape: exports_external.literal("rect"),
  pcb_smtpad_id: getZodPrefixedIdWithDefault("pcb_smtpad"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  width: exports_external.number(),
  height: exports_external.number(),
  rect_border_radius: exports_external.number().optional(),
  layer: layer_ref,
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  is_covered_with_solder_mask: exports_external.boolean().optional()
});
var pcb_smtpad_rotated_rect = exports_external.object({
  type: exports_external.literal("pcb_smtpad"),
  shape: exports_external.literal("rotated_rect"),
  pcb_smtpad_id: getZodPrefixedIdWithDefault("pcb_smtpad"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  width: exports_external.number(),
  height: exports_external.number(),
  rect_border_radius: exports_external.number().optional(),
  ccw_rotation: rotation,
  layer: layer_ref,
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  is_covered_with_solder_mask: exports_external.boolean().optional()
});
var pcb_smtpad_pill = exports_external.object({
  type: exports_external.literal("pcb_smtpad"),
  shape: exports_external.literal("pill"),
  pcb_smtpad_id: getZodPrefixedIdWithDefault("pcb_smtpad"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  width: exports_external.number(),
  height: exports_external.number(),
  radius: exports_external.number(),
  layer: layer_ref,
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  is_covered_with_solder_mask: exports_external.boolean().optional()
});
var pcb_smtpad_rotated_pill = exports_external.object({
  type: exports_external.literal("pcb_smtpad"),
  shape: exports_external.literal("rotated_pill"),
  pcb_smtpad_id: getZodPrefixedIdWithDefault("pcb_smtpad"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  width: exports_external.number(),
  height: exports_external.number(),
  radius: exports_external.number(),
  ccw_rotation: rotation,
  layer: layer_ref,
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  is_covered_with_solder_mask: exports_external.boolean().optional()
});
var pcb_smtpad_polygon = exports_external.object({
  type: exports_external.literal("pcb_smtpad"),
  shape: exports_external.literal("polygon"),
  pcb_smtpad_id: getZodPrefixedIdWithDefault("pcb_smtpad"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  points: exports_external.array(point),
  layer: layer_ref,
  port_hints: exports_external.array(exports_external.string()).optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_port_id: exports_external.string().optional(),
  is_covered_with_solder_mask: exports_external.boolean().optional()
});
var pcb_smtpad = exports_external.discriminatedUnion("shape", [
  pcb_smtpad_circle,
  pcb_smtpad_rect,
  pcb_smtpad_rotated_rect,
  pcb_smtpad_rotated_pill,
  pcb_smtpad_pill,
  pcb_smtpad_polygon
]).describe("Defines an SMT pad on the PCB");
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
var pcb_solder_paste_circle = exports_external.object({
  type: exports_external.literal("pcb_solder_paste"),
  shape: exports_external.literal("circle"),
  pcb_solder_paste_id: getZodPrefixedIdWithDefault("pcb_solder_paste"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  radius: exports_external.number(),
  layer: layer_ref,
  pcb_component_id: exports_external.string().optional(),
  pcb_smtpad_id: exports_external.string().optional()
});
var pcb_solder_paste_rect = exports_external.object({
  type: exports_external.literal("pcb_solder_paste"),
  shape: exports_external.literal("rect"),
  pcb_solder_paste_id: getZodPrefixedIdWithDefault("pcb_solder_paste"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  width: exports_external.number(),
  height: exports_external.number(),
  layer: layer_ref,
  pcb_component_id: exports_external.string().optional(),
  pcb_smtpad_id: exports_external.string().optional()
});
var pcb_solder_paste_pill = exports_external.object({
  type: exports_external.literal("pcb_solder_paste"),
  shape: exports_external.literal("pill"),
  pcb_solder_paste_id: getZodPrefixedIdWithDefault("pcb_solder_paste"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  width: exports_external.number(),
  height: exports_external.number(),
  radius: exports_external.number(),
  layer: layer_ref,
  pcb_component_id: exports_external.string().optional(),
  pcb_smtpad_id: exports_external.string().optional()
});
var pcb_solder_paste_rotated_rect = exports_external.object({
  type: exports_external.literal("pcb_solder_paste"),
  shape: exports_external.literal("rotated_rect"),
  pcb_solder_paste_id: getZodPrefixedIdWithDefault("pcb_solder_paste"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  width: exports_external.number(),
  height: exports_external.number(),
  ccw_rotation: distance2,
  layer: layer_ref,
  pcb_component_id: exports_external.string().optional(),
  pcb_smtpad_id: exports_external.string().optional()
});
var pcb_solder_paste_oval = exports_external.object({
  type: exports_external.literal("pcb_solder_paste"),
  shape: exports_external.literal("oval"),
  pcb_solder_paste_id: getZodPrefixedIdWithDefault("pcb_solder_paste"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  width: exports_external.number(),
  height: exports_external.number(),
  layer: layer_ref,
  pcb_component_id: exports_external.string().optional(),
  pcb_smtpad_id: exports_external.string().optional()
});
var pcb_solder_paste = exports_external.union([
  pcb_solder_paste_circle,
  pcb_solder_paste_rect,
  pcb_solder_paste_pill,
  pcb_solder_paste_rotated_rect,
  pcb_solder_paste_oval
]).describe("Defines solderpaste on the PCB");
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
var pcb_text = exports_external.object({
  type: exports_external.literal("pcb_text"),
  pcb_text_id: getZodPrefixedIdWithDefault("pcb_text"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  text: exports_external.string(),
  center: point,
  layer: layer_ref,
  width: length,
  height: length,
  lines: exports_external.number(),
  align: exports_external.enum(["bottom-left"])
}).describe("Defines text on the PCB");
expectTypesMatch(true);
var pcb_trace_route_point_wire = exports_external.object({
  route_type: exports_external.literal("wire"),
  x: distance2,
  y: distance2,
  width: distance2,
  start_pcb_port_id: exports_external.string().optional(),
  end_pcb_port_id: exports_external.string().optional(),
  layer: layer_ref
});
var pcb_trace_route_point_via = exports_external.object({
  route_type: exports_external.literal("via"),
  x: distance2,
  y: distance2,
  hole_diameter: distance2.optional(),
  outer_diameter: distance2.optional(),
  from_layer: exports_external.string(),
  to_layer: exports_external.string()
});
var pcb_trace_route_point = exports_external.union([
  pcb_trace_route_point_wire,
  pcb_trace_route_point_via
]);
var pcb_trace = exports_external.object({
  type: exports_external.literal("pcb_trace"),
  source_trace_id: exports_external.string().optional(),
  pcb_component_id: exports_external.string().optional(),
  pcb_trace_id: getZodPrefixedIdWithDefault("pcb_trace"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  route_thickness_mode: exports_external.enum(["constant", "interpolated"]).default("constant").optional(),
  route_order_index: exports_external.number().optional(),
  should_round_corners: exports_external.boolean().optional(),
  trace_length: exports_external.number().optional(),
  highlight_color: exports_external.string().optional(),
  route: exports_external.array(pcb_trace_route_point)
}).describe("Defines a trace on the PCB");
expectTypesMatch(true);
expectTypesMatch(true);
var pcb_trace_error = exports_external.object({
  type: exports_external.literal("pcb_trace_error"),
  pcb_trace_error_id: getZodPrefixedIdWithDefault("pcb_trace_error"),
  error_type: exports_external.literal("pcb_trace_error").default("pcb_trace_error"),
  message: exports_external.string(),
  center: point.optional(),
  pcb_trace_id: exports_external.string(),
  source_trace_id: exports_external.string(),
  pcb_component_ids: exports_external.array(exports_external.string()),
  pcb_port_ids: exports_external.array(exports_external.string()),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines a trace error on the PCB");
expectTypesMatch(true);
var pcb_trace_missing_error = exports_external.object({
  type: exports_external.literal("pcb_trace_missing_error"),
  pcb_trace_missing_error_id: getZodPrefixedIdWithDefault("pcb_trace_missing_error"),
  error_type: exports_external.literal("pcb_trace_missing_error").default("pcb_trace_missing_error"),
  message: exports_external.string(),
  center: point.optional(),
  source_trace_id: exports_external.string(),
  pcb_component_ids: exports_external.array(exports_external.string()),
  pcb_port_ids: exports_external.array(exports_external.string()),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines an error when a source trace has no corresponding PCB trace");
expectTypesMatch(true);
var pcb_port_not_matched_error = exports_external.object({
  type: exports_external.literal("pcb_port_not_matched_error"),
  pcb_error_id: getZodPrefixedIdWithDefault("pcb_error"),
  error_type: exports_external.literal("pcb_port_not_matched_error").default("pcb_port_not_matched_error"),
  message: exports_external.string(),
  pcb_component_ids: exports_external.array(exports_external.string()),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines a trace error on the PCB where a port is not matched");
expectTypesMatch(true);
var pcb_port_not_connected_error = exports_external.object({
  type: exports_external.literal("pcb_port_not_connected_error"),
  pcb_port_not_connected_error_id: getZodPrefixedIdWithDefault("pcb_port_not_connected_error"),
  error_type: exports_external.literal("pcb_port_not_connected_error").default("pcb_port_not_connected_error"),
  message: exports_external.string(),
  pcb_port_ids: exports_external.array(exports_external.string()),
  pcb_component_ids: exports_external.array(exports_external.string()),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines an error when a pcb port is not connected to any trace");
expectTypesMatch(true);
var pcb_net = exports_external.object({
  type: exports_external.literal("pcb_net"),
  pcb_net_id: getZodPrefixedIdWithDefault("pcb_net"),
  source_net_id: exports_external.string().optional(),
  highlight_color: exports_external.string().optional()
}).describe("Defines a net on the PCB");
expectTypesMatch(true);
var pcb_via = exports_external.object({
  type: exports_external.literal("pcb_via"),
  pcb_via_id: getZodPrefixedIdWithDefault("pcb_via"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x: distance2,
  y: distance2,
  outer_diameter: distance2.default("0.6mm"),
  hole_diameter: distance2.default("0.25mm"),
  from_layer: layer_ref.optional(),
  to_layer: layer_ref.optional(),
  layers: exports_external.array(layer_ref),
  pcb_trace_id: exports_external.string().optional()
}).describe("Defines a via on the PCB");
expectTypesMatch(true);
var pcb_board = exports_external.object({
  type: exports_external.literal("pcb_board"),
  pcb_board_id: getZodPrefixedIdWithDefault("pcb_board"),
  is_subcircuit: exports_external.boolean().optional(),
  subcircuit_id: exports_external.string().optional(),
  width: length,
  height: length,
  center: point,
  thickness: length.optional().default(1.4),
  num_layers: exports_external.number().optional().default(4),
  outline: exports_external.array(point).optional(),
  material: exports_external.enum(["fr4", "fr1"]).default("fr4")
}).describe("Defines the board outline of the PCB");
expectTypesMatch(true);
var pcb_placement_error = exports_external.object({
  type: exports_external.literal("pcb_placement_error"),
  pcb_placement_error_id: getZodPrefixedIdWithDefault("pcb_placement_error"),
  error_type: exports_external.literal("pcb_placement_error").default("pcb_placement_error"),
  message: exports_external.string(),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines a placement error on the PCB");
expectTypesMatch(true);
var pcb_trace_hint = exports_external.object({
  type: exports_external.literal("pcb_trace_hint"),
  pcb_trace_hint_id: getZodPrefixedIdWithDefault("pcb_trace_hint"),
  pcb_port_id: exports_external.string(),
  pcb_component_id: exports_external.string(),
  route: exports_external.array(route_hint_point),
  subcircuit_id: exports_external.string().optional()
}).describe("A hint that can be used during generation of a PCB trace");
expectTypesMatch(true);
var pcb_silkscreen_line = exports_external.object({
  type: exports_external.literal("pcb_silkscreen_line"),
  pcb_silkscreen_line_id: getZodPrefixedIdWithDefault("pcb_silkscreen_line"),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  stroke_width: distance2.default("0.1mm"),
  x1: distance2,
  y1: distance2,
  x2: distance2,
  y2: distance2,
  layer: visible_layer
}).describe("Defines a silkscreen line on the PCB");
expectTypesMatch(true);
var pcb_silkscreen_path = exports_external.object({
  type: exports_external.literal("pcb_silkscreen_path"),
  pcb_silkscreen_path_id: getZodPrefixedIdWithDefault("pcb_silkscreen_path"),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  layer: visible_layer,
  route: exports_external.array(point),
  stroke_width: length
}).describe("Defines a silkscreen path on the PCB");
expectTypesMatch(true);
var pcb_silkscreen_text = exports_external.object({
  type: exports_external.literal("pcb_silkscreen_text"),
  pcb_silkscreen_text_id: getZodPrefixedIdWithDefault("pcb_silkscreen_text"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  font: exports_external.literal("tscircuit2024").default("tscircuit2024"),
  font_size: distance2.default("0.2mm"),
  pcb_component_id: exports_external.string(),
  text: exports_external.string(),
  is_knockout: exports_external.boolean().default(false).optional(),
  knockout_padding: exports_external.object({
    left: length,
    top: length,
    bottom: length,
    right: length
  }).default({
    left: "0.2mm",
    top: "0.2mm",
    bottom: "0.2mm",
    right: "0.2mm"
  }).optional(),
  ccw_rotation: exports_external.number().optional(),
  layer: layer_ref,
  is_mirrored: exports_external.boolean().default(false).optional(),
  anchor_position: point.default({ x: 0, y: 0 }),
  anchor_alignment: ninePointAnchor.default("center")
}).describe("Defines silkscreen text on the PCB");
expectTypesMatch(true);
var pcb_silkscreen_rect = exports_external.object({
  type: exports_external.literal("pcb_silkscreen_rect"),
  pcb_silkscreen_rect_id: getZodPrefixedIdWithDefault("pcb_silkscreen_rect"),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  center: point,
  width: length,
  height: length,
  layer: layer_ref,
  stroke_width: length.default("1mm"),
  is_filled: exports_external.boolean().default(true).optional(),
  has_stroke: exports_external.boolean().optional(),
  is_stroke_dashed: exports_external.boolean().optional()
}).describe("Defines a silkscreen rect on the PCB");
expectTypesMatch(true);
var pcb_silkscreen_circle = exports_external.object({
  type: exports_external.literal("pcb_silkscreen_circle"),
  pcb_silkscreen_circle_id: getZodPrefixedIdWithDefault("pcb_silkscreen_circle"),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  center: point,
  radius: length,
  layer: visible_layer,
  stroke_width: length.default("1mm")
}).describe("Defines a silkscreen circle on the PCB");
expectTypesMatch(true);
var pcb_silkscreen_oval = exports_external.object({
  type: exports_external.literal("pcb_silkscreen_oval"),
  pcb_silkscreen_oval_id: getZodPrefixedIdWithDefault("pcb_silkscreen_oval"),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  center: point,
  radius_x: distance2,
  radius_y: distance2,
  layer: visible_layer
}).describe("Defines a silkscreen oval on the PCB");
expectTypesMatch(true);
var pcb_fabrication_note_text = exports_external.object({
  type: exports_external.literal("pcb_fabrication_note_text"),
  pcb_fabrication_note_text_id: getZodPrefixedIdWithDefault("pcb_fabrication_note_text"),
  subcircuit_id: exports_external.string().optional(),
  pcb_group_id: exports_external.string().optional(),
  font: exports_external.literal("tscircuit2024").default("tscircuit2024"),
  font_size: distance2.default("1mm"),
  pcb_component_id: exports_external.string(),
  text: exports_external.string(),
  layer: visible_layer,
  anchor_position: point.default({ x: 0, y: 0 }),
  anchor_alignment: exports_external.enum(["center", "top_left", "top_right", "bottom_left", "bottom_right"]).default("center"),
  color: exports_external.string().optional()
}).describe("Defines a fabrication note in text on the PCB, useful for leaving notes for assemblers or fabricators");
expectTypesMatch(true);
var pcb_fabrication_note_path = exports_external.object({
  type: exports_external.literal("pcb_fabrication_note_path"),
  pcb_fabrication_note_path_id: getZodPrefixedIdWithDefault("pcb_fabrication_note_path"),
  pcb_component_id: exports_external.string(),
  subcircuit_id: exports_external.string().optional(),
  layer: layer_ref,
  route: exports_external.array(point),
  stroke_width: length,
  color: exports_external.string().optional()
}).describe("Defines a fabrication path on the PCB for fabricators or assemblers");
expectTypesMatch(true);
var pcb_fabrication_note_rect = exports_external.object({
  type: exports_external.literal("pcb_fabrication_note_rect"),
  pcb_fabrication_note_rect_id: getZodPrefixedIdWithDefault("pcb_fabrication_note_rect"),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  center: point,
  width: length,
  height: length,
  layer: visible_layer,
  stroke_width: length.default("0.1mm"),
  is_filled: exports_external.boolean().optional(),
  has_stroke: exports_external.boolean().optional(),
  is_stroke_dashed: exports_external.boolean().optional(),
  color: exports_external.string().optional()
}).describe("Defines a fabrication note rectangle on the PCB");
expectTypesMatch(true);
var pcb_fabrication_note_dimension = exports_external.object({
  type: exports_external.literal("pcb_fabrication_note_dimension"),
  pcb_fabrication_note_dimension_id: getZodPrefixedIdWithDefault("pcb_fabrication_note_dimension"),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  layer: visible_layer,
  from: point.or(exports_external.string()),
  to: point.or(exports_external.string()),
  text: exports_external.string().optional(),
  offset: length.optional(),
  font: exports_external.literal("tscircuit2024").default("tscircuit2024"),
  font_size: length.default("1mm"),
  color: exports_external.string().optional(),
  arrow_size: length.default("1mm")
}).describe("Defines a measurement annotation within PCB fabrication notes");
expectTypesMatch(true);
var pcb_note_text = exports_external.object({
  type: exports_external.literal("pcb_note_text"),
  pcb_note_text_id: getZodPrefixedIdWithDefault("pcb_note_text"),
  pcb_component_id: exports_external.string().optional(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  font: exports_external.literal("tscircuit2024").default("tscircuit2024"),
  font_size: distance2.default("1mm"),
  text: exports_external.string(),
  anchor_position: point.default({ x: 0, y: 0 }),
  anchor_alignment: exports_external.enum(["center", "top_left", "top_right", "bottom_left", "bottom_right"]).default("center"),
  color: exports_external.string().optional()
}).describe("Defines a documentation note in text on the PCB");
expectTypesMatch(true);
var pcb_note_rect = exports_external.object({
  type: exports_external.literal("pcb_note_rect"),
  pcb_note_rect_id: getZodPrefixedIdWithDefault("pcb_note_rect"),
  pcb_component_id: exports_external.string().optional(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  center: point,
  width: length,
  height: length,
  stroke_width: length.default("0.1mm"),
  is_filled: exports_external.boolean().optional(),
  has_stroke: exports_external.boolean().optional(),
  is_stroke_dashed: exports_external.boolean().optional(),
  color: exports_external.string().optional()
}).describe("Defines a rectangular documentation note on the PCB");
expectTypesMatch(true);
var pcb_note_path = exports_external.object({
  type: exports_external.literal("pcb_note_path"),
  pcb_note_path_id: getZodPrefixedIdWithDefault("pcb_note_path"),
  pcb_component_id: exports_external.string().optional(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  route: exports_external.array(point),
  stroke_width: length.default("0.1mm"),
  color: exports_external.string().optional()
}).describe("Defines a polyline documentation note on the PCB");
expectTypesMatch(true);
var pcb_note_line = exports_external.object({
  type: exports_external.literal("pcb_note_line"),
  pcb_note_line_id: getZodPrefixedIdWithDefault("pcb_note_line"),
  pcb_component_id: exports_external.string().optional(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  x1: distance2,
  y1: distance2,
  x2: distance2,
  y2: distance2,
  stroke_width: distance2.default("0.1mm"),
  color: exports_external.string().optional(),
  is_dashed: exports_external.boolean().optional()
}).describe("Defines a straight documentation note line on the PCB");
expectTypesMatch(true);
var pcb_note_dimension = exports_external.object({
  type: exports_external.literal("pcb_note_dimension"),
  pcb_note_dimension_id: getZodPrefixedIdWithDefault("pcb_note_dimension"),
  pcb_component_id: exports_external.string().optional(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  from: point,
  to: point,
  text: exports_external.string().optional(),
  font: exports_external.literal("tscircuit2024").default("tscircuit2024"),
  font_size: length.default("1mm"),
  color: exports_external.string().optional(),
  arrow_size: length.default("1mm")
}).describe("Defines a measurement annotation within PCB documentation notes");
expectTypesMatch(true);
var pcb_footprint_overlap_error = exports_external.object({
  type: exports_external.literal("pcb_footprint_overlap_error"),
  pcb_error_id: getZodPrefixedIdWithDefault("pcb_error"),
  error_type: exports_external.literal("pcb_footprint_overlap_error").default("pcb_footprint_overlap_error"),
  message: exports_external.string(),
  pcb_smtpad_ids: exports_external.array(exports_external.string()).optional(),
  pcb_plated_hole_ids: exports_external.array(exports_external.string()).optional(),
  pcb_hole_ids: exports_external.array(exports_external.string()).optional(),
  pcb_keepout_ids: exports_external.array(exports_external.string()).optional()
}).describe("Error emitted when a pcb footprint overlaps with another element");
expectTypesMatch(true);
var pcb_keepout = exports_external.object({
  type: exports_external.literal("pcb_keepout"),
  shape: exports_external.literal("rect"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  center: point,
  width: distance2,
  height: distance2,
  pcb_keepout_id: exports_external.string(),
  layers: exports_external.array(exports_external.string()),
  description: exports_external.string().optional()
}).or(exports_external.object({
  type: exports_external.literal("pcb_keepout"),
  shape: exports_external.literal("circle"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  center: point,
  radius: distance2,
  pcb_keepout_id: exports_external.string(),
  layers: exports_external.array(exports_external.string()),
  description: exports_external.string().optional()
}));
expectTypesMatch(true);
var pcb_cutout_base = exports_external.object({
  type: exports_external.literal("pcb_cutout"),
  pcb_cutout_id: getZodPrefixedIdWithDefault("pcb_cutout"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional()
});
var pcb_cutout_rect = pcb_cutout_base.extend({
  shape: exports_external.literal("rect"),
  center: point,
  width: length,
  height: length,
  rotation: rotation.optional()
});
expectTypesMatch(true);
var pcb_cutout_circle = pcb_cutout_base.extend({
  shape: exports_external.literal("circle"),
  center: point,
  radius: length
});
expectTypesMatch(true);
var pcb_cutout_polygon = pcb_cutout_base.extend({
  shape: exports_external.literal("polygon"),
  points: exports_external.array(point)
});
expectTypesMatch(true);
var pcb_cutout = exports_external.discriminatedUnion("shape", [
  pcb_cutout_rect,
  pcb_cutout_circle,
  pcb_cutout_polygon
]).describe("Defines a cutout on the PCB, removing board material.");
expectTypesMatch(true);
var pcb_missing_footprint_error = exports_external.object({
  type: exports_external.literal("pcb_missing_footprint_error"),
  pcb_missing_footprint_error_id: getZodPrefixedIdWithDefault("pcb_missing_footprint_error"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  error_type: exports_external.literal("pcb_missing_footprint_error").default("pcb_missing_footprint_error"),
  source_component_id: exports_external.string(),
  message: exports_external.string()
}).describe("Defines a missing footprint error on the PCB");
expectTypesMatch(true);
var external_footprint_load_error = exports_external.object({
  type: exports_external.literal("external_footprint_load_error"),
  external_footprint_load_error_id: getZodPrefixedIdWithDefault("external_footprint_load_error"),
  pcb_component_id: exports_external.string(),
  source_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  footprinter_string: exports_external.string().optional(),
  error_type: exports_external.literal("external_footprint_load_error").default("external_footprint_load_error"),
  message: exports_external.string()
}).describe("Defines an error when an external footprint fails to load");
expectTypesMatch(true);
var circuit_json_footprint_load_error = exports_external.object({
  type: exports_external.literal("circuit_json_footprint_load_error"),
  circuit_json_footprint_load_error_id: getZodPrefixedIdWithDefault("circuit_json_footprint_load_error"),
  pcb_component_id: exports_external.string(),
  source_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  error_type: exports_external.literal("circuit_json_footprint_load_error").default("circuit_json_footprint_load_error"),
  message: exports_external.string(),
  circuit_json: exports_external.array(exports_external.any()).optional()
}).describe("Defines an error when a circuit JSON footprint fails to load");
expectTypesMatch(true);
var pcb_group = exports_external.object({
  type: exports_external.literal("pcb_group"),
  pcb_group_id: getZodPrefixedIdWithDefault("pcb_group"),
  source_group_id: exports_external.string(),
  is_subcircuit: exports_external.boolean().optional(),
  subcircuit_id: exports_external.string().optional(),
  width: length,
  height: length,
  center: point,
  pcb_component_ids: exports_external.array(exports_external.string()),
  name: exports_external.string().optional(),
  description: exports_external.string().optional(),
  layout_mode: exports_external.string().optional(),
  autorouter_configuration: exports_external.object({
    trace_clearance: length
  }).optional(),
  autorouter_used_string: exports_external.string().optional()
}).describe("Defines a group of components on the PCB");
expectTypesMatch(true);
var pcb_autorouting_error = exports_external.object({
  type: exports_external.literal("pcb_autorouting_error"),
  pcb_error_id: getZodPrefixedIdWithDefault("pcb_autorouting_error"),
  error_type: exports_external.literal("pcb_autorouting_error").default("pcb_autorouting_error"),
  message: exports_external.string(),
  subcircuit_id: exports_external.string().optional()
}).describe("The autorouting has failed to route a portion of the board");
expectTypesMatch(true);
var pcb_manual_edit_conflict_warning = exports_external.object({
  type: exports_external.literal("pcb_manual_edit_conflict_warning"),
  pcb_manual_edit_conflict_warning_id: getZodPrefixedIdWithDefault("pcb_manual_edit_conflict_warning"),
  warning_type: exports_external.literal("pcb_manual_edit_conflict_warning").default("pcb_manual_edit_conflict_warning"),
  message: exports_external.string(),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  source_component_id: exports_external.string()
}).describe("Warning emitted when a component has both manual placement and explicit pcbX/pcbY coordinates");
expectTypesMatch(true);
var pcb_breakout_point = exports_external.object({
  type: exports_external.literal("pcb_breakout_point"),
  pcb_breakout_point_id: getZodPrefixedIdWithDefault("pcb_breakout_point"),
  pcb_group_id: exports_external.string(),
  subcircuit_id: exports_external.string().optional(),
  source_trace_id: exports_external.string().optional(),
  source_port_id: exports_external.string().optional(),
  source_net_id: exports_external.string().optional(),
  x: distance2,
  y: distance2
}).describe("Defines a routing target within a pcb_group for a source_trace or source_net");
expectTypesMatch(true);
var pcb_ground_plane = exports_external.object({
  type: exports_external.literal("pcb_ground_plane"),
  pcb_ground_plane_id: getZodPrefixedIdWithDefault("pcb_ground_plane"),
  source_pcb_ground_plane_id: exports_external.string(),
  source_net_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines a ground plane on the PCB");
expectTypesMatch(true);
var pcb_ground_plane_region = exports_external.object({
  type: exports_external.literal("pcb_ground_plane_region"),
  pcb_ground_plane_region_id: getZodPrefixedIdWithDefault("pcb_ground_plane_region"),
  pcb_ground_plane_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  layer: layer_ref,
  points: exports_external.array(point)
}).describe("Defines a polygon region of a ground plane");
expectTypesMatch(true);
var pcb_thermal_spoke = exports_external.object({
  type: exports_external.literal("pcb_thermal_spoke"),
  pcb_thermal_spoke_id: getZodPrefixedIdWithDefault("pcb_thermal_spoke"),
  pcb_ground_plane_id: exports_external.string(),
  shape: exports_external.string(),
  spoke_count: exports_external.number(),
  spoke_thickness: distance2,
  spoke_inner_diameter: distance2,
  spoke_outer_diameter: distance2,
  pcb_plated_hole_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional()
}).describe("Pattern for connecting a ground plane to a plated hole");
expectTypesMatch(true);
var pcb_copper_pour_base = exports_external.object({
  type: exports_external.literal("pcb_copper_pour"),
  pcb_copper_pour_id: getZodPrefixedIdWithDefault("pcb_copper_pour"),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  layer: layer_ref,
  source_net_id: exports_external.string().optional()
});
var pcb_copper_pour_rect = pcb_copper_pour_base.extend({
  shape: exports_external.literal("rect"),
  center: point,
  width: length,
  height: length,
  rotation: rotation.optional()
});
expectTypesMatch(true);
var pcb_copper_pour_brep = pcb_copper_pour_base.extend({
  shape: exports_external.literal("brep"),
  brep_shape
});
expectTypesMatch(true);
var pcb_copper_pour_polygon = pcb_copper_pour_base.extend({
  shape: exports_external.literal("polygon"),
  points: exports_external.array(point)
});
expectTypesMatch(true);
var pcb_copper_pour = exports_external.discriminatedUnion("shape", [
  pcb_copper_pour_rect,
  pcb_copper_pour_brep,
  pcb_copper_pour_polygon
]).describe("Defines a copper pour on the PCB.");
expectTypesMatch(true);
var pcb_component_outside_board_error = exports_external.object({
  type: exports_external.literal("pcb_component_outside_board_error"),
  pcb_component_outside_board_error_id: getZodPrefixedIdWithDefault("pcb_component_outside_board_error"),
  error_type: exports_external.literal("pcb_component_outside_board_error").default("pcb_component_outside_board_error"),
  message: exports_external.string(),
  pcb_component_id: exports_external.string(),
  pcb_board_id: exports_external.string(),
  component_center: point,
  component_bounds: exports_external.object({
    min_x: exports_external.number(),
    max_x: exports_external.number(),
    min_y: exports_external.number(),
    max_y: exports_external.number()
  }),
  subcircuit_id: exports_external.string().optional(),
  source_component_id: exports_external.string().optional()
}).describe("Error emitted when a PCB component is placed outside the board boundaries");
expectTypesMatch(true);
var pcb_via_clearance_error = exports_external.object({
  type: exports_external.literal("pcb_via_clearance_error"),
  pcb_error_id: getZodPrefixedIdWithDefault("pcb_error"),
  error_type: exports_external.literal("pcb_via_clearance_error").default("pcb_via_clearance_error"),
  message: exports_external.string(),
  pcb_via_ids: exports_external.array(exports_external.string()).min(2),
  minimum_clearance: distance2.optional(),
  actual_clearance: distance2.optional(),
  pcb_center: exports_external.object({
    x: exports_external.number().optional(),
    y: exports_external.number().optional()
  }).optional(),
  subcircuit_id: exports_external.string().optional()
}).describe("Error emitted when vias are closer than the allowed clearance");
expectTypesMatch(true);
var pcb_courtyard_rect = exports_external.object({
  type: exports_external.literal("pcb_courtyard_rect"),
  pcb_courtyard_rect_id: getZodPrefixedIdWithDefault("pcb_courtyard_rect"),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  center: point,
  width: length,
  height: length,
  layer: visible_layer,
  stroke_width: length.default("0.1mm"),
  is_filled: exports_external.boolean().optional(),
  has_stroke: exports_external.boolean().optional(),
  is_stroke_dashed: exports_external.boolean().optional(),
  color: exports_external.string().optional()
}).describe("Defines a courtyard rectangle on the PCB");
expectTypesMatch(true);
var pcb_courtyard_outline = exports_external.object({
  type: exports_external.literal("pcb_courtyard_outline"),
  pcb_courtyard_outline_id: getZodPrefixedIdWithDefault("pcb_courtyard_outline"),
  pcb_component_id: exports_external.string(),
  pcb_group_id: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional(),
  layer: visible_layer,
  outline: exports_external.array(point).min(2),
  stroke_width: length.default("0.1mm"),
  is_closed: exports_external.boolean().optional(),
  is_stroke_dashed: exports_external.boolean().optional(),
  color: exports_external.string().optional()
}).describe("Defines a courtyard outline on the PCB");
expectTypesMatch(true);
var cad_component = exports_external.object({
  type: exports_external.literal("cad_component"),
  cad_component_id: exports_external.string(),
  pcb_component_id: exports_external.string(),
  source_component_id: exports_external.string(),
  position: point3,
  rotation: point3.optional(),
  size: point3.optional(),
  layer: layer_ref.optional(),
  subcircuit_id: exports_external.string().optional(),
  footprinter_string: exports_external.string().optional(),
  model_obj_url: exports_external.string().optional(),
  model_stl_url: exports_external.string().optional(),
  model_3mf_url: exports_external.string().optional(),
  model_gltf_url: exports_external.string().optional(),
  model_glb_url: exports_external.string().optional(),
  model_step_url: exports_external.string().optional(),
  model_wrl_url: exports_external.string().optional(),
  model_unit_to_mm_scale_factor: exports_external.number().optional(),
  model_jscad: exports_external.any().optional()
}).describe("Defines a component on the PCB");
expectTypesMatch(true);
var wave_shape = exports_external.enum(["sinewave", "square", "triangle", "sawtooth"]);
var percentage = exports_external.union([exports_external.string(), exports_external.number()]).transform((val) => {
  if (typeof val === "string") {
    if (val.endsWith("%")) {
      return parseFloat(val.slice(0, -1)) / 100;
    }
    return parseFloat(val);
  }
  return val;
}).pipe(exports_external.number().min(0, "Duty cycle must be non-negative").max(1, "Duty cycle cannot be greater than 100%"));
var simulation_dc_voltage_source = exports_external.object({
  type: exports_external.literal("simulation_voltage_source"),
  simulation_voltage_source_id: getZodPrefixedIdWithDefault("simulation_voltage_source"),
  is_dc_source: exports_external.literal(true).optional().default(true),
  positive_source_port_id: exports_external.string().optional(),
  negative_source_port_id: exports_external.string().optional(),
  positive_source_net_id: exports_external.string().optional(),
  negative_source_net_id: exports_external.string().optional(),
  voltage
}).describe("Defines a DC voltage source for simulation");
var simulation_ac_voltage_source = exports_external.object({
  type: exports_external.literal("simulation_voltage_source"),
  simulation_voltage_source_id: getZodPrefixedIdWithDefault("simulation_voltage_source"),
  is_dc_source: exports_external.literal(false),
  terminal1_source_port_id: exports_external.string().optional(),
  terminal2_source_port_id: exports_external.string().optional(),
  terminal1_source_net_id: exports_external.string().optional(),
  terminal2_source_net_id: exports_external.string().optional(),
  voltage: voltage.optional(),
  frequency: frequency.optional(),
  peak_to_peak_voltage: voltage.optional(),
  wave_shape: wave_shape.optional(),
  phase: rotation.optional(),
  duty_cycle: percentage.optional()
}).describe("Defines an AC voltage source for simulation");
var simulation_voltage_source = exports_external.union([simulation_dc_voltage_source, simulation_ac_voltage_source]).describe("Defines a voltage source for simulation");
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);
var experiment_type = exports_external.union([
  exports_external.literal("spice_dc_sweep"),
  exports_external.literal("spice_dc_operating_point"),
  exports_external.literal("spice_transient_analysis"),
  exports_external.literal("spice_ac_analysis")
]);
var simulation_experiment = exports_external.object({
  type: exports_external.literal("simulation_experiment"),
  simulation_experiment_id: getZodPrefixedIdWithDefault("simulation_experiment"),
  name: exports_external.string(),
  experiment_type,
  time_per_step: duration_ms.optional(),
  start_time_ms: ms.optional(),
  end_time_ms: ms.optional()
}).describe("Defines a simulation experiment configuration");
expectTypesMatch(true);
var simulation_transient_voltage_graph = exports_external.object({
  type: exports_external.literal("simulation_transient_voltage_graph"),
  simulation_transient_voltage_graph_id: getZodPrefixedIdWithDefault("simulation_transient_voltage_graph"),
  simulation_experiment_id: exports_external.string(),
  timestamps_ms: exports_external.array(exports_external.number()).optional(),
  voltage_levels: exports_external.array(exports_external.number()),
  schematic_voltage_probe_id: exports_external.string().optional(),
  subcircuit_connectivity_map_key: exports_external.string().optional(),
  time_per_step: duration_ms,
  start_time_ms: ms,
  end_time_ms: ms,
  name: exports_external.string().optional()
}).describe("Stores voltage measurements over time for a simulation");
expectTypesMatch(true);
var simulation_switch = exports_external.object({
  type: exports_external.literal("simulation_switch"),
  simulation_switch_id: getZodPrefixedIdWithDefault("simulation_switch"),
  closes_at: ms.optional(),
  opens_at: ms.optional(),
  starts_closed: exports_external.boolean().optional(),
  switching_frequency: frequency.optional()
}).describe("Defines a switch for simulation timing control");
expectTypesMatch(true);
var simulation_voltage_probe = exports_external.object({
  type: exports_external.literal("simulation_voltage_probe"),
  simulation_voltage_probe_id: getZodPrefixedIdWithDefault("simulation_voltage_probe"),
  source_port_id: exports_external.string().optional(),
  source_net_id: exports_external.string().optional(),
  name: exports_external.string().optional(),
  subcircuit_id: exports_external.string().optional()
}).describe("Defines a voltage probe for simulation, connected to a port or a net").refine((data) => Boolean(data.source_port_id) !== Boolean(data.source_net_id), {
  message: "Exactly one of source_port_id or source_net_id must be provided to simulation_voltage_probe"
});
expectTypesMatch(true);
var any_circuit_element = exports_external.union([
  source_trace,
  source_port,
  any_source_component,
  source_net,
  source_group,
  source_simple_chip,
  source_simple_capacitor,
  source_simple_diode,
  source_simple_led,
  source_simple_resistor,
  source_simple_power_source,
  source_simple_battery,
  source_simple_inductor,
  source_simple_pin_header,
  source_simple_pinout,
  source_simple_resonator,
  source_simple_switch,
  source_simple_transistor,
  source_simple_test_point,
  source_simple_mosfet,
  source_simple_potentiometer,
  source_simple_push_button,
  source_pcb_ground_plane,
  source_manually_placed_via,
  source_board,
  source_project_metadata,
  source_trace_not_connected_error,
  source_pin_missing_trace_warning,
  pcb_component,
  pcb_hole,
  pcb_missing_footprint_error,
  external_footprint_load_error,
  circuit_json_footprint_load_error,
  pcb_manual_edit_conflict_warning,
  pcb_plated_hole,
  pcb_keepout,
  pcb_port,
  pcb_net,
  pcb_text,
  pcb_trace,
  pcb_via,
  pcb_smtpad,
  pcb_solder_paste,
  pcb_board,
  pcb_group,
  pcb_trace_hint,
  pcb_silkscreen_line,
  pcb_silkscreen_path,
  pcb_silkscreen_text,
  pcb_silkscreen_rect,
  pcb_silkscreen_circle,
  pcb_silkscreen_oval,
  pcb_trace_error,
  pcb_trace_missing_error,
  pcb_placement_error,
  pcb_port_not_matched_error,
  pcb_port_not_connected_error,
  pcb_via_clearance_error,
  pcb_fabrication_note_path,
  pcb_fabrication_note_text,
  pcb_fabrication_note_rect,
  pcb_fabrication_note_dimension,
  pcb_note_text,
  pcb_note_rect,
  pcb_note_path,
  pcb_note_line,
  pcb_note_dimension,
  pcb_autorouting_error,
  pcb_footprint_overlap_error,
  pcb_breakout_point,
  pcb_cutout,
  pcb_ground_plane,
  pcb_ground_plane_region,
  pcb_thermal_spoke,
  pcb_copper_pour,
  pcb_component_outside_board_error,
  pcb_courtyard_rect,
  pcb_courtyard_outline,
  schematic_box,
  schematic_text,
  schematic_line,
  schematic_rect,
  schematic_circle,
  schematic_arc,
  schematic_component,
  schematic_port,
  schematic_trace,
  schematic_path,
  schematic_error,
  schematic_layout_error,
  schematic_net_label,
  schematic_debug_object,
  schematic_voltage_probe,
  schematic_manual_edit_conflict_warning,
  schematic_group,
  schematic_table,
  schematic_table_cell,
  cad_component,
  simulation_voltage_source,
  simulation_experiment,
  simulation_transient_voltage_graph,
  simulation_switch,
  simulation_voltage_probe
]);
var any_soup_element = any_circuit_element;
expectTypesMatch(true);
expectStringUnionsMatch(true);

// node_modules/parsel-js/dist/parsel.js
var TRIM_TOKENS = new Set(["combinator", "comma"]);
var RECURSIVE_PSEUDO_CLASSES = new Set([
  "not",
  "is",
  "where",
  "has",
  "matches",
  "-moz-any",
  "-webkit-any",
  "nth-child",
  "nth-last-child"
]);

// node_modules/@tscircuit/circuit-json-util/dist/index.js
function connect(map, a, b) {
  if (!a || !b)
    return;
  let setA = map.get(a);
  if (!setA) {
    setA = /* @__PURE__ */ new Set;
    map.set(a, setA);
  }
  setA.add(b);
  let setB = map.get(b);
  if (!setB) {
    setB = /* @__PURE__ */ new Set;
    map.set(b, setB);
  }
  setB.add(a);
}
function buildSubtree(soup, opts) {
  if (!opts.subcircuit_id && !opts.source_group_id)
    return [...soup];
  const idMap = /* @__PURE__ */ new Map;
  for (const elm of soup) {
    const idVal = elm[`${elm.type}_id`];
    if (typeof idVal === "string") {
      idMap.set(idVal, elm);
    }
  }
  const adj = /* @__PURE__ */ new Map;
  for (const elm of soup) {
    const entries = Object.entries(elm);
    for (const [key, val] of entries) {
      if (key === "parent_source_group_id")
        continue;
      if (key.endsWith("_id") && typeof val === "string") {
        const other = idMap.get(val);
        connect(adj, elm, other);
      } else if (key.endsWith("_ids") && Array.isArray(val)) {
        for (const v of val) {
          if (typeof v === "string") {
            const other = idMap.get(v);
            connect(adj, elm, other);
          }
        }
      }
    }
  }
  const queue = [];
  const included = /* @__PURE__ */ new Set;
  for (const elm of soup) {
    if (opts.subcircuit_id && elm.subcircuit_id === opts.subcircuit_id || opts.source_group_id && (elm.source_group_id === opts.source_group_id || Array.isArray(elm.member_source_group_ids) && elm.member_source_group_ids.includes(opts.source_group_id))) {
      queue.push(elm);
      included.add(elm);
    }
  }
  while (queue.length > 0) {
    const elm = queue.shift();
    const neighbors = adj.get(elm);
    if (!neighbors)
      continue;
    for (const n of neighbors) {
      if (!included.has(n)) {
        included.add(n);
        queue.push(n);
      }
    }
  }
  return soup.filter((e) => included.has(e));
}
var cju = (circuitJsonInput, options = {}) => {
  const circuitJson = circuitJsonInput;
  let internalStore = circuitJson._internal_store;
  if (!internalStore) {
    internalStore = {
      counts: {},
      editCount: 0
    };
    circuitJson._internal_store = internalStore;
    for (const elm of circuitJson) {
      const type = elm.type;
      const idVal = elm[`${type}_id`];
      if (!idVal)
        continue;
      const idNum = Number.parseInt(idVal.split("_").pop());
      if (!Number.isNaN(idNum)) {
        internalStore.counts[type] = Math.max(internalStore.counts[type] ?? 0, idNum);
      }
    }
  }
  const su2 = new Proxy({}, {
    get: (proxy_target, prop) => {
      if (prop === "toArray") {
        return () => {
          circuitJson.editCount = internalStore.editCount;
          return circuitJson;
        };
      }
      if (prop === "editCount") {
        return internalStore.editCount;
      }
      if (prop === "subtree") {
        return (opts) => cju(buildSubtree(circuitJson, opts), options);
      }
      const component_type = prop;
      return {
        get: (id) => circuitJson.find((e) => e.type === component_type && e[`${component_type}_id`] === id),
        getUsing: (using) => {
          const keys = Object.keys(using);
          if (keys.length !== 1) {
            throw new Error("getUsing requires exactly one key, e.g. { pcb_component_id }");
          }
          const join_key = keys[0];
          const join_type = join_key.replace("_id", "");
          const joiner = circuitJson.find((e) => e.type === join_type && e[join_key] === using[join_key]);
          if (!joiner)
            return null;
          return circuitJson.find((e) => e.type === component_type && e[`${component_type}_id`] === joiner[`${component_type}_id`]);
        },
        getWhere: (where) => {
          const keys = Object.keys(where);
          return circuitJson.find((e) => e.type === component_type && keys.every((key) => e[key] === where[key]));
        },
        list: (where) => {
          const keys = !where ? [] : Object.keys(where);
          return circuitJson.filter((e) => e.type === component_type && keys.every((key) => e[key] === where[key]));
        },
        insert: (elm) => {
          internalStore.counts[component_type] ??= -1;
          internalStore.counts[component_type]++;
          const index = internalStore.counts[component_type];
          const newElm = {
            type: component_type,
            [`${component_type}_id`]: `${component_type}_${index}`,
            ...elm
          };
          if (options.validateInserts) {
            const parser = exports_dist[component_type] ?? any_soup_element;
            parser.parse(newElm);
          }
          circuitJson.push(newElm);
          internalStore.editCount++;
          return newElm;
        },
        delete: (id) => {
          const elm = circuitJson.find((e) => e[`${component_type}_id`] === id);
          if (!elm)
            return;
          circuitJson.splice(circuitJson.indexOf(elm), 1);
          internalStore.editCount++;
        },
        update: (id, newProps) => {
          const elm = circuitJson.find((e) => e.type === component_type && e[`${component_type}_id`] === id);
          if (!elm)
            return null;
          Object.assign(elm, newProps);
          internalStore.editCount++;
          return elm;
        },
        select: (selector) => {
          if (component_type === "source_component") {
            return circuitJson.find((e) => e.type === "source_component" && e.name === selector.replace(/\./g, ""));
          } else if (component_type === "pcb_port" || component_type === "source_port" || component_type === "schematic_port") {
            const [component_name, port_selector] = selector.replace(/\./g, "").split(/[\s\>]+/);
            const source_component = circuitJson.find((e) => e.type === "source_component" && e.name === component_name);
            if (!source_component)
              return null;
            const source_port2 = circuitJson.find((e) => e.type === "source_port" && e.source_component_id === source_component.source_component_id && (e.name === port_selector || (e.port_hints ?? []).includes(port_selector)));
            if (!source_port2)
              return null;
            if (component_type === "source_port")
              return source_port2;
            if (component_type === "pcb_port") {
              return circuitJson.find((e) => e.type === "pcb_port" && e.source_port_id === source_port2.source_port_id);
            } else if (component_type === "schematic_port") {
              return circuitJson.find((e) => e.type === "schematic_port" && e.source_port_id === source_port2.source_port_id);
            }
          }
        }
      };
    }
  });
  return su2;
};
cju.unparsed = cju;
var su = cju;
function createIdKey(element) {
  const type = element.type;
  return `${type}:${element[`${type}_id`]}`;
}
var cjuIndexed = (soup, options = {}) => {
  let internalStore = soup._internal_store_indexed;
  if (!internalStore) {
    internalStore = {
      counts: {},
      editCount: 0,
      indexes: {}
    };
    for (const elm of soup) {
      const type = elm.type;
      const idVal = elm[`${type}_id`];
      if (!idVal)
        continue;
      const idNum = Number.parseInt(idVal.split("_").pop() || "");
      if (!Number.isNaN(idNum)) {
        internalStore.counts[type] = Math.max(internalStore.counts[type] ?? 0, idNum);
      }
    }
    const indexConfig = options.indexConfig || {};
    const indexes = internalStore.indexes;
    if (indexConfig.byId) {
      indexes.byId = /* @__PURE__ */ new Map;
    }
    if (indexConfig.byType) {
      indexes.byType = /* @__PURE__ */ new Map;
    }
    if (indexConfig.byRelation) {
      indexes.byRelation = /* @__PURE__ */ new Map;
    }
    if (indexConfig.bySubcircuit) {
      indexes.bySubcircuit = /* @__PURE__ */ new Map;
    }
    if (indexConfig.byCustomField && indexConfig.byCustomField.length > 0) {
      indexes.byCustomField = /* @__PURE__ */ new Map;
      for (const field of indexConfig.byCustomField) {
        indexes.byCustomField.set(field, /* @__PURE__ */ new Map);
      }
    }
    for (const element of soup) {
      if (indexConfig.byId) {
        const idKey = createIdKey(element);
        indexes.byId.set(idKey, element);
      }
      if (indexConfig.byType) {
        const elementsOfType = indexes.byType.get(element.type) || [];
        elementsOfType.push(element);
        indexes.byType.set(element.type, elementsOfType);
      }
      if (indexConfig.byRelation) {
        const elementEntries = Object.entries(element);
        for (const [key, value] of elementEntries) {
          if (key.endsWith("_id") && key !== `${element.type}_id` && typeof value === "string") {
            const relationTypeMap = indexes.byRelation.get(key) || /* @__PURE__ */ new Map;
            const relatedElements = relationTypeMap.get(value) || [];
            relatedElements.push(element);
            relationTypeMap.set(value, relatedElements);
            indexes.byRelation.set(key, relationTypeMap);
          }
        }
      }
      if (indexConfig.bySubcircuit && "subcircuit_id" in element) {
        const subcircuitId = element.subcircuit_id;
        if (subcircuitId && typeof subcircuitId === "string") {
          const subcircuitElements = indexes.bySubcircuit.get(subcircuitId) || [];
          subcircuitElements.push(element);
          indexes.bySubcircuit.set(subcircuitId, subcircuitElements);
        }
      }
      if (indexConfig.byCustomField && indexes.byCustomField) {
        for (const field of indexConfig.byCustomField) {
          if (field in element) {
            const fieldValue = element[field];
            if (fieldValue !== undefined && (typeof fieldValue === "string" || typeof fieldValue === "number")) {
              const fieldValueStr = String(fieldValue);
              const fieldMap = indexes.byCustomField.get(field);
              const elementsWithFieldValue = fieldMap.get(fieldValueStr) || [];
              elementsWithFieldValue.push(element);
              fieldMap.set(fieldValueStr, elementsWithFieldValue);
            }
          }
        }
      }
    }
    soup._internal_store_indexed = internalStore;
  }
  const suIndexed = new Proxy({}, {
    get: (proxy_target, prop) => {
      if (prop === "toArray") {
        return () => {
          soup.editCount = internalStore.editCount;
          return soup;
        };
      }
      if (prop === "editCount") {
        return internalStore.editCount;
      }
      const component_type = prop;
      return {
        get: (id) => {
          const indexConfig = options.indexConfig || {};
          if (indexConfig.byId && internalStore.indexes.byId) {
            return internalStore.indexes.byId.get(`${component_type}:${id}`) || null;
          }
          if (indexConfig.byType && internalStore.indexes.byType) {
            const elementsOfType = internalStore.indexes.byType.get(component_type) || [];
            return elementsOfType.find((e) => e[`${component_type}_id`] === id) || null;
          }
          return soup.find((e) => e.type === component_type && e[`${component_type}_id`] === id) || null;
        },
        getUsing: (using) => {
          const indexConfig = options.indexConfig || {};
          const keys = Object.keys(using);
          if (keys.length !== 1) {
            throw new Error("getUsing requires exactly one key, e.g. { pcb_component_id }");
          }
          const join_key = keys[0];
          const join_type = join_key.replace("_id", "");
          if (indexConfig.byRelation && internalStore.indexes.byRelation) {
            const relationMap = internalStore.indexes.byRelation.get(join_key);
            if (relationMap) {
              const relatedElements = relationMap.get(using[join_key]) || [];
              const joiner2 = relatedElements.find((e) => e.type === join_type);
              if (!joiner2)
                return null;
              const joinerId = joiner2[`${component_type}_id`];
              if (indexConfig.byId && internalStore.indexes.byId) {
                return internalStore.indexes.byId.get(`${component_type}:${joinerId}`) || null;
              }
              if (indexConfig.byType && internalStore.indexes.byType) {
                const elementsOfType = internalStore.indexes.byType.get(component_type) || [];
                return elementsOfType.find((e) => e[`${component_type}_id`] === joinerId) || null;
              }
              return soup.find((e) => e.type === component_type && e[`${component_type}_id`] === joinerId) || null;
            }
          }
          const joiner = soup.find((e) => e.type === join_type && e[join_key] === using[join_key]);
          if (!joiner)
            return null;
          return soup.find((e) => e.type === component_type && e[`${component_type}_id`] === joiner[`${component_type}_id`]) || null;
        },
        getWhere: (where) => {
          const indexConfig = options.indexConfig || {};
          const keys = Object.keys(where);
          if (keys.length === 1 && indexConfig.byCustomField && internalStore.indexes.byCustomField) {
            const field = keys[0];
            const fieldMap = internalStore.indexes.byCustomField.get(field);
            if (fieldMap) {
              const fieldValue = String(where[field]);
              const elementsWithFieldValue = fieldMap.get(fieldValue) || [];
              return elementsWithFieldValue.find((e) => e.type === component_type) || null;
            }
          }
          if ("subcircuit_id" in where && indexConfig.bySubcircuit && internalStore.indexes.bySubcircuit) {
            const subcircuitId = where.subcircuit_id;
            const subcircuitElements = internalStore.indexes.bySubcircuit.get(subcircuitId) || [];
            return subcircuitElements.find((e) => e.type === component_type && keys.every((key) => e[key] === where[key])) || null;
          }
          if (indexConfig.byType && internalStore.indexes.byType) {
            const elementsOfType = internalStore.indexes.byType.get(component_type) || [];
            return elementsOfType.find((e) => keys.every((key) => e[key] === where[key])) || null;
          }
          return soup.find((e) => e.type === component_type && keys.every((key) => e[key] === where[key])) || null;
        },
        list: (where) => {
          const indexConfig = options.indexConfig || {};
          const keys = !where ? [] : Object.keys(where);
          if (keys.length === 0 && indexConfig.byType && internalStore.indexes.byType) {
            return internalStore.indexes.byType.get(component_type) || [];
          }
          if (keys.length === 1 && keys[0] === "subcircuit_id" && indexConfig.bySubcircuit && internalStore.indexes.bySubcircuit) {
            const subcircuitId = where.subcircuit_id;
            const subcircuitElements = internalStore.indexes.bySubcircuit.get(subcircuitId) || [];
            return subcircuitElements.filter((e) => e.type === component_type);
          }
          let elementsToFilter;
          if (indexConfig.byType && internalStore.indexes.byType) {
            elementsToFilter = internalStore.indexes.byType.get(component_type) || [];
          } else {
            elementsToFilter = soup.filter((e) => e.type === component_type);
          }
          if (keys.length > 0) {
            return elementsToFilter.filter((e) => keys.every((key) => e[key] === where[key]));
          }
          return elementsToFilter;
        },
        insert: (elm) => {
          internalStore.counts[component_type] ??= -1;
          internalStore.counts[component_type]++;
          const index = internalStore.counts[component_type];
          const newElm = {
            type: component_type,
            [`${component_type}_id`]: `${component_type}_${index}`,
            ...elm
          };
          if (options.validateInserts) {
            const parser = exports_dist[component_type] ?? any_soup_element;
            parser.parse(newElm);
          }
          soup.push(newElm);
          internalStore.editCount++;
          const indexConfig = options.indexConfig || {};
          if (indexConfig.byId && internalStore.indexes.byId) {
            const idKey = createIdKey(newElm);
            internalStore.indexes.byId.set(idKey, newElm);
          }
          if (indexConfig.byType && internalStore.indexes.byType) {
            const elementsOfType = internalStore.indexes.byType.get(component_type) || [];
            elementsOfType.push(newElm);
            internalStore.indexes.byType.set(component_type, elementsOfType);
          }
          if (indexConfig.byRelation && internalStore.indexes.byRelation) {
            const elementEntries = Object.entries(newElm);
            for (const [key, value] of elementEntries) {
              if (key.endsWith("_id") && key !== `${newElm.type}_id` && typeof value === "string") {
                const relationTypeMap = internalStore.indexes.byRelation.get(key) || /* @__PURE__ */ new Map;
                const relatedElements = relationTypeMap.get(value) || [];
                relatedElements.push(newElm);
                relationTypeMap.set(value, relatedElements);
                internalStore.indexes.byRelation.set(key, relationTypeMap);
              }
            }
          }
          if (indexConfig.bySubcircuit && internalStore.indexes.bySubcircuit && "subcircuit_id" in newElm) {
            const subcircuitId = newElm.subcircuit_id;
            if (subcircuitId && typeof subcircuitId === "string") {
              const subcircuitElements = internalStore.indexes.bySubcircuit.get(subcircuitId) || [];
              subcircuitElements.push(newElm);
              internalStore.indexes.bySubcircuit.set(subcircuitId, subcircuitElements);
            }
          }
          if (indexConfig.byCustomField && internalStore.indexes.byCustomField) {
            for (const field of indexConfig.byCustomField) {
              if (field in newElm) {
                const fieldValue = newElm[field];
                if (fieldValue !== undefined && (typeof fieldValue === "string" || typeof fieldValue === "number")) {
                  const fieldValueStr = String(fieldValue);
                  const fieldMap = internalStore.indexes.byCustomField.get(field);
                  const elementsWithFieldValue = fieldMap.get(fieldValueStr) || [];
                  elementsWithFieldValue.push(newElm);
                  fieldMap.set(fieldValueStr, elementsWithFieldValue);
                }
              }
            }
          }
          return newElm;
        },
        delete: (id) => {
          const indexConfig = options.indexConfig || {};
          let elm;
          if (indexConfig.byId && internalStore.indexes.byId) {
            elm = internalStore.indexes.byId.get(`${component_type}:${id}`);
          } else if (indexConfig.byType && internalStore.indexes.byType) {
            const elementsOfType = internalStore.indexes.byType.get(component_type) || [];
            elm = elementsOfType.find((e) => e[`${component_type}_id`] === id);
          } else {
            elm = soup.find((e) => e[`${component_type}_id`] === id);
          }
          if (!elm)
            return;
          const elmIndex = soup.indexOf(elm);
          if (elmIndex >= 0) {
            soup.splice(elmIndex, 1);
            internalStore.editCount++;
          }
          if (indexConfig.byId && internalStore.indexes.byId) {
            const idKey = createIdKey(elm);
            internalStore.indexes.byId.delete(idKey);
          }
          if (indexConfig.byType && internalStore.indexes.byType) {
            const elementsOfType = internalStore.indexes.byType.get(component_type) || [];
            const filteredElements = elementsOfType.filter((e) => e[`${component_type}_id`] !== id);
            internalStore.indexes.byType.set(component_type, filteredElements);
          }
          if (indexConfig.byRelation && internalStore.indexes.byRelation) {
            for (const [
              relationKey,
              relationMap
            ] of internalStore.indexes.byRelation.entries()) {
              for (const [relationValue, elements] of relationMap.entries()) {
                const updatedElements = elements.filter((e) => e !== elm);
                if (updatedElements.length === 0) {
                  relationMap.delete(relationValue);
                } else {
                  relationMap.set(relationValue, updatedElements);
                }
              }
            }
          }
          if (indexConfig.bySubcircuit && internalStore.indexes.bySubcircuit && "subcircuit_id" in elm) {
            const subcircuitId = elm.subcircuit_id;
            if (subcircuitId) {
              const subcircuitElements = internalStore.indexes.bySubcircuit.get(subcircuitId) || [];
              const updatedElements = subcircuitElements.filter((e) => e !== elm);
              if (updatedElements.length === 0) {
                internalStore.indexes.bySubcircuit.delete(subcircuitId);
              } else {
                internalStore.indexes.bySubcircuit.set(subcircuitId, updatedElements);
              }
            }
          }
          if (indexConfig.byCustomField && internalStore.indexes.byCustomField) {
            for (const fieldMap of internalStore.indexes.byCustomField.values()) {
              for (const [fieldValue, elements] of fieldMap.entries()) {
                const updatedElements = elements.filter((e) => e !== elm);
                if (updatedElements.length === 0) {
                  fieldMap.delete(fieldValue);
                } else {
                  fieldMap.set(fieldValue, updatedElements);
                }
              }
            }
          }
        },
        update: (id, newProps) => {
          const indexConfig = options.indexConfig || {};
          let elm;
          if (indexConfig.byId && internalStore.indexes.byId) {
            elm = internalStore.indexes.byId.get(`${component_type}:${id}`);
          } else if (indexConfig.byType && internalStore.indexes.byType) {
            const elementsOfType = internalStore.indexes.byType.get(component_type) || [];
            elm = elementsOfType.find((e) => e[`${component_type}_id`] === id);
          } else {
            elm = soup.find((e) => e.type === component_type && e[`${component_type}_id`] === id);
          }
          if (!elm)
            return null;
          if (indexConfig.byRelation && internalStore.indexes.byRelation) {
            const elementEntries = Object.entries(elm);
            for (const [key, value] of elementEntries) {
              if (key.endsWith("_id") && key !== `${elm.type}_id` && typeof value === "string") {
                if (key in newProps && newProps[key] !== value) {
                  const relationTypeMap = internalStore.indexes.byRelation.get(key);
                  if (relationTypeMap) {
                    const relatedElements = relationTypeMap.get(value) || [];
                    const updatedElements = relatedElements.filter((e) => e !== elm);
                    if (updatedElements.length === 0) {
                      relationTypeMap.delete(value);
                    } else {
                      relationTypeMap.set(value, updatedElements);
                    }
                  }
                }
              }
            }
          }
          if (indexConfig.bySubcircuit && internalStore.indexes.bySubcircuit && "subcircuit_id" in elm && "subcircuit_id" in newProps) {
            const oldSubcircuitId = elm.subcircuit_id;
            const newSubcircuitId = newProps.subcircuit_id;
            if (oldSubcircuitId !== newSubcircuitId) {
              const subcircuitElements = internalStore.indexes.bySubcircuit.get(oldSubcircuitId) || [];
              const updatedElements = subcircuitElements.filter((e) => e !== elm);
              if (updatedElements.length === 0) {
                internalStore.indexes.bySubcircuit.delete(oldSubcircuitId);
              } else {
                internalStore.indexes.bySubcircuit.set(oldSubcircuitId, updatedElements);
              }
            }
          }
          if (indexConfig.byCustomField && internalStore.indexes.byCustomField) {
            for (const field of indexConfig.byCustomField) {
              if (field in elm && field in newProps && elm[field] !== newProps[field]) {
                const fieldMap = internalStore.indexes.byCustomField.get(field);
                if (fieldMap) {
                  const oldValue = String(elm[field]);
                  const elements = fieldMap.get(oldValue) || [];
                  const updatedElements = elements.filter((e) => e !== elm);
                  if (updatedElements.length === 0) {
                    fieldMap.delete(oldValue);
                  } else {
                    fieldMap.set(oldValue, updatedElements);
                  }
                }
              }
            }
          }
          Object.assign(elm, newProps);
          internalStore.editCount++;
          if (indexConfig.byRelation && internalStore.indexes.byRelation) {
            const elementEntries = Object.entries(elm);
            for (const [key, value] of elementEntries) {
              if (key.endsWith("_id") && key !== `${elm.type}_id` && typeof value === "string") {
                if (key in newProps) {
                  const relationTypeMap = internalStore.indexes.byRelation.get(key) || /* @__PURE__ */ new Map;
                  const relatedElements = relationTypeMap.get(value) || [];
                  if (!relatedElements.includes(elm)) {
                    relatedElements.push(elm);
                    relationTypeMap.set(value, relatedElements);
                    internalStore.indexes.byRelation.set(key, relationTypeMap);
                  }
                }
              }
            }
          }
          if (indexConfig.bySubcircuit && internalStore.indexes.bySubcircuit && "subcircuit_id" in elm && "subcircuit_id" in newProps) {
            const subcircuitId = elm.subcircuit_id;
            if (subcircuitId && typeof subcircuitId === "string") {
              const subcircuitElements = internalStore.indexes.bySubcircuit.get(subcircuitId) || [];
              if (!subcircuitElements.includes(elm)) {
                subcircuitElements.push(elm);
                internalStore.indexes.bySubcircuit.set(subcircuitId, subcircuitElements);
              }
            }
          }
          if (indexConfig.byCustomField && internalStore.indexes.byCustomField) {
            for (const field of indexConfig.byCustomField) {
              if (field in elm && field in newProps) {
                const fieldValue = elm[field];
                if (fieldValue !== undefined && (typeof fieldValue === "string" || typeof fieldValue === "number")) {
                  const fieldValueStr = String(fieldValue);
                  const fieldMap = internalStore.indexes.byCustomField.get(field);
                  const elementsWithFieldValue = fieldMap.get(fieldValueStr) || [];
                  if (!elementsWithFieldValue.includes(elm)) {
                    elementsWithFieldValue.push(elm);
                    fieldMap.set(fieldValueStr, elementsWithFieldValue);
                  }
                }
              }
            }
          }
          return elm;
        },
        select: (selector) => {
          if (component_type === "source_component") {
            return soup.find((e) => e.type === "source_component" && e.name === selector.replace(/\./g, "")) || null;
          } else if (component_type === "pcb_port" || component_type === "source_port" || component_type === "schematic_port") {
            const [component_name, port_selector] = selector.replace(/\./g, "").split(/[\s\>]+/);
            const source_component = soup.find((e) => e.type === "source_component" && e.name === component_name);
            if (!source_component)
              return null;
            const source_port2 = soup.find((e) => e.type === "source_port" && e.source_component_id === source_component.source_component_id && (e.name === port_selector || (e.port_hints ?? []).includes(port_selector)));
            if (!source_port2)
              return null;
            if (component_type === "source_port")
              return source_port2;
            if (component_type === "pcb_port") {
              return soup.find((e) => e.type === "pcb_port" && e.source_port_id === source_port2.source_port_id) || null;
            } else if (component_type === "schematic_port") {
              return soup.find((e) => e.type === "schematic_port" && e.source_port_id === source_port2.source_port_id) || null;
            }
          }
          return null;
        }
      };
    }
  });
  return suIndexed;
};
cjuIndexed.unparsed = cjuIndexed;

// node_modules/circuit-to-svg/dist/index.js
var import_svgson3 = __toESM(require_svgson_umd(), 1);
var import_svgson4 = __toESM(require_svgson_umd(), 1);

// node_modules/schematic-symbols/dist/index.js
function _(t, o) {
  return Array.isArray(o) ? [t.a * o[0] + t.c * o[1] + t.e, t.b * o[0] + t.d * o[1] + t.f] : { x: t.a * o.x + t.c * o.y + t.e, y: t.b * o.x + t.d * o.y + t.f };
}
function jt(t) {
  return typeof t > "u";
}
function bt(t, o = 0) {
  return { a: 1, c: 0, e: t, b: 0, d: 1, f: o };
}
function X(...t) {
  t = Array.isArray(t[0]) ? t[0] : t;
  let o = (i, l) => ({ a: i.a * l.a + i.c * l.b, c: i.a * l.c + i.c * l.d, e: i.a * l.e + i.c * l.f + i.e, b: i.b * l.a + i.d * l.b, d: i.b * l.c + i.d * l.d, f: i.b * l.e + i.d * l.f + i.f });
  switch (t.length) {
    case 0:
      throw new Error("no matrices provided");
    case 1:
      return t[0];
    case 2:
      return o(t[0], t[1]);
    default: {
      let [i, l, ...a] = t, y = o(i, l);
      return X(y, ...a);
    }
  }
}
var { cos: pf, sin: af, PI: t4 } = Math;
function sr(t, o, i) {
  let l = pf(t), a = af(t), y = { a: l, c: -a, e: 0, b: a, d: l, f: 0 };
  return jt(o) || jt(i) ? y : X([bt(o, i), y, bt(-o, -i)]);
}
function yf(t, o) {
  function i() {
    this.constructor = t;
  }
  i.prototype = o.prototype, t.prototype = new i;
}
function kt(t, o, i, l) {
  var a = Error.call(this, t);
  return Object.setPrototypeOf && Object.setPrototypeOf(a, kt.prototype), a.expected = o, a.found = i, a.location = l, a.name = "SyntaxError", a;
}
yf(kt, Error);
function mr(t, o, i) {
  return i = i || " ", t.length > o ? t : (o -= t.length, i += i.repeat(o), t + i.slice(0, o));
}
kt.prototype.format = function(t) {
  var o = "Error: " + this.message;
  if (this.location) {
    var i = null, l;
    for (l = 0;l < t.length; l++)
      if (t[l].source === this.location.source) {
        i = t[l].text.split(/\r\n|\n|\r/g);
        break;
      }
    var a = this.location.start, y = this.location.source && typeof this.location.source.offset == "function" ? this.location.source.offset(a) : a, n = this.location.source + ":" + y.line + ":" + y.column;
    if (i) {
      var m = this.location.end, c = mr("", y.line.toString().length, " "), p = i[a.line - 1], x = a.line === m.line ? m.column : p.length + 1, f = x - a.column || 1;
      o += `
 --> ` + n + `
` + c + ` |
` + y.line + " | " + p + `
` + c + " | " + mr("", a.column - 1, " ") + mr("", f, "^");
    } else
      o += `
 at ` + n;
  }
  return o;
};
kt.buildMessage = function(t, o) {
  var i = { literal: function(p) {
    return '"' + a(p.text) + '"';
  }, class: function(p) {
    var x = p.parts.map(function(f) {
      return Array.isArray(f) ? y(f[0]) + "-" + y(f[1]) : y(f);
    });
    return "[" + (p.inverted ? "^" : "") + x.join("") + "]";
  }, any: function() {
    return "any character";
  }, end: function() {
    return "end of input";
  }, other: function(p) {
    return p.description;
  } };
  function l(p) {
    return p.charCodeAt(0).toString(16).toUpperCase();
  }
  function a(p) {
    return p.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(x) {
      return "\\x0" + l(x);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(x) {
      return "\\x" + l(x);
    });
  }
  function y(p) {
    return p.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(x) {
      return "\\x0" + l(x);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(x) {
      return "\\x" + l(x);
    });
  }
  function n(p) {
    return i[p.type](p);
  }
  function m(p) {
    var x = p.map(n), f, d;
    if (x.sort(), x.length > 0) {
      for (f = 1, d = 1;f < x.length; f++)
        x[f - 1] !== x[f] && (x[d] = x[f], d++);
      x.length = d;
    }
    switch (x.length) {
      case 1:
        return x[0];
      case 2:
        return x[0] + " or " + x[1];
      default:
        return x.slice(0, -1).join(", ") + ", or " + x[x.length - 1];
    }
  }
  function c(p) {
    return p ? '"' + a(p) + '"' : "end of input";
  }
  return "Expected " + m(t) + " but " + c(o) + " found.";
};
function _t(t) {
  if (t.length === 0)
    return { minX: 0, maxX: 0, minY: 0, maxY: 0 };
  let o = 1 / 0, i = -1 / 0, l = 1 / 0, a = -1 / 0, y = (n) => {
    o = Math.min(o, n.x), i = Math.max(i, n.x), l = Math.min(l, n.y), a = Math.max(a, n.y);
  };
  return t.forEach((n) => {
    switch (n.type) {
      case "path":
        n.points.forEach(y);
        break;
      case "text":
        y({ x: n.x, y: n.y });
        break;
      case "circle": {
        let { x: m, y: c, radius: p } = n;
        y({ x: m - p, y: c - p }), y({ x: m + p, y: c + p });
        break;
      }
      case "box": {
        let { x: m, y: c, width: p, height: x } = n, f = p / 2, d = x / 2;
        y({ x: m - f, y: c - d }), y({ x: m + f, y: c + d });
        break;
      }
    }
  }), { minX: o, maxX: i, minY: l, maxY: a };
}
var sf = (t, o = "right") => {
  switch (o) {
    case "down":
      switch (t) {
        case "middle_top":
          return "middle_right";
        case "middle_bottom":
          return "middle_left";
        case "middle_left":
          return "middle_bottom";
        case "middle_right":
          return "middle_top";
      }
      break;
    case "up":
      switch (t) {
        case "middle_top":
          return "middle_left";
        case "middle_bottom":
          return "middle_right";
        case "middle_left":
          return "middle_top";
        case "middle_right":
          return "middle_bottom";
      }
      break;
    case "left":
      switch (t) {
        case "middle_top":
          return "middle_bottom";
        case "middle_bottom":
          return "middle_top";
        case "middle_left":
          return "middle_right";
        case "middle_right":
          return "middle_left";
      }
      break;
    case "right":
      return t;
  }
  return t;
};
var L = (t, o) => {
  let { primitives: i, center: l, ports: a, size: y } = t, n = X({ a: 1, b: 0, c: 0, d: -1, e: 0, f: 2 * l.y }), m = i.map((p) => {
    switch (p = { ...p }, p.type) {
      case "path":
        return { ...p, points: p.points.map((h) => _(n, h)) };
      case "text":
        let x = _(n, { x: p.x, y: p.y }), f = { top_left: "bottom_left", top_right: "bottom_right", bottom_left: "top_left", bottom_right: "top_right", center: "center", middle_top: "middle_bottom", middle_bottom: "middle_top", middle_left: "middle_left", middle_right: "middle_right" };
        return { ...p, x: x.x, y: x.y, anchor: f[p.anchor] };
      case "circle":
      case "box":
        let d = _(n, { x: p.x, y: p.y });
        return { ...p, x: d.x, y: d.y };
    }
  }), c = a.map((p) => ({ ...p, ..._(n, p) }));
  return { primitives: m, center: l, ports: c, size: y, ...o };
};
var E = (t, o) => {
  let { primitives: i, center: l, ports: a, size: y } = t, n = X({ a: -1, b: 0, c: 0, d: 1, e: 0, f: 2 * l.x }), m = i.map((p) => {
    switch (p = { ...p }, p.type) {
      case "path":
        return { ...p, points: p.points.map((h) => _(n, h)) };
      case "text":
        let x = _(n, { x: p.x, y: p.y }), f = { top_left: "top_right", top_right: "top_left", bottom_left: "bottom_right", bottom_right: "bottom_left", center: "center", middle_top: "middle_top", middle_bottom: "middle_bottom", middle_left: "middle_right", middle_right: "middle_left" };
        return { ...p, x: x.x, y: x.y, anchor: f[p.anchor] };
      case "circle":
      case "box":
        let d = _(n, { x: p.x, y: p.y });
        return { ...p, x: d.x, y: d.y };
    }
  }), c = a.map((p) => ({ ...p, ..._(n, p) }));
  return { primitives: m, center: l, ports: c, size: y, ...o };
};
var At = (t, o) => {
  let { newOrientation: i, overrides: l } = o, a = { up: Math.PI / 2, right: 0, down: -Math.PI / 2, left: -Math.PI }, y = sr(i ? a[i] : Math.PI / 2, t.center.x, t.center.y), { primitives: n, center: m, size: c, ports: p } = t, x = n.map((h) => {
    switch (h = { ...h }, h.type) {
      case "path":
        return { ...h, points: h.points.map((lf) => _(y, lf)) };
      case "text":
        let Bl = _(y, { x: h.x, y: h.y });
        return h.anchor = sf(h.anchor, i ?? "right"), { ...h, x: Bl.x, y: Bl.y };
      case "circle":
        let ql = _(y, { x: h.x, y: h.y });
        return { ...h, x: ql.x, y: ql.y };
      case "box":
        let Dl = _(y, { x: h.x, y: h.y });
        return { ...h, x: Dl.x, y: Dl.y, width: h.height, height: h.width };
    }
  }), f = p.map((h) => ({ ...h, ..._(y, h) })), d = _t(x);
  return { primitives: x, center: m, ports: f, size: { width: d.maxX - d.minX, height: d.maxY - d.minY }, ...l };
};
var r = (t, o = "down", i = {}) => At(t, { newOrientation: o, overrides: i });
var nr = class {
  symbol;
  constructor(o) {
    this.symbol = JSON.parse(JSON.stringify(o)), this.symbol.size = this.computeSize();
  }
  changeTextAnchor(o, i, l) {
    return this.symbol = { ...this.symbol, primitives: this.symbol.primitives.map((a) => a.type === "text" && a.text === o ? { ...a, anchor: i, ...l ? { x: a.x + l.x, y: a.y + l.y } : {} } : a) }, this;
  }
  labelPort(o, i) {
    return this.symbol = { ...this.symbol, ports: this.symbol.ports.map((l) => l.labels.includes(o) ? { ...l, labels: i } : l) }, this;
  }
  rotateRightFacingSymbol(o) {
    return this.symbol = At(this.symbol, { newOrientation: o }), this;
  }
  computeSize() {
    let o = _t(this.symbol.primitives);
    return { width: o.maxX - o.minX, height: o.maxY - o.minY };
  }
  build() {
    return { ...this.symbol, size: this.computeSize() };
  }
};
var e = (t) => {
  let o = t.primitives ?? [...Object.values(t.paths ?? {}), ...Object.values(t.texts ?? {}), ...Object.values(t.circles ?? {}), ...Object.values(t.rects ?? {})], i = t.ports ?? Object.entries(t.refblocks).flatMap(([a, y]) => [{ ...y, labels: [a] }]), l = t.center ?? { x: t.bounds.centerX, y: t.bounds.centerY };
  return i.length === 2 && (l = { x: (i[0].x + i[1].x) / 2, y: (i[0].y + i[1].y) / 2 }), new nr({ ...t, primitives: o, ports: i, center: l });
};
var v = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0.03 }, { x: -0.3, y: 0.04 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0.04 }, { x: 0.54, y: 0.04 }], color: "primary", fill: false }, "path11-5-5": { type: "path", points: [{ x: 0.1, y: 0.13 }, { x: 0, y: -0.06 }, { x: -0.11, y: 0.13 }], color: "primary", fill: false }, path17: { type: "path", points: [{ x: 0, y: -0.13 }, { x: 0.07, y: -0.11 }], color: "primary", fill: false }, path18: { type: "path", points: [{ x: 0.07, y: -0.11 }, { x: 0.14, y: -0.13 }], color: "primary", fill: false }, path19: { type: "path", points: [{ x: -0.15, y: -0.13 }, { x: -0.07, y: -0.11 }], color: "primary", fill: false }, path20: { type: "path", points: [{ x: -0.07, y: -0.11 }, { x: 0, y: -0.13 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.17, y: 0.4 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: -0.4 } }, refblocks: { left1: { x: -0.54, y: 0.03 }, right1: { x: 0.54, y: 0.04 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.4, maxY: 0.4, width: 1.14, height: 0.79, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: 0.04, radius: 0.29, color: "primary", fill: false } } };
var { paths: nf, texts: u_, bounds: zt, refblocks: Ul, circles: ff } = v;
var Wl = e({ primitives: [...Object.values(nf), ...Object.values(ff), { type: "text", text: "{REF}", x: -0.15, y: 0.3894553499999995 }, { type: "text", text: "{VAL}", x: 0.15, y: 0.3894553499999995 }], ports: [{ ...Ul.left1, labels: ["1"] }, { ...Ul.right1, labels: ["2"] }], size: { width: zt.width, height: zt.height }, center: { x: zt.centerX, y: zt.centerY } }).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: hf, texts: P_, bounds: Ot, refblocks: Hl, circles: cf } = v;
var Zl = e({ primitives: [...Object.values(hf), ...Object.values(cf), { type: "text", text: "{REF}", x: -0, y: 0.4094553499999995 }, { type: "text", text: "{VAL}", x: 0, y: -0.4094553499999995 }], ports: [{ ...Hl.left1, labels: ["1"] }, { ...Hl.right1, labels: ["2"] }], size: { width: Ot.width, height: Ot.height }, center: { x: Ot.centerX, y: Ot.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: df, texts: T_, bounds: Jt, refblocks: Ql, circles: bf } = v;
var Kl = e({ primitives: [...Object.values(df), ...Object.values(bf), { type: "text", text: "{REF}", x: -0, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: 0, y: 0.4094553499999995 }], ports: [{ ...Ql.left1, labels: ["1"] }, { ...Ql.right1, labels: ["2"] }], size: { width: Jt.width, height: Jt.height }, center: { x: Jt.centerX, y: Jt.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: _f, texts: L_, bounds: $t, refblocks: tp, circles: gf } = v;
var ep = e({ primitives: [...Object.values(_f), ...Object.values(gf), { type: "text", text: "{REF}", x: -0, y: 0.4094553499999995 }, { type: "text", text: "{VAL}", x: 0, y: -0.4094553499999995 }], ports: [{ ...tp.left1, labels: ["1"] }, { ...tp.right1, labels: ["2"] }], size: { width: $t.width, height: $t.height }, center: { x: $t.centerX, y: $t.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: uf, texts: z_, bounds: Mt, refblocks: rp, circles: vf } = v;
var op = e({ primitives: [...Object.values(uf), ...Object.values(vf), { type: "text", text: "{REF}", x: 0.15, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2894553499999995 }], ports: [{ ...rp.left1, labels: ["1"] }, { ...rp.right1, labels: ["2"] }], size: { width: Mt.width, height: Mt.height }, center: { x: Mt.centerX, y: Mt.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: wf, texts: M_, bounds: Ct, refblocks: ip, circles: Af } = v;
var lp = e({ primitives: [...Object.values(wf), ...Object.values(Af), { type: "text", text: "{REF}", x: 0.15, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2894553499999995 }], ports: [{ ...ip.left1, labels: ["1"] }, { ...ip.right1, labels: ["2"] }], size: { width: Ct.width, height: Ct.height }, center: { x: Ct.centerX, y: Ct.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var w = { paths: { path40: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.12, y: -0.09 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.12, y: 0.18 }, { x: 0.14, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.12, y: -0.09 }, { x: -0.12, y: 0.18 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.14, y: -0.09 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.12, y: 0.04 }, { x: -0.52, y: 0.04 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.52, y: 0.04 }, { x: 0.15, y: 0.04 }], color: "primary", fill: false }, "path43-8": { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.08, y: 0.2 }], color: "primary", fill: false }, "path43-8-3": { type: "path", points: [{ x: 0.21, y: -0.11 }, { x: 0.15, y: -0.09 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.27 } }, refblocks: { left1: { x: -0.52, y: 0.04 }, right1: { x: 0.52, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.27, maxY: 0.27, width: 1.09, height: 0.55, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Sf, texts: q_, bounds: Nt, refblocks: pp, circles: Ff } = w;
var ap = e({ primitives: [...Object.values(Sf), ...Object.values(Ff), { type: "text", text: "{REF}", x: -0.15, y: 0.3294553499999995 }, { type: "text", text: "{VAL}", x: 0.15, y: 0.3294553499999995 }], ports: [{ ...pp.left1, labels: ["1"] }, { ...pp.right1, labels: ["2"] }], size: { width: Nt.width, height: Nt.height }, center: { x: Nt.centerX, y: Nt.centerY } }).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var yp = e(w).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1", "neg"]).labelPort("right1", ["2", "pos"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Rf, texts: Q_, bounds: It, refblocks: xp, circles: Tf } = w;
var sp = e({ primitives: [...Object.values(Rf), ...Object.values(Tf), { type: "text", text: "{REF}", x: -0, y: -0.2294553499999995 }, { type: "text", text: "{VAL}", x: 0, y: 0.3294553499999995 }], ports: [{ ...xp.left1, labels: ["1"] }, { ...xp.right1, labels: ["2"] }], size: { width: It.width, height: It.height }, center: { x: It.centerX, y: It.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var mp = e(w).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1", "neg"]).labelPort("right1", ["2", "pos"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Ef, texts: l5, bounds: Bt, refblocks: np, circles: Yf } = w;
var fp = e({ primitives: [...Object.values(Ef), ...Object.values(Yf), { type: "text", text: "{REF}", x: 0.15, y: -0.2294553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2294553499999995 }], ports: [{ ...np.left1, labels: ["1"] }, { ...np.right1, labels: ["2"] }], size: { width: Bt.width, height: Bt.height }, center: { x: Bt.centerX, y: Bt.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: Xf, texts: x5, bounds: qt, refblocks: hp, circles: Lf } = w;
var cp = e({ primitives: [...Object.values(Xf), ...Object.values(Lf), { type: "text", text: "{REF}", x: 0.15, y: -0.2294553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2294553499999995 }], ports: [{ ...hp.left1, labels: ["1"] }, { ...hp.right1, labels: ["2"] }], size: { width: qt.width, height: qt.height }, center: { x: qt.centerX, y: qt.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var V = { paths: { path40: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.12, y: -0.09 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.12, y: 0.18 }, { x: 0.14, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.12, y: -0.09 }, { x: -0.12, y: 0.18 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.14, y: -0.09 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.52, y: 0.04 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.52, y: 0.04 }, { x: 0.15, y: 0.04 }], color: "primary", fill: false }, "path43-8": { type: "path", points: [{ x: 0.18, y: 0.18 }, { x: 0.11, y: 0.18 }], color: "primary", fill: false }, "path43-8-8": { type: "path", points: [{ x: 0.18, y: -0.09 }, { x: 0.11, y: -0.09 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.27 } }, refblocks: { left1: { x: -0.52, y: 0.04 }, right1: { x: 0.52, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.27, maxY: 0.27, width: 1.09, height: 0.55, centerX: 0, centerY: 0 }, circles: {} };
var { paths: jf, texts: h5, bounds: Dt, refblocks: dp, circles: kf } = V;
var bp = e({ primitives: [...Object.values(jf), ...Object.values(kf), { type: "text", text: "{REF}", x: -0.16, y: 0.2294553499999995 }, { type: "text", text: "{VAL}", x: 0.16, y: 0.2294553499999995 }], ports: [{ ...dp.left1, labels: ["1"] }, { ...dp.right1, labels: ["2"] }], size: { width: Dt.width, height: Dt.height }, center: { x: Dt.centerX, y: Dt.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").build();
var { paths: zf, texts: _5, bounds: Gt, refblocks: _p, circles: Of } = V;
var Ut = e({ primitives: [...Object.values(zf), ...Object.values(Of), { type: "text", text: "{REF}", x: -0.0001118, y: -0.18 }, { type: "text", text: "{VAL}", x: 0.0001118, y: 0.2738453 }], ports: [{ ..._p.left1, labels: ["1"] }, { ..._p.right1, labels: ["2"] }], size: { width: Gt.width, height: Gt.height }, center: { x: Gt.centerX, y: Gt.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("left").labelPort("left1", ["2"]).labelPort("right1", ["1"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Jf, texts: w5, bounds: Wt, refblocks: gp, circles: $f } = V;
var up = e({ primitives: [...Object.values(Jf), ...Object.values($f), { type: "text", text: "{REF}", x: -0.0050250999999996715, y: 0.27384529999999985, anchor: "middle_left" }, { type: "text", text: "{VAL}", x: -0.00011179999999999524, y: -0.27384530000000007, anchor: "middle_left" }], ports: [{ ...gp.left1, labels: ["1"] }, { ...gp.right1, labels: ["2"] }], size: { width: Wt.width, height: Wt.height }, center: { x: Wt.centerX, y: Wt.centerY } }).changeTextAnchor("{VAL}", "middle_top").labelPort("right1", ["2"]).labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_bottom").build();
var fr = r(Ut, "down");
var hr = fr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var cr = fr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
hr.anchor = "middle_left";
cr.anchor = "middle_left";
hr.x = 0.25;
hr.y += 0.21;
cr.y -= 0.21;
cr.x = 0.25;
var vp = fr;
function s(t) {
  let o = t.size;
  if (!o) {
    let i = _t(t.primitives);
    o = { width: i.maxX - i.minX, height: i.maxY - i.minY };
  }
  return { ...t, size: o };
}
var wp = { paths: { path43: { type: "path", points: [{ x: -0.06, y: 0.19 }, { x: -0.06, y: -0.12 }], color: "primary", fill: false }, "path43-6": { type: "path", points: [{ x: 0.02, y: 0.13 }, { x: 0.02, y: -0.06 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.06, y: 0.03 }, { x: -0.45, y: 0.03 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.45, y: 0.03 }, { x: 0.03, y: 0.03 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.03, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: -0.03, y: -0.28 } }, refblocks: { left1: { x: -0.45, y: 0.03 }, right1: { x: 0.45, y: 0.03 } }, bounds: { minX: -0.47, maxX: 0.47, minY: -0.38, maxY: 0.27, width: 0.95, height: 0.29, centerX: 0, centerY: 0.06 }, circles: {} };
var { paths: Cf, texts: Ap, bounds: Ht, refblocks: Pp, circles: Nf } = wp;
var Zt = s({ primitives: [...Object.values(Cf), ...Object.values(Nf), { ...Ap.top1, anchor: "middle_bottom" }, { ...Ap.bottom1, anchor: "middle_top" }], ports: [{ ...Pp.left1, labels: ["1"] }, { ...Pp.right1, labels: ["2"] }], size: { width: Ht.width, height: Ht.height }, center: { x: Ht.centerX, y: Ht.centerY } });
var Sp = At(Zt, { newOrientation: "up" });
var j = { paths: { path1: { type: "path", points: [{ x: -0.53, y: 0.05 }, { x: -0.25, y: 0.05 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.28, y: 0.05 }, { x: 0.57, y: 0.05 }], color: "primary", fill: false }, path3: { type: "path", points: [{ x: 0.02, y: 0.18 }, { x: 0.28, y: 0.18 }, { x: 0.28, y: -0.09 }, { x: -0.25, y: -0.09 }, { x: -0.25, y: 0.18 }, { x: 0.02, y: 0.18 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.25 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.25 } }, refblocks: { left1: { x: -0.53, y: 0.05 }, right1: { x: 0.57, y: 0.05 } }, bounds: { minX: -0.56, maxX: 0.56, minY: -0.25, maxY: 0.25, width: 1.12, height: 0.5, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Bf, texts: q5, bounds: Fp, refblocks: Rp, circles: qf } = j;
var Tp = e({ primitives: [...Object.values(Bf), ...Object.values(qf), { type: "text", text: "{REF}", x: -0.16, y: 0.2294553499999995 }, { type: "text", text: "{VAL}", x: 0.16, y: 0.2294553499999995 }], ports: [{ ...Rp.left1, labels: ["1"] }, { ...Rp.right1, labels: ["2"] }], center: { x: Fp.centerX, y: Fp.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").build();
var { paths: Df, texts: W5, bounds: Ep, refblocks: Yp, circles: Gf } = j;
var Xp = e({ primitives: [...Object.values(Df), ...Object.values(Gf), { type: "text", text: "{REF}", x: 0, y: -0.1994553499999995 }, { type: "text", text: "{VAL}", x: 0, y: 0.2694553499999995 }], ports: [{ ...Yp.left1, labels: ["1"] }, { ...Yp.right1, labels: ["2"] }], center: { x: Ep.centerX, y: Ep.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Uf, texts: K5, bounds: Lp, refblocks: Vp, circles: Wf } = j;
var jp = e({ primitives: [...Object.values(Uf), ...Object.values(Wf), { type: "text", text: "{REF}", x: 0, y: 0.2294553499999995 }, { type: "text", text: "{VAL}", x: 0, y: -0.1594553499999995 }], ports: [{ ...Vp.left1, labels: ["1"] }, { ...Vp.right1, labels: ["2"] }], center: { x: Lp.centerX, y: Lp.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var k = { paths: { path2: { type: "path", points: [{ x: 0.15, y: -0.01 }, { x: 0.55, y: -0.01 }], color: "primary", fill: true }, "path2-5": { type: "path", points: [{ x: -0.15, y: 0.06 }, { x: 0.14, y: 0.06 }], color: "primary", fill: true }, "path2-5-1": { type: "path", points: [{ x: 0.14, y: 0.06 }, { x: 0.14, y: -0.08 }], color: "primary", fill: true }, "path2-5-1-6": { type: "path", points: [{ x: -0.16, y: 0.06 }, { x: -0.16, y: -0.08 }], color: "primary", fill: true }, "path2-5-4": { type: "path", points: [{ x: -0.15, y: -0.08 }, { x: 0.14, y: -0.08 }], color: "primary", fill: true }, "path2-9": { type: "path", points: [{ x: -0.55, y: -0.01 }, { x: -0.17, y: -0.01 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.17 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.17 } }, refblocks: { left1: { x: -0.55, y: -0.01 }, right1: { x: 0.55, y: -0.01 } }, bounds: { minX: -0.58, maxX: 0.58, minY: -0.17, maxY: 0.17, width: 1.16, height: 0.35, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Zf, texts: ig, bounds: Qt, refblocks: kp, circles: Qf } = k;
var zp = e({ primitives: [...Object.values(Zf), ...Object.values(Qf), { type: "text", text: "{REF}", x: -0.2, y: 0.1404553499999995 }, { type: "text", text: "{VAL}", x: 0.2, y: 0.1494553499999995 }], ports: [{ ...kp.left1, labels: ["1"] }, { ...kp.right1, labels: ["2"] }], size: { width: Qt.width, height: Qt.height }, center: { x: Qt.centerX, y: Qt.centerY } }).rotateRightFacingSymbol("down").labelPort("left", ["1"]).labelPort("right", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: Kf, texts: yg, bounds: Kt, refblocks: Op, circles: th } = k;
var Jp = e({ primitives: [...Object.values(Kf), ...Object.values(th), { type: "text", text: "{REF}", x: 0, y: -0.2294553499999995 }, { type: "text", text: "{VAL}", x: 0, y: 0.1704553499999995 }], ports: [{ ...Op.left1, labels: ["1"] }, { ...Op.right1, labels: ["2"] }], size: { width: Kt.width, height: Kt.height }, center: { x: Kt.centerX, y: Kt.centerY } }).rotateRightFacingSymbol("left").labelPort("left", ["1"]).labelPort("right", ["2"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var { paths: eh, texts: ng, bounds: te, refblocks: $p, circles: rh } = k;
var Mp = e({ primitives: [...Object.values(eh), ...Object.values(rh), { type: "text", text: "{REF}", x: 0, y: 0.2294553499999995 }, { type: "text", text: "{VAL}", x: 0, y: -0.1704553499999995 }], ports: [{ ...$p.left1, labels: ["1"] }, { ...$p.right1, labels: ["2"] }], size: { width: te.width, height: te.height }, center: { x: te.centerX, y: te.centerY } }).rotateRightFacingSymbol("right").labelPort("left", ["1"]).labelPort("right", ["2"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var { paths: oh, texts: dg, bounds: ee, refblocks: Cp, circles: ih } = k;
var Np = e({ primitives: [...Object.values(oh), ...Object.values(ih), { type: "text", text: "{REF}", x: 0.2, y: -0.1404553499999995 }, { type: "text", text: "{VAL}", x: -0.2, y: -0.1494553499999995 }], ports: [{ ...Cp.left1, labels: ["1"] }, { ...Cp.right1, labels: ["2"] }], size: { width: ee.width, height: ee.height }, center: { x: ee.centerX, y: ee.centerY } }).rotateRightFacingSymbol("up").labelPort("left", ["1"]).labelPort("right", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: lh, texts: ug, bounds: Ip, refblocks: Bp, circles: ph } = j;
var qp = e({ primitives: [...Object.values(lh), ...Object.values(ph), { type: "text", text: "{REF}", x: 0.16, y: -0.2294553499999995 }, { type: "text", text: "{VAL}", x: -0.16, y: -0.2294553499999995 }], ports: [{ ...Bp.left1, labels: ["1"] }, { ...Bp.right1, labels: ["2"] }], center: { x: Ip.centerX, y: Ip.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").build();
var gt = { paths: { "horizontal-bar": { type: "path", points: [{ x: -0.4, y: 0 }, { x: 0.4, y: 0 }], color: "primary", fill: false }, "middle-dash-1": { type: "path", points: [{ x: 0, y: 0.2 }, { x: 0, y: 0.07 }], color: "primary", fill: false }, "middle-dash-2": { type: "path", points: [{ x: 0, y: 0.01 }, { x: 0, y: -0.12 }], color: "primary", fill: false }, "middle-dash-3": { type: "path", points: [{ x: 0, y: -0.18 }, { x: 0, y: -0.31 }], color: "primary", fill: false }, "left-vertical": { type: "path", points: [{ x: -0.25, y: 0 }, { x: -0.25, y: -0.2 }], color: "primary", fill: false }, "right-vertical": { type: "path", points: [{ x: 0.25, y: 0 }, { x: 0.25, y: -0.2 }], color: "primary", fill: false }, "left-ground": { type: "path", points: [{ x: -0.3, y: -0.2 }, { x: -0.25, y: -0.3 }, { x: -0.2, y: -0.2 }, { x: -0.3, y: -0.2 }], color: "primary", fill: false }, "right-ground": { type: "path", points: [{ x: 0.2, y: -0.2 }, { x: 0.25, y: -0.3 }, { x: 0.3, y: -0.2 }, { x: 0.2, y: -0.2 }], color: "primary", fill: false } }, refblocks: { left1: { x: -0.4, y: 0 }, right1: { x: 0.4, y: 0 } }, texts: { ref: { type: "text", text: "{REF}", x: 0, y: 0.35 } }, bounds: { minX: -0.4, maxX: 0.4, minY: -0.4, maxY: 0.35, width: 0.8, height: 0.75, centerX: 0, centerY: -0.02 }, circles: {} };
var { paths: yh, texts: Sg, bounds: Dp, refblocks: Gp, circles: xh } = gt;
var Up = e({ primitives: [...Object.values(yh), ...Object.values(xh), { type: "text", text: "{REF}", x: 0, y: 0.2594553499999995 }], ports: [{ ...Gp.left1, labels: ["1"] }, { ...Gp.right1, labels: ["2"] }], center: { x: Dp.centerX, y: Dp.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").build();
var { paths: sh, texts: Eg, bounds: Wp, refblocks: Hp, circles: mh } = gt;
var re = e({ primitives: [...Object.values(sh), ...Object.values(mh), { type: "text", text: "{REF}", x: 0, y: 0.2594553499999995 }], ports: [{ ...Hp.left1, labels: ["1"] }, { ...Hp.right1, labels: ["2"] }], center: { x: Wp.centerX, y: Wp.centerY } }).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var Zp = E(re);
var { paths: nh, texts: zg, bounds: Qp, refblocks: Kp, circles: fh } = gt;
var ta = e({ primitives: [...Object.values(nh), ...Object.values(fh), { type: "text", text: "{REF}", x: 0, y: 0.2594553499999995 }], ports: [{ ...Kp.left1, labels: ["1"] }, { ...Kp.right1, labels: ["2"] }], center: { x: Qp.centerX, y: Qp.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_right").build();
var z = { paths: { path27: { type: "path", points: [{ x: 0.55, y: 0.02 }, { x: 0.07, y: 0.02 }], color: "primary", fill: false }, path28: { type: "path", points: [{ x: -0.09, y: 0.02 }, { x: -0.55, y: 0.02 }], color: "primary", fill: false }, path29: { type: "path", points: [{ x: 0.07, y: 0.28 }, { x: 0.07, y: -0.25 }], color: "primary", fill: false }, path30: { type: "path", points: [{ x: -0.09, y: 0.28 }, { x: -0.09, y: -0.25 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.42 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.42 } }, refblocks: { left1: { x: -0.55, y: 0.02 }, right1: { x: 0.55, y: 0.02 } }, bounds: { minX: -0.58, maxX: 0.58, minY: -0.42, maxY: 0.42, width: 1.16, height: 0.84, centerX: 0, centerY: 0 }, circles: {} };
var { paths: ch, texts: Cg, bounds: oe, refblocks: ea, circles: dh } = z;
var ra = e({ primitives: [...Object.values(ch), ...Object.values(dh), { type: "text", text: "{REF}", x: -0.2, y: 0.115 }, { type: "text", text: "{VAL}", x: 0.2, y: 0.115 }], ports: [{ ...ea.left1, labels: ["1"] }, { ...ea.right1, labels: ["2"] }], size: { width: oe.width, height: oe.height }, center: { x: oe.centerX, y: oe.centerY } }).changeTextAnchor("{VAL}", "top_left").rotateRightFacingSymbol("down").labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{REF}", "bottom_left").build();
var oa = e(z).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["2", "neg"]).labelPort("right1", ["1", "pos"]).changeTextAnchor("{REF}", "middle_bottom").build();
var O = { paths: { "path27-5": { type: "path", points: [{ x: 0.45, y: 0.02 }, { x: 0, y: 0.02 }], color: "primary", fill: false }, "path28-5": { type: "path", points: [{ x: -0.09, y: 0.02 }, { x: -0.54, y: 0.02 }], color: "primary", fill: false }, "path30-7": { type: "path", points: [{ x: 0, y: 0.28 }, { x: 0, y: -0.25 }], color: "primary", fill: false }, path8704: { type: "path", points: [{ x: -0.14, y: -0.24 }, { x: -0.14, y: -0.24 }, { x: -0.14, y: -0.24 }, { x: -0.14, y: -0.24 }, { x: -0.14, y: -0.24 }, { x: -0.14, y: -0.24 }, { x: -0.14, y: -0.24 }, { x: -0.14, y: -0.24 }, { x: -0.14, y: -0.24 }, { x: -0.14, y: -0.23 }, { x: -0.14, y: -0.23 }, { x: -0.14, y: -0.23 }, { x: -0.14, y: -0.23 }, { x: -0.13, y: -0.23 }, { x: -0.13, y: -0.23 }, { x: -0.13, y: -0.23 }, { x: -0.13, y: -0.23 }, { x: -0.13, y: -0.22 }, { x: -0.13, y: -0.22 }, { x: -0.13, y: -0.22 }, { x: -0.13, y: -0.22 }, { x: -0.13, y: -0.22 }, { x: -0.13, y: -0.22 }, { x: -0.13, y: -0.22 }, { x: -0.13, y: -0.22 }, { x: -0.13, y: -0.21 }, { x: -0.13, y: -0.21 }, { x: -0.13, y: -0.21 }, { x: -0.12, y: -0.21 }, { x: -0.12, y: -0.21 }, { x: -0.12, y: -0.21 }, { x: -0.12, y: -0.21 }, { x: -0.12, y: -0.21 }, { x: -0.12, y: -0.2 }, { x: -0.12, y: -0.2 }, { x: -0.12, y: -0.2 }, { x: -0.12, y: -0.2 }, { x: -0.12, y: -0.2 }, { x: -0.12, y: -0.2 }, { x: -0.12, y: -0.2 }, { x: -0.12, y: -0.2 }, { x: -0.12, y: -0.19 }, { x: -0.12, y: -0.19 }, { x: -0.12, y: -0.19 }, { x: -0.12, y: -0.19 }, { x: -0.11, y: -0.19 }, { x: -0.11, y: -0.19 }, { x: -0.11, y: -0.19 }, { x: -0.11, y: -0.18 }, { x: -0.11, y: -0.18 }, { x: -0.11, y: -0.18 }, { x: -0.11, y: -0.18 }, { x: -0.11, y: -0.18 }, { x: -0.11, y: -0.18 }, { x: -0.11, y: -0.18 }, { x: -0.11, y: -0.18 }, { x: -0.11, y: -0.17 }, { x: -0.11, y: -0.17 }, { x: -0.11, y: -0.17 }, { x: -0.11, y: -0.17 }, { x: -0.11, y: -0.17 }, { x: -0.11, y: -0.17 }, { x: -0.11, y: -0.17 }, { x: -0.11, y: -0.17 }, { x: -0.1, y: -0.16 }, { x: -0.1, y: -0.16 }, { x: -0.1, y: -0.16 }, { x: -0.1, y: -0.16 }, { x: -0.1, y: -0.16 }, { x: -0.1, y: -0.16 }, { x: -0.1, y: -0.16 }, { x: -0.1, y: -0.16 }, { x: -0.1, y: -0.15 }, { x: -0.1, y: -0.15 }, { x: -0.1, y: -0.15 }, { x: -0.1, y: -0.15 }, { x: -0.1, y: -0.15 }, { x: -0.1, y: -0.15 }, { x: -0.1, y: -0.15 }, { x: -0.1, y: -0.14 }, { x: -0.1, y: -0.14 }, { x: -0.1, y: -0.14 }, { x: -0.1, y: -0.14 }, { x: -0.1, y: -0.14 }, { x: -0.1, y: -0.14 }, { x: -0.1, y: -0.14 }, { x: -0.09, y: -0.14 }, { x: -0.09, y: -0.13 }, { x: -0.09, y: -0.13 }, { x: -0.09, y: -0.13 }, { x: -0.09, y: -0.13 }, { x: -0.09, y: -0.13 }, { x: -0.09, y: -0.13 }, { x: -0.09, y: -0.13 }, { x: -0.09, y: -0.13 }, { x: -0.09, y: -0.12 }, { x: -0.09, y: -0.12 }, { x: -0.09, y: -0.12 }, { x: -0.09, y: -0.12 }, { x: -0.09, y: -0.12 }, { x: -0.09, y: -0.12 }, { x: -0.09, y: -0.12 }, { x: -0.09, y: -0.12 }, { x: -0.09, y: -0.11 }, { x: -0.09, y: -0.11 }, { x: -0.09, y: -0.11 }, { x: -0.09, y: -0.11 }, { x: -0.09, y: -0.11 }, { x: -0.09, y: -0.11 }, { x: -0.09, y: -0.1 }, { x: -0.09, y: -0.1 }, { x: -0.09, y: -0.1 }, { x: -0.09, y: -0.1 }, { x: -0.09, y: -0.1 }, { x: -0.09, y: -0.1 }, { x: -0.08, y: -0.09 }, { x: -0.08, y: -0.09 }, { x: -0.08, y: -0.09 }, { x: -0.08, y: -0.09 }, { x: -0.08, y: -0.09 }, { x: -0.08, y: -0.09 }, { x: -0.08, y: -0.08 }, { x: -0.08, y: -0.08 }, { x: -0.08, y: -0.08 }, { x: -0.08, y: -0.08 }, { x: -0.08, y: -0.08 }, { x: -0.08, y: -0.08 }, { x: -0.08, y: -0.07 }, { x: -0.08, y: -0.07 }, { x: -0.08, y: -0.07 }, { x: -0.08, y: -0.07 }, { x: -0.08, y: -0.07 }, { x: -0.08, y: -0.07 }, { x: -0.08, y: -0.06 }, { x: -0.08, y: -0.06 }, { x: -0.08, y: -0.06 }, { x: -0.08, y: -0.06 }, { x: -0.08, y: -0.06 }, { x: -0.08, y: -0.05 }, { x: -0.08, y: -0.05 }, { x: -0.08, y: -0.05 }, { x: -0.08, y: -0.05 }, { x: -0.08, y: -0.05 }, { x: -0.08, y: -0.05 }, { x: -0.08, y: -0.04 }, { x: -0.08, y: -0.04 }, { x: -0.08, y: -0.04 }, { x: -0.08, y: -0.04 }, { x: -0.08, y: -0.04 }, { x: -0.08, y: -0.04 }, { x: -0.08, y: -0.03 }, { x: -0.08, y: -0.03 }, { x: -0.08, y: -0.03 }, { x: -0.08, y: -0.03 }, { x: -0.08, y: -0.03 }, { x: -0.08, y: -0.03 }, { x: -0.08, y: -0.02 }, { x: -0.08, y: -0.02 }, { x: -0.08, y: -0.02 }, { x: -0.08, y: -0.02 }, { x: -0.08, y: -0.02 }, { x: -0.08, y: -0.02 }, { x: -0.08, y: -0.01 }, { x: -0.08, y: -0.01 }, { x: -0.08, y: -0.01 }, { x: -0.08, y: -0.01 }, { x: -0.08, y: -0.01 }, { x: -0.08, y: 0 }, { x: -0.08, y: 0 }, { x: -0.08, y: 0 }, { x: -0.08, y: 0 }, { x: -0.08, y: 0 }, { x: -0.08, y: 0 }, { x: -0.08, y: 0.01 }, { x: -0.07, y: 0.01 }, { x: -0.07, y: 0.01 }, { x: -0.07, y: 0.01 }, { x: -0.07, y: 0.01 }, { x: -0.07, y: 0.01 }, { x: -0.08, y: 0.02 }, { x: -0.08, y: 0.02 }, { x: -0.08, y: 0.02 }, { x: -0.08, y: 0.02 }, { x: -0.08, y: 0.02 }, { x: -0.08, y: 0.02 }, { x: -0.08, y: 0.03 }, { x: -0.08, y: 0.03 }, { x: -0.08, y: 0.03 }, { x: -0.08, y: 0.03 }, { x: -0.08, y: 0.03 }, { x: -0.08, y: 0.03 }, { x: -0.08, y: 0.04 }, { x: -0.08, y: 0.04 }, { x: -0.08, y: 0.04 }, { x: -0.08, y: 0.04 }, { x: -0.08, y: 0.04 }, { x: -0.08, y: 0.05 }, { x: -0.08, y: 0.05 }, { x: -0.08, y: 0.05 }, { x: -0.08, y: 0.05 }, { x: -0.08, y: 0.05 }, { x: -0.08, y: 0.05 }, { x: -0.08, y: 0.06 }, { x: -0.08, y: 0.06 }, { x: -0.08, y: 0.06 }, { x: -0.08, y: 0.06 }, { x: -0.08, y: 0.06 }, { x: -0.08, y: 0.06 }, { x: -0.08, y: 0.06 }, { x: -0.08, y: 0.06 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.08 }, { x: -0.08, y: 0.08 }, { x: -0.08, y: 0.08 }, { x: -0.08, y: 0.08 }, { x: -0.08, y: 0.08 }, { x: -0.08, y: 0.08 }, { x: -0.08, y: 0.09 }, { x: -0.08, y: 0.09 }, { x: -0.08, y: 0.09 }, { x: -0.08, y: 0.09 }, { x: -0.08, y: 0.09 }, { x: -0.08, y: 0.09 }, { x: -0.08, y: 0.09 }, { x: -0.08, y: 0.1 }, { x: -0.08, y: 0.1 }, { x: -0.08, y: 0.1 }, { x: -0.08, y: 0.1 }, { x: -0.08, y: 0.1 }, { x: -0.08, y: 0.1 }, { x: -0.08, y: 0.1 }, { x: -0.08, y: 0.11 }, { x: -0.08, y: 0.11 }, { x: -0.08, y: 0.11 }, { x: -0.08, y: 0.11 }, { x: -0.08, y: 0.11 }, { x: -0.08, y: 0.11 }, { x: -0.08, y: 0.11 }, { x: -0.08, y: 0.12 }, { x: -0.08, y: 0.12 }, { x: -0.08, y: 0.12 }, { x: -0.08, y: 0.12 }, { x: -0.09, y: 0.12 }, { x: -0.09, y: 0.12 }, { x: -0.09, y: 0.12 }, { x: -0.09, y: 0.13 }, { x: -0.09, y: 0.13 }, { x: -0.09, y: 0.13 }, { x: -0.09, y: 0.13 }, { x: -0.09, y: 0.13 }, { x: -0.09, y: 0.13 }, { x: -0.09, y: 0.14 }, { x: -0.09, y: 0.14 }, { x: -0.09, y: 0.14 }, { x: -0.09, y: 0.14 }, { x: -0.09, y: 0.14 }, { x: -0.09, y: 0.14 }, { x: -0.09, y: 0.14 }, { x: -0.09, y: 0.15 }, { x: -0.09, y: 0.15 }, { x: -0.09, y: 0.15 }, { x: -0.09, y: 0.15 }, { x: -0.09, y: 0.15 }, { x: -0.09, y: 0.15 }, { x: -0.09, y: 0.15 }, { x: -0.09, y: 0.16 }, { x: -0.09, y: 0.16 }, { x: -0.09, y: 0.16 }, { x: -0.09, y: 0.16 }, { x: -0.09, y: 0.16 }, { x: -0.09, y: 0.16 }, { x: -0.09, y: 0.16 }, { x: -0.09, y: 0.17 }, { x: -0.09, y: 0.17 }, { x: -0.1, y: 0.17 }, { x: -0.1, y: 0.17 }, { x: -0.1, y: 0.17 }, { x: -0.1, y: 0.17 }, { x: -0.1, y: 0.17 }, { x: -0.1, y: 0.18 }, { x: -0.1, y: 0.18 }, { x: -0.1, y: 0.18 }, { x: -0.1, y: 0.18 }, { x: -0.1, y: 0.18 }, { x: -0.1, y: 0.18 }, { x: -0.1, y: 0.18 }, { x: -0.1, y: 0.19 }, { x: -0.1, y: 0.19 }, { x: -0.1, y: 0.19 }, { x: -0.1, y: 0.19 }, { x: -0.1, y: 0.19 }, { x: -0.1, y: 0.19 }, { x: -0.1, y: 0.19 }, { x: -0.1, y: 0.2 }, { x: -0.1, y: 0.2 }, { x: -0.1, y: 0.2 }, { x: -0.1, y: 0.2 }, { x: -0.1, y: 0.2 }, { x: -0.1, y: 0.2 }, { x: -0.11, y: 0.2 }, { x: -0.11, y: 0.2 }, { x: -0.11, y: 0.2 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.21 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.22 }, { x: -0.11, y: 0.23 }, { x: -0.11, y: 0.23 }, { x: -0.11, y: 0.23 }, { x: -0.11, y: 0.23 }, { x: -0.12, y: 0.23 }, { x: -0.12, y: 0.23 }, { x: -0.12, y: 0.23 }, { x: -0.12, y: 0.23 }, { x: -0.12, y: 0.23 }, { x: -0.12, y: 0.23 }, { x: -0.12, y: 0.23 }, { x: -0.12, y: 0.23 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.24 }, { x: -0.12, y: 0.25 }, { x: -0.12, y: 0.25 }, { x: -0.12, y: 0.25 }, { x: -0.12, y: 0.25 }, { x: -0.12, y: 0.25 }, { x: -0.12, y: 0.25 }, { x: -0.13, y: 0.25 }, { x: -0.13, y: 0.25 }, { x: -0.13, y: 0.25 }, { x: -0.13, y: 0.25 }, { x: -0.13, y: 0.25 }, { x: -0.13, y: 0.25 }, { x: -0.13, y: 0.25 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.26 }, { x: -0.13, y: 0.27 }, { x: -0.13, y: 0.27 }, { x: -0.13, y: 0.27 }, { x: -0.13, y: 0.27 }, { x: -0.14, y: 0.27 }, { x: -0.14, y: 0.27 }, { x: -0.14, y: 0.27 }, { x: -0.14, y: 0.27 }, { x: -0.14, y: 0.27 }, { x: -0.14, y: 0.27 }, { x: -0.14, y: 0.27 }, { x: -0.14, y: 0.27 }, { x: -0.14, y: 0.27 }, { x: -0.14, y: 0.28 }, { x: -0.14, y: 0.28 }, { x: -0.14, y: 0.28 }, { x: -0.14, y: 0.28 }, { x: -0.14, y: 0.28 }, { x: -0.14, y: 0.28 }, { x: -0.14, y: 0.28 }, { x: -0.14, y: 0.28 }, { x: -0.14, y: 0.28 }], color: "primary", fill: false }, "rect1577-4": { type: "path", points: [{ x: 0.26, y: 0.25 }, { x: 0.12, y: 0.25 }, { x: 0.12, y: 0.25 }, { x: 0.26, y: 0.25 }], color: "primary", fill: true }, "rect1577-4-7": { type: "path", points: [{ x: 0.2, y: 0.32 }, { x: 0.2, y: 0.18 }, { x: 0.19, y: 0.18 }, { x: 0.19, y: 0.32 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.42 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.42 } }, refblocks: { left1: { x: -0.54, y: 0.02 }, right1: { x: 0.45, y: 0.02 } }, bounds: { minX: -0.58, maxX: 0.58, minY: -0.42, maxY: 0.42, width: 1.16, height: 0.84, centerX: 0, centerY: 0 }, circles: {} };
var { paths: _h, texts: Wg, bounds: ie, refblocks: ia, circles: gh } = O;
var la = e({ primitives: [...Object.values(_h), ...Object.values(gh), { type: "text", text: "{REF}", x: 0.1, y: -0.2094553499999995 }, { type: "text", text: "{VAL}", x: -0.2, y: -0.2094553499999995 }], ports: [{ ...ia.left1, labels: ["2", "neg"] }, { ...ia.right1, labels: ["1", "pos"] }], size: { width: ie.width, height: ie.height }, center: { x: ie.centerX, y: ie.centerY } }).changeTextAnchor("{VAL}", "top_left").rotateRightFacingSymbol("up").changeTextAnchor("{REF}", "bottom_left").build();
var pa = e(O).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["2", "neg"]).labelPort("right1", ["1", "pos"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: uh, texts: r3, bounds: le, refblocks: aa, circles: vh } = O;
var ya = e({ primitives: [...Object.values(uh), ...Object.values(vh), { type: "text", text: "{REF}", x: 0, y: -0.4094553499999995 }, { type: "text", text: "{VAL}", x: -0, y: 0.4094553499999995 }], ports: [{ ...aa.left1, labels: ["2", "neg"] }, { ...aa.right1, labels: ["1", "pos"] }], size: { width: le.width, height: le.height }, center: { x: le.centerX, y: le.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("left").changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: wh, texts: p3, bounds: pe, refblocks: xa, circles: Ah } = O;
var sa = e({ primitives: [...Object.values(wh), ...Object.values(Ah), { type: "text", text: "{REF}", x: -0.2, y: 0.2094553499999995 }, { type: "text", text: "{VAL}", x: 0.3, y: 0.2094553499999995 }], ports: [{ ...xa.left1, labels: ["2", "neg"] }, { ...xa.right1, labels: ["1", "pos"] }], size: { width: pe.width, height: pe.height }, center: { x: pe.centerX, y: pe.centerY } }).changeTextAnchor("{VAL}", "top_left").rotateRightFacingSymbol("down").changeTextAnchor("{REF}", "bottom_left").build();
var ma = e(z).rotateRightFacingSymbol("right").changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Ph, texts: f3, bounds: ae, refblocks: na, circles: Sh } = z;
var fa = e({ primitives: [...Object.values(Ph), ...Object.values(Sh), { type: "text", text: "{REF}", x: 0.2, y: -0.095 }, { type: "text", text: "{VAL}", x: -0.2, y: -0.095 }], ports: [{ ...na.left1, labels: ["1"] }, { ...na.right1, labels: ["2"] }], size: { width: ae.width, height: ae.height }, center: { x: ae.centerX, y: ae.centerY } }).changeTextAnchor("{VAL}", "top_left").rotateRightFacingSymbol("up").labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{REF}", "bottom_left").build();
var A = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0.03 }, { x: -0.3, y: 0.03 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0.03 }, { x: 0.54, y: 0.03 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.29, y: 0.29 }, { x: 0.29, y: -0.23 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.02, y: 0.37 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: -0.37 } }, refblocks: { left1: { x: -0.54, y: 0.03 }, right1: { x: 0.54, y: 0.03 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.37, maxY: 0.37, width: 1.14, height: 0.74, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: 0.04, radius: 0.29, color: "primary", fill: false } } };
var { paths: Rh, texts: _3, bounds: ye, refblocks: ha, circles: Th } = A;
var ca = e({ primitives: [...Object.values(Rh), ...Object.values(Th), { type: "text", text: "{REF}", x: -0.15, y: 0.3894553499999995 }, { type: "text", text: "{VAL}", x: 0.15, y: 0.3894553499999995 }], ports: [{ ...ha.left1, labels: ["1"] }, { ...ha.right1, labels: ["2"] }], size: { width: ye.width, height: ye.height }, center: { x: ye.centerX, y: ye.centerY } }).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var da = e(A).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Eh, texts: S3, bounds: xe, refblocks: ba, circles: Yh } = A;
var _a = e({ primitives: [...Object.values(Eh), ...Object.values(Yh), { type: "text", text: "{REF}", x: -0, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: 0, y: 0.3894553499999995 }], ports: [{ ...ba.left1, labels: ["1"] }, { ...ba.right1, labels: ["2"] }], size: { width: xe.width, height: xe.height }, center: { x: xe.centerX, y: xe.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var ga = e(A).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1", "neg"]).labelPort("right1", ["2", "pos"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Xh, texts: L3, bounds: se, refblocks: ua, circles: Lh } = A;
var va = e({ primitives: [...Object.values(Xh), ...Object.values(Lh), { type: "text", text: "{REF}", x: 0.15, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2894553499999995 }], ports: [{ ...ua.left1, labels: ["1"] }, { ...ua.right1, labels: ["2"] }], size: { width: se.width, height: se.height }, center: { x: se.centerX, y: se.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: Vh, texts: z3, bounds: me, refblocks: wa, circles: jh } = A;
var Aa = e({ primitives: [...Object.values(Vh), ...Object.values(jh), { type: "text", text: "{REF}", x: 0.15, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2894553499999995 }], ports: [{ ...wa.left1, labels: ["1"] }, { ...wa.right1, labels: ["2"] }], size: { width: me.width, height: me.height }, center: { x: me.centerX, y: me.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var J = { paths: { path27: { type: "path", points: [{ x: 0.54, y: -0.01 }, { x: 0.13, y: -0.01 }], color: "primary", fill: false }, path29: { type: "path", points: [{ x: 0.13, y: 0.25 }, { x: 0.13, y: -0.27 }], color: "primary", fill: false }, "path29-2": { type: "path", points: [{ x: 0.07, y: 0.25 }, { x: 0.07, y: -0.28 }], color: "primary", fill: false }, path30: { type: "path", points: [{ x: -0.14, y: 0.25 }, { x: -0.14, y: -0.27 }], color: "primary", fill: false }, "path29-5": { type: "path", points: [{ x: -0.08, y: 0.26 }, { x: -0.08, y: -0.27 }], color: "primary", fill: false }, "path29-2-7": { type: "path", points: [{ x: 0.07, y: 0.26 }, { x: -0.08, y: 0.26 }], color: "primary", fill: false }, "path29-2-7-6": { type: "path", points: [{ x: 0.07, y: -0.28 }, { x: -0.08, y: -0.28 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: -0.21, y: 0.32 }, { x: 0.2, y: 0.32 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0, y: 0.71 }, { x: 0, y: 0.33 }, { x: 0, y: 0.32 }], color: "primary", fill: false }, "path43-8": { type: "path", points: [{ x: -0.21, y: 0.32 }, { x: -0.21, y: 0.25 }], color: "primary", fill: false }, "path43-8-8": { type: "path", points: [{ x: 0.2, y: 0.32 }, { x: 0.2, y: 0.25 }], color: "primary", fill: false }, "path43-9": { type: "path", points: [{ x: 0.19, y: -0.35 }, { x: -0.22, y: -0.35 }], color: "primary", fill: false }, "path44-0-5": { type: "path", points: [{ x: -0.02, y: -0.71 }, { x: -0.02, y: -0.36 }, { x: -0.02, y: -0.35 }], color: "primary", fill: false }, "path43-8-1": { type: "path", points: [{ x: 0.19, y: -0.35 }, { x: 0.19, y: -0.28 }], color: "primary", fill: false }, "path43-8-8-9": { type: "path", points: [{ x: -0.22, y: -0.35 }, { x: -0.22, y: -0.28 }], color: "primary", fill: false }, path28: { type: "path", points: [{ x: -0.14, y: -0.01 }, { x: -0.54, y: -0.01 }], color: "primary", fill: false } }, texts: { left1: { type: "text", text: "{REF}", x: 0.53, y: 0.28 }, right1: { type: "text", text: "{VAL}", x: 0.54, y: -0.28 } }, refblocks: { top1: { x: 0, y: 0.71 }, bottom1: { x: -0.02, y: -0.71 }, left1: { x: -0.54, y: -0.01 }, right1: { x: 0.54, y: -0.01 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.74, maxY: 0.74, width: 1.14, height: 1.48, centerX: 0, centerY: 0 }, circles: {} };
var { paths: zh, texts: C3, bounds: ne, refblocks: fe, circles: Oh } = J;
var Pa = e({ primitives: [...Object.values(zh), ...Object.values(Oh), { type: "text", text: "{REF}", x: -0.4, y: 0.4094554499999995 }, { type: "text", text: "{VAL}", x: 0.4, y: 0.4094553499999995 }], ports: [{ ...fe.left1, labels: ["1"] }, { ...fe.right1, labels: ["3"] }, { ...fe.bottom1, labels: ["2"] }, { ...fe.top1, labels: ["4"] }], size: { width: ne.width, height: ne.height }, center: { x: ne.centerX, y: ne.centerY } }).rotateRightFacingSymbol("down").changeTextAnchor("{REF}", "bottom_left").changeTextAnchor("{VAL}", "top_left").build();
var Sa = e(J).labelPort("top1", ["2", "gnd1"]).labelPort("bottom1", ["4", "gnd2"]).labelPort("left1", ["3"]).labelPort("right1", ["1"]).changeTextAnchor("{REF}", "bottom_left").changeTextAnchor("{VAL}", "top_left").build();
var Fa = e(J).labelPort("top1", ["4", "gnd1"]).labelPort("bottom1", ["2", "gnd2"]).labelPort("left1", ["1"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "bottom_left").changeTextAnchor("{VAL}", "top_left").build();
var { paths: Jh, texts: Z3, bounds: he, refblocks: ce, circles: $h } = J;
var Ra = e({ primitives: [...Object.values(Jh), ...Object.values($h), { type: "text", text: "{VAL}", x: -0.4, y: -0.4094554499999995 }, { type: "text", text: "{REF}", x: 0.4, y: -0.4094553499999995 }], ports: [{ ...ce.left1, labels: ["1"] }, { ...ce.right1, labels: ["3"] }, { ...ce.bottom1, labels: ["2"] }, { ...ce.top1, labels: ["4"] }], size: { width: he.width, height: he.height }, center: { x: he.centerX, y: he.centerY } }).rotateRightFacingSymbol("up").changeTextAnchor("{REF}", "bottom_left").changeTextAnchor("{VAL}", "top_left").build();
var $ = { paths: { path27: { type: "path", points: [{ x: 0.55, y: -0.01 }, { x: 0.13, y: -0.01 }], color: "primary", fill: false }, path28: { type: "path", points: [{ x: -0.14, y: -0.01 }, { x: -0.55, y: -0.01 }], color: "primary", fill: false }, path29: { type: "path", points: [{ x: 0.13, y: -0.28 }, { x: 0.13, y: 0.25 }], color: "primary", fill: false }, "path29-2": { type: "path", points: [{ x: 0.07, y: -0.28 }, { x: 0.07, y: 0.25 }], color: "primary", fill: false }, path30: { type: "path", points: [{ x: -0.14, y: -0.28 }, { x: -0.14, y: 0.25 }], color: "primary", fill: false }, "path29-5": { type: "path", points: [{ x: -0.08, y: -0.28 }, { x: -0.08, y: 0.25 }], color: "primary", fill: false }, "path29-2-7": { type: "path", points: [{ x: 0.07, y: -0.28 }, { x: -0.08, y: -0.28 }], color: "primary", fill: false }, "path29-2-7-6": { type: "path", points: [{ x: 0.07, y: 0.26 }, { x: -0.08, y: 0.26 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{VAL}", x: -0.01, y: -0.42 }, bottom1: { type: "text", text: "{REF}", x: 0, y: 0.43 } }, refblocks: { left1: { x: -0.55, y: -0.01 }, right1: { x: 0.55, y: -0.01 } }, bounds: { minX: -0.58, maxX: 0.58, minY: -0.52, maxY: 0.43, width: 1.16, height: 1, centerX: 0, centerY: -0.04 }, circles: {} };
var { paths: Ch, texts: ru, bounds: de, refblocks: Ta, circles: Nh } = $;
var Ea = e({ primitives: [...Object.values(Ch), ...Object.values(Nh), { type: "text", text: "{REF}", x: -0.3, y: 0.3094553499999995 }, { type: "text", text: "{VAL}", x: 0.3, y: 0.3094553499999995 }], ports: [{ ...Ta.left1, labels: ["1"] }, { ...Ta.right1, labels: ["2"] }], size: { width: de.width, height: de.height }, center: { x: de.centerX, y: de.centerY } }).changeTextAnchor("{VAL}", "top_left").rotateRightFacingSymbol("down").labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{REF}", "bottom_left").build();
var Ya = e($).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["2", "neg"]).labelPort("right1", ["1", "pos"]).changeTextAnchor("{REF}", "middle_bottom").build();
var Xa = e($).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Ih, texts: nu, bounds: be, refblocks: La, circles: Bh } = $;
var Va = e({ primitives: [...Object.values(Ih), ...Object.values(Bh), { type: "text", text: "{REF}", x: 0.3, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.3, y: -0.3094553499999995 }], ports: [{ ...La.left1, labels: ["1"] }, { ...La.right1, labels: ["2"] }], size: { width: be.width, height: be.height }, center: { x: be.centerX, y: be.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("up").labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{REF}", "bottom_left").build();
var P = { paths: { path11: { type: "path", points: [{ x: 1.99, y: -1.64 }, { x: 2.1, y: -1.64 }], color: "primary", fill: false }, "path40-0": { type: "path", points: [{ x: 2.1, y: -1.48 }, { x: 2.1, y: -1.8 }], color: "primary", fill: false }, "path40-0-5": { type: "path", points: [{ x: 2.22, y: -1.5 }, { x: 2.11, y: -1.58 }], color: "primary", fill: false }, "path40-0-5-0": { type: "path", points: [{ x: 2.23, y: -1.78 }, { x: 2.11, y: -1.7 }], color: "primary", fill: false }, "path12-1-5": { type: "path", points: [{ x: 2.23, y: -1.49 }, { x: 2.23, y: -1.14 }], color: "primary", fill: false }, "path12-1-5-3": { type: "path", points: [{ x: 2.23, y: -1.97 }, { x: 2.23, y: -1.79 }], color: "primary", fill: false }, "arrow-2": { type: "path", points: [{ x: 2.17, y: -1.7 }, { x: 2.13, y: -1.76 }, { x: 2.19, y: -1.76 }, { x: 2.17, y: -1.7 }], color: "primary", fill: true }, path1: { type: "path", points: [{ x: 1.6, y: -1.5 }, { x: 1.86, y: -1.5 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 1.87, y: -1.34 }, { x: 1.87, y: -1.66 }], color: "primary", fill: false }, path3: { type: "path", points: [{ x: 1.99, y: -1.36 }, { x: 1.87, y: -1.44 }], color: "primary", fill: false }, path4: { type: "path", points: [{ x: 1.99, y: -1.64 }, { x: 1.88, y: -1.56 }], color: "primary", fill: false }, "arrow-1": { type: "path", points: [{ x: 1.94, y: -1.56 }, { x: 1.89, y: -1.62 }, { x: 1.96, y: -1.62 }, { x: 1.94, y: -1.56 }], color: "primary", fill: true }, path9: { type: "path", points: [{ x: 1.99, y: -1.35 }, { x: 2.23, y: -1.36 }], color: "primary", fill: false } }, texts: { bottom1: { type: "text", text: "{VAL}", x: 1.88, y: -1.94 }, right1: { type: "text", text: "{REF}", x: 1.88, y: -1.14 } }, refblocks: { right1: { x: 2.23, y: -1.97 }, right2: { x: 1.6, y: -1.5 }, right3: { x: 2.23, y: -1.14 } }, bounds: { minX: 1.58, maxX: 2.35, minY: -1.98, maxY: -1.12, width: 0.77, height: 0.86, centerX: 1.96, centerY: -1.55 }, circles: { "path1-0": { type: "circle", x: 2.05, y: -1.54, radius: 0.3, color: "primary", fill: false } } };
var ja = e(P).rotateRightFacingSymbol("down").labelPort("right2", ["1"]).labelPort("right1", ["2"]).labelPort("right3", ["3"]).changeTextAnchor("{VAL}", "middle_left", { x: 0.8, y: -0.15 }).changeTextAnchor("{REF}", "middle_left", { x: 0, y: 0.15 }).build();
var ka = e(P).rotateRightFacingSymbol("right").labelPort("right2", ["1"]).labelPort("right1", ["2"]).labelPort("right3", ["3"]).changeTextAnchor("{VAL}", "middle_right").changeTextAnchor("{REF}", "middle_right").build();
var za = e(P).rotateRightFacingSymbol("left").labelPort("right2", ["1"]).labelPort("right1", ["2"]).labelPort("right3", ["3"]).changeTextAnchor("{VAL}", "middle_left", { x: 0, y: -0.8 }).changeTextAnchor("{REF}", "middle_left", { x: 0, y: 0.8 }).build();
var Oa = e(P).rotateRightFacingSymbol("right").labelPort("right2", ["1"]).labelPort("right1", ["2"]).labelPort("right3", ["3"]).changeTextAnchor("{VAL}", "middle_right").changeTextAnchor("{REF}", "middle_right").build();
var Ja = e(P).rotateRightFacingSymbol("up").labelPort("right2", ["1"]).labelPort("right1", ["2"]).labelPort("right3", ["3"]).changeTextAnchor("{VAL}", "middle_left", { x: 0, y: -0.15 }).changeTextAnchor("{REF}", "middle_left", { x: 0.8, y: 0.15 }).build();
var $a = e(P).rotateRightFacingSymbol("up").labelPort("right2", ["1"]).labelPort("right1", ["2"]).labelPort("right3", ["3"]).changeTextAnchor("{VAL}", "middle_left", { x: 0, y: -0.15 }).changeTextAnchor("{REF}", "middle_left", { x: 0.8, y: 0.15 }).build();
var Ma = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0 }, { x: -0.3, y: 0 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0 }, { x: 0.54, y: 0 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: -0.12, y: 0.09 }, { x: 0.12, y: 0.09 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.18, y: -0.45 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: 0.35 }, left1: { type: "text", text: "A", x: 0, y: -0.1 } }, refblocks: { left1: { x: -0.54, y: 0 }, right1: { x: 0.54, y: 0 } }, bounds: { minX: -0.53, maxX: 0.53, minY: -0.09, maxY: 0.09, width: 1.06, height: 1, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: 0, radius: 0.29, color: "primary", fill: false } } };
var { paths: Gh, texts: Uh, bounds: _e, refblocks: Ca, circles: Wh } = Ma;
var Pt = s({ primitives: [...Object.values(Gh), ...Object.values(Wh), { type: "text", text: "{REF}", x: 0, y: -0.3594553499999995, anchor: "middle_top" }, { type: "text", text: "{VAL}", x: 0, y: 0.35, anchor: "middle_bottom" }, { ...Uh.left1, x: 0, y: 0.01, anchor: "center", fontSize: 0.3 }], ports: [{ ...Ca.left1, labels: ["1"] }, { ...Ca.right1, labels: ["2"] }], size: { width: _e.width, height: _e.height }, center: { x: _e.centerX, y: _e.centerY } });
function Hh(t) {
  return typeof t == "object" && t !== null && t.type === "path" && Array.isArray(t.points) && typeof t.color == "string";
}
function Zh(t) {
  return typeof t == "object" && t !== null && t.type === "text" && typeof t.text == "string" && typeof t.x == "number" && typeof t.y == "number" && typeof t.anchor == "string";
}
var { 6: dr, 2: br, ...Qh } = Pt.primitives;
Hh(br) && br.points.map((t) => {
  t.y += 0.05;
});
Zh(dr) && (dr.y += 0.025);
function Kh(t) {
  return typeof t == "object";
}
var Na = r({ ...Pt, primitives: Object.values(Qh).filter(Kh) });
var Ia = { ...Na, primitives: [...Na.primitives, dr, br] };
var S = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0.03 }, { x: -0.3, y: 0.04 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0.04 }, { x: 0.54, y: 0.04 }], color: "primary", fill: false }, "path11-5-5": { type: "path", points: [{ x: 0.1, y: 0.13 }, { x: 0, y: -0.06 }, { x: -0.11, y: 0.13 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: -0.12, y: -0.14 }, { x: 0.12, y: -0.14 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.17, y: 0.4 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: -0.4 } }, refblocks: { left1: { x: -0.54, y: 0.03 }, right1: { x: 0.54, y: 0.04 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.4, maxY: 0.4, width: 1.14, height: 0.79, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: 0.04, radius: 0.29, color: "primary", fill: false } } };
var { paths: ec, texts: Iu, bounds: ge, refblocks: Ba, circles: rc } = S;
var qa = e({ primitives: [...Object.values(ec), ...Object.values(rc), { type: "text", text: "{REF}", x: -0.15, y: 0.3894553499999995 }, { type: "text", text: "{VAL}", x: 0.15, y: 0.3894553499999995 }], ports: [{ ...Ba.left1, labels: ["1"] }, { ...Ba.right1, labels: ["2"] }], size: { width: ge.width, height: ge.height }, center: { x: ge.centerX, y: ge.centerY } }).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: oc, texts: Gu, bounds: ue, refblocks: Da, circles: ic } = S;
var Ga = e({ primitives: [...Object.values(oc), ...Object.values(ic), { type: "text", text: "{REF}", x: -0, y: 0.3894553499999995 }, { type: "text", text: "{VAL}", x: 0, y: -0.3294553499999995 }], ports: [{ ...Da.left1, labels: ["1"] }, { ...Da.right1, labels: ["2"] }], size: { width: ue.width, height: ue.height }, center: { x: ue.centerX, y: ue.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: lc, texts: Zu, bounds: ve, refblocks: Ua, circles: pc } = S;
var Wa = e({ primitives: [...Object.values(lc), ...Object.values(pc), { type: "text", text: "{REF}", x: -0, y: -0.3294553499999995 }, { type: "text", text: "{VAL}", x: 0, y: 0.4294553499999995 }], ports: [{ ...Ua.left1, labels: ["1"] }, { ...Ua.right1, labels: ["2"] }], size: { width: ve.width, height: ve.height }, center: { x: ve.centerX, y: ve.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: ac, texts: e7, bounds: we, refblocks: Ha, circles: yc } = S;
var Za = e({ primitives: [...Object.values(ac), ...Object.values(yc), { type: "text", text: "{REF}", x: -0, y: 0.3894553499999995 }, { type: "text", text: "{VAL}", x: 0, y: -0.3294553499999995 }], ports: [{ ...Ha.left1, labels: ["1"] }, { ...Ha.right1, labels: ["2"] }], size: { width: we.width, height: we.height }, center: { x: we.centerX, y: we.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: xc, texts: l7, bounds: Ae, refblocks: Qa, circles: sc } = S;
var Ka = e({ primitives: [...Object.values(xc), ...Object.values(sc), { type: "text", text: "{REF}", x: 0.15, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2894553499999995 }], ports: [{ ...Qa.left1, labels: ["1"] }, { ...Qa.right1, labels: ["2"] }], size: { width: Ae.width, height: Ae.height }, center: { x: Ae.centerX, y: Ae.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: mc, texts: x7, bounds: Pe, refblocks: ty, circles: nc } = S;
var ey = e({ primitives: [...Object.values(mc), ...Object.values(nc), { type: "text", text: "{REF}", x: 0.15, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2894553499999995 }], ports: [{ ...ty.left1, labels: ["1"] }, { ...ty.right1, labels: ["2"] }], size: { width: Pe.width, height: Pe.height }, center: { x: Pe.centerX, y: Pe.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var F = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0.04 }, { x: -0.11, y: 0.04 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.1, y: 0.04 }, { x: 0.54, y: 0.04 }], color: "primary", fill: false }, "path11-0": { type: "path", points: [{ x: -0.09, y: -0.15 }, { x: -0.09, y: 0.26 }], color: "primary", fill: false }, "path11-0-3": { type: "path", points: [{ x: 0.09, y: -0.15 }, { x: 0.09, y: 0.26 }], color: "primary", fill: false }, "path11-0-9": { type: "path", points: [{ x: -0.08, y: 0.06 }, { x: -0.08, y: -0.15 }, { x: 0.09, y: -0.05 }, { x: -0.08, y: 0.06 }], color: "primary", fill: true }, "path11-0-9-0": { type: "path", points: [{ x: 0.08, y: 0.26 }, { x: 0.08, y: 0.05 }, { x: -0.09, y: 0.15 }, { x: 0.07, y: 0.26 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.03, y: 0.42 }, bottom1: { type: "text", text: "{VAL}", x: -0.03, y: -0.42 } }, refblocks: { left1: { x: -0.54, y: 0.04 }, right1: { x: 0.54, y: 0.04 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.42, maxY: 0.42, width: 1.14, height: 0.83, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: 0.05, radius: 0.29, color: "primary", fill: false } } };
var ry = e(F).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left", { x: -0.03, y: 0.2 }).changeTextAnchor("{VAL}", "middle_left", { x: 0.8, y: -0.2 }).build();
var oy = e(F).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom", { x: 0, y: 0.1 }).changeTextAnchor("{VAL}", "middle_top").build();
var iy = e(F).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom", { x: 0, y: 0.8 }).changeTextAnchor("{VAL}", "middle_top", { x: 0, y: -0.9 }).build();
var ly = e(F).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom", { x: 0, y: 0.1 }).changeTextAnchor("{VAL}", "middle_top").build();
var py = e(F).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left", { x: 0.7, y: 0.2 }).changeTextAnchor("{VAL}", "middle_left", { x: -0.13, y: -0.2 }).build();
var ay = e(F).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left", { x: 0.7, y: 0.2 }).changeTextAnchor("{VAL}", "middle_left", { x: -0.13, y: -0.2 }).build();
var M = { paths: { triangle: { type: "path", points: [{ x: -0.06, y: -0.09 }, { x: -0.06, y: 0.09 }, { x: 0.06, y: 0 }, { x: -0.06, y: -0.09 }], color: "primary", fill: false }, stem: { type: "path", points: [{ x: -0.11, y: 0 }, { x: -0.06, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.03 } }, refblocks: { left1: { x: -0.11, y: 0 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.37, maxY: 0.37, width: 1.14, height: 0.74, centerX: 0, centerY: 0 }, circles: {} };
var { paths: cc, bounds: yy, refblocks: dc } = M;
var xy = e({ primitives: [...Object.values(cc), { type: "text", text: "{REF}", x: -0.13, y: -0 }], ports: [{ ...dc.left1, labels: ["1"] }], center: { x: yy.centerX, y: yy.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_top").build();
var { paths: bc, bounds: sy, refblocks: _c } = M;
var my = e({ primitives: [...Object.values(bc), { type: "text", text: "{REF}", x: -0.13, y: 0 }], ports: [{ ..._c.left1, labels: ["1"] }], center: { x: sy.centerX, y: sy.centerY } }).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_right").build();
var { paths: gc, bounds: ny, refblocks: uc } = M;
var fy = e({ primitives: [...Object.values(gc), { type: "text", text: "{REF}", x: -0.13, y: -0 }], ports: [{ ...uc.left1, labels: ["1"] }], center: { x: ny.centerX, y: ny.centerY } }).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_left").build();
var { paths: vc, bounds: hy, refblocks: wc } = M;
var cy = e({ primitives: [...Object.values(vc), { type: "text", text: "{REF}", x: -0.13, y: 0 }], ports: [{ ...wc.left1, labels: ["1"] }], center: { x: hy.centerX, y: hy.centerY } }).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_bottom").build();
var dy = { paths: { path40: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.12, y: -0.09 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.12, y: 0.18 }, { x: 0.14, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.12, y: -0.09 }, { x: -0.12, y: 0.18 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.14, y: -0.09 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.12, y: 0.04 }, { x: -0.52, y: 0.04 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.52, y: 0.04 }, { x: 0.15, y: 0.04 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.27 } }, refblocks: { left1: { x: -0.52, y: 0.04 }, right1: { x: 0.52, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.27, maxY: 0.27, width: 1.09, height: 0.55, centerX: 0, centerY: 0 }, circles: {} };
var C = e(dy).labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var by = r(C, "down");
var _y = r(C, "left");
var gy = r(C, "up");
var uy = { paths: { path1: { type: "path", points: [{ x: -0.37, y: 0.22 }, { x: -0.13, y: 0.22 }], color: "primary", fill: false }, "path-1-2": { type: "path", points: [{ x: -0.07, y: 0.22 }, { x: 0.11, y: 0.16 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.1, y: 0.13 }, { x: 0.37, y: 0.13 }], color: "primary", fill: false }, path3: { type: "path", points: [{ x: 0.12, y: 0.36 }, { x: 0.37, y: 0.36 }], color: "primary", fill: false }, path4: { type: "path", points: [{ x: -0.37, y: -0.18 }, { x: -0.13, y: -0.18 }], color: "primary", fill: false }, "path4-5": { type: "path", points: [{ x: -0.07, y: -0.19 }, { x: 0.1, y: -0.24 }], color: "primary", fill: false }, path5: { type: "path", points: [{ x: 0.1, y: -0.27 }, { x: 0.37, y: -0.27 }], color: "primary", fill: false }, path6: { type: "path", points: [{ x: 0.12, y: -0.04 }, { x: 0.37, y: -0.04 }], color: "primary", fill: false }, "path1-4-join": { type: "path", points: [{ x: 0, y: -0.2 }, { x: 0, y: 0.19 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.56 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.42 } }, refblocks: { left1: { x: -0.37, y: 0.22 }, left2: { x: -0.37, y: -0.18 }, right1: { x: 0.37, y: 0.36 }, right2: { x: 0.37, y: 0.13 }, right3: { x: 0.37, y: -0.04 }, right5: { x: 0.37, y: -0.27 } }, bounds: { minX: -0.4, maxX: 0.4, minY: -0.47, maxY: 0.56, width: 1, height: 1.04, centerX: 0, centerY: 0.05 }, circles: { "circle-2": { type: "circle", x: 0.08, y: 0.13, radius: 0.02, color: "primary", fill: false }, "circle-5": { type: "circle", x: 0.08, y: -0.27, radius: 0.02, color: "primary", fill: false }, "circle-3": { type: "circle", x: 0.08, y: 0.37, radius: 0.02, color: "primary", fill: false }, "circle-6": { type: "circle", x: 0.08, y: -0.04, radius: 0.02, color: "primary", fill: false }, "circle-1": { type: "circle", x: -0.1, y: 0.22, radius: 0.02, color: "primary", fill: false }, "circle-4": { type: "circle", x: -0.1, y: -0.18, radius: 0.02, color: "primary", fill: false } } };
var N = e(uy).labelPort("left1", ["1"]).labelPort("right1", ["3"]).labelPort("right2", ["2"]).labelPort("right3", ["6"]).labelPort("left2", ["4"]).labelPort("right5", ["5"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var _r = r(N, "down");
var gr = _r.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var ur = _r.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
gr.anchor = "middle_bottom";
ur.anchor = "middle_top";
gr.x = 0;
gr.y += 0.537;
ur.y -= 0.5375;
ur.x = 0;
var vy = _r;
var vr = r(N, "left");
var wr = vr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Ar = vr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
wr.anchor = "middle_bottom";
Ar.anchor = "middle_top";
wr.x = 0;
wr.y += 1;
Ar.y -= 1;
Ar.x = 0;
var wy = vr;
var Pr = r(N, "up");
var Sr = Pr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Fr = Pr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Sr.anchor = "middle_bottom";
Fr.anchor = "middle_top";
Sr.x = 0;
Sr.y += 0.537;
Fr.y -= 0.5375;
Fr.x = 0;
var Ay = Pr;
var Py = { paths: { path1: { type: "path", points: [{ x: -0.37, y: 0.22 }, { x: -0.13, y: 0.22 }], color: "primary", fill: false }, "path-1-3": { type: "path", points: [{ x: -0.07, y: 0.23 }, { x: 0.11, y: 0.33 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.1, y: 0.13 }, { x: 0.37, y: 0.13 }], color: "primary", fill: false }, path3: { type: "path", points: [{ x: 0.12, y: 0.36 }, { x: 0.37, y: 0.36 }], color: "primary", fill: false }, path4: { type: "path", points: [{ x: -0.37, y: -0.18 }, { x: -0.13, y: -0.18 }], color: "primary", fill: false }, "path4-6": { type: "path", points: [{ x: -0.07, y: -0.18 }, { x: 0.11, y: -0.07 }], color: "primary", fill: false }, path5: { type: "path", points: [{ x: 0.1, y: -0.27 }, { x: 0.37, y: -0.27 }], color: "primary", fill: false }, path6: { type: "path", points: [{ x: 0.12, y: -0.04 }, { x: 0.37, y: -0.04 }], color: "primary", fill: false }, "path1-4-join": { type: "path", points: [{ x: 0, y: -0.12 }, { x: 0, y: 0.27 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.61 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.52 } }, refblocks: { left1: { x: -0.37, y: 0.22 }, left2: { x: -0.37, y: -0.18 }, right1: { x: 0.37, y: 0.36 }, right2: { x: 0.37, y: 0.13 }, right3: { x: 0.37, y: -0.04 }, right5: { x: 0.37, y: -0.27 } }, bounds: { minX: -0.4, maxX: 0.4, minY: -0.47, maxY: 0.56, width: 1, height: 1.04, centerX: 0, centerY: 0.05 }, circles: { "circle-2": { type: "circle", x: 0.08, y: 0.13, radius: 0.02, color: "primary", fill: false }, "circle-5": { type: "circle", x: 0.08, y: -0.27, radius: 0.02, color: "primary", fill: false }, "circle-3": { type: "circle", x: 0.08, y: 0.37, radius: 0.02, color: "primary", fill: false }, "circle-6": { type: "circle", x: 0.08, y: -0.04, radius: 0.02, color: "primary", fill: false }, "circle-1": { type: "circle", x: -0.1, y: 0.22, radius: 0.02, color: "primary", fill: false }, "circle-4": { type: "circle", x: -0.1, y: -0.18, radius: 0.02, color: "primary", fill: false } } };
var I = e(Py).labelPort("left1", ["1"]).labelPort("right1", ["3"]).labelPort("right2", ["2"]).labelPort("right3", ["6"]).labelPort("left2", ["4"]).labelPort("right5", ["5"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var Rr = r(I, "down");
var Tr = Rr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Er = Rr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Tr.anchor = "middle_bottom";
Er.anchor = "middle_top";
Tr.x = 0;
Tr.y += 0.565;
Er.y -= 0.555;
Er.x = 0;
var Sy = Rr;
var Yr = r(I, "left");
var Xr = Yr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Lr = Yr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Xr.anchor = "middle_bottom";
Lr.anchor = "middle_top";
Xr.x = 0;
Xr.y += 1.09;
Lr.y -= 1.09;
Lr.x = 0;
var Fy = Yr;
var Vr = r(I, "up");
var jr = Vr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var kr = Vr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
jr.anchor = "middle_bottom";
kr.anchor = "middle_top";
jr.x = 0;
jr.y += 0.565;
kr.y -= 0.555;
kr.x = 0;
var Ry = Vr;
var Ty = { paths: { path11: { type: "path", points: [{ x: -0.38, y: 0.06 }, { x: -0.14, y: 0.06 }], color: "primary", fill: false }, "path11-0": { type: "path", points: [{ x: -0.09, y: 0.07 }, { x: 0.11, y: 0.11 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.13, y: 0.06 }, { x: 0.38, y: 0.06 }], color: "primary", fill: false }, "path11-5": { type: "path", points: [{ x: -0.38, y: -0.17 }, { x: -0.14, y: -0.17 }], color: "primary", fill: false }, "path11-0-3": { type: "path", points: [{ x: -0.09, y: -0.17 }, { x: 0.11, y: -0.12 }], color: "primary", fill: false }, "path12-0": { type: "path", points: [{ x: 0.13, y: -0.17 }, { x: 0.38, y: -0.17 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.31 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.31 } }, refblocks: { left1: { x: -0.38, y: -0.17 }, left3: { x: -0.38, y: 0.06 }, right1: { x: 0.38, y: -0.17 }, right3: { x: 0.38, y: 0.06 } }, bounds: { minX: -0.4, maxX: 0.4, minY: -0.4, maxY: 0.4, width: 0.81, height: 0.79, centerX: 0, centerY: 0 }, circles: { "circle-4": { type: "circle", x: 0.1, y: 0.06, radius: 0.02, color: "primary", fill: false }, "circle-2": { type: "circle", x: 0.1, y: -0.17, radius: 0.02, color: "primary", fill: false }, "circle-3": { type: "circle", x: -0.11, y: 0.06, radius: 0.02, color: "primary", fill: false }, "circle-1": { type: "circle", x: -0.11, y: -0.17, radius: 0.02, color: "primary", fill: false } } };
var B = e(Ty).labelPort("left1", ["1"]).labelPort("right1", ["2"]).labelPort("right3", ["4"]).labelPort("left3", ["3"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var zr = r(B, "down");
var Or = zr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Jr = zr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Or.anchor = "middle_bottom";
Jr.anchor = "middle_top";
Or.x = 0.4;
Or.y += 0.265;
Jr.y -= 0.265;
Jr.x = 0.4;
var Ey = zr;
var $r = r(B, "left");
var Mr = $r.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Cr = $r.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Mr.anchor = "middle_bottom";
Cr.anchor = "middle_top";
Mr.x = 0;
Mr.y += 0.67;
Cr.y -= 0.67;
Cr.x = 0;
var Yy = $r;
var Nr = r(B, "up");
var Ir = Nr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Br = Nr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Ir.anchor = "middle_bottom";
Br.anchor = "middle_top";
Ir.x = 0.46;
Ir.y += 0.265;
Br.y -= 0.265;
Br.x = 0.46;
var Xy = Nr;
var Ly = { paths: { path11: { type: "path", points: [{ x: -0.38, y: 0.06 }, { x: -0.14, y: 0.06 }], color: "primary", fill: false }, "path11-0": { type: "path", points: [{ x: -0.09, y: 0.07 }, { x: 0.1, y: 0.2 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.13, y: 0.06 }, { x: 0.38, y: 0.06 }], color: "primary", fill: false }, "path11-5": { type: "path", points: [{ x: -0.38, y: -0.17 }, { x: -0.14, y: -0.17 }], color: "primary", fill: false }, "path11-0-3": { type: "path", points: [{ x: -0.09, y: -0.16 }, { x: 0.1, y: -0.03 }], color: "primary", fill: false }, "path12-0": { type: "path", points: [{ x: 0.13, y: -0.17 }, { x: 0.38, y: -0.17 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.42 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.42 } }, refblocks: { left1: { x: -0.38, y: -0.17 }, left3: { x: -0.38, y: 0.06 }, right1: { x: 0.38, y: -0.17 }, right3: { x: 0.38, y: 0.06 } }, bounds: { minX: -0.4, maxX: 0.4, minY: -0.4, maxY: 0.4, width: 0.81, height: 0.79, centerX: 0, centerY: 0 }, circles: { "circle-4": { type: "circle", x: 0.1, y: 0.06, radius: 0.02, color: "primary", fill: false }, "circle-2": { type: "circle", x: 0.1, y: -0.17, radius: 0.02, color: "primary", fill: false }, "circle-3": { type: "circle", x: -0.11, y: 0.06, radius: 0.02, color: "primary", fill: false }, "circle-1": { type: "circle", x: -0.11, y: -0.17, radius: 0.02, color: "primary", fill: false } } };
var q = e(Ly).labelPort("left1", ["1"]).labelPort("right1", ["2"]).labelPort("right3", ["4"]).labelPort("left3", ["3"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var qr = r(q, "down");
var Dr = qr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Gr = qr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Dr.anchor = "middle_bottom";
Gr.anchor = "middle_top";
Dr.x = 0.4;
Dr.y += 0.295;
Gr.y -= 0.295;
Gr.x = 0.42;
var Vy = qr;
var Ur = r(q, "left");
var Wr = Ur.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Hr = Ur.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Wr.anchor = "middle_bottom";
Hr.anchor = "middle_top";
Wr.x = 0;
Wr.y += 0.795;
Hr.y -= 0.795;
Hr.x = 0;
var jy = Ur;
var Zr = r(q, "up");
var Qr = Zr.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Kr = Zr.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Qr.anchor = "middle_bottom";
Kr.anchor = "middle_top";
Qr.x = 0.46;
Qr.y += 0.315;
Kr.y -= 0.315;
Kr.x = 0.46;
var ky = Zr;
var Se = { paths: { path5: { type: "path", points: [{ x: -0.44, y: 0 }, { x: -0.16, y: 0 }], color: "primary", fill: false }, path6: { type: "path", points: [{ x: 0.17, y: 0 }, { x: 0.44, y: 0.01 }], color: "primary", fill: false }, path9: { type: "path", points: [{ x: -0.25, y: -0.16 }, { x: 0.02, y: 0.3 }, { x: 0.25, y: 0.17 }, { x: -0.02, y: -0.29 }, { x: -0.25, y: -0.16 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.37 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.37 } }, refblocks: { left1: { x: -0.44, y: 0 }, right1: { x: 0.44, y: 0.01 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.25, maxY: 0.25, width: 1.13, height: 0.5, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Ec, texts: ov, bounds: Fe, refblocks: zy, circles: Yc } = Se;
var Re = e({ primitives: [...Object.values(Ec), ...Object.values(Yc), { type: "text", text: "{REF}", x: 0.18, y: -0.3204553499999995 }, { type: "text", text: "{VAL}", x: -0.25, y: -0.3294553499999995 }], ports: [{ ...zy.left1, labels: ["1"] }, { ...zy.right1, labels: ["2"] }], size: { width: Fe.width, height: Fe.height }, center: { x: Fe.centerX, y: Fe.centerY } }).rotateRightFacingSymbol("up").labelPort("left", ["1"]).labelPort("right", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var to = L(Re);
var eo = to.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var ro = to.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
eo.anchor = "middle_left";
ro.anchor = "middle_left";
eo.y += 0.4;
eo.x = 0.32;
ro.y -= 0.45;
ro.x = 0.32;
var Oy = to;
var Te = e(Se).labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var Jy = E(Te);
var R = { paths: { path11: { type: "path", points: [{ x: -0.56, y: 0.04 }, { x: -0.22, y: 0.04 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.14, y: 0.05 }, { x: 0.48, y: 0.05 }], color: "primary", fill: false }, "path12-6": { type: "path", points: [{ x: 0.14, y: -0.15 }, { x: 0.14, y: 0.25 }], color: "primary", fill: false }, "path11-0-9": { type: "path", points: [{ x: -0.22, y: 0.25 }, { x: -0.21, y: -0.15 }, { x: 0.14, y: 0.05 }, { x: -0.22, y: 0.25 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.09, y: 0.38 }, bottom1: { type: "text", text: "{VAL}", x: -0.07, y: -0.38 }, right1: { type: "text", text: "", x: 0.59, y: -0.33 } }, refblocks: { left1: { x: -0.56, y: 0.04 }, right1: { x: 0.48, y: 0.05 } }, bounds: { minX: -0.59, maxX: 0.59, minY: -0.38, maxY: 0.38, width: 1.18, height: 0.76, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Lc, texts: _v, bounds: Ee, refblocks: $y, circles: Vc } = R;
var My = e({ primitives: [...Object.values(Lc), ...Object.values(Vc), { type: "text", text: "{REF}", x: -0.15, y: 0.3294553499999995 }, { type: "text", text: "{VAL}", x: 0.15, y: 0.3294553499999995 }], ports: [{ ...$y.left1, labels: ["1"] }, { ...$y.right1, labels: ["2"] }], size: { width: Ee.width, height: Ee.height }, center: { x: Ee.centerX, y: Ee.centerY } }).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: jc, texts: wv, bounds: Ye, refblocks: Cy, circles: kc } = R;
var Ny = e({ primitives: [...Object.values(jc), ...Object.values(kc), { type: "text", text: "{REF}", x: -0, y: 0.4094553499999995 }, { type: "text", text: "{VAL}", x: 0, y: -0.4094553499999995 }], ports: [{ ...Cy.left1, labels: ["1"] }, { ...Cy.right1, labels: ["2"] }], size: { width: Ye.width, height: Ye.height }, center: { x: Ye.centerX, y: Ye.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: zc, texts: Fv, bounds: Xe, refblocks: Iy, circles: Oc } = R;
var By = e({ primitives: [...Object.values(zc), ...Object.values(Oc), { type: "text", text: "{REF}", x: -0, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: 0, y: 0.4094553499999995 }], ports: [{ ...Iy.left1, labels: ["1"] }, { ...Iy.right1, labels: ["2"] }], size: { width: Xe.width, height: Xe.height }, center: { x: Xe.centerX, y: Xe.centerY } }).changeTextAnchor("{VAL}", "middle_bottom").rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Jc, texts: Yv, bounds: Le, refblocks: qy, circles: $c } = R;
var Dy = e({ primitives: [...Object.values(Jc), ...Object.values($c), { type: "text", text: "{REF}", x: -0, y: 0.4094553499999995 }, { type: "text", text: "{VAL}", x: 0, y: -0.4094553499999995 }], ports: [{ ...qy.left1, labels: ["1"] }, { ...qy.right1, labels: ["2"] }], size: { width: Le.width, height: Le.height }, center: { x: Le.centerX, y: Le.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var { paths: Mc, texts: jv, bounds: Ve, refblocks: Gy, circles: Cc } = R;
var Uy = e({ primitives: [...Object.values(Mc), ...Object.values(Cc), { type: "text", text: "{REF}", x: 0.15, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2894553499999995 }], ports: [{ ...Gy.left1, labels: ["1"] }, { ...Gy.right1, labels: ["2"] }], size: { width: Ve.width, height: Ve.height }, center: { x: Ve.centerX, y: Ve.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: Nc, texts: Jv, bounds: je, refblocks: Wy, circles: Ic } = R;
var Hy = e({ primitives: [...Object.values(Nc), ...Object.values(Ic), { type: "text", text: "{REF}", x: 0.15, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: -0.15, y: -0.2894553499999995 }], ports: [{ ...Wy.left1, labels: ["1"] }, { ...Wy.right1, labels: ["2"] }], size: { width: je.width, height: je.height }, center: { x: je.centerX, y: je.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var Zy = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0 }, { x: -0.3, y: 0 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0 }, { x: 0.54, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.18, y: -0.36 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: 0.43 }, left1: { type: "text", text: "Hz", x: 0, y: -0.04 } }, refblocks: { left1: { x: -0.54, y: 0 }, right1: { x: 0.54, y: 0 } }, bounds: { minX: -0.53, maxX: 0.53, minY: 0, maxY: 0, width: 1.06, height: 1, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: -0.01, y: -0.01, radius: 0.29, color: "primary", fill: false } } };
var { paths: qc, texts: Dc, bounds: ke, refblocks: Qy, circles: Gc } = Zy;
var St = s({ primitives: [...Object.values(qc), ...Object.values(Gc), { type: "text", text: "{REF}", x: 0, y: -0.3594553499999995, anchor: "middle_top" }, { type: "text", text: "{VAL}", x: 0, y: 0.35, anchor: "middle_bottom" }, { ...Dc.left1, x: 0, y: 0.01, anchor: "center", fontSize: 0.2 }], ports: [{ ...Qy.left1, labels: ["1"] }, { ...Qy.right1, labels: ["2"] }], size: { width: ke.width, height: ke.height }, center: { x: ke.centerX, y: ke.centerY } });
var { 5: Uc, ...Wc } = St.primitives;
function Hc(t) {
  return typeof t == "object";
}
var Ky = r({ ...St, primitives: Object.values(Wc).filter(Hc) });
var tx = { ...Ky, primitives: [...Ky.primitives, Uc] };
var ex = { paths: { path10: { type: "path", points: [{ x: -0.53, y: 0.04 }, { x: 0.53, y: 0.04 }], color: "primary", fill: false }, path14: { type: "path", points: [{ x: 0, y: 0.17 }, { x: 0.27, y: 0.17 }, { x: 0.27, y: -0.1 }, { x: -0.26, y: -0.1 }, { x: -0.26, y: 0.17 }, { x: 0, y: 0.17 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.24 }, bottom1: { type: "text", text: "{VAL}", x: -0.17, y: -0.24 } }, refblocks: { left1: { x: -0.53, y: 0.04 }, right1: { x: 0.53, y: 0.04 } }, bounds: { minX: -0.56, maxX: 0.56, minY: -0.24, maxY: 0.24, width: 1.13, height: 0.47, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Qc, texts: Kc, bounds: ze, refblocks: rx } = ex;
var Oe = s({ primitives: [...Object.values(Qc), { ...Kc.top1, anchor: "middle_bottom" }, { type: "text", text: "{VAL}", x: 0, y: -0.2, anchor: "middle_top" }], ports: [{ ...rx.left1, labels: ["1"] }, { ...rx.right1, labels: ["2"] }], size: { width: ze.width, height: ze.height }, center: { x: ze.centerX, y: ze.centerY } });
var ox = r(Oe);
var T = { paths: { path1: { type: "path", points: [{ x: -0.29, y: 0.01 }, { x: 0.04, y: 0 }], color: "primary", fill: true }, path2: { type: "path", points: [{ x: 0.04, y: -0.22 }, { x: 0.04, y: 0.22 }], color: "primary", fill: true }, path3: { type: "path", points: [{ x: 0.12, y: -0.17 }, { x: 0.12, y: 0.17 }], color: "primary", fill: true }, path4: { type: "path", points: [{ x: 0.19, y: -0.06 }, { x: 0.19, y: 0.06 }], color: "primary", fill: true } }, texts: { right1: { type: "text", text: "{REF}", x: 0.31, y: -0.02 } }, refblocks: { left1: { x: -0.29, y: 0.01 } }, bounds: { minX: -0.31, maxX: 0.31, minY: -0.22, maxY: 0.22, width: 0.62, height: 0.45, centerX: 0, centerY: 0 }, circles: {} };
var ix = e(T).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_top").build();
var lx = e(T).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_left").build();
var px = e(T).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_right").build();
var ax = e(T).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_left").build();
var yx = e(T).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_bottom").build();
var xx = e(T).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_bottom").build();
var Ft = { paths: { path11: { type: "path", points: [{ x: -0.52, y: 0.03 }, { x: -0.18, y: 0.04 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.19, y: 0.04 }, { x: 0.52, y: 0.04 }], color: "primary", fill: false }, "path11-0-9": { type: "path", points: [{ x: -0.31, y: 0.2 }, { x: -0.31, y: -0.11 }, { x: -0.01, y: 0.04 }, { x: -0.3, y: 0.2 }], color: "primary", fill: true }, "path11-0-9-5": { type: "path", points: [{ x: 0.33, y: 0.2 }, { x: 0.33, y: -0.1 }, { x: 0.04, y: 0.04 }, { x: 0.33, y: 0.2 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: 0.04, y: 0.32 }, bottom1: { type: "text", text: "{VAL}", x: 0.04, y: -0.32 } }, refblocks: { left1: { x: -0.52, y: 0.03 }, right1: { x: 0.52, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.32, maxY: 0.32, width: 1.09, height: 0.63, centerX: 0, centerY: 0 }, circles: {} };
var sx = e(Ft).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var mx = e(Ft).rotateRightFacingSymbol("down").changeTextAnchor("{VAL}", "middle_right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").build();
var nx = { paths: { path45: { type: "path", points: [{ x: 0.14, y: 0 }, { x: -0.13, y: -0.14 }], color: "primary", fill: false }, "path1-8": { type: "path", points: [{ x: 0.13, y: 0 }, { x: 0.3, y: 0 }], color: "primary", fill: false }, path46: { type: "path", points: [{ x: -0.13, y: 0.13 }, { x: 0.14, y: 0 }], color: "primary", fill: false }, path47: { type: "path", points: [{ x: -0.13, y: -0.14 }, { x: -0.13, y: 0.13 }], color: "primary", fill: false }, path48: { type: "path", points: [{ x: 0.14, y: 0.13 }, { x: 0.14, y: -0.14 }], color: "primary", fill: false }, path49: { type: "path", points: [{ x: -0.13, y: 0 }, { x: -0.3, y: 0 }], color: "primary", fill: false }, path25: { type: "path", points: [{ x: 0.16, y: 0.29 }, { x: 0.25, y: 0.3 }, { x: 0.22, y: 0.21 }], color: "primary", fill: true }, path78: { type: "path", points: [{ x: 0.08, y: 0.17 }, { x: 0.09, y: 0.17 }, { x: 0.21, y: 0.27 }, { x: 0.21, y: 0.27 }], color: "primary", fill: false }, "path25-0": { type: "path", points: [{ x: -0.02, y: 0.31 }, { x: 0.08, y: 0.32 }, { x: 0.04, y: 0.23 }], color: "primary", fill: true }, "path78-6": { type: "path", points: [{ x: -0.1, y: 0.19 }, { x: -0.09, y: 0.2 }, { x: 0.04, y: 0.29 }, { x: 0.04, y: 0.29 }], color: "primary", fill: false }, box: { type: "path", points: [{ x: -0.3, y: -0.4 }, { x: 0.3, y: -0.4 }, { x: 0.3, y: 0.4 }, { x: -0.3, y: 0.4 }, { x: -0.3, y: -0.4 }, { x: -0.3, y: 0.4 }], color: "primary", fill: false }, "path48-1": { type: "path", points: [{ x: -0.3, y: 0.13 }, { x: -0.54, y: 0.13 }], color: "primary", fill: false }, "path48-2": { type: "path", points: [{ x: -0.3, y: -0.13 }, { x: -0.54, y: -0.13 }], color: "primary", fill: false }, "path48-3": { type: "path", points: [{ x: 0.3, y: -0.13 }, { x: 0.54, y: -0.13 }], color: "primary", fill: false }, "path48-4": { type: "path", points: [{ x: 0.3, y: 0.13 }, { x: 0.54, y: 0.13 }], color: "primary", fill: false } }, texts: { bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.43 }, right1: { type: "text", text: "{REF}", x: 0, y: 0.43 } }, refblocks: { left1: { x: -0.54, y: 0.13 }, left2: { x: -0.54, y: -0.13 }, right1: { x: 0.54, y: -0.13 }, right2: { x: 0.54, y: 0.13 } }, bounds: { minX: -0.56, maxX: 0.56, minY: -0.32, maxY: 0.32, width: 1.13, height: 0.65, centerX: 0, centerY: 0 }, circles: {} };
var D = e(nx).labelPort("left1", ["1", "DIN"]).labelPort("left2", ["2", "POWER"]).labelPort("right1", ["3", "GND"]).labelPort("right2", ["4", "DOUT"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var fx = r(D, "down");
var hx = E(D);
var oo = r(D, "up");
var io = oo.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var lo = oo.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
io.anchor = "middle_left";
lo.anchor = "middle_left";
io.y += 0.21;
io.x = 0.44;
lo.y -= 0.21;
lo.x = 0.44;
var cx = oo;
var dx = { paths: { path11: { type: "path", points: [{ x: -0.4, y: 0 }, { x: -0.01, y: 0 }], color: "primary", fill: false }, path40: { type: "path", points: [{ x: 0.07, y: 0.19 }, { x: 0.07, y: -0.18 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: 0.01, y: -0.12 }, { x: 0.01, y: 0.14 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.28, y: -0.25 }, { x: 0.28, y: -0.56 }], color: "primary", fill: false }, "path12-1": { type: "path", points: [{ x: 0.28, y: 0.56 }, { x: 0.28, y: 0.27 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: 0.17, y: -0.22 }, { x: 0.28, y: -0.23 }, { x: 0.23, y: -0.14 }], color: "primary", fill: true }, path17: { type: "path", points: [{ x: 0.08, y: -0.09 }, { x: 0.23, y: -0.2 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.07, y: 0.11 }, { x: 0.28, y: 0.26 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.36 }, bottom1: { type: "text", text: "{VAL}", x: 0.02, y: -0.42 } }, refblocks: { top1: { x: 0.28, y: 0.56 }, bottom1: { x: 0.28, y: -0.56 }, left1: { x: -0.4, y: 0 } }, bounds: { minX: -0.43, maxX: 0.43, minY: -0.58, maxY: 0.58, width: 0.85, height: 1.17, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0.14, y: 0.01, radius: 0.29, color: "primary", fill: false } } };
var Je = e(dx).changeTextAnchor("{VAL}", "middle_right").labelPort("left1", ["3"]).labelPort("top1", ["2"]).labelPort("bottom1", ["1"]).changeTextAnchor("{REF}", "middle_right").build();
var po = r(Je);
var ao = po.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var bx = po.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
ao.anchor = "middle_left";
bx.anchor = "middle_right";
ao.x = 0.45;
ao.y += 0.065;
bx.y += 0.065;
var _x = po;
var gx = { paths: { "path12-1-8-6-9": { type: "path", points: [{ x: 0.02, y: -0.02 }, { x: 0.02, y: -0.1 }], color: "primary", fill: false }, "path12-1-5-6": { type: "path", points: [{ x: -0.47, y: -0.19 }, { x: -0.17, y: -0.19 }], color: "primary", fill: false }, "path12-1-5-6-8": { type: "path", points: [{ x: 0.02, y: 0.17 }, { x: 0.02, y: 0.11 }], color: "primary", fill: false }, "path12-1-8-0": { type: "path", points: [{ x: -0.15, y: -0.03 }, { x: 0.2, y: -0.19 }], color: "primary", fill: false }, "path12-1-0": { type: "path", points: [{ x: 0.2, y: -0.19 }, { x: 0.47, y: -0.19 }], color: "primary", fill: false }, "path12-1-8-6-9-4": { type: "path", points: [{ x: 0.02, y: 0.12 }, { x: 0.02, y: 0.02 }], color: "primary", fill: false }, "path12-1-8-6-9-4-3": { type: "path", points: [{ x: 0.08, y: 0.11 }, { x: 0.08, y: 0.05 }], color: "primary", fill: false }, "path12-1-8-6-9-4-3-1": { type: "path", points: [{ x: -0.04, y: 0.11 }, { x: -0.04, y: 0.05 }], color: "primary", fill: false }, "path12-1-8-6-9-4-4": { type: "path", points: [{ x: 0.08, y: 0.11 }, { x: -0.04, y: 0.11 }], color: "primary", fill: false }, "path14-5": { type: "path", points: [{ x: -0.01, y: 0.28 }, { x: 0.01, y: 0.25 }, { x: 0.04, y: 0.23 }, { x: 0.06, y: 0.2 }], color: "primary", fill: true }, "path14-5-3": { type: "path", points: [{ x: -0.01, y: 0.2 }, { x: 0.01, y: 0.23 }, { x: 0.04, y: 0.25 }, { x: 0.06, y: 0.28 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: 0.01, y: 0.38 }, bottom1: { type: "text", text: "{VAL}", x: 0.06, y: -0.38 } }, refblocks: { left1: { x: -0.47, y: -0.19 }, right1: { x: 0.47, y: -0.19 } }, bounds: { minX: -0.5, maxX: 0.5, minY: -0.38, maxY: 0.38, width: 1, height: 0.76, centerX: 0, centerY: 0 }, circles: { path9: { type: "circle", x: 0.02, y: 0.24, radius: 0.06, color: "primary", fill: false } } };
var $e = e(gx).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var ux = r($e);
var vx = ux.primitives.filter((t) => t.type === "text");
var yo = vx.find((t) => t.text === "{VAL}");
yo.x = -0.35;
yo.y = 0;
yo.anchor = "middle_right";
var xo = vx.find((t) => t.text === "{REF}");
xo.y = 0;
xo.x = 0.35;
xo.anchor = "middle_left";
var wx = ux;
var Ax = { paths: { path8698: { type: "path", points: [{ x: -0.2, y: -0.02 }, { x: -0.2, y: -0.02 }, { x: -0.21, y: -0.01 }, { x: -0.21, y: -0.01 }, { x: -0.21, y: 0 }, { x: -0.21, y: 0 }, { x: -0.21, y: 0 }, { x: -0.22, y: 0.01 }, { x: -0.22, y: 0.01 }, { x: -0.22, y: 0.02 }, { x: -0.22, y: 0.02 }, { x: -0.23, y: 0.03 }, { x: -0.23, y: 0.03 }, { x: -0.23, y: 0.03 }, { x: -0.23, y: 0.04 }, { x: -0.24, y: 0.04 }, { x: -0.24, y: 0.04 }, { x: -0.24, y: 0.05 }, { x: -0.24, y: 0.05 }, { x: -0.25, y: 0.05 }, { x: -0.25, y: 0.06 }, { x: -0.25, y: 0.06 }, { x: -0.25, y: 0.06 }, { x: -0.26, y: 0.06 }, { x: -0.26, y: 0.06 }, { x: -0.26, y: 0.07 }, { x: -0.26, y: 0.07 }, { x: -0.27, y: 0.07 }, { x: -0.27, y: 0.07 }, { x: -0.27, y: 0.07 }, { x: -0.27, y: 0.07 }, { x: -0.28, y: 0.07 }, { x: -0.28, y: 0.07 }, { x: -0.28, y: 0.07 }, { x: -0.28, y: 0.07 }, { x: -0.29, y: 0.07 }, { x: -0.29, y: 0.08 }, { x: -0.29, y: 0.08 }, { x: -0.29, y: 0.08 }, { x: -0.3, y: 0.08 }, { x: -0.3, y: 0.08 }, { x: -0.3, y: 0.08 }, { x: -0.3, y: 0.08 }, { x: -0.31, y: 0.08 }, { x: -0.31, y: 0.08 }, { x: -0.31, y: 0.07 }, { x: -0.31, y: 0.07 }, { x: -0.32, y: 0.07 }, { x: -0.32, y: 0.07 }, { x: -0.32, y: 0.07 }, { x: -0.32, y: 0.07 }, { x: -0.33, y: 0.07 }, { x: -0.33, y: 0.07 }, { x: -0.33, y: 0.07 }, { x: -0.33, y: 0.07 }, { x: -0.34, y: 0.07 }, { x: -0.34, y: 0.06 }, { x: -0.34, y: 0.06 }, { x: -0.34, y: 0.06 }, { x: -0.35, y: 0.06 }, { x: -0.35, y: 0.06 }, { x: -0.35, y: 0.05 }, { x: -0.35, y: 0.05 }, { x: -0.36, y: 0.05 }, { x: -0.36, y: 0.04 }, { x: -0.36, y: 0.04 }, { x: -0.36, y: 0.04 }, { x: -0.37, y: 0.03 }, { x: -0.37, y: 0.03 }, { x: -0.37, y: 0.03 }, { x: -0.37, y: 0.02 }, { x: -0.38, y: 0.02 }, { x: -0.38, y: 0.01 }, { x: -0.38, y: 0.01 }, { x: -0.38, y: 0 }, { x: -0.39, y: 0 }, { x: -0.39, y: 0 }, { x: -0.39, y: -0.01 }, { x: -0.39, y: -0.01 }, { x: -0.4, y: -0.02 }, { x: -0.4, y: -0.02 }], color: "primary", fill: false }, path8700: { type: "path", points: [{ x: 0, y: -0.02 }, { x: 0, y: -0.02 }, { x: -0.01, y: -0.01 }, { x: -0.01, y: -0.01 }, { x: -0.01, y: 0 }, { x: -0.01, y: 0 }, { x: -0.02, y: 0 }, { x: -0.02, y: 0.01 }, { x: -0.02, y: 0.01 }, { x: -0.02, y: 0.02 }, { x: -0.03, y: 0.02 }, { x: -0.03, y: 0.03 }, { x: -0.03, y: 0.03 }, { x: -0.03, y: 0.03 }, { x: -0.04, y: 0.04 }, { x: -0.04, y: 0.04 }, { x: -0.04, y: 0.04 }, { x: -0.04, y: 0.05 }, { x: -0.05, y: 0.05 }, { x: -0.05, y: 0.05 }, { x: -0.05, y: 0.06 }, { x: -0.05, y: 0.06 }, { x: -0.06, y: 0.06 }, { x: -0.06, y: 0.06 }, { x: -0.06, y: 0.06 }, { x: -0.06, y: 0.07 }, { x: -0.07, y: 0.07 }, { x: -0.07, y: 0.07 }, { x: -0.07, y: 0.07 }, { x: -0.07, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.08, y: 0.07 }, { x: -0.09, y: 0.07 }, { x: -0.09, y: 0.07 }, { x: -0.09, y: 0.08 }, { x: -0.09, y: 0.08 }, { x: -0.1, y: 0.08 }, { x: -0.1, y: 0.08 }, { x: -0.1, y: 0.08 }, { x: -0.1, y: 0.08 }, { x: -0.11, y: 0.08 }, { x: -0.11, y: 0.08 }, { x: -0.11, y: 0.08 }, { x: -0.11, y: 0.07 }, { x: -0.12, y: 0.07 }, { x: -0.12, y: 0.07 }, { x: -0.12, y: 0.07 }, { x: -0.12, y: 0.07 }, { x: -0.13, y: 0.07 }, { x: -0.13, y: 0.07 }, { x: -0.13, y: 0.07 }, { x: -0.13, y: 0.07 }, { x: -0.14, y: 0.07 }, { x: -0.14, y: 0.07 }, { x: -0.14, y: 0.06 }, { x: -0.14, y: 0.06 }, { x: -0.15, y: 0.06 }, { x: -0.15, y: 0.06 }, { x: -0.15, y: 0.06 }, { x: -0.15, y: 0.05 }, { x: -0.16, y: 0.05 }, { x: -0.16, y: 0.05 }, { x: -0.16, y: 0.04 }, { x: -0.16, y: 0.04 }, { x: -0.17, y: 0.04 }, { x: -0.17, y: 0.03 }, { x: -0.17, y: 0.03 }, { x: -0.17, y: 0.03 }, { x: -0.18, y: 0.02 }, { x: -0.18, y: 0.02 }, { x: -0.18, y: 0.01 }, { x: -0.18, y: 0.01 }, { x: -0.19, y: 0 }, { x: -0.19, y: 0 }, { x: -0.19, y: 0 }, { x: -0.19, y: -0.01 }, { x: -0.2, y: -0.01 }, { x: -0.2, y: -0.02 }, { x: -0.2, y: -0.02 }], color: "primary", fill: false }, path8702: { type: "path", points: [{ x: 0.2, y: -0.02 }, { x: 0.2, y: -0.02 }, { x: 0.19, y: -0.01 }, { x: 0.19, y: -0.01 }, { x: 0.19, y: 0 }, { x: 0.19, y: 0 }, { x: 0.18, y: 0 }, { x: 0.18, y: 0.01 }, { x: 0.18, y: 0.01 }, { x: 0.18, y: 0.02 }, { x: 0.17, y: 0.02 }, { x: 0.17, y: 0.03 }, { x: 0.17, y: 0.03 }, { x: 0.17, y: 0.03 }, { x: 0.16, y: 0.04 }, { x: 0.16, y: 0.04 }, { x: 0.16, y: 0.04 }, { x: 0.16, y: 0.05 }, { x: 0.15, y: 0.05 }, { x: 0.15, y: 0.05 }, { x: 0.15, y: 0.06 }, { x: 0.15, y: 0.06 }, { x: 0.14, y: 0.06 }, { x: 0.14, y: 0.06 }, { x: 0.14, y: 0.06 }, { x: 0.14, y: 0.07 }, { x: 0.13, y: 0.07 }, { x: 0.13, y: 0.07 }, { x: 0.13, y: 0.07 }, { x: 0.13, y: 0.07 }, { x: 0.12, y: 0.07 }, { x: 0.12, y: 0.07 }, { x: 0.12, y: 0.07 }, { x: 0.12, y: 0.07 }, { x: 0.11, y: 0.07 }, { x: 0.11, y: 0.07 }, { x: 0.11, y: 0.08 }, { x: 0.11, y: 0.08 }, { x: 0.1, y: 0.08 }, { x: 0.1, y: 0.08 }, { x: 0.1, y: 0.08 }, { x: 0.1, y: 0.08 }, { x: 0.09, y: 0.08 }, { x: 0.09, y: 0.08 }, { x: 0.09, y: 0.08 }, { x: 0.09, y: 0.07 }, { x: 0.08, y: 0.07 }, { x: 0.08, y: 0.07 }, { x: 0.08, y: 0.07 }, { x: 0.08, y: 0.07 }, { x: 0.07, y: 0.07 }, { x: 0.07, y: 0.07 }, { x: 0.07, y: 0.07 }, { x: 0.07, y: 0.07 }, { x: 0.06, y: 0.07 }, { x: 0.06, y: 0.07 }, { x: 0.06, y: 0.06 }, { x: 0.06, y: 0.06 }, { x: 0.05, y: 0.06 }, { x: 0.05, y: 0.06 }, { x: 0.05, y: 0.06 }, { x: 0.05, y: 0.05 }, { x: 0.04, y: 0.05 }, { x: 0.04, y: 0.05 }, { x: 0.04, y: 0.04 }, { x: 0.04, y: 0.04 }, { x: 0.03, y: 0.04 }, { x: 0.03, y: 0.03 }, { x: 0.03, y: 0.03 }, { x: 0.03, y: 0.03 }, { x: 0.02, y: 0.02 }, { x: 0.02, y: 0.02 }, { x: 0.02, y: 0.01 }, { x: 0.02, y: 0.01 }, { x: 0.01, y: 0 }, { x: 0.01, y: 0 }, { x: 0.01, y: 0 }, { x: 0.01, y: -0.01 }, { x: 0, y: -0.01 }, { x: 0, y: -0.02 }, { x: 0, y: -0.02 }], color: "primary", fill: false }, path8704: { type: "path", points: [{ x: 0.4, y: -0.02 }, { x: 0.39, y: -0.02 }, { x: 0.39, y: -0.01 }, { x: 0.39, y: -0.01 }, { x: 0.39, y: 0 }, { x: 0.39, y: 0 }, { x: 0.38, y: 0 }, { x: 0.38, y: 0.01 }, { x: 0.38, y: 0.01 }, { x: 0.38, y: 0.02 }, { x: 0.37, y: 0.02 }, { x: 0.37, y: 0.03 }, { x: 0.37, y: 0.03 }, { x: 0.37, y: 0.03 }, { x: 0.36, y: 0.04 }, { x: 0.36, y: 0.04 }, { x: 0.36, y: 0.04 }, { x: 0.36, y: 0.05 }, { x: 0.35, y: 0.05 }, { x: 0.35, y: 0.05 }, { x: 0.35, y: 0.06 }, { x: 0.35, y: 0.06 }, { x: 0.34, y: 0.06 }, { x: 0.34, y: 0.06 }, { x: 0.34, y: 0.06 }, { x: 0.34, y: 0.07 }, { x: 0.33, y: 0.07 }, { x: 0.33, y: 0.07 }, { x: 0.33, y: 0.07 }, { x: 0.33, y: 0.07 }, { x: 0.32, y: 0.07 }, { x: 0.32, y: 0.07 }, { x: 0.32, y: 0.07 }, { x: 0.32, y: 0.07 }, { x: 0.31, y: 0.07 }, { x: 0.31, y: 0.07 }, { x: 0.31, y: 0.08 }, { x: 0.31, y: 0.08 }, { x: 0.3, y: 0.08 }, { x: 0.3, y: 0.08 }, { x: 0.3, y: 0.08 }, { x: 0.3, y: 0.08 }, { x: 0.29, y: 0.08 }, { x: 0.29, y: 0.08 }, { x: 0.29, y: 0.08 }, { x: 0.29, y: 0.07 }, { x: 0.28, y: 0.07 }, { x: 0.28, y: 0.07 }, { x: 0.28, y: 0.07 }, { x: 0.28, y: 0.07 }, { x: 0.27, y: 0.07 }, { x: 0.27, y: 0.07 }, { x: 0.27, y: 0.07 }, { x: 0.27, y: 0.07 }, { x: 0.26, y: 0.07 }, { x: 0.26, y: 0.07 }, { x: 0.26, y: 0.06 }, { x: 0.26, y: 0.06 }, { x: 0.25, y: 0.06 }, { x: 0.25, y: 0.06 }, { x: 0.25, y: 0.06 }, { x: 0.25, y: 0.05 }, { x: 0.24, y: 0.05 }, { x: 0.24, y: 0.05 }, { x: 0.24, y: 0.04 }, { x: 0.24, y: 0.04 }, { x: 0.23, y: 0.04 }, { x: 0.23, y: 0.03 }, { x: 0.23, y: 0.03 }, { x: 0.23, y: 0.03 }, { x: 0.22, y: 0.02 }, { x: 0.22, y: 0.02 }, { x: 0.22, y: 0.01 }, { x: 0.22, y: 0.01 }, { x: 0.21, y: 0 }, { x: 0.21, y: 0 }, { x: 0.21, y: 0 }, { x: 0.21, y: -0.01 }, { x: 0.2, y: -0.01 }, { x: 0.2, y: -0.02 }, { x: 0.2, y: -0.02 }], color: "primary", fill: false }, path8706: { type: "path", points: [{ x: -0.4, y: -0.02 }, { x: -0.55, y: -0.02 }], color: "primary", fill: false }, "path8706-5": { type: "path", points: [{ x: 0.55, y: -0.03 }, { x: 0.4, y: -0.03 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.23 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.23 } }, refblocks: { left1: { x: -0.55, y: -0.02 }, right1: { x: 0.55, y: -0.03 } }, bounds: { minX: -0.58, maxX: 0.58, minY: -0.23, maxY: 0.23, width: 1.16, height: 0.46, centerX: 0, centerY: 0 }, circles: {} };
var { paths: pd, texts: Px, bounds: Me, refblocks: Sx, circles: ad } = Ax;
var ut = s({ primitives: [...Object.values(pd), ...Object.values(ad), { ...Px.top1, anchor: "middle_bottom" }, { ...Px.bottom1, anchor: "middle_top" }], ports: [{ ...Sx.left1, labels: ["1"] }, { ...Sx.right1, labels: ["2"] }], size: { width: Me.width, height: Me.height }, center: { x: Me.centerX, y: Me.centerY } });
var Ce = r(ut, "up");
var Fx = L(Ce);
var Rx = E(ut);
var so = { paths: { path11: { type: "path", points: [{ x: -0.54, y: -0.06 }, { x: -0.15, y: -0.06 }], color: "primary", fill: false }, path40: { type: "path", points: [{ x: 0.13, y: -0.05 }, { x: -0.13, y: -0.18 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.13, y: 0.08 }, { x: 0.13, y: -0.05 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.13, y: -0.18 }, { x: -0.13, y: 0.08 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.13, y: 0.08 }, { x: 0.13, y: -0.18 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.14, y: -0.05 }, { x: 0.54, y: -0.06 }], color: "primary", fill: false }, "path25-0-9-8": { type: "path", points: [{ x: -0.03, y: 0.39 }, { x: -0.05, y: 0.47 }, { x: -0.08, y: 0.39 }], color: "primary", fill: true }, "path78-6-5-5": { type: "path", points: [{ x: -0.05, y: 0.27 }, { x: -0.05, y: 0.29 }, { x: -0.05, y: 0.41 }, { x: -0.05, y: 0.42 }], color: "primary", fill: false }, "path25-0-9-8-2": { type: "path", points: [{ x: 0.07, y: 0.39 }, { x: 0.04, y: 0.47 }, { x: 0.02, y: 0.39 }], color: "primary", fill: true }, "path78-6-5-5-7": { type: "path", points: [{ x: 0.04, y: 0.27 }, { x: 0.04, y: 0.29 }, { x: 0.04, y: 0.41 }, { x: 0.04, y: 0.42 }], color: "primary", fill: false }, "path43-1": { type: "path", points: [{ x: 0.03, y: 0.06 }, { x: 0.03, y: -0.16 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0.38, y: 0.38 }, bottom1: { type: "text", text: "{VAL}", x: 0.38, y: -0.47 } }, refblocks: { left1: { x: -0.54, y: -0.06 }, right1: { x: 0.54, y: -0.06 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.47, maxY: 0.47, width: 1.14, height: 0.93, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: -0.05, radius: 0.29, color: "primary", fill: false } } };
so.bounds.width += 0.2;
var G = e(so).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var mo = r(G, "down");
var no = mo.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var fo = mo.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
no.anchor = "middle_left";
fo.anchor = "middle_left";
no.y += 0.9;
no.x = 0.3;
fo.y -= 0.1;
fo.x = 0.3;
var Tx = mo;
var ho = r(G, "left");
var co = ho.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var bo = ho.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
co.anchor = "middle_left";
bo.anchor = "middle_left";
co.y += 0.71;
co.x = 0.44;
bo.y -= 0.71;
bo.x = 0.44;
var Ex = ho;
var _o = r(G, "up");
var go = _o.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var uo = _o.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
go.anchor = "middle_left";
uo.anchor = "middle_left";
go.y += 0.1;
go.x = 0.3;
uo.y -= 0.71;
uo.x = 0.3;
var Yx = _o;
var Xx = { paths: { path45: { type: "path", points: [{ x: 0.14, y: 0 }, { x: -0.13, y: -0.14 }], color: "primary", fill: false }, "path1-8": { type: "path", points: [{ x: 0.13, y: 0 }, { x: 0.54, y: 0 }], color: "primary", fill: false }, path46: { type: "path", points: [{ x: -0.13, y: 0.13 }, { x: 0.14, y: 0 }], color: "primary", fill: false }, path47: { type: "path", points: [{ x: -0.13, y: -0.14 }, { x: -0.13, y: 0.13 }], color: "primary", fill: false }, path48: { type: "path", points: [{ x: 0.14, y: 0.13 }, { x: 0.14, y: -0.14 }], color: "primary", fill: false }, path49: { type: "path", points: [{ x: -0.13, y: 0 }, { x: -0.54, y: 0 }], color: "primary", fill: false }, path25: { type: "path", points: [{ x: 0.16, y: 0.29 }, { x: 0.25, y: 0.3 }, { x: 0.22, y: 0.21 }], color: "primary", fill: true }, path78: { type: "path", points: [{ x: 0.08, y: 0.17 }, { x: 0.09, y: 0.17 }, { x: 0.21, y: 0.27 }, { x: 0.21, y: 0.27 }], color: "primary", fill: false }, "path25-0": { type: "path", points: [{ x: -0.02, y: 0.31 }, { x: 0.08, y: 0.32 }, { x: 0.04, y: 0.23 }], color: "primary", fill: true }, "path78-6": { type: "path", points: [{ x: -0.1, y: 0.19 }, { x: -0.09, y: 0.2 }, { x: 0.04, y: 0.29 }, { x: 0.04, y: 0.29 }], color: "primary", fill: false } }, texts: { bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.21 }, right1: { type: "text", text: "{REF}", x: 0, y: 0.41 } }, refblocks: { left1: { x: -0.54, y: 0 }, right1: { x: 0.54, y: 0 } }, bounds: { minX: -0.56, maxX: 0.56, minY: -0.32, maxY: 0.32, width: 1.13, height: 0.65, centerX: 0, centerY: 0 }, circles: {} };
var { paths: sd, texts: Lx, bounds: Ne, refblocks: Vx, circles: md } = Xx;
var vt = s({ primitives: [...Object.values(sd), ...Object.values(md), { ...Lx.bottom1, anchor: "middle_top" }, { ...Lx.right1, anchor: "middle_bottom" }], ports: [{ ...Vx.left1, labels: ["1"] }, { ...Vx.right1, labels: ["2"] }], size: { width: Ne.width, height: Ne.height }, center: { x: Ne.centerX, y: Ne.centerY } });
var vo = r(vt, "up");
var wo = vo.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Ao = vo.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
wo.anchor = "middle_left";
Ao.anchor = "middle_left";
wo.y += 0.21;
wo.x = 0.21;
Ao.y -= 0.21;
Ao.x = 0.21;
var Ie = vo;
var Po = L(Ie);
var So = Po.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Fo = Po.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
So.anchor = "middle_left";
Fo.anchor = "middle_left";
So.y += 0.4;
So.x = 0.2;
Fo.y -= 0.41;
Fo.x = 0.2;
var jx = Po;
var kx = E(vt);
var zx = { paths: { path11: { type: "path", points: [{ x: -0.52, y: -0.01 }, { x: -0.18, y: -0.01 }], color: "primary", fill: false }, "path11-2": { type: "path", points: [{ x: -0.17, y: -0.11 }, { x: -0.17, y: 0.08 }], color: "primary", fill: false }, "path11-5": { type: "path", points: [{ x: -0.17, y: -0.12 }, { x: 0.16, y: -0.12 }], color: "primary", fill: false }, "path11-5-5": { type: "path", points: [{ x: -0.17, y: 0.08 }, { x: 0.16, y: 0.08 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.17, y: -0.01 }, { x: 0.52, y: -0.01 }], color: "primary", fill: false }, "path11-2-1": { type: "path", points: [{ x: 0.16, y: -0.12 }, { x: 0.16, y: 0.08 }], color: "primary", fill: false }, "path25-0-9": { type: "path", points: [{ x: -0.4, y: -0.21 }, { x: -0.33, y: -0.18 }, { x: -0.34, y: -0.27 }], color: "primary", fill: true }, "path78-6-5": { type: "path", points: [{ x: -0.45, y: -0.34 }, { x: -0.44, y: -0.32 }, { x: -0.35, y: -0.22 }, { x: -0.35, y: -0.22 }], color: "primary", fill: false }, "path25-0-9-0": { type: "path", points: [{ x: -0.3, y: -0.34 }, { x: -0.22, y: -0.31 }, { x: -0.24, y: -0.4 }], color: "primary", fill: true }, "path78-6-5-9": { type: "path", points: [{ x: -0.35, y: -0.46 }, { x: -0.34, y: -0.45 }, { x: -0.25, y: -0.35 }, { x: -0.25, y: -0.35 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.17, y: -0.41 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: 0.46 } }, refblocks: { left1: { x: -0.52, y: -0.01 }, right1: { x: 0.52, y: -0.01 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.51, maxY: 0.46, width: 1.1, height: 0.62, centerX: 0, centerY: -0.02 }, circles: { path1: { type: "circle", x: 0, y: -0.02, radius: 0.28, color: "primary", fill: false } } };
var { paths: fd, texts: Ox, bounds: Be, refblocks: Jx, circles: hd } = zx;
var qe = s({ primitives: [...Object.values(fd), ...Object.values(hd), { ...Ox.top1, anchor: "middle_left", x: 0 }, { ...Ox.bottom1, anchor: "middle_left", x: 0 }], ports: [{ ...Jx.left1, labels: ["1"] }, { ...Jx.right1, labels: ["2"] }], size: { width: Be.width, height: Be.height }, center: { x: Be.centerX, y: Be.centerY } });
var $x = r(qe);
var Mx = $x.primitives.filter((t) => t.type === "text");
var Ro = Mx.find((t) => t.text === "{VAL}");
Ro.x = -0.35;
Ro.y = 0;
Ro.anchor = "middle_right";
var To = Mx.find((t) => t.text === "{REF}");
To.y = 0;
To.x = 0.35;
To.anchor = "middle_left";
var Cx = $x;
var Nx = { paths: { path208: { type: "path", points: [{ x: 0.38, y: 0.13 }, { x: 0.52, y: -0.13 }], color: "primary", fill: false }, path209: { type: "path", points: [{ x: 0.25, y: -0.13 }, { x: 0.38, y: 0.13 }], color: "primary", fill: false }, path210: { type: "path", points: [{ x: 0.52, y: -0.13 }, { x: 0.25, y: -0.13 }], color: "primary", fill: false }, path211: { type: "path", points: [{ x: 0.25, y: 0.13 }, { x: 0.52, y: 0.13 }], color: "primary", fill: false }, path212: { type: "path", points: [{ x: 0.12, y: -0.4 }, { x: 0.38, y: -0.4 }], color: "primary", fill: false }, path213: { type: "path", points: [{ x: 0.38, y: 0.4 }, { x: 0.12, y: 0.4 }], color: "primary", fill: false }, path214: { type: "path", points: [{ x: 0.12, y: 0.54 }, { x: 0.12, y: 0.18 }], color: "primary", fill: false }, path215: { type: "path", points: [{ x: 0.12, y: -0.54 }, { x: 0.12, y: 0 }], color: "primary", fill: false }, path216: { type: "path", points: [{ x: 0.38, y: -0.4 }, { x: 0.38, y: 0.4 }], color: "primary", fill: false }, path217: { type: "path", points: [{ x: -0.14, y: 0.26 }, { x: -0.14, y: -0.27 }], color: "primary", fill: false }, path218: { type: "path", points: [{ x: -0.22, y: -0.27 }, { x: -0.22, y: 0.26 }], color: "primary", fill: false }, path219: { type: "path", points: [{ x: -0.54, y: -0.27 }, { x: -0.22, y: -0.27 }], color: "primary", fill: false }, path220: { type: "path", points: [{ x: -0.14, y: -0.19 }, { x: 0.12, y: -0.19 }], color: "primary", fill: false }, path221: { type: "path", points: [{ x: -0.14, y: 0.18 }, { x: 0.12, y: 0.18 }], color: "primary", fill: false }, path222: { type: "path", points: [{ x: -0.07, y: 0 }, { x: 0.12, y: 0 }], color: "primary", fill: false } }, texts: { right1: { type: "text", text: "{VAL}", x: 0.57, y: 0.02 }, right2: { type: "text", text: "{REF}", x: 0.57, y: 0.21 } }, refblocks: { top1: { x: 0.12, y: 0.54 }, bottom1: { x: 0.12, y: -0.54 }, left1: { x: -0.54, y: -0.27 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.57, maxY: 0.57, width: 1.14, height: 1.14, centerX: 0, centerY: 0 }, circles: {} };
var { paths: dd, texts: Ix, bounds: De, refblocks: Eo } = Nx;
var Ge = s({ primitives: [...Object.values(dd), { ...Ix.right1, anchor: "middle_left" }, { ...Ix.right2, anchor: "middle_left" }], ports: [{ ...Eo.top1, labels: ["1"] }, { ...Eo.bottom1, labels: ["2"] }, { ...Eo.left1, labels: ["3"] }], size: { width: De.width + 0.4, height: De.height }, center: { x: De.centerX + 0.2, y: De.centerY } });
var Yo = r(Ge);
var Bx = Yo.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Xo = Yo.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Bx.anchor = "middle_top";
Xo.anchor = "middle_top";
Bx.x = Xo.x;
Xo.y += 0.15;
var qx = Yo;
var Dx = { paths: { "path12-1-8-6-9": { type: "path", points: [{ x: 0.01, y: 0.07 }, { x: 0.01, y: -0.01 }], color: "primary", fill: false }, "path12-1-5-6": { type: "path", points: [{ x: -0.47, y: -0.09 }, { x: -0.17, y: -0.09 }], color: "primary", fill: false }, "path12-1-8-0": { type: "path", points: [{ x: -0.16, y: -0.01 }, { x: 0.17, y: -0.01 }], color: "primary", fill: false }, "path12-1-0": { type: "path", points: [{ x: 0.2, y: -0.09 }, { x: 0.47, y: -0.09 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: -0.1, y: 0.06 }, { x: -0.1, y: 0.06 }, { x: -0.1, y: 0.07 }, { x: -0.1, y: 0.07 }, { x: -0.1, y: 0.07 }, { x: -0.1, y: 0.08 }, { x: -0.1, y: 0.08 }, { x: -0.1, y: 0.08 }, { x: -0.1, y: 0.09 }, { x: -0.09, y: 0.09 }, { x: -0.09, y: 0.09 }, { x: -0.09, y: 0.1 }, { x: -0.09, y: 0.1 }, { x: -0.09, y: 0.1 }, { x: -0.09, y: 0.1 }, { x: -0.09, y: 0.11 }, { x: -0.09, y: 0.11 }, { x: -0.08, y: 0.11 }, { x: -0.08, y: 0.12 }, { x: -0.08, y: 0.12 }, { x: -0.08, y: 0.12 }, { x: -0.08, y: 0.12 }, { x: -0.07, y: 0.13 }, { x: -0.07, y: 0.13 }, { x: -0.07, y: 0.13 }, { x: -0.07, y: 0.13 }, { x: -0.06, y: 0.14 }, { x: -0.06, y: 0.14 }, { x: -0.06, y: 0.14 }, { x: -0.06, y: 0.14 }, { x: -0.05, y: 0.14 }, { x: -0.05, y: 0.15 }, { x: -0.05, y: 0.15 }, { x: -0.04, y: 0.15 }, { x: -0.04, y: 0.15 }, { x: -0.04, y: 0.15 }, { x: -0.04, y: 0.15 }, { x: -0.03, y: 0.16 }, { x: -0.03, y: 0.16 }, { x: -0.03, y: 0.16 }, { x: -0.02, y: 0.16 }, { x: -0.02, y: 0.16 }, { x: -0.02, y: 0.16 }, { x: -0.01, y: 0.16 }, { x: -0.01, y: 0.16 }, { x: 0, y: 0.16 }, { x: 0, y: 0.16 }, { x: 0, y: 0.16 }, { x: 0.01, y: 0.16 }, { x: 0.01, y: 0.16 }, { x: 0.01, y: 0.16 }, { x: 0.02, y: 0.16 }, { x: 0.02, y: 0.16 }, { x: 0.02, y: 0.16 }, { x: 0.03, y: 0.16 }, { x: 0.03, y: 0.16 }, { x: 0.03, y: 0.16 }, { x: 0.04, y: 0.16 }, { x: 0.04, y: 0.16 }, { x: 0.04, y: 0.16 }, { x: 0.05, y: 0.15 }, { x: 0.05, y: 0.15 }, { x: 0.05, y: 0.15 }, { x: 0.06, y: 0.15 }, { x: 0.06, y: 0.15 }, { x: 0.06, y: 0.15 }, { x: 0.06, y: 0.14 }, { x: 0.07, y: 0.14 }, { x: 0.07, y: 0.14 }, { x: 0.07, y: 0.14 }, { x: 0.08, y: 0.14 }, { x: 0.08, y: 0.13 }, { x: 0.08, y: 0.13 }, { x: 0.08, y: 0.13 }, { x: 0.09, y: 0.13 }, { x: 0.09, y: 0.12 }, { x: 0.09, y: 0.12 }, { x: 0.09, y: 0.12 }, { x: 0.09, y: 0.12 }, { x: 0.1, y: 0.11 }, { x: 0.1, y: 0.11 }, { x: 0.1, y: 0.1 }, { x: 0.1, y: 0.1 }, { x: 0.11, y: 0.09 }, { x: 0.11, y: 0.09 }, { x: 0.11, y: 0.09 }, { x: 0.11, y: 0.08 }, { x: 0.11, y: 0.08 }, { x: 0.11, y: 0.08 }, { x: 0.11, y: 0.07 }, { x: 0.11, y: 0.07 }, { x: 0.11, y: 0.07 }, { x: 0.11, y: 0.06 }, { x: 0.11, y: 0.06 }, { x: 0.1, y: 0.06 }, { x: 0.1, y: 0.06 }, { x: 0.09, y: 0.06 }, { x: 0.09, y: 0.06 }, { x: 0.08, y: 0.06 }, { x: 0.07, y: 0.06 }, { x: 0.07, y: 0.06 }, { x: 0.06, y: 0.06 }, { x: 0.05, y: 0.06 }, { x: 0.05, y: 0.06 }, { x: 0.04, y: 0.06 }, { x: 0.03, y: 0.06 }, { x: 0.03, y: 0.06 }, { x: 0.02, y: 0.06 }, { x: 0.01, y: 0.06 }, { x: 0.01, y: 0.06 }, { x: 0, y: 0.06 }, { x: -0.01, y: 0.06 }, { x: -0.01, y: 0.06 }, { x: -0.02, y: 0.06 }, { x: -0.03, y: 0.06 }, { x: -0.03, y: 0.06 }, { x: -0.04, y: 0.06 }, { x: -0.05, y: 0.06 }, { x: -0.05, y: 0.06 }, { x: -0.06, y: 0.06 }, { x: -0.07, y: 0.06 }, { x: -0.07, y: 0.06 }, { x: -0.08, y: 0.06 }, { x: -0.09, y: 0.06 }, { x: -0.09, y: 0.06 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: 0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: -0.16, y: -0.27 } }, refblocks: { left1: { x: -0.47, y: -0.09 }, right1: { x: 0.47, y: -0.09 } }, bounds: { minX: -0.5, maxX: 0.5, minY: -0.27, maxY: 0.27, width: 1, height: 0.53, centerX: 0, centerY: 0 }, circles: {} };
var { paths: _d, texts: Gx, bounds: Ue, refblocks: Ux, circles: gd } = Dx;
var We = s({ primitives: [...Object.values(_d), ...Object.values(gd), { ...Gx.top1, anchor: "middle_bottom", x: 0 }, { ...Gx.bottom1, anchor: "middle_top", x: 0 }], ports: [{ ...Ux.left1, labels: ["1"] }, { ...Ux.right1, labels: ["2"] }], size: { width: Ue.width, height: Ue.height }, center: { x: Ue.centerX + 0.006, y: Ue.centerY + 0.06 } });
var Lo = r(We);
var Rt = Lo.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var He = Lo.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Rt.anchor = "middle_left";
He.anchor = "middle_right";
Rt.x = Rt.x - 0.03;
Rt.y = Rt.y;
He.x = He.x;
He.y = 0;
var Wx = Lo;
var Hx = { paths: { path11: { type: "path", points: [{ x: -0.42, y: -0.1 }, { x: 0.05, y: -0.11 }], color: "primary", fill: false }, path40: { type: "path", points: [{ x: 0.09, y: 0.19 }, { x: 0.09, y: -0.18 }], color: "primary", fill: false }, "path12-1": { type: "path", points: [{ x: 0.3, y: 0.55 }, { x: 0.3, y: 0.11 }], color: "primary", fill: false }, "path12-1-5": { type: "path", points: [{ x: 0.31, y: -0.55 }, { x: 0.31, y: -0.01 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.09, y: 0.11 }, { x: 0.31, y: 0.11 }], color: "primary", fill: false }, "path2-5": { type: "path", points: [{ x: 0.09, y: -0.1 }, { x: 0.31, y: -0.1 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: 0.27, y: -0.04 }, { x: 0.27, y: 0.03 }, { x: 0.2, y: 0 }, { x: 0.27, y: -0.04 }], color: "primary", fill: true }, "path2-0": { type: "path", points: [{ x: 0.09, y: 0 }, { x: 0.31, y: -0.01 }], color: "primary", fill: false }, "path12-1-0": { type: "path", points: [{ x: 0.05, y: 0.17 }, { x: 0.05, y: -0.11 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.13, y: 0.36 }, bottom1: { type: "text", text: "{VAL}", x: 0.06, y: -0.42 } }, refblocks: { top1: { x: 0.3, y: 0.55 }, bottom1: { x: 0.31, y: -0.55 }, left1: { x: -0.42, y: -0.1 } }, bounds: { minX: -0.45, maxX: 0.45, minY: -0.58, maxY: 0.58, width: 0.89, height: 1.16, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0.16, y: 0, radius: 0.29, color: "primary", fill: false } } };
var { paths: vd, texts: Zx, bounds: Ze, refblocks: Vo, circles: wd } = Hx;
var Qe = s({ primitives: [...Object.values(vd), ...Object.values(wd), { ...Zx.top1, anchor: "middle_right", x: 0 }, { ...Zx.bottom1, anchor: "middle_right", x: 0 }], ports: [{ ...Vo.top1, labels: ["1", "drain"] }, { ...Vo.bottom1, labels: ["2", "source"] }, { ...Vo.left1, labels: ["3", "gate"] }], size: { width: Ze.width, height: Ze.height }, center: { x: Ze.centerX, y: Ze.centerY } });
var Qx = r(Qe);
var Kx = Qx.primitives.filter((t) => t.type === "text");
var jo = Kx.find((t) => t.text === "{VAL}");
jo.x = -0.35;
jo.y = 0;
jo.anchor = "middle_right";
var ko = Kx.find((t) => t.text === "{REF}");
ko.y = 0;
ko.x = 0.35;
ko.anchor = "middle_left";
var ts = Qx;
var es = { paths: { path11: { type: "path", points: [{ x: -0.42, y: -0.1 }, { x: 0.05, y: -0.11 }], color: "primary", fill: false }, "path12-1": { type: "path", points: [{ x: 0.3, y: 0.55 }, { x: 0.3, y: 0.11 }], color: "primary", fill: false }, "path12-1-5": { type: "path", points: [{ x: 0.31, y: -0.55 }, { x: 0.31, y: -0.01 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.09, y: 0.11 }, { x: 0.31, y: 0.11 }], color: "primary", fill: false }, "path2-8-3-7": { type: "path", points: [{ x: 0.09, y: 0.15 }, { x: 0.09, y: 0.07 }], color: "primary", fill: false }, "path2-5": { type: "path", points: [{ x: 0.09, y: -0.1 }, { x: 0.31, y: -0.1 }], color: "primary", fill: false }, "path2-8-3": { type: "path", points: [{ x: 0.09, y: -0.08 }, { x: 0.09, y: -0.15 }], color: "primary", fill: false }, "path2-8-3-2": { type: "path", points: [{ x: 0.09, y: 0.03 }, { x: 0.09, y: -0.04 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: 0.27, y: -0.04 }, { x: 0.27, y: 0.03 }, { x: 0.2, y: 0 }, { x: 0.27, y: -0.04 }], color: "primary", fill: true }, "path2-0": { type: "path", points: [{ x: 0.09, y: 0 }, { x: 0.31, y: -0.01 }], color: "primary", fill: false }, "path12-1-0": { type: "path", points: [{ x: 0.05, y: 0.11 }, { x: 0.05, y: -0.11 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.13, y: 0.36 }, bottom1: { type: "text", text: "{VAL}", x: 0.06, y: -0.42 } }, refblocks: { top1: { x: 0.3, y: 0.55 }, bottom1: { x: 0.31, y: -0.55 }, left1: { x: -0.42, y: -0.1 } }, bounds: { minX: -0.45, maxX: 0.45, minY: -0.58, maxY: 0.58, width: 0.89, height: 1.16, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0.16, y: 0, radius: 0.29, color: "primary", fill: false } } };
var { paths: Pd, texts: rs, bounds: Ke, refblocks: zo, circles: Sd } = es;
var t0 = s({ primitives: [...Object.values(Pd), ...Object.values(Sd), { ...rs.top1, anchor: "middle_right", x: 0 }, { ...rs.bottom1, anchor: "middle_right", x: 0 }], ports: [{ ...zo.top1, labels: ["1", "drain"] }, { ...zo.bottom1, labels: ["2", "source"] }, { ...zo.left1, labels: ["3", "gate"] }], size: { width: Ke.width, height: Ke.height }, center: { x: Ke.centerX, y: Ke.centerY } });
var os = r(t0);
var is = os.primitives.filter((t) => t.type === "text");
var Oo = is.find((t) => t.text === "{VAL}");
Oo.x = -0.35;
Oo.y = 0;
Oo.anchor = "middle_right";
var Jo = is.find((t) => t.text === "{REF}");
Jo.y = 0;
Jo.x = 0.35;
Jo.anchor = "middle_left";
var ls = os;
var ps = { paths: { path11: { type: "path", points: [{ x: -0.4, y: 0 }, { x: 0.06, y: -0.01 }], color: "primary", fill: false }, path40: { type: "path", points: [{ x: 0.07, y: 0.19 }, { x: 0.07, y: -0.18 }], color: "primary", fill: false }, "path12-1": { type: "path", points: [{ x: 0.28, y: 0.55 }, { x: 0.28, y: 0.11 }], color: "primary", fill: false }, "path12-1-5": { type: "path", points: [{ x: 0.29, y: -0.55 }, { x: 0.29, y: -0.1 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.07, y: 0.11 }, { x: 0.29, y: 0.11 }], color: "primary", fill: false }, "path2-5": { type: "path", points: [{ x: 0.07, y: -0.1 }, { x: 0.29, y: -0.1 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: -0.08, y: 0.06 }, { x: -0.08, y: -0.07 }, { x: 0.01, y: 0 }, { x: -0.08, y: 0.06 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.15, y: 0.36 }, bottom1: { type: "text", text: "{VAL}", x: 0.04, y: -0.42 } }, refblocks: { top1: { x: 0.28, y: 0.55 }, bottom1: { x: 0.29, y: -0.55 }, left1: { x: -0.4, y: 0 } }, bounds: { minX: -0.43, maxX: 0.43, minY: -0.58, maxY: 0.58, width: 0.85, height: 1.16, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0.14, y: 0, radius: 0.29, color: "primary", fill: false } } };
var { paths: Rd, texts: as, bounds: e0, refblocks: $o, circles: Td } = ps;
var r0 = s({ primitives: [...Object.values(Rd), ...Object.values(Td), { ...as.top1, anchor: "middle_right", x: 0 }, { ...as.bottom1, anchor: "middle_right", x: 0 }], ports: [{ ...$o.top1, labels: ["1", "drain"] }, { ...$o.bottom1, labels: ["2", "source"] }, { ...$o.left1, labels: ["3", "gate"] }], size: { width: e0.width, height: e0.height }, center: { x: e0.centerX, y: e0.centerY } });
var ys = r(r0);
var xs = ys.primitives.filter((t) => t.type === "text");
var Mo = xs.find((t) => t.text === "{VAL}");
Mo.x = -0.35;
Mo.y = 0;
Mo.anchor = "middle_right";
var Co = xs.find((t) => t.text === "{REF}");
Co.y = 0;
Co.x = 0.35;
Co.anchor = "middle_left";
var ss = ys;
var ms2 = { paths: { diag1: { type: "path", points: [{ x: -0.1, y: -0.1 }, { x: 0.1, y: 0.1 }], color: "primary", fill: false }, diag2: { type: "path", points: [{ x: -0.1, y: 0.1 }, { x: 0.1, y: -0.1 }], color: "primary", fill: false }, stem: { type: "path", points: [{ x: -0.2, y: 0 }, { x: 0, y: 0 }], color: "primary", fill: false } }, texts: {}, refblocks: { left1: { x: -0.2, y: 0 } }, bounds: { minX: -0.19, maxX: 0.2, minY: -0.12, maxY: 0.12, width: 0.39, height: 0.24, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Yd, bounds: ns, refblocks: Xd } = ms2;
var U = e({ primitives: [...Object.values(Yd)], ports: [{ ...Xd.left1, labels: ["1"] }], center: { x: ns.centerX, y: ns.centerY } }).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).build();
var fs = r(U, "down");
var hs = r(U, "left");
var cs = r(U, "up");
var g = { paths: { path11: { type: "path", points: [{ x: -0.4, y: 0 }, { x: 0.06, y: -0.01 }], color: "primary", fill: false }, "path40-0": { type: "path", points: [{ x: 0.07, y: 0.27 }, { x: 0.07, y: -0.28 }], color: "primary", fill: false }, "path40-0-5": { type: "path", points: [{ x: 0.28, y: 0.24 }, { x: 0.08, y: 0.11 }], color: "primary", fill: false }, "path40-0-5-0": { type: "path", points: [{ x: 0.29, y: -0.24 }, { x: 0.09, y: -0.11 }], color: "primary", fill: false }, "path12-1-5": { type: "path", points: [{ x: 0.29, y: 0.25 }, { x: 0.29, y: 0.55 }], color: "primary", fill: false }, "path12-1-5-3": { type: "path", points: [{ x: 0.29, y: -0.55 }, { x: 0.29, y: -0.25 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: 0.19, y: -0.1 }, { x: 0.12, y: -0.2 }, { x: 0.22, y: -0.2 }, { x: 0.19, y: -0.1 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.08, y: 0.36 }, bottom1: { type: "text", text: "{VAL}", x: -0.07, y: -0.41 } }, refblocks: { top1: { x: 0.29, y: 0.55 }, bottom1: { x: 0.29, y: -0.55 }, left1: { x: -0.4, y: 0 } }, bounds: { minX: -0.43, maxX: 0.43, minY: -0.58, maxY: 0.58, width: 0.85, height: 1.16, centerX: 0, centerY: 0 }, circles: { "path1-0": { type: "circle", x: 0.14, y: 0, radius: 0.29, color: "primary", fill: false } } };
var { paths: Vd, texts: WA, bounds: o0, refblocks: No, circles: jd } = g;
var ds = e({ primitives: [...Object.values(Vd), ...Object.values(jd), { type: "text", text: "{REF}", x: -0.1, y: 0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: -0.3094553499999995 }], ports: [{ ...No.top1, labels: ["1", "collector"] }, { ...No.bottom1, labels: ["2", "emitter"] }, { ...No.left1, labels: ["3", "base"] }], size: { width: o0.width, height: o0.height }, center: { x: o0.centerX, y: o0.centerY } }).rotateRightFacingSymbol("right").changeTextAnchor("{REF}", "middle_right").changeTextAnchor("{VAL}", "middle_right").build();
var bs = e(g).rotateRightFacingSymbol("up").changeTextAnchor("{VAL}", "middle_left").labelPort("left1", ["3", "base"]).labelPort("top1", ["1", "collector"]).labelPort("bottom1", ["2", "emitter"]).changeTextAnchor("{REF}", "middle_right").build();
var { paths: kd, texts: aP, bounds: i0, refblocks: Io, circles: zd } = g;
var _s = e({ primitives: [...Object.values(kd), ...Object.values(zd), { type: "text", text: "{REF}", x: -0.1, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: 0.3094553499999995 }], ports: [{ ...Io.top1, labels: ["1", "collector"] }, { ...Io.bottom1, labels: ["2", "emitter"] }, { ...Io.left1, labels: ["3", "base"] }], size: { width: i0.width, height: i0.height }, center: { x: i0.centerX, y: i0.centerY } }).rotateRightFacingSymbol("down").changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_bottom").build();
var { paths: Od, texts: mP, bounds: l0, refblocks: Bo, circles: Jd } = g;
var gs = e({ primitives: [...Object.values(Od), ...Object.values(Jd), { type: "text", text: "{REF}", x: -0.1, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: 0.3094553499999995 }], ports: [{ ...Bo.top1, labels: ["1", "collector"] }, { ...Bo.bottom1, labels: ["2", "emitter"] }, { ...Bo.left1, labels: ["3", "base"] }], size: { width: l0.width, height: l0.height }, center: { x: l0.centerX, y: l0.centerY } }).rotateRightFacingSymbol("up").changeTextAnchor("{REF}", "middle_top").changeTextAnchor("{VAL}", "middle_top").build();
var { paths: $d, texts: cP, bounds: p0, refblocks: qo, circles: Md } = g;
var us = e({ primitives: [...Object.values($d), ...Object.values(Md), { type: "text", text: "{REF}", x: -0.1, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: 0.3094553499999995 }], ports: [{ ...qo.top1, labels: ["1", "collector"] }, { ...qo.bottom1, labels: ["2", "emitter"] }, { ...qo.left1, labels: ["3", "base"] }], size: { width: p0.width, height: p0.height }, center: { x: p0.centerX, y: p0.centerY } }).rotateRightFacingSymbol("left").changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: Cd, texts: gP, bounds: a0, refblocks: Do, circles: Nd } = g;
var vs = e({ primitives: [...Object.values(Cd), ...Object.values(Nd), { type: "text", text: "{REF}", x: -0.1, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: 0.3094553499999995 }], ports: [{ ...Do.top1, labels: ["1", "collector"] }, { ...Do.bottom1, labels: ["2", "emitter"] }, { ...Do.left1, labels: ["3", "base"] }], size: { width: a0.width, height: a0.height }, center: { x: a0.centerX, y: a0.centerY } }).rotateRightFacingSymbol("left").changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var ws = { paths: { path40: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.32, y: -0.21 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.32, y: 0.31 }, { x: 0.14, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.32, y: -0.21 }, { x: -0.32, y: 0.31 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.32, y: 0.18 }, { x: -0.57, y: 0.18 }], color: "primary", fill: false }, path45: { type: "path", points: [{ x: -0.32, y: -0.09 }, { x: -0.57, y: -0.09 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.43, y: 0.04 }, { x: 0.15, y: 0.04 }], color: "primary", fill: false }, "rect1577-3": { type: "path", points: [{ x: -0.2, y: 0.18 }, { x: -0.27, y: 0.18 }], color: "primary", fill: true }, "rect1577-4": { type: "path", points: [{ x: -0.2, y: -0.09 }, { x: -0.27, y: -0.09 }], color: "primary", fill: true }, "rect1577-4-7": { type: "path", points: [{ x: -0.23, y: -0.05 }, { x: -0.23, y: -0.12 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.42 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.3 } }, refblocks: { left1: { x: -0.57, y: 0.18 }, left2: { x: -0.57, y: -0.09 }, right1: { x: 0.43, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.38, maxY: 0.27, width: 1.09, height: 0.3, centerX: 0, centerY: 0.05 }, circles: {} };
var W = e(ws).labelPort("left1", ["1", "inp1"]).labelPort("left2", ["2", "inp2"]).labelPort("right1", ["3", "out"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var As = r(W, "down");
var Ps = r(W, "left");
var Ss = r(W, "up");
var Fs = { paths: { path40: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.32, y: -0.21 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.32, y: 0.31 }, { x: 0.14, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.32, y: -0.21 }, { x: -0.32, y: 0.31 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.32, y: 0.18 }, { x: -0.57, y: 0.18 }], color: "primary", fill: false }, path45: { type: "path", points: [{ x: -0.32, y: -0.09 }, { x: -0.57, y: -0.09 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.43, y: 0.04 }, { x: 0.15, y: 0.04 }], color: "primary", fill: false }, "path44-1": { type: "path", points: [{ x: -0.1, y: 0.44 }, { x: -0.1, y: 0.18 }], color: "primary", fill: false }, "path44-2": { type: "path", points: [{ x: -0.09, y: -0.34 }, { x: -0.09, y: -0.09 }], color: "primary", fill: false }, "rect1577-3": { type: "path", points: [{ x: -0.2, y: 0.18 }, { x: -0.27, y: 0.18 }], color: "primary", fill: true }, "rect1577-4": { type: "path", points: [{ x: -0.2, y: -0.09 }, { x: -0.27, y: -0.09 }], color: "primary", fill: true }, "rect1577-4-7": { type: "path", points: [{ x: -0.23, y: 0.14 }, { x: -0.23, y: 0.22 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: 0.25, y: 0.32 }, bottom1: { type: "text", text: "{VAL}", x: 0.25, y: -0.24 } }, refblocks: { left1: { x: -0.57, y: 0.18 }, left2: { x: -0.57, y: -0.09 }, right1: { x: 0.43, y: 0.04 }, top2: { x: -0.1, y: 0.44 }, bottom1: { x: -0.09, y: -0.34 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.38, maxY: 0.27, width: 1.09, height: 0.3, centerX: 0, centerY: 0.05 }, circles: {} };
var H = e(Fs).labelPort("left1", ["1", "inp1"]).labelPort("left2", ["2", "inp2"]).labelPort("right1", ["4", "out"]).labelPort("top2", ["5", "V+"]).labelPort("bottom1", ["3", "V-"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var Rs = r(H, "down");
var Ts = r(H, "left");
var Es = r(H, "up");
var Ys = { paths: { path11: { type: "path", points: [{ x: -0.42, y: -0.1 }, { x: 0.05, y: -0.11 }], color: "primary", fill: false }, path40: { type: "path", points: [{ x: 0.09, y: 0.19 }, { x: 0.09, y: -0.18 }], color: "primary", fill: false }, "path12-1": { type: "path", points: [{ x: 0.3, y: 0.55 }, { x: 0.3, y: 0.11 }], color: "primary", fill: false }, "path12-1-5": { type: "path", points: [{ x: 0.31, y: -0.55 }, { x: 0.31, y: -0.01 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.09, y: 0.11 }, { x: 0.31, y: 0.11 }], color: "primary", fill: false }, "path2-5": { type: "path", points: [{ x: 0.09, y: -0.1 }, { x: 0.31, y: -0.1 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: 0.2, y: 0.03 }, { x: 0.2, y: -0.04 }, { x: 0.27, y: -0.01 }, { x: 0.2, y: 0.03 }], color: "primary", fill: true }, "path2-0": { type: "path", points: [{ x: 0.09, y: 0 }, { x: 0.31, y: -0.01 }], color: "primary", fill: false }, "path12-1-0": { type: "path", points: [{ x: 0.05, y: 0.17 }, { x: 0.05, y: -0.11 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.13, y: 0.36 }, bottom1: { type: "text", text: "{VAL}", x: 0.06, y: -0.42 } }, refblocks: { top1: { x: 0.3, y: 0.55 }, bottom1: { x: 0.31, y: -0.55 }, left1: { x: -0.42, y: -0.1 } }, bounds: { minX: -0.45, maxX: 0.45, minY: -0.58, maxY: 0.58, width: 0.89, height: 1.16, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0.16, y: 0, radius: 0.29, color: "primary", fill: false } } };
var { paths: Dd, texts: Xs, bounds: y0, refblocks: Go, circles: Gd } = Ys;
var x0 = s({ primitives: [...Object.values(Dd), ...Object.values(Gd), { ...Xs.top1, anchor: "middle_right", x: 0 }, { ...Xs.bottom1, anchor: "middle_right", x: 0 }], ports: [{ ...Go.top1, labels: ["1", "drain"] }, { ...Go.bottom1, labels: ["2", "source"] }, { ...Go.left1, labels: ["3", "gate"] }], size: { width: y0.width, height: y0.height }, center: { x: y0.centerX, y: y0.centerY } });
var Ls = r(x0);
var Vs = Ls.primitives.filter((t) => t.type === "text");
var Uo = Vs.find((t) => t.text === "{VAL}");
Uo.x = -0.35;
Uo.y = 0;
Uo.anchor = "middle_right";
var Wo = Vs.find((t) => t.text === "{REF}");
Wo.y = 0;
Wo.x = 0.35;
Wo.anchor = "middle_left";
var js = Ls;
var ks = { paths: { path11: { type: "path", points: [{ x: -0.42, y: -0.1 }, { x: 0.05, y: -0.11 }], color: "primary", fill: false }, "path12-1": { type: "path", points: [{ x: 0.3, y: 0.55 }, { x: 0.3, y: 0.11 }], color: "primary", fill: false }, "path12-1-5": { type: "path", points: [{ x: 0.31, y: -0.55 }, { x: 0.31, y: -0.01 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.09, y: 0.11 }, { x: 0.31, y: 0.11 }], color: "primary", fill: false }, "path2-8-3-7": { type: "path", points: [{ x: 0.09, y: 0.15 }, { x: 0.09, y: 0.07 }], color: "primary", fill: false }, "path2-5": { type: "path", points: [{ x: 0.09, y: -0.1 }, { x: 0.31, y: -0.1 }], color: "primary", fill: false }, "path2-8-3": { type: "path", points: [{ x: 0.09, y: -0.08 }, { x: 0.09, y: -0.15 }], color: "primary", fill: false }, "path2-8-3-2": { type: "path", points: [{ x: 0.09, y: 0.03 }, { x: 0.09, y: -0.04 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: 0.2, y: 0.03 }, { x: 0.2, y: -0.04 }, { x: 0.27, y: -0.01 }, { x: 0.2, y: 0.03 }], color: "primary", fill: true }, "path2-0": { type: "path", points: [{ x: 0.09, y: 0 }, { x: 0.31, y: -0.01 }], color: "primary", fill: false }, "path12-1-0": { type: "path", points: [{ x: 0.05, y: 0.11 }, { x: 0.05, y: -0.11 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.13, y: 0.36 }, bottom1: { type: "text", text: "{VAL}", x: 0.06, y: -0.42 } }, refblocks: { top1: { x: 0.3, y: 0.55 }, bottom1: { x: 0.31, y: -0.55 }, left1: { x: -0.42, y: -0.1 } }, bounds: { minX: -0.45, maxX: 0.45, minY: -0.58, maxY: 0.58, width: 0.89, height: 1.16, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0.16, y: 0, radius: 0.29, color: "primary", fill: false } } };
var { paths: Wd, texts: zs, bounds: s0, refblocks: Ho, circles: Hd } = ks;
var m0 = s({ primitives: [...Object.values(Wd), ...Object.values(Hd), { ...zs.top1, anchor: "middle_right", x: 0 }, { ...zs.bottom1, anchor: "middle_right", x: 0 }], ports: [{ ...Ho.top1, labels: ["1", "drain"] }, { ...Ho.bottom1, labels: ["2", "source"] }, { ...Ho.left1, labels: ["3", "gate"] }], size: { width: s0.width, height: s0.height }, center: { x: s0.centerX, y: s0.centerY } });
var Os = r(m0);
var Js = Os.primitives.filter((t) => t.type === "text");
var Zo = Js.find((t) => t.text === "{VAL}");
Zo.x = -0.35;
Zo.y = 0;
Zo.anchor = "middle_right";
var Qo = Js.find((t) => t.text === "{REF}");
Qo.y = 0;
Qo.x = 0.35;
Qo.anchor = "middle_left";
var $s = Os;
var Ms = { paths: { path11: { type: "path", points: [{ x: -0.54, y: -0.01 }, { x: -0.15, y: -0.02 }], color: "primary", fill: false }, path40: { type: "path", points: [{ x: 0.13, y: 0 }, { x: -0.13, y: -0.13 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.13, y: 0.13 }, { x: 0.13, y: 0 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.13, y: -0.13 }, { x: -0.13, y: 0.13 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.13, y: 0.13 }, { x: 0.13, y: -0.13 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.14, y: 0 }, { x: 0.54, y: -0.01 }], color: "primary", fill: false }, "path25-0": { type: "path", points: [{ x: 0.2, y: 0.38 }, { x: 0.16, y: 0.28 }, { x: 0.26, y: 0.3 }], color: "primary", fill: true }, "path78-6": { type: "path", points: [{ x: 0.33, y: 0.43 }, { x: 0.32, y: 0.42 }, { x: 0.21, y: 0.31 }, { x: 0.21, y: 0.31 }], color: "primary", fill: false }, "path25-0-9": { type: "path", points: [{ x: 0.35, y: 0.35 }, { x: 0.31, y: 0.26 }, { x: 0.41, y: 0.27 }], color: "primary", fill: true }, "path78-6-5": { type: "path", points: [{ x: 0.48, y: 0.4 }, { x: 0.47, y: 0.39 }, { x: 0.35, y: 0.29 }, { x: 0.35, y: 0.29 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.1, y: 0.35 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.43 } }, refblocks: { left1: { x: -0.54, y: -0.01 }, right1: { x: 0.54, y: -0.01 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.43, maxY: 0.43, width: 1.14, height: 0.85, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: -0.01, radius: 0.29, color: "primary", fill: false } } };
var n0 = e(Ms).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var Cs = r(n0);
var Qd = Cs.primitives.filter((t) => t.type === "text");
var Ns = Qd.find((t) => t.text === "{REF}");
Ns.y = 0;
Ns.anchor = "middle_left";
var Is = Cs;
var Bs = { paths: { path11: { type: "path", points: [{ x: -0.4, y: 0 }, { x: 0.06, y: -0.01 }], color: "primary", fill: false }, path40: { type: "path", points: [{ x: 0.07, y: 0.19 }, { x: 0.07, y: -0.18 }], color: "primary", fill: false }, "path12-1": { type: "path", points: [{ x: 0.28, y: 0.55 }, { x: 0.28, y: 0.11 }], color: "primary", fill: false }, "path12-1-5": { type: "path", points: [{ x: 0.29, y: -0.55 }, { x: 0.29, y: -0.1 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.07, y: 0.11 }, { x: 0.29, y: 0.11 }], color: "primary", fill: false }, "path2-5": { type: "path", points: [{ x: 0.07, y: -0.1 }, { x: 0.29, y: -0.1 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: 0.01, y: -0.07 }, { x: 0.01, y: 0.06 }, { x: -0.08, y: 0 }, { x: 0.01, y: -0.07 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.15, y: 0.36 }, bottom1: { type: "text", text: "{VAL}", x: 0.04, y: -0.42 } }, refblocks: { top1: { x: 0.28, y: 0.55 }, bottom1: { x: 0.29, y: -0.55 }, left1: { x: -0.4, y: 0 } }, bounds: { minX: -0.43, maxX: 0.43, minY: -0.58, maxY: 0.58, width: 0.85, height: 1.16, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0.14, y: 0, radius: 0.29, color: "primary", fill: false } } };
var { paths: t2, texts: qs, bounds: f0, refblocks: Ko, circles: e2 } = Bs;
var h0 = s({ primitives: [...Object.values(t2), ...Object.values(e2), { ...qs.top1, anchor: "middle_right", x: 0 }, { ...qs.bottom1, anchor: "middle_right" }], ports: [{ ...Ko.top1, labels: ["1", "drain"] }, { ...Ko.bottom1, labels: ["2", "source"] }, { ...Ko.left1, labels: ["3", "gate"] }], size: { width: f0.width, height: f0.height }, center: { x: f0.centerX, y: f0.centerY } });
var Ds = r(h0);
var Gs = Ds.primitives.filter((t) => t.type === "text");
var ti = Gs.find((t) => t.text === "{VAL}");
ti.x = -0.35;
ti.y = 0;
ti.anchor = "middle_right";
var ei = Gs.find((t) => t.text === "{REF}");
ei.y = 0;
ei.x = 0.35;
ei.anchor = "middle_left";
var Us = Ds;
var u = { paths: { path11: { type: "path", points: [{ x: -0.4, y: 0 }, { x: 0.06, y: -0.01 }], color: "primary", fill: false }, "path40-0": { type: "path", points: [{ x: 0.07, y: 0.27 }, { x: 0.07, y: -0.28 }], color: "primary", fill: false }, "path40-0-5": { type: "path", points: [{ x: 0.28, y: 0.24 }, { x: 0.08, y: 0.11 }], color: "primary", fill: false }, "path40-0-5-0": { type: "path", points: [{ x: 0.29, y: -0.24 }, { x: 0.09, y: -0.11 }], color: "primary", fill: false }, "path12-1-5": { type: "path", points: [{ x: 0.29, y: 0.25 }, { x: 0.29, y: 0.55 }], color: "primary", fill: false }, "path12-1-5-3": { type: "path", points: [{ x: 0.29, y: -0.55 }, { x: 0.29, y: -0.25 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: 0.15, y: -0.23 }, { x: 0.22, y: -0.12 }, { x: 0.12, y: -0.12 }, { x: 0.15, y: -0.23 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.08, y: 0.37 }, bottom1: { type: "text", text: "{VAL}", x: -0.07, y: -0.41 } }, refblocks: { top1: { x: 0.29, y: 0.55 }, bottom1: { x: 0.29, y: -0.55 }, left1: { x: -0.4, y: 0 } }, bounds: { minX: -0.43, maxX: 0.43, minY: -0.58, maxY: 0.58, width: 0.85, height: 1.16, centerX: 0, centerY: 0 }, circles: { "path1-0": { type: "circle", x: 0.14, y: 0, radius: 0.29, color: "primary", fill: false } } };
var { paths: o2, texts: PS, bounds: c0, refblocks: ri, circles: i2 } = u;
var Ws = e({ primitives: [...Object.values(o2), ...Object.values(i2), { type: "text", text: "{REF}", x: -0.1, y: 0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: -0.3094553499999995 }], ports: [{ ...ri.top1, labels: ["1", "collector"] }, { ...ri.bottom1, labels: ["2", "emitter"] }, { ...ri.left1, labels: ["3", "base"] }], size: { width: c0.width, height: c0.height }, center: { x: c0.centerX, y: c0.centerY } }).rotateRightFacingSymbol("right").changeTextAnchor("{REF}", "middle_right").changeTextAnchor("{VAL}", "middle_right").build();
var Hs = e(u).rotateRightFacingSymbol("up").changeTextAnchor("{VAL}", "middle_left").labelPort("left1", ["3", "base"]).labelPort("top1", ["1", "collector"]).labelPort("bottom1", ["2", "emitter"]).changeTextAnchor("{REF}", "middle_right").build();
var { paths: l2, texts: zS, bounds: d0, refblocks: oi, circles: p2 } = u;
var Zs = e({ primitives: [...Object.values(l2), ...Object.values(p2), { type: "text", text: "{REF}", x: -0.1, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: 0.3094553499999995 }], ports: [{ ...oi.top1, labels: ["1", "collector"] }, { ...oi.bottom1, labels: ["2", "emitter"] }, { ...oi.left1, labels: ["3", "base"] }], size: { width: d0.width, height: d0.height }, center: { x: d0.centerX, y: d0.centerY } }).rotateRightFacingSymbol("down").changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_bottom").build();
var { paths: a2, texts: MS, bounds: b0, refblocks: ii, circles: y2 } = u;
var Qs = e({ primitives: [...Object.values(a2), ...Object.values(y2), { type: "text", text: "{REF}", x: -0.1, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: 0.3094553499999995 }], ports: [{ ...ii.top1, labels: ["1", "collector"] }, { ...ii.bottom1, labels: ["2", "emitter"] }, { ...ii.left1, labels: ["3", "base"] }], size: { width: b0.width, height: b0.height }, center: { x: b0.centerX, y: b0.centerY } }).rotateRightFacingSymbol("up").changeTextAnchor("{REF}", "middle_top").changeTextAnchor("{VAL}", "middle_top").build();
var { paths: x2, texts: BS, bounds: _0, refblocks: li, circles: s2 } = u;
var Ks = e({ primitives: [...Object.values(x2), ...Object.values(s2), { type: "text", text: "{REF}", x: -0.1, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: 0.3094553499999995 }], ports: [{ ...li.top1, labels: ["1", "collector"] }, { ...li.bottom1, labels: ["2", "emitter"] }, { ...li.left1, labels: ["3", "base"] }], size: { width: _0.width, height: _0.height }, center: { x: _0.centerX, y: _0.centerY } }).rotateRightFacingSymbol("left").changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: m2, texts: US, bounds: g0, refblocks: pi, circles: n2 } = u;
var tm = e({ primitives: [...Object.values(m2), ...Object.values(n2), { type: "text", text: "{REF}", x: -0.1, y: -0.3094553499999995 }, { type: "text", text: "{VAL}", x: -0.1, y: 0.3094553499999995 }], ports: [{ ...pi.top1, labels: ["1", "collector"] }, { ...pi.bottom1, labels: ["2", "emitter"] }, { ...pi.left1, labels: ["3", "base"] }], size: { width: g0.width, height: g0.height }, center: { x: g0.centerX, y: g0.centerY } }).rotateRightFacingSymbol("left").changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var em = { paths: { path40: { type: "path", points: [{ x: -0.19, y: 0.33 }, { x: -0.26, y: 0.14 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.38, y: 0.26 }, { x: -0.19, y: 0.33 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.26, y: 0.14 }, { x: -0.38, y: 0.26 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: -0.26, y: 0.39 }, { x: -0.13, y: 0.26 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.32, y: 0.2 }, { x: -0.52, y: 0 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0, y: 0.52 }, { x: -0.19, y: 0.33 }], color: "primary", fill: false }, "path40-4": { type: "path", points: [{ x: -0.19, y: -0.32 }, { x: -0.38, y: -0.26 }], color: "primary", fill: false }, "path41-1": { type: "path", points: [{ x: -0.26, y: -0.13 }, { x: -0.19, y: -0.32 }], color: "primary", fill: false }, "path42-7": { type: "path", points: [{ x: -0.38, y: -0.26 }, { x: -0.26, y: -0.13 }], color: "primary", fill: false }, "path43-1": { type: "path", points: [{ x: -0.13, y: -0.26 }, { x: -0.26, y: -0.39 }], color: "primary", fill: false }, "path44-8": { type: "path", points: [{ x: -0.32, y: -0.19 }, { x: -0.51, y: -0.01 }], color: "primary", fill: false }, "path44-0-7": { type: "path", points: [{ x: -0.01, y: -0.5 }, { x: -0.19, y: -0.32 }], color: "primary", fill: false }, "path40-4-0": { type: "path", points: [{ x: 0.32, y: 0.19 }, { x: 0.13, y: 0.26 }], color: "primary", fill: false }, "path41-1-2": { type: "path", points: [{ x: 0.26, y: 0.38 }, { x: 0.32, y: 0.19 }], color: "primary", fill: false }, "path42-7-1": { type: "path", points: [{ x: 0.13, y: 0.26 }, { x: 0.26, y: 0.38 }], color: "primary", fill: false }, "path43-1-8": { type: "path", points: [{ x: 0.39, y: 0.26 }, { x: 0.26, y: 0.13 }], color: "primary", fill: false }, "path44-8-7": { type: "path", points: [{ x: 0.2, y: 0.32 }, { x: 0.01, y: 0.51 }], color: "primary", fill: false }, "path44-0-7-1": { type: "path", points: [{ x: 0.52, y: 0 }, { x: 0.32, y: 0.19 }], color: "primary", fill: false }, "path40-4-8": { type: "path", points: [{ x: 0.32, y: -0.19 }, { x: 0.26, y: -0.38 }], color: "primary", fill: false }, "path41-1-4": { type: "path", points: [{ x: 0.13, y: -0.26 }, { x: 0.32, y: -0.19 }], color: "primary", fill: false }, "path42-7-0": { type: "path", points: [{ x: 0.26, y: -0.38 }, { x: 0.13, y: -0.26 }], color: "primary", fill: false }, "path43-1-0": { type: "path", points: [{ x: 0.26, y: -0.13 }, { x: 0.39, y: -0.26 }], color: "primary", fill: false }, "path44-8-9": { type: "path", points: [{ x: 0.19, y: -0.32 }, { x: 0, y: -0.52 }], color: "primary", fill: false }, "path44-0-7-3": { type: "path", points: [{ x: 0.5, y: -0.01 }, { x: 0.32, y: -0.19 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.29, y: 0.46 }, bottom1: { type: "text", text: "{VAL}", x: -0.29, y: -0.5 } }, refblocks: { top1: { x: 0, y: 0.52 }, bottom1: { x: 0, y: -0.52 }, left1: { x: -0.52, y: 0 }, right1: { x: 0.52, y: 0 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.55, maxY: 0.55, width: 1.09, height: 1.09, centerX: 0, centerY: 0 }, circles: {} };
var { paths: h2, texts: rm, bounds: u0, refblocks: om } = em;
var v0 = s({ primitives: [...Object.values(h2), { ...rm.bottom1, y: 0.35, anchor: "middle_top" }, { ...rm.top1, anchor: "middle_left" }], ports: [{ ...om.left1, labels: ["1"] }, { ...om.right1, labels: ["2"] }], size: { width: u0.width + 0.05, height: u0.height }, center: { x: u0.centerX, y: u0.centerY } });
var c2 = r(v0);
var im = c2;
var lm = { paths: { path18: { type: "path", points: [{ x: -0.53, y: 0 }, { x: -0.27, y: 0 }], color: "primary", fill: false }, path19: { type: "path", points: [{ x: 0.26, y: 0 }, { x: 0.53, y: 0 }], color: "primary", fill: false }, path20: { type: "path", points: [{ x: 0, y: 0.13 }, { x: 0.26, y: 0.13 }, { x: 0.26, y: -0.13 }, { x: -0.27, y: -0.13 }, { x: -0.27, y: 0.13 }, { x: 0, y: 0.13 }], color: "primary", fill: false }, path23: { type: "path", points: [{ x: 0.28, y: -0.28 }, { x: 0.18, y: -0.25 }, { x: 0.25, y: -0.18 }], color: "primary", fill: true }, path24: { type: "path", points: [{ x: 0.29, y: -0.29 }, { x: 0.25, y: -0.17 }, { x: 0.16, y: -0.26 }], color: "primary", fill: true }, path26: { type: "path", points: [{ x: -0.3, y: 0.29 }, { x: 0.23, y: -0.23 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0.06, y: 0.2 }, bottom1: { type: "text", text: "{VAL}", x: -0.1, y: -0.28 } }, refblocks: { left1: { x: -0.53, y: 0 }, right1: { x: 0.53, y: 0 } }, bounds: { minX: -0.56, maxX: 0.56, minY: -0.29, maxY: 0.29, width: 1.13, height: 0.58, centerX: 0, centerY: 0 }, circles: {} };
var { paths: b2, texts: pm, bounds: w0, refblocks: am } = lm;
var Z = s({ primitives: [...Object.values(b2), { ...pm.bottom1, x: 0, y: -0.35, anchor: "middle_top" }, { ...pm.top1, x: 0, y: 0.35, anchor: "middle_bottom" }], ports: [{ ...am.left1, labels: ["1"] }, { ...am.right1, labels: ["2"] }], size: { width: w0.width + 0.05, height: w0.height }, center: { x: w0.centerX, y: w0.centerY } });
var ai = r(Z, "down");
var yi = ai.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var xi = ai.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
yi.anchor = "middle_left";
xi.anchor = "middle_left";
yi.y += 0.31;
yi.x = 0.34;
xi.y -= 0.31;
xi.x = 0.34;
var ym = ai;
var si = r(Z, "left");
var mi = si.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var ni = si.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
mi.anchor = "middle_bottom";
ni.anchor = "middle_top";
mi.y += 0.73;
mi.x = 0;
ni.y -= 0.7;
ni.x = 0;
var xm = si;
var fi = r(Z, "up");
var hi = fi.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var ci = fi.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
hi.anchor = "middle_left";
ci.anchor = "middle_left";
hi.y += 0.21;
hi.x = 0.34;
ci.y -= 0.21;
ci.x = 0.34;
var sm = fi;
var Q = { paths: { path1: { type: "path", points: [{ x: -0.42, y: 0 }, { x: -0.3, y: 0 }], color: "primary", fill: false }, "path1-2-1": { type: "path", points: [{ x: -0.3, y: 0 }, { x: -0.25, y: 0.1 }, { x: -0.15, y: -0.1 }, { x: -0.05, y: 0.1 }, { x: 0.05, y: -0.1 }, { x: 0.15, y: 0.1 }, { x: 0.25, y: -0.1 }, { x: 0.3, y: 0 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.3, y: 0 }, { x: 0.42, y: 0 }], color: "primary", fill: false }, path3: { type: "path", points: [{ x: 0, y: -0.17 }, { x: 0, y: -0.4 }], color: "primary", fill: false }, path15: { type: "path", points: [{ x: 0, y: -0.12 }, { x: 0.05, y: -0.2 }, { x: -0.05, y: -0.2 }, { x: 0, y: -0.12 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: 0.3, y: 0.25 }, bottom1: { type: "text", text: "{VAL}", x: 0.3, y: -0.25 } }, refblocks: { left: { x: -0.42, y: 0 }, right: { x: 0.42, y: 0 }, bottom: { x: 0, y: -0.4 } }, bounds: { minX: -0.42, maxX: 0.42, minY: -0.2, maxY: 0.2, width: 0.84, height: 0.4, centerX: 0, centerY: 0 }, circles: {} };
var { paths: g2, texts: gF, bounds: A0, refblocks: di, circles: u2 } = Q;
var mm = e({ primitives: [...Object.values(g2), ...Object.values(u2), { type: "text", text: "{REF}", x: -0.15, y: 0.2394553499999995 }, { type: "text", text: "{VAL}", x: 0.15, y: 0.2394553499999995 }], ports: [{ ...di.left, labels: ["1"] }, { ...di.right, labels: ["3"] }, { ...di.bottom, labels: ["2"] }], size: { width: A0.width, height: A0.height }, center: { x: A0.centerX, y: A0.centerY } }).rotateRightFacingSymbol("down").labelPort("left", ["1"]).labelPort("right", ["2"]).labelPort("bottom", ["3"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: v2, texts: AF, bounds: P0, refblocks: bi, circles: w2 } = Q;
var nm = e({ primitives: [...Object.values(v2), ...Object.values(w2), { type: "text", text: "{REF}", x: -0.3, y: -0.3894553499999995 }, { type: "text", text: "{VAL}", x: -0.3, y: 0.3194553499999995 }], ports: [{ ...bi.left, labels: ["1"] }, { ...bi.right, labels: ["3"] }, { ...bi.bottom, labels: ["2"] }], size: { width: P0.width, height: P0.height }, center: { x: P0.centerX, y: P0.centerY } }).rotateRightFacingSymbol("left").labelPort("left", ["1"]).labelPort("right", ["2"]).labelPort("bottom", ["3"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var fm = e(Q).labelPort("left", ["1"]).labelPort("right", ["3"]).labelPort("bottom", ["2"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var { paths: A2, texts: YF, bounds: S0, refblocks: _i, circles: P2 } = Q;
var hm = e({ primitives: [...Object.values(A2), ...Object.values(P2), { type: "text", text: "{REF}", x: 0.3, y: -0.2894553499999995 }, { type: "text", text: "{VAL}", x: -0.3, y: -0.2894553499999995 }], ports: [{ ..._i.left, labels: ["1"] }, { ..._i.right, labels: ["3"] }, { ..._i.bottom, labels: ["2"] }], size: { width: S0.width, height: S0.height }, center: { x: S0.centerX, y: S0.centerY } }).rotateRightFacingSymbol("up").labelPort("left", ["1"]).labelPort("right", ["2"]).labelPort("bottom", ["3"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var cm = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0.03 }, { x: -0.3, y: 0.03 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0.03 }, { x: 0.54, y: 0.03 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.16, y: 0.4 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.4 }, left1: { type: "text", text: "COS φ", x: -0.15, y: 0.01 } }, refblocks: { left1: { x: -0.54, y: 0.03 }, right1: { x: 0.54, y: 0.03 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.4, maxY: 0.4, width: 1.14, height: 0.79, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: 0.04, radius: 0.29, color: "primary", fill: false } } };
var { paths: F2, texts: kF, bounds: F0, refblocks: dm, circles: R2 } = cm;
var R0 = s({ primitives: [...Object.values(F2), ...Object.values(R2), { type: "text", text: "{REF}", x: -0.15, y: -0.42330070000000064, anchor: "middle_top" }, { type: "text", text: "{VAL}", x: -0.15, y: 0.42330070000000064, anchor: "middle_bottom" }, { type: "text", text: "COS φ", x: 0, y: 0.014279000000000375, anchor: "center" }], ports: [{ ...dm.left1, labels: ["1"] }, { ...dm.right1, labels: ["2"] }], size: { width: F0.width, height: F0.height }, center: { x: F0.centerX, y: F0.centerY } });
var bm = r(R0);
var gi = bm.primitives.filter((t) => t.type === "text");
var ui = gi.find((t) => t.text === "{REF}");
var vi = gi.find((t) => t.text === "{VAL}");
var wi = gi.find((t) => t.text === "COS φ");
ui.x = 0.35;
ui.y = 0;
ui.anchor = "middle_left";
vi.anchor = "middle_right";
vi.x = -0.35;
vi.y = 0;
wi.x = 0;
wi.y = 0;
wi.anchor = "center";
var _m = bm;
var gm = { paths: { "path12-1-8-6-9-9": { type: "path", points: [{ x: 0.01, y: 0.03 }, { x: 0.01, y: -0.09 }], color: "primary", fill: false }, "path12-1-5-6-4": { type: "path", points: [{ x: -0.47, y: -0.05 }, { x: -0.17, y: -0.05 }], color: "primary", fill: false }, "path12-1-8-0-0": { type: "path", points: [{ x: -0.16, y: -0.09 }, { x: 0.18, y: -0.09 }], color: "primary", fill: false }, "path12-1-0-1": { type: "path", points: [{ x: 0.2, y: -0.05 }, { x: 0.47, y: -0.05 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0.01, y: 0.22 }, bottom1: { type: "text", text: "{VAL}", x: -0.16, y: -0.22 } }, refblocks: { left1: { x: -0.47, y: -0.05 }, right1: { x: 0.47, y: -0.05 } }, bounds: { minX: -0.5, maxX: 0.5, minY: -0.22, maxY: 0.22, width: 1, height: 0.45, centerX: 0, centerY: 0 }, circles: { "circle-2": { type: "circle", x: -0.14, y: -0.05, radius: 0.02, color: "primary", fill: false }, circle: { type: "circle", x: 0.17, y: -0.05, radius: 0.02, color: "primary", fill: false } } };
var { paths: E2, texts: um, bounds: T0, refblocks: vm, circles: Y2 } = gm;
var E0 = s({ primitives: [...Object.values(E2), ...Object.values(Y2), { ...um.top1, anchor: "middle_left" }, { ...um.bottom1, anchor: "middle_left" }], ports: [{ ...vm.left1, labels: ["1"] }, { ...vm.right1, labels: ["2"] }], size: { width: T0.width, height: T0.height }, center: { x: T0.centerX, y: T0.centerY } });
var wm = r(E0, "up");
var Am = { paths: { "path12-1-8-6-9-9": { type: "path", points: [{ x: -0.05, y: 0.09 }, { x: -0.05, y: 0.04 }], color: "primary", fill: false }, "path12-1-8-7-9-9": { type: "path", points: [{ x: -0.05, y: 0.09 }, { x: 0.07, y: 0.09 }], color: "primary", fill: false }, "path12-1-8-6-9-10": { type: "path", points: [{ x: 0.07, y: 0.09 }, { x: 0.07, y: 0.04 }], color: "primary", fill: false }, "path12-1-5-6-4": { type: "path", points: [{ x: -0.47, y: -0.05 }, { x: -0.17, y: -0.05 }], color: "primary", fill: false }, "path12-1-8-0-0": { type: "path", points: [{ x: -0.16, y: 0.04 }, { x: 0.18, y: 0.04 }], color: "primary", fill: false }, "path12-1-0-1": { type: "path", points: [{ x: 0.2, y: -0.05 }, { x: 0.47, y: -0.05 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0.01, y: 0.29 }, bottom1: { type: "text", text: "{VAL}", x: -0.16, y: -0.22 } }, refblocks: { left1: { x: -0.47, y: -0.05 }, right1: { x: 0.47, y: -0.05 } }, bounds: { minX: -0.5, maxX: 0.5, minY: -0.22, maxY: 0.22, width: 1, height: 0.45, centerX: 0, centerY: 0 }, circles: { "circle-2": { type: "circle", x: -0.14, y: -0.05, radius: 0.02, color: "primary", fill: false }, circle: { type: "circle", x: 0.17, y: -0.05, radius: 0.02, color: "primary", fill: false } } };
var { paths: L2, texts: Pm, bounds: Y0, refblocks: Sm, circles: V2 } = Am;
var X0 = s({ primitives: [...Object.values(L2), ...Object.values(V2), { ...Pm.top1, anchor: "middle_left" }, { ...Pm.bottom1, anchor: "middle_left" }], ports: [{ ...Sm.left1, labels: ["1"] }, { ...Sm.right1, labels: ["2"] }], size: { width: Y0.width, height: Y0.height }, center: { x: Y0.centerX, y: Y0.centerY } });
var Fm = r(X0, "up");
var K = { paths: { path12_rotated: { type: "path", points: [{ x: -0.09, y: 0.12 }, { x: -0.09, y: -0.12 }], color: "primary", fill: false }, path2_rotated: { type: "path", points: [{ x: -0.09, y: 0 }, { x: 0.09, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.03 } }, refblocks: { left1: { x: 0.09, y: 0 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.37, maxY: 0.37, width: 1.14, height: 0.74, centerX: 0, centerY: 0 }, circles: {} };
var { paths: k2, texts: oR, bounds: Rm, refblocks: z2, circles: O2 } = K;
var Tm = e({ primitives: [...Object.values(k2), ...Object.values(O2), { type: "text", text: "{REF}", x: -0.14, y: -0 }], ports: [{ ...z2.left1, labels: ["1"] }], center: { x: Rm.centerX, y: Rm.centerY } }).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_top").build();
var { paths: J2, texts: aR, bounds: Em, refblocks: $2, circles: M2 } = K;
var Ym = e({ primitives: [...Object.values(J2), ...Object.values(M2), { type: "text", text: "{REF}", x: -0.13, y: 0 }], ports: [{ ...$2.left1, labels: ["1"] }], center: { x: Em.centerX, y: Em.centerY } }).changeTextAnchor("{VAL}", "middle_top").rotateRightFacingSymbol("right").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_right").build();
var { paths: C2, texts: mR, bounds: Xm, refblocks: N2, circles: I2 } = K;
var Lm = e({ primitives: [...Object.values(C2), ...Object.values(I2), { type: "text", text: "{REF}", x: -0.14, y: -0 }], ports: [{ ...N2.left1, labels: ["1"] }], center: { x: Xm.centerX, y: Xm.centerY } }).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_left").build();
var { paths: B2, texts: cR, bounds: Vm, refblocks: q2 } = K;
var jm = e({ primitives: [...Object.values(B2), { type: "text", text: "{REF}", x: -0.14, y: 0 }], ports: [{ ...q2.left1, labels: ["1"] }], center: { x: Vm.centerX, y: Vm.centerY } }).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_bottom").build();
var km = { paths: { path40: { type: "path", points: [{ x: -0.19, y: -0.33 }, { x: -0.26, y: -0.14 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.38, y: -0.26 }, { x: -0.19, y: -0.33 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.26, y: -0.14 }, { x: -0.38, y: -0.26 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: -0.26, y: -0.39 }, { x: -0.13, y: -0.26 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.32, y: -0.2 }, { x: -0.52, y: 0 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0, y: -0.52 }, { x: -0.19, y: -0.33 }], color: "primary", fill: false }, "path40-4": { type: "path", points: [{ x: -0.19, y: 0.32 }, { x: -0.38, y: 0.26 }], color: "primary", fill: false }, "path41-1": { type: "path", points: [{ x: -0.26, y: 0.13 }, { x: -0.19, y: 0.32 }], color: "primary", fill: false }, "path42-7": { type: "path", points: [{ x: -0.38, y: 0.26 }, { x: -0.26, y: 0.13 }], color: "primary", fill: false }, "path43-1": { type: "path", points: [{ x: -0.13, y: 0.26 }, { x: -0.26, y: 0.39 }], color: "primary", fill: false }, "path44-8": { type: "path", points: [{ x: -0.32, y: 0.19 }, { x: -0.51, y: 0.01 }], color: "primary", fill: false }, "path44-0-7": { type: "path", points: [{ x: -0.01, y: 0.5 }, { x: -0.19, y: 0.32 }], color: "primary", fill: false }, "path40-4-0": { type: "path", points: [{ x: 0.32, y: -0.19 }, { x: 0.13, y: -0.26 }], color: "primary", fill: false }, "path41-1-2": { type: "path", points: [{ x: 0.26, y: -0.38 }, { x: 0.32, y: -0.19 }], color: "primary", fill: false }, "path42-7-1": { type: "path", points: [{ x: 0.13, y: -0.26 }, { x: 0.26, y: -0.38 }], color: "primary", fill: false }, "path43-1-8": { type: "path", points: [{ x: 0.39, y: -0.26 }, { x: 0.26, y: -0.13 }], color: "primary", fill: false }, "path44-8-7": { type: "path", points: [{ x: 0.2, y: -0.32 }, { x: 0.01, y: -0.51 }], color: "primary", fill: false }, "path44-0-7-1": { type: "path", points: [{ x: 0.52, y: 0 }, { x: 0.32, y: -0.19 }], color: "primary", fill: false }, "path40-4-8": { type: "path", points: [{ x: 0.32, y: 0.19 }, { x: 0.26, y: 0.38 }], color: "primary", fill: false }, "path41-1-4": { type: "path", points: [{ x: 0.13, y: 0.26 }, { x: 0.32, y: 0.19 }], color: "primary", fill: false }, "path42-7-0": { type: "path", points: [{ x: 0.26, y: 0.38 }, { x: 0.13, y: 0.26 }], color: "primary", fill: false }, "path43-1-0": { type: "path", points: [{ x: 0.26, y: 0.13 }, { x: 0.39, y: 0.26 }], color: "primary", fill: false }, "path44-8-9": { type: "path", points: [{ x: 0.19, y: 0.32 }, { x: 0, y: 0.52 }], color: "primary", fill: false }, "path44-0-7-3": { type: "path", points: [{ x: 0.5, y: 0.01 }, { x: 0.32, y: 0.19 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.29, y: -0.46 }, bottom1: { type: "text", text: "{VAL}", x: -0.29, y: 0.5 } }, refblocks: { top1: { x: 0, y: -0.52 }, bottom1: { x: 0, y: 0.52 }, left1: { x: -0.52, y: 0 }, right1: { x: 0.52, y: 0 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.56, maxY: 0.55, width: 1.09, height: 1.1, centerX: 0, centerY: 0 }, circles: {} };
var { paths: G2, texts: zm, bounds: L0, refblocks: V0, circles: U2 } = km;
var j0 = s({ primitives: [...Object.values(G2), ...Object.values(U2), { ...zm.top1, anchor: "middle_right" }, { ...zm.bottom1, anchor: "middle_right" }], ports: [{ ...V0.top1, labels: ["1"] }, { ...V0.bottom1, labels: ["2"] }, { ...V0.left1, labels: ["3"] }, { ...V0.right1, labels: ["4"] }], size: { width: L0.width, height: L0.height }, center: { x: L0.centerX, y: L0.centerY } });
var Ai = r(j0);
var W2 = Ai.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var H2 = Ai.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
W2.anchor = "middle_left";
H2.anchor = "middle_right";
var Om = Ai;
var tt = { paths: { path27: { type: "path", points: [{ x: 0.47, y: 0.04 }, { x: 0.21, y: 0.04 }], color: "primary", fill: false }, "path27-0": { type: "path", points: [{ x: -0.21, y: 0.04 }, { x: -0.47, y: 0.04 }], color: "primary", fill: false }, "path27-8-2-4": { type: "path", points: [{ x: 0.21, y: 0.04 }, { x: 0.19, y: -0.05 }], color: "primary", fill: false }, "path27-8-2-4-29": { type: "path", points: [{ x: -0.19, y: 0.14 }, { x: -0.21, y: 0.04 }], color: "primary", fill: false }, "path27-8-2-4-5": { type: "path", points: [{ x: 0.19, y: -0.05 }, { x: 0.13, y: 0.14 }], color: "primary", fill: false }, "path27-8-2-4-5-1": { type: "path", points: [{ x: 0.08, y: -0.05 }, { x: 0.13, y: 0.14 }], color: "primary", fill: false }, "path27-8-2-4-5-1-9": { type: "path", points: [{ x: 0.08, y: -0.05 }, { x: 0.03, y: 0.14 }], color: "primary", fill: false }, "path27-8-2-4-5-1-9-2": { type: "path", points: [{ x: -0.03, y: -0.05 }, { x: 0.03, y: 0.14 }], color: "primary", fill: false }, "path27-8-2-4-5-1-9-2-1": { type: "path", points: [{ x: -0.03, y: -0.05 }, { x: -0.08, y: 0.14 }], color: "primary", fill: false }, "path27-8-2-4-5-1-9-2-1-2": { type: "path", points: [{ x: -0.13, y: -0.05 }, { x: -0.08, y: 0.14 }], color: "primary", fill: false }, "path27-8-2-4-5-1-9-2-1-2-2": { type: "path", points: [{ x: -0.13, y: -0.05 }, { x: -0.19, y: 0.14 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.05, y: 0.42 }, bottom1: { type: "text", text: "{VAL}", x: -0.04, y: -0.42 } }, refblocks: { left1: { x: -0.47, y: 0.04 }, right1: { x: 0.47, y: 0.04 } }, bounds: { minX: -0.49, maxX: 0.49, minY: -0.42, maxY: 0.42, width: 0.99, height: 0.84, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Q2, texts: RR, bounds: k0, refblocks: Jm, circles: K2 } = tt;
var $m = e({ primitives: [...Object.values(Q2), ...Object.values(K2), { type: "text", text: "{REF}", x: -0.2, y: 0.2194553499999995 }, { type: "text", text: "{VAL}", x: 0.2, y: 0.2194553499999995 }], ports: [{ ...Jm.left1, labels: ["1"] }, { ...Jm.right1, labels: ["2"] }], size: { width: k0.width, height: k0.height }, center: { x: k0.centerX, y: k0.centerY } }).rotateRightFacingSymbol("down").labelPort("left", ["1"]).labelPort("right", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var { paths: t9, texts: XR, bounds: z0, refblocks: Mm, circles: e9 } = tt;
var Cm = e({ primitives: [...Object.values(t9), ...Object.values(e9), { type: "text", text: "{REF}", x: 0, y: -0.1704553499999995 }, { type: "text", text: "{VAL}", x: 0, y: 0.2294553499999995 }], ports: [{ ...Mm.left1, labels: ["1"] }, { ...Mm.right1, labels: ["2"] }], size: { width: z0.width, height: z0.height }, center: { x: z0.centerX, y: z0.centerY } }).rotateRightFacingSymbol("left").labelPort("left", ["1"]).labelPort("right", ["2"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var { paths: r9, texts: kR, bounds: O0, refblocks: Nm, circles: o9 } = tt;
var Im = e({ primitives: [...Object.values(r9), ...Object.values(o9), { type: "text", text: "{REF}", x: 0, y: 0.2294553499999995 }, { type: "text", text: "{VAL}", x: 0, y: -0.1704553499999995 }], ports: [{ ...Nm.left1, labels: ["1"] }, { ...Nm.right1, labels: ["2"] }], size: { width: O0.width, height: O0.height }, center: { x: O0.centerX, y: O0.centerY } }).rotateRightFacingSymbol("right").labelPort("left", ["1"]).labelPort("right", ["2"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var { paths: i9, texts: $R, bounds: J0, refblocks: Bm, circles: l9 } = tt;
var qm = e({ primitives: [...Object.values(i9), ...Object.values(l9), { type: "text", text: "{REF}", x: 0.2, y: -0.1404553499999995 }, { type: "text", text: "{VAL}", x: -0.2, y: -0.1494553499999995 }], ports: [{ ...Bm.left1, labels: ["1"] }, { ...Bm.right1, labels: ["2"] }], size: { width: J0.width, height: J0.height }, center: { x: J0.centerX, y: J0.centerY } }).rotateRightFacingSymbol("up").labelPort("left", ["1"]).labelPort("right", ["2"]).changeTextAnchor("{REF}", "middle_left").changeTextAnchor("{VAL}", "middle_left").build();
var $0 = { paths: { path27: { type: "path", points: [{ x: 0.76, y: -0.28 }, { x: 0.31, y: -0.28 }], color: "primary", fill: false }, path28: { type: "path", points: [{ x: -0.3, y: -0.02 }, { x: -0.77, y: -0.02 }], color: "primary", fill: false }, path30: { type: "path", points: [{ x: -0.3, y: 0.35 }, { x: -0.3, y: -0.28 }], color: "primary", fill: false }, "path27-3": { type: "path", points: [{ x: 0.77, y: 0.35 }, { x: 0.32, y: 0.35 }], color: "primary", fill: false }, "path29-5": { type: "path", points: [{ x: -0.07, y: -0.28 }, { x: -0.3, y: -0.28 }], color: "primary", fill: false }, "path29-5-7": { type: "path", points: [{ x: 0.33, y: -0.28 }, { x: 0.11, y: -0.28 }], color: "primary", fill: false }, "path29-5-7-6": { type: "path", points: [{ x: -0.06, y: -0.17 }, { x: -0.06, y: -0.39 }], color: "primary", fill: false }, "path29-5-7-6-6": { type: "path", points: [{ x: 0.09, y: -0.17 }, { x: 0.09, y: -0.39 }], color: "primary", fill: false }, "path29-5-9": { type: "path", points: [{ x: -0.07, y: 0.35 }, { x: -0.3, y: 0.35 }], color: "primary", fill: false }, "path29-5-7-2": { type: "path", points: [{ x: 0.33, y: 0.35 }, { x: 0.11, y: 0.35 }], color: "primary", fill: false }, "path29-5-7-6-0": { type: "path", points: [{ x: -0.06, y: 0.46 }, { x: -0.06, y: 0.24 }], color: "primary", fill: false }, "path29-5-7-6-6-2": { type: "path", points: [{ x: 0.09, y: 0.46 }, { x: 0.09, y: 0.24 }], color: "primary", fill: false }, "path29-5-92": { type: "path", points: [{ x: 0.33, y: 0.13 }, { x: 0.33, y: 0.35 }], color: "primary", fill: false }, "path29-5-7-28": { type: "path", points: [{ x: 0.33, y: -0.28 }, { x: 0.33, y: -0.05 }], color: "primary", fill: false }, "path29-5-7-6-9": { type: "path", points: [{ x: 0.44, y: 0.11 }, { x: 0.22, y: 0.11 }], color: "primary", fill: false }, "path29-5-7-6-6-7": { type: "path", points: [{ x: 0.44, y: -0.04 }, { x: 0.22, y: -0.04 }], color: "primary", fill: false }, "path29-5-7-6-9-2": { type: "path", points: [{ x: 0.44, y: 0.07 }, { x: 0.22, y: 0.07 }], color: "primary", fill: false }, "path29-5-7-6-9-2-4": { type: "path", points: [{ x: 0.44, y: 0 }, { x: 0.44, y: 0.07 }], color: "primary", fill: false }, "path29-5-7-6-9-2-4-6": { type: "path", points: [{ x: 0.22, y: 0 }, { x: 0.22, y: 0.07 }], color: "primary", fill: false }, "path29-5-7-6-9-2-9": { type: "path", points: [{ x: 0.44, y: 0 }, { x: 0.22, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0.02, y: 0.53 }, bottom1: { type: "text", text: "{VAL}", x: 0.01, y: -0.54 } }, refblocks: { left1: { x: -0.77, y: -0.02 }, right1: { x: 0.76, y: -0.28 }, right2: { x: 0.77, y: 0.35 } }, bounds: { minX: -0.79, maxX: 0.79, minY: -0.54, maxY: 0.54, width: 1.59, height: 1.07, centerX: 0, centerY: 0 }, circles: {} };
var { paths: a9, texts: Dm, bounds: M0, refblocks: Pi, circles: y9 } = $0;
var et = s({ primitives: [...Object.values(a9), ...Object.values(y9), { ...Dm.top1, anchor: "middle_bottom" }, { ...Dm.bottom1, anchor: "middle_top" }], ports: [{ ...Pi.left1, labels: ["1"] }, { ...Pi.right1, labels: ["2"] }, { ...Pi.right2, labels: ["3"] }], size: { width: M0.width, height: M0.height }, center: { x: M0.centerX, y: M0.centerY } });
var Si = r(et, "down");
var Fi = Si.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Ri = Si.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Fi.anchor = "middle_bottom";
Ri.anchor = "middle_top";
Fi.y += 0.3;
Fi.x += 0.101;
Ri.y -= 0.49999;
Ri.x += 1.19999;
var Gm = Si;
var { paths: x9, texts: HR, bounds: C0, refblocks: Ti, circles: s9 } = $0;
var N0 = s({ primitives: [...Object.values(x9), ...Object.values(s9), { type: "text", text: "{REF}", x: 0.01596175000000022, y: -0.5308501500000009, anchor: "middle_top" }, { type: "text", text: "{VAL}", x: 0.013116750000000454, y: 0.5408501499999989, anchor: "middle_bottom" }], ports: [{ ...Ti.left1, labels: ["1"] }, { ...Ti.right1, labels: ["2"] }, { ...Ti.right2, labels: ["3"] }], size: { width: C0.width, height: C0.height }, center: { x: C0.centerX, y: C0.centerY } });
var Ei = r(et, "left");
var Yi = Ei.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Xi = Ei.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Yi.anchor = "middle_bottom";
Xi.anchor = "middle_top";
Yi.y += 0.99;
Yi.x -= 0;
Xi.y -= 1.10999;
Xi.x = 0;
var Um = Ei;
var Li = r(et, "up");
var Vi = Li.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var ji = Li.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Vi.anchor = "middle_bottom";
ji.anchor = "middle_top";
Vi.y += 0.499;
Vi.x = 0.62;
ji.y -= 0.29999;
ji.x += 0.1;
var Wm = Li;
var Hm = r(N0);
var Zm = { paths: { path40: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.12, y: -0.09 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.12, y: 0.18 }, { x: 0.14, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.12, y: -0.09 }, { x: -0.12, y: 0.18 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.14, y: -0.09 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.12, y: 0.04 }, { x: -0.52, y: 0.04 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.52, y: 0.04 }, { x: 0.15, y: 0.04 }], color: "primary", fill: false }, "path43-7": { type: "path", points: [{ x: 0.21, y: 0.18 }, { x: 0.14, y: 0.18 }], color: "primary", fill: false }, "path43-7-9": { type: "path", points: [{ x: 0.21, y: 0.13 }, { x: 0.21, y: 0.18 }], color: "primary", fill: false }, "path43-7-2": { type: "path", points: [{ x: 0.08, y: -0.09 }, { x: 0.14, y: -0.09 }], color: "primary", fill: false }, "path43-7-9-3": { type: "path", points: [{ x: 0.08, y: -0.04 }, { x: 0.08, y: -0.09 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.27 } }, refblocks: { left1: { x: -0.52, y: 0.04 }, right1: { x: 0.52, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.27, maxY: 0.27, width: 1.09, height: 0.55, centerX: 0, centerY: 0 }, circles: {} };
var rt = e(Zm).labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{VAL}", "middle_top").changeTextAnchor("{REF}", "middle_bottom").build();
var ki = r(rt, "down");
var zi = ki.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Oi = ki.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
zi.anchor = "middle_left";
Oi.anchor = "middle_left";
zi.y += 0.3;
zi.x = 0.3;
Oi.y -= 0.3;
Oi.x = 0.3;
var Qm = ki;
var Ji = r(rt, "left");
var $i = Ji.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Mi = Ji.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
$i.anchor = "middle_bottom";
Mi.anchor = "middle_top";
$i.y += 0.5;
$i.x = 0;
Mi.y -= 0.55;
Mi.x = 0;
var Km = Ji;
var Ci = r(rt, "up");
var Ni = Ci.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Ii = Ci.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Ni.anchor = "middle_left";
Ii.anchor = "middle_left";
Ni.y += 0.3;
Ni.x = 0.3;
Ii.y -= 0.3;
Ii.x = 0.3;
var tn = Ci;
var Bi = { paths: { path11: { type: "path", points: [{ x: -0.52, y: 0.04 }, { x: -0.18, y: 0.04 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.19, y: 0.05 }, { x: 0.52, y: 0.05 }], color: "primary", fill: false }, "path12-6": { type: "path", points: [{ x: 0.18, y: -0.15 }, { x: 0.18, y: 0.25 }], color: "primary", fill: false }, "path12-2": { type: "path", points: [{ x: 0.19, y: 0 }, { x: 0.35, y: -0.14 }], color: "primary", fill: false }, "path12-2-9": { type: "path", points: [{ x: 0.35, y: -0.14 }, { x: 0.34, y: -0.35 }], color: "primary", fill: false }, "path11-0-9": { type: "path", points: [{ x: -0.17, y: 0.27 }, { x: -0.17, y: -0.15 }, { x: 0.18, y: 0.05 }, { x: -0.17, y: 0.27 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.22, y: 0.38 }, bottom1: { type: "text", text: "{VAL}", x: 0.11, y: -0.38 } }, refblocks: { bottom1: { x: 0.34, y: -0.35 }, left1: { x: -0.52, y: 0.04 }, right1: { x: 0.52, y: 0.05 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.38, maxY: 0.38, width: 1.09, height: 0.77, centerX: 0, centerY: 0 }, circles: {} };
var I0 = e(Bi).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).labelPort("bottom1", ["3"]).changeTextAnchor("{REF}", "middle_bottom").build();
var en = r(I0);
var f9 = en.primitives.filter((t) => t.type === "text");
var rn = f9.find((t) => t.text === "{REF}");
rn.y = 0;
rn.anchor = "middle_left";
var on = en;
var ot = { paths: { path44: { type: "path", points: [{ x: -0.18, y: -0.03 }, { x: -0.45, y: -0.03 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.45, y: -0.03 }, { x: 0.18, y: -0.02 }], color: "primary", fill: false }, "path44-0-7": { type: "path", points: [{ x: 0.07, y: -0.02 }, { x: -0.07, y: -0.02 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.07, y: 0.1 }, { x: 0.07, y: -0.15 }], color: "primary", fill: true }, "path2-8": { type: "path", points: [{ x: -0.07, y: 0.1 }, { x: -0.07, y: -0.15 }], color: "primary", fill: true }, "path8704-1": { type: "path", points: [{ x: -0.07, y: -0.15 }, { x: -0.07, y: -0.15 }, { x: -0.09, y: -0.15 }, { x: -0.1, y: -0.14 }, { x: -0.11, y: -0.13 }, { x: -0.13, y: -0.12 }, { x: -0.14, y: -0.11 }, { x: -0.14, y: -0.1 }, { x: -0.15, y: -0.09 }, { x: -0.16, y: -0.08 }, { x: -0.16, y: -0.07 }, { x: -0.16, y: -0.06 }, { x: -0.17, y: -0.05 }, { x: -0.17, y: -0.04 }, { x: -0.17, y: -0.03 }, { x: -0.17, y: -0.02 }, { x: -0.17, y: -0.01 }, { x: -0.16, y: 0 }, { x: -0.16, y: 0.01 }, { x: -0.16, y: 0.02 }, { x: -0.15, y: 0.03 }, { x: -0.15, y: 0.04 }, { x: -0.14, y: 0.05 }, { x: -0.14, y: 0.05 }, { x: -0.13, y: 0.06 }, { x: -0.12, y: 0.07 }, { x: -0.11, y: 0.08 }, { x: -0.11, y: 0.08 }, { x: -0.1, y: 0.09 }, { x: -0.09, y: 0.09 }, { x: -0.08, y: 0.1 }, { x: -0.07, y: 0.1 }, { x: -0.07, y: 0.1 }], color: "primary", fill: false }, "path8704-1-7": { type: "path", points: [{ x: 0.07, y: -0.15 }, { x: 0.07, y: -0.15 }, { x: 0.09, y: -0.15 }, { x: 0.1, y: -0.14 }, { x: 0.12, y: -0.13 }, { x: 0.13, y: -0.12 }, { x: 0.14, y: -0.11 }, { x: 0.14, y: -0.1 }, { x: 0.15, y: -0.09 }, { x: 0.16, y: -0.08 }, { x: 0.16, y: -0.07 }, { x: 0.17, y: -0.06 }, { x: 0.17, y: -0.05 }, { x: 0.17, y: -0.04 }, { x: 0.17, y: -0.03 }, { x: 0.17, y: -0.02 }, { x: 0.17, y: -0.01 }, { x: 0.16, y: 0 }, { x: 0.16, y: 0.01 }, { x: 0.16, y: 0.02 }, { x: 0.15, y: 0.03 }, { x: 0.15, y: 0.04 }, { x: 0.14, y: 0.05 }, { x: 0.14, y: 0.05 }, { x: 0.13, y: 0.06 }, { x: 0.12, y: 0.07 }, { x: 0.11, y: 0.08 }, { x: 0.11, y: 0.08 }, { x: 0.1, y: 0.09 }, { x: 0.09, y: 0.09 }, { x: 0.08, y: 0.1 }, { x: 0.07, y: 0.1 }, { x: 0.07, y: 0.1 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.02, y: 0.15 } }, refblocks: { left1: { x: -0.45, y: -0.03 }, right1: { x: 0.45, y: -0.03 } }, bounds: { minX: -0.47, maxX: 0.47, minY: -0.15, maxY: 0.15, width: 0.95, height: 0.31, centerX: 0, centerY: 0 }, circles: {} };
var ln = e(ot).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").build();
var pn = e(ot).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_top").build();
var an = e(ot).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var yn = e(ot).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_right").build();
var it = { paths: { path44: { type: "path", points: [{ x: -0.18, y: -0.03 }, { x: -0.45, y: -0.03 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.45, y: -0.03 }, { x: 0.18, y: -0.02 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.07, y: 0.1 }, { x: 0.07, y: -0.15 }], color: "primary", fill: true }, "path2-8": { type: "path", points: [{ x: -0.07, y: 0.1 }, { x: -0.07, y: -0.15 }], color: "primary", fill: true }, "path8704-1": { type: "path", points: [{ x: -0.07, y: -0.15 }, { x: -0.07, y: -0.15 }, { x: -0.09, y: -0.15 }, { x: -0.1, y: -0.14 }, { x: -0.11, y: -0.13 }, { x: -0.13, y: -0.12 }, { x: -0.14, y: -0.11 }, { x: -0.14, y: -0.1 }, { x: -0.15, y: -0.09 }, { x: -0.16, y: -0.08 }, { x: -0.16, y: -0.07 }, { x: -0.16, y: -0.06 }, { x: -0.17, y: -0.05 }, { x: -0.17, y: -0.04 }, { x: -0.17, y: -0.03 }, { x: -0.17, y: -0.02 }, { x: -0.17, y: -0.01 }, { x: -0.16, y: 0 }, { x: -0.16, y: 0.01 }, { x: -0.16, y: 0.02 }, { x: -0.15, y: 0.03 }, { x: -0.15, y: 0.04 }, { x: -0.14, y: 0.05 }, { x: -0.14, y: 0.05 }, { x: -0.13, y: 0.06 }, { x: -0.12, y: 0.07 }, { x: -0.11, y: 0.08 }, { x: -0.11, y: 0.08 }, { x: -0.1, y: 0.09 }, { x: -0.09, y: 0.09 }, { x: -0.08, y: 0.1 }, { x: -0.07, y: 0.1 }, { x: -0.07, y: 0.1 }], color: "primary", fill: false }, "path8704-1-7": { type: "path", points: [{ x: 0.07, y: -0.15 }, { x: 0.07, y: -0.15 }, { x: 0.09, y: -0.15 }, { x: 0.1, y: -0.14 }, { x: 0.12, y: -0.13 }, { x: 0.13, y: -0.12 }, { x: 0.14, y: -0.11 }, { x: 0.14, y: -0.1 }, { x: 0.15, y: -0.09 }, { x: 0.16, y: -0.08 }, { x: 0.16, y: -0.07 }, { x: 0.17, y: -0.06 }, { x: 0.17, y: -0.05 }, { x: 0.17, y: -0.04 }, { x: 0.17, y: -0.03 }, { x: 0.17, y: -0.02 }, { x: 0.17, y: -0.01 }, { x: 0.16, y: 0 }, { x: 0.16, y: 0.01 }, { x: 0.16, y: 0.02 }, { x: 0.15, y: 0.03 }, { x: 0.15, y: 0.04 }, { x: 0.14, y: 0.05 }, { x: 0.14, y: 0.05 }, { x: 0.13, y: 0.06 }, { x: 0.12, y: 0.07 }, { x: 0.11, y: 0.08 }, { x: 0.11, y: 0.08 }, { x: 0.1, y: 0.09 }, { x: 0.09, y: 0.09 }, { x: 0.08, y: 0.1 }, { x: 0.07, y: 0.1 }, { x: 0.07, y: 0.1 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.02, y: 0.15 } }, refblocks: { left1: { x: -0.45, y: -0.03 }, right1: { x: 0.45, y: -0.03 } }, bounds: { minX: -0.47, maxX: 0.47, minY: -0.15, maxY: 0.15, width: 0.95, height: 0.31, centerX: 0, centerY: 0 }, circles: {} };
var xn = e(it).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_left").build();
var sn = e(it).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_top").build();
var mn = e(it).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var nn = e(it).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_right").build();
var lt = { paths: { path44: { type: "path", points: [{ x: -0.22, y: 0.1 }, { x: -0.45, y: 0.1 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.45, y: 0.1 }, { x: 0.22, y: 0.1 }], color: "primary", fill: false }, "path44-5": { type: "path", points: [{ x: 0, y: -0.03 }, { x: 0, y: -0.25 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.12, y: 0.23 }, { x: 0.12, y: -0.02 }], color: "primary", fill: true }, "path2-88": { type: "path", points: [{ x: 0.04, y: 0.22 }, { x: 0.04, y: -0.02 }], color: "primary", fill: true }, "path2-88-5": { type: "path", points: [{ x: -0.05, y: 0.22 }, { x: -0.05, y: -0.02 }], color: "primary", fill: true }, "path2-88-5-1": { type: "path", points: [{ x: 0.04, y: 0.22 }, { x: -0.05, y: 0.22 }], color: "primary", fill: true }, "path2-88-5-1-6": { type: "path", points: [{ x: 0.04, y: -0.02 }, { x: -0.05, y: -0.02 }], color: "primary", fill: true }, "path2-8": { type: "path", points: [{ x: -0.12, y: 0.23 }, { x: -0.12, y: -0.02 }], color: "primary", fill: true }, "path8704-1": { type: "path", points: [{ x: -0.13, y: -0.03 }, { x: -0.13, y: -0.03 }, { x: -0.14, y: -0.02 }, { x: -0.16, y: -0.01 }, { x: -0.17, y: 0 }, { x: -0.18, y: 0.01 }, { x: -0.19, y: 0.02 }, { x: -0.2, y: 0.03 }, { x: -0.2, y: 0.04 }, { x: -0.21, y: 0.05 }, { x: -0.21, y: 0.06 }, { x: -0.22, y: 0.07 }, { x: -0.22, y: 0.08 }, { x: -0.22, y: 0.09 }, { x: -0.22, y: 0.1 }, { x: -0.22, y: 0.11 }, { x: -0.22, y: 0.12 }, { x: -0.22, y: 0.13 }, { x: -0.21, y: 0.14 }, { x: -0.21, y: 0.15 }, { x: -0.21, y: 0.15 }, { x: -0.2, y: 0.16 }, { x: -0.19, y: 0.17 }, { x: -0.19, y: 0.18 }, { x: -0.18, y: 0.19 }, { x: -0.17, y: 0.2 }, { x: -0.17, y: 0.2 }, { x: -0.16, y: 0.21 }, { x: -0.15, y: 0.22 }, { x: -0.14, y: 0.22 }, { x: -0.13, y: 0.23 }, { x: -0.13, y: 0.23 }, { x: -0.13, y: 0.23 }], color: "primary", fill: false }, "path8704-1-7": { type: "path", points: [{ x: 0.12, y: -0.03 }, { x: 0.12, y: -0.03 }, { x: 0.14, y: -0.02 }, { x: 0.15, y: -0.01 }, { x: 0.17, y: 0 }, { x: 0.18, y: 0.01 }, { x: 0.19, y: 0.02 }, { x: 0.2, y: 0.03 }, { x: 0.2, y: 0.04 }, { x: 0.21, y: 0.05 }, { x: 0.21, y: 0.06 }, { x: 0.22, y: 0.07 }, { x: 0.22, y: 0.08 }, { x: 0.22, y: 0.09 }, { x: 0.22, y: 0.1 }, { x: 0.22, y: 0.11 }, { x: 0.22, y: 0.12 }, { x: 0.22, y: 0.13 }, { x: 0.21, y: 0.14 }, { x: 0.21, y: 0.15 }, { x: 0.2, y: 0.15 }, { x: 0.2, y: 0.16 }, { x: 0.19, y: 0.17 }, { x: 0.19, y: 0.18 }, { x: 0.18, y: 0.19 }, { x: 0.17, y: 0.2 }, { x: 0.17, y: 0.2 }, { x: 0.16, y: 0.21 }, { x: 0.15, y: 0.21 }, { x: 0.14, y: 0.22 }, { x: 0.13, y: 0.23 }, { x: 0.12, y: 0.23 }, { x: 0.12, y: 0.23 }], color: "primary", fill: false }, path1: { type: "path", points: [{ x: -0.05, y: 0.1 }, { x: -0.12, y: 0.1 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.02, y: 0.28 } }, refblocks: { bottom1: { x: 0, y: -0.25 }, left1: { x: -0.45, y: 0.1 }, right1: { x: 0.45, y: 0.1 } }, bounds: { minX: -0.47, maxX: 0.47, minY: -0.28, maxY: 0.28, width: 0.95, height: 0.56, centerX: 0, centerY: 0 }, circles: {} };
var fn = e(lt).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_left").build();
var hn = e(lt).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_top").build();
var cn = e(lt).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_bottom").build();
var dn = e(lt).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_right").build();
var pt = { paths: { path44: { type: "path", points: [{ x: -0.22, y: 0.1 }, { x: -0.45, y: 0.1 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.45, y: 0.1 }, { x: 0.22, y: 0.1 }], color: "primary", fill: false }, "path44-0-7": { type: "path", points: [{ x: 0.12, y: 0.1 }, { x: 0.04, y: 0.1 }], color: "primary", fill: false }, "path44-5": { type: "path", points: [{ x: 0, y: -0.03 }, { x: 0, y: -0.25 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.12, y: 0.23 }, { x: 0.12, y: -0.02 }], color: "primary", fill: true }, "path2-88": { type: "path", points: [{ x: 0.04, y: 0.22 }, { x: 0.04, y: -0.02 }], color: "primary", fill: true }, "path2-88-5": { type: "path", points: [{ x: -0.05, y: 0.22 }, { x: -0.05, y: -0.02 }], color: "primary", fill: true }, "path2-88-5-1": { type: "path", points: [{ x: 0.04, y: 0.22 }, { x: -0.05, y: 0.22 }], color: "primary", fill: true }, "path2-88-5-1-6": { type: "path", points: [{ x: 0.04, y: -0.02 }, { x: -0.05, y: -0.02 }], color: "primary", fill: true }, "path2-8": { type: "path", points: [{ x: -0.12, y: 0.23 }, { x: -0.12, y: -0.02 }], color: "primary", fill: true }, "path8704-1": { type: "path", points: [{ x: -0.13, y: -0.03 }, { x: -0.13, y: -0.03 }, { x: -0.14, y: -0.02 }, { x: -0.16, y: -0.01 }, { x: -0.17, y: 0 }, { x: -0.18, y: 0.01 }, { x: -0.19, y: 0.02 }, { x: -0.2, y: 0.03 }, { x: -0.2, y: 0.04 }, { x: -0.21, y: 0.05 }, { x: -0.21, y: 0.06 }, { x: -0.22, y: 0.07 }, { x: -0.22, y: 0.08 }, { x: -0.22, y: 0.09 }, { x: -0.22, y: 0.1 }, { x: -0.22, y: 0.11 }, { x: -0.22, y: 0.12 }, { x: -0.22, y: 0.13 }, { x: -0.21, y: 0.14 }, { x: -0.21, y: 0.15 }, { x: -0.21, y: 0.15 }, { x: -0.2, y: 0.16 }, { x: -0.19, y: 0.17 }, { x: -0.19, y: 0.18 }, { x: -0.18, y: 0.19 }, { x: -0.17, y: 0.2 }, { x: -0.17, y: 0.2 }, { x: -0.16, y: 0.21 }, { x: -0.15, y: 0.22 }, { x: -0.14, y: 0.22 }, { x: -0.13, y: 0.23 }, { x: -0.13, y: 0.23 }, { x: -0.13, y: 0.23 }], color: "primary", fill: false }, "path8704-1-7": { type: "path", points: [{ x: 0.12, y: -0.03 }, { x: 0.12, y: -0.03 }, { x: 0.14, y: -0.02 }, { x: 0.15, y: -0.01 }, { x: 0.17, y: 0 }, { x: 0.18, y: 0.01 }, { x: 0.19, y: 0.02 }, { x: 0.2, y: 0.03 }, { x: 0.2, y: 0.04 }, { x: 0.21, y: 0.05 }, { x: 0.21, y: 0.06 }, { x: 0.22, y: 0.07 }, { x: 0.22, y: 0.08 }, { x: 0.22, y: 0.09 }, { x: 0.22, y: 0.1 }, { x: 0.22, y: 0.11 }, { x: 0.22, y: 0.12 }, { x: 0.22, y: 0.13 }, { x: 0.21, y: 0.14 }, { x: 0.21, y: 0.15 }, { x: 0.2, y: 0.15 }, { x: 0.2, y: 0.16 }, { x: 0.19, y: 0.17 }, { x: 0.19, y: 0.18 }, { x: 0.18, y: 0.19 }, { x: 0.17, y: 0.2 }, { x: 0.17, y: 0.2 }, { x: 0.16, y: 0.21 }, { x: 0.15, y: 0.21 }, { x: 0.14, y: 0.22 }, { x: 0.13, y: 0.23 }, { x: 0.12, y: 0.23 }, { x: 0.12, y: 0.23 }], color: "primary", fill: false }, path1: { type: "path", points: [{ x: -0.05, y: 0.1 }, { x: -0.12, y: 0.1 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.02, y: 0.28 } }, refblocks: { bottom1: { x: 0, y: -0.25 }, left1: { x: -0.45, y: 0.1 }, right1: { x: 0.45, y: 0.1 } }, bounds: { minX: -0.47, maxX: 0.47, minY: -0.28, maxY: 0.28, width: 0.95, height: 0.56, centerX: 0, centerY: 0 }, circles: {} };
var bn = e(pt).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_left").build();
var _n = e(pt).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_top").build();
var gn = e(pt).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_bottom").build();
var un = e(pt).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_right").build();
var at = { paths: { path44: { type: "path", points: [{ x: -0.22, y: 0.1 }, { x: -0.45, y: 0.1 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.45, y: 0.1 }, { x: 0.22, y: 0.1 }], color: "primary", fill: false }, "path44-0-7": { type: "path", points: [{ x: 0.12, y: 0.1 }, { x: 0.04, y: 0.1 }], color: "primary", fill: false }, "path44-5": { type: "path", points: [{ x: 0, y: -0.03 }, { x: 0, y: -0.25 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.12, y: 0.23 }, { x: 0.12, y: -0.02 }], color: "primary", fill: true }, "path2-88": { type: "path", points: [{ x: 0.04, y: 0.22 }, { x: 0.04, y: -0.02 }], color: "primary", fill: true }, "path2-88-5": { type: "path", points: [{ x: -0.05, y: 0.22 }, { x: -0.05, y: -0.02 }], color: "primary", fill: true }, "path2-88-5-1": { type: "path", points: [{ x: 0.04, y: 0.22 }, { x: -0.05, y: 0.22 }], color: "primary", fill: true }, "path2-88-5-1-6": { type: "path", points: [{ x: 0.04, y: -0.02 }, { x: -0.05, y: -0.02 }], color: "primary", fill: true }, "path2-8": { type: "path", points: [{ x: -0.12, y: 0.23 }, { x: -0.12, y: -0.02 }], color: "primary", fill: true }, "path8704-1": { type: "path", points: [{ x: -0.13, y: -0.03 }, { x: -0.13, y: -0.03 }, { x: -0.14, y: -0.02 }, { x: -0.16, y: -0.01 }, { x: -0.17, y: 0 }, { x: -0.18, y: 0.01 }, { x: -0.19, y: 0.02 }, { x: -0.2, y: 0.03 }, { x: -0.2, y: 0.04 }, { x: -0.21, y: 0.05 }, { x: -0.21, y: 0.06 }, { x: -0.22, y: 0.07 }, { x: -0.22, y: 0.08 }, { x: -0.22, y: 0.09 }, { x: -0.22, y: 0.1 }, { x: -0.22, y: 0.11 }, { x: -0.22, y: 0.12 }, { x: -0.22, y: 0.13 }, { x: -0.21, y: 0.14 }, { x: -0.21, y: 0.15 }, { x: -0.21, y: 0.15 }, { x: -0.2, y: 0.16 }, { x: -0.19, y: 0.17 }, { x: -0.19, y: 0.18 }, { x: -0.18, y: 0.19 }, { x: -0.17, y: 0.2 }, { x: -0.17, y: 0.2 }, { x: -0.16, y: 0.21 }, { x: -0.15, y: 0.22 }, { x: -0.14, y: 0.22 }, { x: -0.13, y: 0.23 }, { x: -0.13, y: 0.23 }, { x: -0.13, y: 0.23 }], color: "primary", fill: false }, "path8704-1-7": { type: "path", points: [{ x: 0.12, y: -0.03 }, { x: 0.12, y: -0.03 }, { x: 0.14, y: -0.02 }, { x: 0.15, y: -0.01 }, { x: 0.17, y: 0 }, { x: 0.18, y: 0.01 }, { x: 0.19, y: 0.02 }, { x: 0.2, y: 0.03 }, { x: 0.2, y: 0.04 }, { x: 0.21, y: 0.05 }, { x: 0.21, y: 0.06 }, { x: 0.22, y: 0.07 }, { x: 0.22, y: 0.08 }, { x: 0.22, y: 0.09 }, { x: 0.22, y: 0.1 }, { x: 0.22, y: 0.11 }, { x: 0.22, y: 0.12 }, { x: 0.22, y: 0.13 }, { x: 0.21, y: 0.14 }, { x: 0.21, y: 0.15 }, { x: 0.2, y: 0.15 }, { x: 0.2, y: 0.16 }, { x: 0.19, y: 0.17 }, { x: 0.19, y: 0.18 }, { x: 0.18, y: 0.19 }, { x: 0.17, y: 0.2 }, { x: 0.17, y: 0.2 }, { x: 0.16, y: 0.21 }, { x: 0.15, y: 0.21 }, { x: 0.14, y: 0.22 }, { x: 0.13, y: 0.23 }, { x: 0.12, y: 0.23 }, { x: 0.12, y: 0.23 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.02, y: 0.28 } }, refblocks: { bottom1: { x: 0, y: -0.25 }, left1: { x: -0.45, y: 0.1 }, right1: { x: 0.45, y: 0.1 } }, bounds: { minX: -0.47, maxX: 0.47, minY: -0.28, maxY: 0.28, width: 0.95, height: 0.56, centerX: 0, centerY: 0 }, circles: {} };
var vn = e(at).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_left").build();
var wn = e(at).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_top").build();
var An = e(at).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_bottom").build();
var Pn = e(at).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_right").build();
var yt = { paths: { path44: { type: "path", points: [{ x: -0.22, y: 0.1 }, { x: -0.45, y: 0.1 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.45, y: 0.1 }, { x: 0.22, y: 0.1 }], color: "primary", fill: false }, "path44-5": { type: "path", points: [{ x: 0, y: -0.03 }, { x: 0, y: -0.25 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.12, y: 0.23 }, { x: 0.12, y: -0.02 }], color: "primary", fill: true }, "path2-88": { type: "path", points: [{ x: 0.04, y: 0.22 }, { x: 0.04, y: -0.02 }], color: "primary", fill: true }, "path2-88-5": { type: "path", points: [{ x: -0.05, y: 0.22 }, { x: -0.05, y: -0.02 }], color: "primary", fill: true }, "path2-88-5-1": { type: "path", points: [{ x: 0.04, y: 0.22 }, { x: -0.05, y: 0.22 }], color: "primary", fill: true }, "path2-88-5-1-6": { type: "path", points: [{ x: 0.04, y: -0.02 }, { x: -0.05, y: -0.02 }], color: "primary", fill: true }, "path2-8": { type: "path", points: [{ x: -0.12, y: 0.23 }, { x: -0.12, y: -0.02 }], color: "primary", fill: true }, "path8704-1": { type: "path", points: [{ x: -0.13, y: -0.03 }, { x: -0.13, y: -0.03 }, { x: -0.14, y: -0.02 }, { x: -0.16, y: -0.01 }, { x: -0.17, y: 0 }, { x: -0.18, y: 0.01 }, { x: -0.19, y: 0.02 }, { x: -0.2, y: 0.03 }, { x: -0.2, y: 0.04 }, { x: -0.21, y: 0.05 }, { x: -0.21, y: 0.06 }, { x: -0.22, y: 0.07 }, { x: -0.22, y: 0.08 }, { x: -0.22, y: 0.09 }, { x: -0.22, y: 0.1 }, { x: -0.22, y: 0.11 }, { x: -0.22, y: 0.12 }, { x: -0.22, y: 0.13 }, { x: -0.21, y: 0.14 }, { x: -0.21, y: 0.15 }, { x: -0.21, y: 0.15 }, { x: -0.2, y: 0.16 }, { x: -0.19, y: 0.17 }, { x: -0.19, y: 0.18 }, { x: -0.18, y: 0.19 }, { x: -0.17, y: 0.2 }, { x: -0.17, y: 0.2 }, { x: -0.16, y: 0.21 }, { x: -0.15, y: 0.22 }, { x: -0.14, y: 0.22 }, { x: -0.13, y: 0.23 }, { x: -0.13, y: 0.23 }, { x: -0.13, y: 0.23 }], color: "primary", fill: false }, "path8704-1-7": { type: "path", points: [{ x: 0.12, y: -0.03 }, { x: 0.12, y: -0.03 }, { x: 0.14, y: -0.02 }, { x: 0.15, y: -0.01 }, { x: 0.17, y: 0 }, { x: 0.18, y: 0.01 }, { x: 0.19, y: 0.02 }, { x: 0.2, y: 0.03 }, { x: 0.2, y: 0.04 }, { x: 0.21, y: 0.05 }, { x: 0.21, y: 0.06 }, { x: 0.22, y: 0.07 }, { x: 0.22, y: 0.08 }, { x: 0.22, y: 0.09 }, { x: 0.22, y: 0.1 }, { x: 0.22, y: 0.11 }, { x: 0.22, y: 0.12 }, { x: 0.22, y: 0.13 }, { x: 0.21, y: 0.14 }, { x: 0.21, y: 0.15 }, { x: 0.2, y: 0.15 }, { x: 0.2, y: 0.16 }, { x: 0.19, y: 0.17 }, { x: 0.19, y: 0.18 }, { x: 0.18, y: 0.19 }, { x: 0.17, y: 0.2 }, { x: 0.17, y: 0.2 }, { x: 0.16, y: 0.21 }, { x: 0.15, y: 0.21 }, { x: 0.14, y: 0.22 }, { x: 0.13, y: 0.23 }, { x: 0.12, y: 0.23 }, { x: 0.12, y: 0.23 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.02, y: 0.28 } }, refblocks: { bottom1: { x: 0, y: -0.25 }, left1: { x: -0.45, y: 0.1 }, right1: { x: 0.45, y: 0.1 } }, bounds: { minX: -0.47, maxX: 0.47, minY: -0.28, maxY: 0.28, width: 0.95, height: 0.56, centerX: 0, centerY: 0 }, circles: {} };
var Sn = e(yt).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_left").build();
var Fn = e(yt).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_top").build();
var Rn = e(yt).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_bottom").build();
var Tn = e(yt).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).labelPort("bottom1", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_right").build();
var En = { paths: { path1: { type: "path", points: [{ x: -0.37, y: 0.03 }, { x: -0.13, y: 0.03 }], color: "primary", fill: false }, "path-1-3": { type: "path", points: [{ x: -0.07, y: 0.03 }, { x: 0.11, y: -0.03 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.1, y: -0.06 }, { x: 0.37, y: -0.06 }], color: "primary", fill: false }, path3: { type: "path", points: [{ x: 0.12, y: 0.17 }, { x: 0.37, y: 0.17 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.37 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.37 } }, refblocks: { left1: { x: -0.37, y: 0.03 }, right1: { x: 0.37, y: -0.06 }, right2: { x: 0.37, y: 0.17 } }, bounds: { minX: -0.4, maxX: 0.4, minY: -0.4, maxY: 0.4, width: 0.79, height: 0.79, centerX: 0, centerY: 0 }, circles: { "circle-3": { type: "circle", x: 0.08, y: -0.07, radius: 0.02, color: "primary", fill: false }, "circle-1": { type: "circle", x: -0.1, y: 0.03, radius: 0.02, color: "primary", fill: false }, "circle-2": { type: "circle", x: 0.08, y: 0.17, radius: 0.02, color: "primary", fill: false } } };
var xt = e(En).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right2", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_bottom").build();
var qi = r(xt, "down");
var Di = qi.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Gi = qi.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Di.anchor = "middle_bottom";
Gi.anchor = "middle_top";
Di.x = 0.44;
Di.y += 0.28;
Gi.y -= 0.28;
Gi.x = 0.44;
var Yn = qi;
var Ui = r(xt, "left");
var Wi = Ui.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Hi = Ui.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Wi.anchor = "middle_bottom";
Hi.anchor = "middle_top";
Wi.x = 0;
Wi.y += 0.625;
Hi.y -= 0.695;
Hi.x = 0;
var Xn = Ui;
var Zi = r(xt, "up");
var Qi = Zi.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Ki = Zi.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Qi.anchor = "middle_bottom";
Ki.anchor = "middle_top";
Qi.x = 0.4;
Qi.y += 0.28;
Ki.y -= 0.28;
Ki.x = 0.4;
var Ln = Zi;
var Vn = { paths: { path1: { type: "path", points: [{ x: -0.37, y: 0.03 }, { x: -0.13, y: 0.03 }], color: "primary", fill: false }, "path-1-3": { type: "path", points: [{ x: -0.07, y: 0.03 }, { x: 0.11, y: 0.14 }], color: "primary", fill: false }, path2: { type: "path", points: [{ x: 0.1, y: -0.06 }, { x: 0.37, y: -0.06 }], color: "primary", fill: false }, path3: { type: "path", points: [{ x: 0.12, y: 0.17 }, { x: 0.37, y: 0.17 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.4 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.4 } }, refblocks: { left1: { x: -0.37, y: 0.03 }, right1: { x: 0.37, y: -0.06 }, right3: { x: 0.37, y: 0.17 } }, bounds: { minX: -0.4, maxX: 0.4, minY: -0.4, maxY: 0.4, width: 0.79, height: 0.79, centerX: 0, centerY: 0 }, circles: { "circle-3": { type: "circle", x: 0.08, y: -0.07, radius: 0.02, color: "primary", fill: false }, "circle-1": { type: "circle", x: -0.1, y: 0.03, radius: 0.02, color: "primary", fill: false }, "circle-2": { type: "circle", x: 0.08, y: 0.17, radius: 0.02, color: "primary", fill: false } } };
var st = e(Vn).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right3", ["2"]).labelPort("right1", ["3"]).changeTextAnchor("{REF}", "middle_bottom").build();
var tl = r(st, "down");
var el = tl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var rl = tl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
el.anchor = "middle_bottom";
rl.anchor = "middle_top";
el.x = 0.44;
el.y += 0.28;
rl.y -= 0.28;
rl.x = 0.44;
var jn = tl;
var ol = r(st, "left");
var il = ol.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var ll = ol.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
il.anchor = "middle_bottom";
ll.anchor = "middle_top";
il.x = 0;
il.y += 0.625;
ll.y -= 0.695;
ll.x = 0;
var kn = ol;
var pl = r(st, "up");
var al = pl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var yl = pl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
al.anchor = "middle_bottom";
yl.anchor = "middle_top";
al.x = 0.4;
al.y += 0.28;
yl.y -= 0.28;
yl.x = 0.4;
var zn = pl;
var Tt = { paths: { path11: { type: "path", points: [{ x: -0.38, y: 0 }, { x: -0.12, y: -0.01 }], color: "primary", fill: false }, "path11-0": { type: "path", points: [{ x: -0.07, y: 0 }, { x: 0.11, y: 0.05 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.12, y: -0.01 }, { x: 0.38, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.31 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.28 } }, refblocks: { left1: { x: -0.12, y: -0.01 }, left2: { x: -0.38, y: 0 }, right1: { x: 0.12, y: -0.01 }, right2: { x: 0.38, y: 0 } }, bounds: { minX: -0.4, maxX: 0.4, minY: -0.25, maxY: 0.25, width: 0.81, height: 0.5, centerX: 0, centerY: 0 }, circles: { "circle-2": { type: "circle", x: 0.1, y: 0, radius: 0.02, color: "primary", fill: false }, "circle-1": { type: "circle", x: -0.1, y: 0, radius: 0.02, color: "primary", fill: false } } };
delete Tt.refblocks.left1;
delete Tt.refblocks.right1;
Tt.bounds.width += 0.2;
var mt = e(Tt).changeTextAnchor("{VAL}", "middle_top").labelPort("left2", ["1"]).labelPort("right2", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var xl = r(mt, "down");
var sl = xl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var ml = xl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
sl.anchor = "middle_bottom";
ml.anchor = "middle_top";
sl.x = 0.3;
sl.y += 0.265;
ml.y -= 0.265;
ml.x = 0.3;
var On = xl;
var nl = r(mt, "left");
var fl = nl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var hl = nl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
fl.anchor = "middle_bottom";
hl.anchor = "middle_top";
fl.x = 0;
fl.y += 0.57;
hl.y -= 0.57;
hl.x = 0;
var Jn = nl;
var cl = r(mt, "up");
var dl = cl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var bl = cl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
dl.anchor = "middle_bottom";
bl.anchor = "middle_top";
dl.x = 0.3;
dl.y += 0.265;
bl.y -= 0.265;
bl.x = 0.3;
var $n = cl;
var Et = { paths: { path11: { type: "path", points: [{ x: -0.38, y: 0 }, { x: -0.12, y: -0.01 }], color: "primary", fill: false }, "path11-0": { type: "path", points: [{ x: -0.07, y: 0.01 }, { x: 0.1, y: 0.14 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.12, y: -0.01 }, { x: 0.38, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0, y: 0.25 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.25 } }, refblocks: { left1: { x: -0.12, y: -0.01 }, left2: { x: -0.38, y: 0 }, right1: { x: 0.12, y: -0.01 }, right2: { x: 0.38, y: 0 } }, bounds: { minX: -0.4, maxX: 0.4, minY: -0.25, maxY: 0.25, width: 0.81, height: 0.5, centerX: 0, centerY: 0 }, circles: { "circle-2": { type: "circle", x: 0.1, y: 0, radius: 0.02, color: "primary", fill: false }, "circle-1": { type: "circle", x: -0.1, y: 0, radius: 0.02, color: "primary", fill: false } } };
delete Et.refblocks.left1;
delete Et.refblocks.right1;
Et.bounds.width += 0.2;
var nt = e(Et).changeTextAnchor("{VAL}", "middle_top").labelPort("left2", ["1"]).labelPort("right2", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var _l = r(nt, "down");
var gl = _l.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var ul = _l.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
gl.anchor = "middle_bottom";
ul.anchor = "middle_top";
gl.x = 0.3;
gl.y += 0.265;
ul.y -= 0.265;
ul.x = 0.3;
var Mn = _l;
var vl = r(nt, "left");
var wl = vl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Al = vl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
wl.anchor = "middle_bottom";
Al.anchor = "middle_top";
wl.x = 0;
wl.y += 0.57;
Al.y -= 0.57;
Al.x = 0;
var Cn = vl;
var Pl = r(nt, "up");
var Sl = Pl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Fl = Pl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Sl.anchor = "middle_bottom";
Fl.anchor = "middle_top";
Sl.x = 0.3;
Sl.y += 0.265;
Fl.y -= 0.265;
Fl.x = 0.3;
var Nn = Pl;
var ft = { paths: { path44: { type: "path", points: [{ x: -0.16845120000000047, y: 0.02621170000000017 }, { x: -0.4458008, y: 0.02709619999999968 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.4458008, y: 0.026971799999999657 }, { x: 0.1677968999999997, y: 0.027926399999999685 }], color: "primary", fill: false }, "path8704-1": { type: "path", points: [{ x: -0.0040837000000002455, y: -0.13467459999999964 }, { x: -0.0040837000000002455, y: -0.13467459999999964 }, { x: -0.017668143940740948, y: -0.1311205263185182 }, { x: -0.03043520885925943, y: -0.12727072121481456 }, { x: -0.04240966440000013, y: -0.1231399985999998 }, { x: -0.05361628020740751, y: -0.11874317238518502 }, { x: -0.064079825925926, y: -0.11409505648148131 }, { x: -0.07382507120000005, y: -0.10921046479999987 }, { x: -0.0828767856740741, y: -0.10410421125185171 }, { x: -0.0912597389925926, y: -0.09879110974814802 }, { x: -0.09899870079999995, y: -0.0932859741999998 }, { x: -0.10611844074074069, y: -0.08760361851851838 }, { x: -0.11264372845925916, y: -0.0817588566148146 }, { x: -0.11859933359999993, y: -0.07576650239999982 }, { x: -0.12401002580740728, y: -0.06964136978518495 }, { x: -0.12890057472592584, y: -0.06339827268148127 }, { x: -0.13329574999999985, y: -0.05705202499999972 }, { x: -0.13722032127407394, y: -0.05061744065185156 }, { x: -0.14069905819259243, y: -0.04410933354814783 }, { x: -0.14375673039999987, y: -0.03754251759999966 }, { x: -0.14641810754074058, y: -0.030931806718518143 }, { x: -0.1487079592592591, y: -0.0242920148148144 }, { x: -0.15065105519999983, y: -0.017637955799999563 }, { x: -0.15227216500740723, y: -0.01098444358518472 }, { x: -0.15359605832592574, y: -0.004346292081480994 }, { x: -0.1546475047999998, y: 0.00226168480000051 }, { x: -0.15545127407407386, y: 0.008824673148148676 }, { x: -0.1560321357925924, y: 0.015327859051852397 }, { x: -0.1564148595999998, y: 0.02175642860000056 }, { x: -0.1566242151407405, y: 0.028095567881482052 }, { x: -0.15668497205925902, y: 0.03433046298518576 }, { x: -0.15662189999999976, y: 0.04044630000000058 }, { x: -0.15662189999999976, y: 0.0404463000000006 }, { x: -0.15662189999999976, y: 0.0404463000000006 }, { x: -0.15622857394444417, y: 0.04717166472222282 }, { x: -0.1553217675555553, y: 0.05388046444444503 }, { x: -0.15392183849999977, y: 0.060558907500000585 }, { x: -0.1520491444444442, y: 0.0671932022222228 }, { x: -0.1497240430555553, y: 0.07376955694444502 }, { x: -0.14696689199999974, y: 0.08027418000000058 }, { x: -0.14379804894444415, y: 0.0866932797222228 }, { x: -0.1402378715555553, y: 0.09301306444444506 }, { x: -0.13630671749999965, y: 0.09921974250000057 }, { x: -0.13202494444444415, y: 0.10529952222222282 }, { x: -0.12741291005555522, y: 0.11123861194444501 }, { x: -0.1224909719999997, y: 0.1170232200000006 }, { x: -0.11727948794444407, y: 0.12263955472222278 }, { x: -0.11179881555555524, y: 0.12807382444444504 }, { x: -0.10606931249999965, y: 0.13331223750000057 }, { x: -0.1001113364444441, y: 0.13834100222222284 }, { x: -0.09394524505555521, y: 0.14314632694444504 }, { x: -0.08759139599999967, y: 0.14771442000000062 }, { x: -0.08107014694444413, y: 0.15203148972222283 }, { x: -0.07440185555555523, y: 0.15608374444444503 }, { x: -0.0676068794999997, y: 0.15985739250000058 }, { x: -0.06070557644444415, y: 0.16333864222222283 }, { x: -0.05371830405555529, y: 0.16651370194444504 }, { x: -0.04666541999999976, y: 0.1693687800000006 }, { x: -0.03956728194444424, y: 0.1718900847222228 }, { x: -0.03244424755555539, y: 0.17406382444444501 }, { x: -0.025316674499999876, y: 0.17587620750000055 }, { x: -0.01820492044444437, y: 0.17731344222222278 }, { x: -0.01112934305555553, y: 0.178361736944445 }, { x: -0.004110300000000034, y: 0.17900730000000054 }, { x: -0.004110300000000011, y: 0.17900730000000054 }], color: "primary", fill: false }, "path8704-1-9": { type: "path", points: [{ x: 0.004158700000000071, y: -0.1355885000000001 }, { x: 0.004158700000000071, y: -0.1355885000000001 }, { x: 0.017743143940740766, y: -0.1320344263185187 }, { x: 0.03051020885925925, y: -0.12818462121481505 }, { x: 0.042484664399999955, y: -0.12405389860000024 }, { x: 0.053691280207407335, y: -0.11965707238518546 }, { x: 0.0641548259259258, y: -0.11500895648148178 }, { x: 0.07390007119999986, y: -0.1101243648000003 }, { x: 0.0829517856740739, y: -0.10501811125185218 }, { x: 0.0913347389925924, y: -0.09970500974814848 }, { x: 0.09907370079999973, y: -0.09419987420000027 }, { x: 0.10619344074074046, y: -0.08851751851851883 }, { x: 0.11271872845925893, y: -0.08267275661481507 }, { x: 0.11867433359999968, y: -0.07668040240000029 }, { x: 0.12408502580740703, y: -0.0705552697851854 }, { x: 0.12897557472592555, y: -0.06431217268148172 }, { x: 0.13337074999999957, y: -0.05796592500000018 }, { x: 0.13729532127407365, y: -0.05153134065185202 }, { x: 0.14077405819259214, y: -0.045023233548148286 }, { x: 0.14383173039999952, y: -0.038456417600000126 }, { x: 0.14649310754074024, y: -0.03184570671851861 }, { x: 0.14878295925925875, y: -0.02520591481481487 }, { x: 0.1507260551999995, y: -0.01855185580000003 }, { x: 0.15234716500740686, y: -0.011898343585185192 }, { x: 0.15367105832592537, y: -0.005260192081481464 }, { x: 0.15472250479999944, y: 0.001347784800000043 }, { x: 0.1555262740740735, y: 0.007910773148148207 }, { x: 0.156107135792592, y: 0.01441395905185193 }, { x: 0.1564898595999994, y: 0.020842528600000094 }, { x: 0.15669921514074014, y: 0.02718166788148159 }, { x: 0.15675997205925862, y: 0.03341656298518529 }, { x: 0.15669689999999936, y: 0.03953240000000011 }, { x: 0.15669689999999936, y: 0.039532400000000134 }, { x: 0.15669689999999936, y: 0.039532400000000134 }, { x: 0.1563035739444438, y: 0.04625776472222235 }, { x: 0.15539676755555493, y: 0.05296656444444457 }, { x: 0.15399683849999934, y: 0.05964500750000013 }, { x: 0.1521241444444438, y: 0.06627930222222234 }, { x: 0.14979904305555491, y: 0.07285565694444456 }, { x: 0.14704189199999937, y: 0.07936028000000013 }, { x: 0.1438730489444438, y: 0.08577937972222234 }, { x: 0.1403128715555549, y: 0.09209916444444458 }, { x: 0.13638171749999925, y: 0.0983058425000001 }, { x: 0.13209994444444376, y: 0.10438562222222235 }, { x: 0.12748791005555482, y: 0.11032471194444453 }, { x: 0.12256597199999929, y: 0.11610932000000013 }, { x: 0.1173544879444437, y: 0.1217256547222223 }, { x: 0.11187381555555485, y: 0.12715992444444457 }, { x: 0.10614431249999925, y: 0.1323983375000001 }, { x: 0.10018633644444369, y: 0.13742710222222235 }, { x: 0.09402024505555481, y: 0.14223242694444457 }, { x: 0.08766639599999927, y: 0.14680052000000016 }, { x: 0.08114514694444372, y: 0.15111758972222236 }, { x: 0.07447685555555483, y: 0.15516984444444457 }, { x: 0.06768187949999929, y: 0.15894349250000012 }, { x: 0.06078057644444377, y: 0.16242474222222236 }, { x: 0.053793304055554894, y: 0.16559980194444457 }, { x: 0.046740419999999366, y: 0.16845488000000014 }, { x: 0.039642281944443844, y: 0.17097618472222234 }, { x: 0.03251924755555499, y: 0.17314992444444455 }, { x: 0.02539167449999948, y: 0.17496230750000008 }, { x: 0.018279920444443973, y: 0.17639954222222232 }, { x: 0.011204343055555134, y: 0.17744783694444452 }, { x: 0.004185299999999637, y: 0.17809340000000007 }, { x: 0.004185299999999614, y: 0.17809340000000007 }], color: "primary", fill: false }, path4: { type: "path", points: [{ x: -0.08039130000000005, y: 0.0179576999999993 }, { x: -0.08039130000000005, y: 0.09650599999999931 }], color: "primary", fill: true }, "path4-5": { type: "path", points: [{ x: 0.01494479999999987, y: -0.055216500000000224 }, { x: 0.01494479999999987, y: 0.09691909999999937 }], color: "primary", fill: true }, "path4-5-8": { type: "path", points: [{ x: 0.06871169999999927, y: -0.056870000000000864 }, { x: 0.06871169999999927, y: 0.018784499999999538 }], color: "primary", fill: true }, "path4-1": { type: "path", points: [{ x: -0.08179359999999969, y: 0.09650570000000003 }, { x: 0.015771699999999722, y: 0.09650570000000003 }], color: "primary", fill: true }, "path4-1-6": { type: "path", points: [{ x: 0.0117995999999998, y: -0.05594970000000088 }, { x: 0.06843709999999925, y: -0.05594970000000088 }], color: "primary", fill: true }, "rect1577-4": { type: "path", points: [{ x: -0.17162450000000073, y: 0.11125030000000025 }, { x: -0.2688274000000015, y: 0.11125030000000025 }, { x: -0.2688274000000015, y: 0.11469129999999961 }, { x: -0.17162450000000073, y: 0.11469129999999961 }], color: "primary", fill: true }, "rect1577-4-7": { type: "path", points: [{ x: -0.2184661999999995, y: 0.16159429999999997 }, { x: -0.2184661999999995, y: 0.06439139999999943 }, { x: -0.22190719999999908, y: 0.06439139999999943 }, { x: -0.22190719999999908, y: 0.16159429999999997 }], color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.0024445000000006267, y: 0.23933980000000044 }, bottom1: { type: "text", text: "{VAL}", x: 0.00341719999999901, y: -0.23933980000000066 } }, refblocks: { left1: { x: -0.4458008, y: 0.02709619999999968 }, right1: { x: 0.4458008, y: 0.026971799999999657 } }, bounds: { minX: -0.473959241, maxX: 0.473959241, minY: -0.23933980000000066, maxY: 0.23933980000000044, width: 0.947918482, height: 0.4786796000000011, centerX: 0, centerY: -0.00000000000000011102230246251565 }, circles: {} };
var In = e(ft).rotateRightFacingSymbol("down").labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{REF}", "middle_left", { x: 0.02, y: 0.2 }).changeTextAnchor("{VAL}", "middle_left", { x: 0.5, y: -0.2 }).build();
var Bn = e(ft).rotateRightFacingSymbol("left").labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{REF}", "middle_bottom", { x: 0, y: 0.45 }).changeTextAnchor("{VAL}", "middle_top", { x: 0, y: -0.55 }).build();
var qn = e(ft).rotateRightFacingSymbol("right").labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var Dn = e(ft).rotateRightFacingSymbol("up").labelPort("left1", ["1", "pos"]).labelPort("right1", ["2", "neg"]).changeTextAnchor("{VAL}", "middle_left", { x: 0.02, y: -0.2 }).changeTextAnchor("{REF}", "middle_left", { x: 0.5, y: 0.2 }).build();
var Rl = { paths: { path40: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.12, y: -0.09 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.12, y: 0.18 }, { x: 0.14, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.12, y: -0.09 }, { x: -0.12, y: 0.18 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.14, y: -0.09 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.12, y: 0.04 }, { x: -0.52, y: 0.04 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.52, y: 0.04 }, { x: 0.15, y: 0.04 }], color: "primary", fill: false }, "path43-5": { type: "path", points: [{ x: 0.19, y: -0.09 }, { x: 0.15, y: -0.09 }], color: "primary", fill: false }, "path43-5-2": { type: "path", points: [{ x: 0.19, y: -0.14 }, { x: 0.19, y: -0.09 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.27 } }, refblocks: { left1: { x: -0.52, y: 0.04 }, right1: { x: 0.52, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.27, maxY: 0.27, width: 1.09, height: 0.55, centerX: 0, centerY: 0 }, circles: {} };
var B0 = e(Rl).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var Gn = r(B0);
var Un = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0 }, { x: -0.3, y: 0 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0 }, { x: 0.54, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.18, y: -0.36 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: 0.43 }, left1: { type: "text", text: "RPM", x: 0, y: -0.02 } }, refblocks: { left1: { x: -0.54, y: 0 }, right1: { x: 0.54, y: 0 } }, bounds: { minX: -0.53, maxX: 0.53, minY: 0, maxY: 0, width: 1.06, height: 1, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: -0.01, y: -0.01, radius: 0.29, color: "primary", fill: false } } };
var { paths: R9, texts: T9, bounds: q0, refblocks: Wn, circles: E9 } = Un;
var Yt = s({ primitives: [...Object.values(R9), ...Object.values(E9), { type: "text", text: "{REF}", x: 0, y: -0.3594553499999995, anchor: "middle_top" }, { type: "text", text: "{VAL}", x: 0, y: 0.35, anchor: "middle_bottom" }, { ...T9.left1, y: 0.01, anchor: "center", fontSize: 0.2 }], ports: [{ ...Wn.left1, labels: ["1"] }, { ...Wn.right1, labels: ["2"] }], size: { width: q0.width, height: q0.height }, center: { x: q0.centerX, y: q0.centerY } });
var { 5: Y9, ...X9 } = Yt.primitives;
function L9(t) {
  return typeof t == "object";
}
var Hn = r({ ...Yt, primitives: Object.values(X9).filter(L9) });
var Zn = { ...Hn, primitives: [...Hn.primitives, Y9] };
var ht = s({ primitives: [{ type: "path", points: [{ x: -0.2, y: 0 }, { x: 0, y: 0 }], color: "primary", fill: false }, { type: "path", points: Array.from({ length: 8 }, (t, o) => {
  let i = Math.PI / 2 - o * Math.PI / 7, l = 0.1;
  return { x: 0.1 - l * Math.cos(i), y: l * Math.sin(i) };
}), color: "primary", fill: false }, { type: "text", text: "{REF}", x: 0.125, y: 0, anchor: "middle_left" }], ports: [{ x: -0.2, y: 0, labels: ["1"] }], center: { x: 0, y: 0 } });
var Kn = r(ht, "down");
var Qn = Kn.primitives.find((t) => t.type === "text" && t.text === "{REF}");
Qn && (Qn.anchor = "middle_top");
var t1 = Kn;
var e1 = r(ht, "left");
var o1 = r(ht, "up");
var r1 = o1.primitives.find((t) => t.type === "text" && t.text === "{REF}");
r1 && (r1.anchor = "middle_bottom");
var i1 = o1;
var l1 = { paths: { path40: { type: "path", points: [{ x: 0.44, y: 0.04 }, { x: 0.19, y: -0.09 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: 0.19, y: 0.18 }, { x: 0.44, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: 0.19, y: -0.09 }, { x: 0.19, y: 0.18 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: 0.19, y: 0.04 }, { x: -0.11, y: 0.04 }], color: "primary", fill: false }, path45: { type: "path", points: [{ x: -0.43, y: 0.22 }, { x: -0.11, y: 0.04 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.27 } }, refblocks: { right1: { x: -0.43, y: 0.22 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.27, maxY: 0.27, width: 1.09, height: 0.55, centerX: 0, centerY: 0 }, circles: {} };
var wt = e(l1).labelPort("right1", ["1"]).changeTextAnchor("{REF}", "middle_bottom").changeTextAnchor("{VAL}", "middle_top").build();
var Tl = r(wt, "up");
var El = Tl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Yl = Tl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
El.anchor = "middle_bottom";
Yl.anchor = "middle_top";
El.x = 0.4;
El.y += 0.2;
Yl.y -= 0.3;
Yl.x = 0.4;
var D0 = Tl;
var Xl = L(D0);
var Ll = Xl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var Vl = Xl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Ll.anchor = "middle_bottom";
Vl.anchor = "middle_top";
Ll.x = 0.35;
Ll.y += 0.4;
Vl.y -= 0.4;
Vl.x = 0.35;
var p1 = Xl;
var jl = r(wt, "left");
var kl = jl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var zl = jl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
kl.anchor = "middle_bottom";
zl.anchor = "middle_top";
kl.x = 0;
kl.y += 0.5;
zl.y -= 0.6;
zl.x = 0;
var a1 = jl;
var Ol = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0.04 }, { x: -0.11, y: 0.04 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.1, y: 0.04 }, { x: 0.54, y: 0.04 }], color: "primary", fill: false }, "path11-0": { type: "path", points: [{ x: -0.09, y: -0.15 }, { x: -0.09, y: 0.26 }], color: "primary", fill: false }, "path11-0-3": { type: "path", points: [{ x: 0.09, y: -0.15 }, { x: 0.09, y: 0.26 }], color: "primary", fill: false }, "path11-0-9": { type: "path", points: [{ x: -0.08, y: 0.06 }, { x: -0.08, y: -0.15 }, { x: 0.09, y: -0.05 }, { x: -0.08, y: 0.06 }], color: "primary", fill: true }, "path11-0-9-0": { type: "path", points: [{ x: 0.08, y: 0.26 }, { x: 0.08, y: 0.05 }, { x: -0.09, y: 0.15 }, { x: 0.07, y: 0.26 }], color: "primary", fill: true }, "path12-2": { type: "path", points: [{ x: 0.09, y: -0.06 }, { x: 0.27, y: -0.17 }], color: "primary", fill: false }, "path12-2-9": { type: "path", points: [{ x: 0.27, y: -0.18 }, { x: 0.27, y: -0.31 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: 0.01, y: 0.42 }, bottom1: { type: "text", text: "{VAL}", x: -0.03, y: -0.42 } }, refblocks: { bottom1: { x: 0.27, y: -0.31 }, left1: { x: -0.54, y: 0.04 }, right1: { x: 0.54, y: 0.04 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.42, maxY: 0.42, width: 1.14, height: 0.83, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: 0.05, radius: 0.29, color: "primary", fill: false } } };
var G0 = e(Ol).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).labelPort("bottom1", ["3"]).changeTextAnchor("{REF}", "middle_bottom").build();
var y1 = r(G0);
var x1 = y1.primitives.filter((t) => t.type === "text");
var k9 = x1.find((t) => t.text === "{REF}");
var z9 = x1.find((t) => t.text === "{VAL}");
k9.y = 0;
z9.y = 0;
var s1 = y1;
var m1 = { paths: { path40: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.12, y: -0.09 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.12, y: 0.18 }, { x: 0.14, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.12, y: -0.09 }, { x: -0.12, y: 0.18 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.14, y: -0.09 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.12, y: 0.04 }, { x: -0.52, y: 0.04 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.52, y: 0.04 }, { x: 0.15, y: 0.04 }], color: "primary", fill: false }, "path43-8": { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.08, y: 0.18 }], color: "primary", fill: false }, "path43-8-8": { type: "path", points: [{ x: 0.14, y: -0.09 }, { x: 0.08, y: -0.09 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.27 } }, refblocks: { left1: { x: -0.52, y: 0.04 }, right1: { x: 0.52, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.27, maxY: 0.27, width: 1.09, height: 0.55, centerX: 0, centerY: 0 }, circles: {} };
var { paths: J9, texts: n1, bounds: U0, refblocks: f1, circles: $9 } = m1;
var W0 = s({ primitives: [...Object.values(J9), ...Object.values($9), { ...n1.top1, anchor: "middle_bottom" }, { ...n1.bottom1, anchor: "middle_top" }], ports: [{ ...f1.left1, labels: ["1"] }, { ...f1.right1, labels: ["2"] }], size: { width: U0.width, height: U0.height }, center: { x: U0.centerX, y: U0.centerY } });
var Jl = r(W0);
var M9 = Jl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var C9 = Jl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
M9.anchor = "middle_left";
C9.anchor = "middle_right";
var h1 = Jl;
var c1 = { paths: { path11: { type: "path", points: [{ x: -0.34, y: 0.22 }, { x: -0.02, y: 0.01 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.23, y: 0.13 }, { x: 0.23, y: 0.4 }], color: "primary", fill: false }, "path12-2": { type: "path", points: [{ x: 0.23, y: -0.08 }, { x: 0.23, y: -0.35 }], color: "primary", fill: false }, "path11-0": { type: "path", points: [{ x: -0.01, y: -0.18 }, { x: -0.01, y: 0.23 }], color: "primary", fill: false }, "path11-0-3": { type: "path", points: [{ x: 0.23, y: 0.12 }, { x: -0.01, y: 0.12 }], color: "primary", fill: false }, "path11-0-9": { type: "path", points: [{ x: -0.11, y: 0.13 }, { x: -0.17, y: 0.04 }, { x: -0.06, y: 0.03 }, { x: -0.11, y: 0.13 }], color: "primary", fill: true }, "path11-0-3-8": { type: "path", points: [{ x: 0.23, y: -0.08 }, { x: -0.01, y: -0.08 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.2, y: 0.39 }, bottom1: { type: "text", text: "{VAL}", x: -0.03, y: -0.42 } }, refblocks: { top1: { x: 0.23, y: 0.4 }, bottom1: { x: 0.23, y: -0.35 }, left1: { x: -0.34, y: 0.22 } }, bounds: { minX: -0.37, maxX: 0.37, minY: -0.42, maxY: 0.42, width: 0.74, height: 0.85, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0.08, y: 0.01, radius: 0.29, color: "primary", fill: false } } };
var { paths: I9, texts: d1, bounds: H0, refblocks: $l, circles: B9 } = c1;
var Z0 = s({ primitives: [...Object.values(I9), ...Object.values(B9), { ...d1.top1, anchor: "middle_left" }, { ...d1.bottom1, anchor: "middle_right" }], ports: [{ ...$l.top1, labels: ["1"] }, { ...$l.bottom1, labels: ["2"] }, { ...$l.left1, labels: ["3"] }], size: { width: H0.width, height: H0.height }, center: { x: H0.centerX, y: H0.centerY } });
var b1 = r(Z0);
var _1 = b1.primitives.filter((t) => t.type === "text");
var q9 = _1.find((t) => t.text === "{REF}");
q9.y = 0.1;
var g1 = _1.find((t) => t.text === "{VAL}");
g1.y = 0.1;
g1.x = -0.4;
var u1 = b1;
var v1 = { paths: { capsule_outer: { type: "path", points: [{ x: -0.44, y: 0.34 }, { x: -0.45, y: 0.39 }, { x: -0.46, y: 0.42 }, { x: -0.49, y: 0.44 }, { x: -0.52, y: 0.46 }, { x: -0.56, y: 0.46 }, { x: -0.6, y: 0.46 }, { x: -0.63, y: 0.44 }, { x: -0.65, y: 0.42 }, { x: -0.67, y: 0.39 }, { x: -0.68, y: 0.34 }, { x: -0.68, y: -0.34 }, { x: -0.67, y: -0.39 }, { x: -0.65, y: -0.42 }, { x: -0.63, y: -0.44 }, { x: -0.6, y: -0.45 }, { x: -0.56, y: -0.46 }, { x: -0.52, y: -0.45 }, { x: -0.49, y: -0.44 }, { x: -0.46, y: -0.42 }, { x: -0.45, y: -0.39 }, { x: -0.44, y: -0.34 }, { x: -0.44, y: 0.34 }], color: "primary", fill: false }, capsule_inner: { type: "path", points: [{ x: -0.51, y: 0.28 }, { x: -0.52, y: 0.32 }, { x: -0.53, y: 0.34 }, { x: -0.56, y: 0.35 }, { x: -0.57, y: 0.35 }, { x: -0.58, y: 0.34 }, { x: -0.6, y: 0.32 }, { x: -0.61, y: 0.28 }, { x: -0.61, y: -0.28 }, { x: -0.6, y: -0.32 }, { x: -0.58, y: -0.34 }, { x: -0.57, y: -0.35 }, { x: -0.56, y: -0.35 }, { x: -0.53, y: -0.34 }, { x: -0.52, y: -0.32 }, { x: -0.51, y: -0.28 }, { x: -0.51, y: 0.28 }], color: "primary", fill: true }, usb_vertical: { type: "path", points: [{ x: 0.1, y: -0.4 }, { x: 0.1, y: 0.4 }], color: "primary", fill: false }, usb_left_branch: { type: "path", points: [{ x: 0.1, y: -0.1 }, { x: -0.03, y: 0.05 }, { x: -0.03, y: 0.15 }], color: "primary", fill: false }, usb_right_branch: { type: "path", points: [{ x: 0.1, y: 0 }, { x: 0.25, y: 0.15 }, { x: 0.25, y: 0.25 }], color: "primary", fill: false }, usb_arrow: { type: "path", points: [{ x: 0.05, y: 0.4 }, { x: 0.1, y: 0.5 }, { x: 0.15, y: 0.4 }, { x: 0.05, y: 0.4 }], color: "primary", fill: true }, usb_square: { type: "path", points: [{ x: 0.2, y: 0.25 }, { x: 0.3, y: 0.25 }, { x: 0.3, y: 0.35 }, { x: 0.2, y: 0.35 }, { x: 0.2, y: 0.25 }], color: "primary", fill: true } }, circles: { usb_base: { type: "circle", x: 0.1, y: -0.4, radius: 0.07, color: "primary", fill: true }, usb_tip_circle: { type: "circle", x: -0.03, y: 0.15, radius: 0.04, color: "primary", fill: true } }, texts: { top1: { type: "text", text: "{REF}", x: -0.25, y: 0.7 } }, refblocks: {}, bounds: { minX: -0.75, maxX: 0.35, minY: -0.6, maxY: 0.75, width: 1.1, height: 1.35, centerX: -0.2, centerY: 0.08 } };
var w1 = e(v1).changeTextAnchor("{REF}", "middle_bottom").build();
var A1 = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0 }, { x: -0.3, y: 0 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0 }, { x: 0.54, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.18, y: -0.36 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: 0.43 }, left1: { type: "text", text: "Var", x: -0.19, y: 0.07 } }, refblocks: { left1: { x: -0.54, y: 0 }, right1: { x: 0.54, y: 0 } }, bounds: { minX: -0.53, maxX: 0.53, minY: 0, maxY: 0, width: 1.06, height: 1, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: -0.01, y: -0.01, radius: 0.29, color: "primary", fill: false } } };
var { paths: U9, texts: Ml, bounds: Q0, refblocks: P1, circles: W9 } = A1;
var K0 = s({ primitives: [...Object.values(U9), ...Object.values(W9), { ...Ml.top1, x: 0, y: -0.3594553499999995, anchor: "middle_top" }, { ...Ml.bottom1, x: 0, y: 0.35, anchor: "middle_bottom" }, { ...Ml.left1, x: -0.02, y: 0.01, fontSize: 0.2, anchor: "center" }], ports: [{ ...P1.left1, labels: ["1"] }, { ...P1.right1, labels: ["2"] }], size: { width: Q0.width, height: Q0.height }, center: { x: Q0.centerX, y: Q0.centerY } });
var S1 = r(K0);
var F1 = { paths: { path40: { type: "path", points: [{ x: 0.08, y: 0.04 }, { x: -0.18, y: -0.09 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.18, y: 0.18 }, { x: 0.08, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.18, y: -0.09 }, { x: -0.18, y: 0.18 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.09, y: 0.17 }, { x: 0.1, y: -0.09 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.2, y: 0.04 }, { x: -0.52, y: 0.04 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.52, y: 0.04 }, { x: 0.21, y: 0.04 }], color: "primary", fill: false }, "path43-6": { type: "path", points: [{ x: 0.19, y: 0.17 }, { x: 0.19, y: -0.09 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.27 } }, refblocks: { left1: { x: -0.52, y: 0.04 }, right1: { x: 0.52, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.27, maxY: 0.27, width: 1.09, height: 0.55, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Z9, texts: R1, bounds: tr, refblocks: T1, circles: Q9 } = F1;
var er = s({ primitives: [...Object.values(Z9), ...Object.values(Q9), { ...R1.top1, anchor: "middle_bottom" }, { ...R1.bottom1, anchor: "middle_top" }], ports: [{ ...T1.left1, labels: ["1"] }, { ...T1.right1, labels: ["2"] }], size: { width: tr.width, height: tr.height }, center: { x: tr.centerX, y: tr.centerY } });
var Cl = r(er);
var K9 = Cl.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var tb = Cl.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
K9.anchor = "middle_left";
tb.anchor = "middle_right";
var E1 = Cl;
var Y1 = { paths: { path5: { type: "path", points: [{ x: -0.54, y: 0 }, { x: -0.26, y: 0 }], color: "primary", fill: false }, path6: { type: "path", points: [{ x: 0.27, y: 0 }, { x: 0.54, y: 0.01 }], color: "primary", fill: false }, path7: { type: "path", points: [{ x: 0.27, y: -0.23 }, { x: -0.26, y: 0.24 }], color: "primary", fill: false }, path8: { type: "path", points: [{ x: 0.38, y: -0.23 }, { x: 0.27, y: -0.23 }], color: "primary", fill: false }, path9: { type: "path", points: [{ x: 0, y: 0.14 }, { x: 0.27, y: 0.14 }, { x: 0.27, y: -0.13 }, { x: -0.26, y: -0.13 }, { x: -0.26, y: 0.14 }, { x: 0, y: 0.14 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.06, y: 0.25 }, bottom1: { type: "text", text: "{VAL}", x: 0.01, y: -0.25 } }, refblocks: { left1: { x: -0.54, y: 0 }, right1: { x: 0.54, y: 0.01 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.25, maxY: 0.25, width: 1.13, height: 0.5, centerX: 0, centerY: 0 }, circles: {} };
var { paths: rb, texts: X1, bounds: rr, refblocks: L1 } = Y1;
var or = s({ primitives: [...Object.values(rb), { ...X1.top1, anchor: "middle_left" }, { ...X1.bottom1, anchor: "middle_right" }], ports: [{ ...L1.left1, labels: ["1", "-"] }, { ...L1.right1, labels: ["2", "+"] }], size: { width: rr.width, height: rr.height }, center: { x: rr.centerX, y: rr.centerY } });
var V1 = r(or);
var j1 = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0 }, { x: -0.3, y: 0 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0 }, { x: 0.54, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.18, y: -0.36 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: 0.43 }, left1: { type: "text", text: "Var", x: 0, y: -0.02 } }, refblocks: { left1: { x: -0.54, y: 0 }, right1: { x: 0.54, y: 0 } }, bounds: { minX: -0.53, maxX: 0.53, minY: 0, maxY: 0, width: 1.06, height: 1, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: -0.01, y: -0.01, radius: 0.29, color: "primary", fill: false } } };
var { paths: ib, texts: lb, bounds: ir, refblocks: k1, circles: pb } = j1;
var Xt = s({ primitives: [...Object.values(ib), ...Object.values(pb), { type: "text", text: "{REF}", x: 0, y: -0.3594553499999995, anchor: "middle_top" }, { type: "text", text: "{VAL}", x: 0, y: 0.35, anchor: "middle_bottom" }, { ...lb.left1, anchor: "center", y: 0.02, fontSize: 0.2 }], ports: [{ ...k1.left1, labels: ["1"] }, { ...k1.right1, labels: ["2"] }], size: { width: ir.width, height: ir.height }, center: { x: ir.centerX, y: ir.centerY } });
var { 5: ab, ...yb } = Xt.primitives;
function xb(t) {
  return typeof t == "object";
}
var z1 = r({ ...Xt, primitives: Object.values(yb).filter(xb) });
var O1 = { ...z1, primitives: [...z1.primitives, ab] };
var ct = { paths: { "path28-2": { type: "path", points: [{ x: 0.19, y: 0 }, { x: 0, y: 0.09 }], color: "primary", fill: false }, "path28-2-6": { type: "path", points: [{ x: 0.19, y: 0 }, { x: 0, y: -0.09 }], color: "primary", fill: false }, "path29-3": { type: "path", points: [{ x: 0.19, y: 0 }, { x: -0.23, y: 0 }], color: "primary", fill: false } }, texts: { right1: { type: "text", text: "{REF}", x: 0.25, y: 0 } }, refblocks: { left1: { x: -0.23, y: 0 } }, bounds: { minX: -0.25, maxX: 0.25, minY: -0.09, maxY: 0.09, width: 0.5, height: 0.19, centerX: 0, centerY: 0 }, circles: {} };
function Y(t, o) {
  let { width: i, height: l } = t.size, a = 1, y = 1;
  o.width !== undefined && o.height !== undefined ? (a = o.width / i, y = o.height / l) : o.width !== undefined ? a = y = o.width / i : o.height !== undefined && (a = y = o.height / l);
  let n = t.primitives.map((m) => {
    switch (m.type) {
      case "path":
        return { ...m, points: m.points.map((c) => ({ x: c.x * a, y: c.y * y })) };
      case "text":
        return { ...m, x: m.x * a, y: m.y * y, fontSize: m.fontSize ? m.fontSize * a : undefined };
      case "circle":
        return { ...m, x: m.x * a, y: m.y * y, radius: m.radius * a };
      case "box":
        return { ...m, x: m.x * a, y: m.y * y, width: m.width * a, height: m.height * y };
      default:
        return m;
    }
  });
  return { ...t, primitives: n, center: { x: t.center.x * a, y: t.center.y * y }, ports: t.ports.map((m) => ({ ...m, x: m.x * a, y: m.y * y })), size: { width: i * a, height: l * y } };
}
var mb = e(ct).rotateRightFacingSymbol("down").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_top").build();
var J1 = Y(mb, { width: 0.24, height: 0.23 });
var nb = e(ct).rotateRightFacingSymbol("left").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_right").build();
var $1 = Y(nb, { width: 0.23, height: 0.24 });
var fb = e(ct).rotateRightFacingSymbol("right").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_left").build();
var M1 = Y(fb, { width: 0.23, height: 0.24 });
var hb = e(ct).rotateRightFacingSymbol("up").labelPort("left1", ["1"]).changeTextAnchor("{REF}", "middle_bottom").build();
var C1 = Y(hb, { width: 0.24, height: 0.23 });
var Nl = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0.03 }, { x: -0.3, y: 0.03 }], color: "primary", fill: false }, "path11-5-5": { type: "path", points: [{ x: 0.1, y: 0.13 }, { x: 0, y: -0.06 }, { x: -0.11, y: 0.13 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0.03 }, { x: 0.54, y: 0.03 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.02, y: 0.4 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: -0.4 } }, refblocks: { left1: { x: -0.54, y: 0.03 }, right1: { x: 0.54, y: 0.03 } }, bounds: { minX: -0.57, maxX: 0.57, minY: -0.4, maxY: 0.4, width: 1.14, height: 0.8, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: 0, y: 0.04, radius: 0.29, color: "primary", fill: false } } };
var lr = e(Nl).changeTextAnchor("{VAL}", "middle_top").labelPort("left1", ["1"]).labelPort("right1", ["2"]).changeTextAnchor("{REF}", "middle_bottom").build();
var N1 = r(lr);
var I1 = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0 }, { x: -0.3, y: 0 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0 }, { x: 0.54, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.18, y: -0.36 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: 0.43 }, left1: { type: "text", text: "Wh", x: 0, y: -0.02 } }, refblocks: { left1: { x: -0.54, y: 0 }, right1: { x: 0.54, y: 0 } }, bounds: { minX: -0.53, maxX: 0.53, minY: 0, maxY: 0, width: 1.06, height: 1, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: -0.01, y: -0.01, radius: 0.29, color: "primary", fill: false } } };
var { paths: bb, texts: _b, bounds: pr, refblocks: B1, circles: gb } = I1;
var Lt = s({ primitives: [...Object.values(bb), ...Object.values(gb), { type: "text", text: "{REF}", x: 0, y: -0.3594553499999995, anchor: "middle_top" }, { type: "text", text: "{VAL}", x: 0, y: 0.35, anchor: "middle_bottom" }, { ..._b.left1, anchor: "center", y: 0.01, fontSize: 0.2 }], ports: [{ ...B1.left1, labels: ["1"] }, { ...B1.right1, labels: ["2"] }], size: { width: pr.width, height: pr.height }, center: { x: pr.centerX, y: pr.centerY } });
var { 5: ub, ...vb } = Lt.primitives;
function wb(t) {
  return typeof t == "object";
}
var q1 = r({ ...Lt, primitives: Object.values(vb).filter(wb) });
var D1 = { ...q1, primitives: [...q1.primitives, ub] };
var G1 = { paths: { path11: { type: "path", points: [{ x: -0.54, y: 0 }, { x: -0.3, y: 0 }], color: "primary", fill: false }, path12: { type: "path", points: [{ x: 0.29, y: 0 }, { x: 0.54, y: 0 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.18, y: -0.36 }, bottom1: { type: "text", text: "{VAL}", x: -0.01, y: 0.43 }, left1: { type: "text", text: "W", x: 0, y: -0.02 } }, refblocks: { left1: { x: -0.54, y: 0 }, right1: { x: 0.54, y: 0 } }, bounds: { minX: -0.53, maxX: 0.53, minY: 0, maxY: 0, width: 1.06, height: 1, centerX: 0, centerY: 0 }, circles: { path1: { type: "circle", x: -0.01, y: -0.01, radius: 0.29, color: "primary", fill: false } } };
var { paths: Pb, texts: Sb, bounds: ar, refblocks: U1, circles: Fb } = G1;
var Vt = s({ primitives: [...Object.values(Pb), ...Object.values(Fb), { type: "text", text: "{REF}", x: 0, y: -0.3594553499999995, anchor: "middle_top" }, { type: "text", text: "{VAL}", x: 0, y: 0.35, anchor: "middle_bottom" }, { ...Sb.left1, anchor: "center", y: 0.01, fontSize: 0.3 }], ports: [{ ...U1.left1, labels: ["1"] }, { ...U1.right1, labels: ["2"] }], size: { width: ar.width, height: ar.height }, center: { x: ar.centerX, y: ar.centerY } });
var { 5: Rb, ...Tb } = Vt.primitives;
function Eb(t) {
  return typeof t == "object";
}
var W1 = r({ ...Vt, primitives: Object.values(Tb).filter(Eb) });
var H1 = { ...W1, primitives: [...W1.primitives, Rb] };
var Z1 = { paths: { path40: { type: "path", points: [{ x: 0.14, y: 0.04 }, { x: -0.12, y: -0.09 }], color: "primary", fill: false }, path41: { type: "path", points: [{ x: -0.12, y: 0.18 }, { x: 0.14, y: 0.04 }], color: "primary", fill: false }, path42: { type: "path", points: [{ x: -0.12, y: -0.09 }, { x: -0.12, y: 0.18 }], color: "primary", fill: false }, path43: { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.14, y: -0.09 }], color: "primary", fill: false }, path44: { type: "path", points: [{ x: -0.12, y: 0.04 }, { x: -0.52, y: 0.04 }], color: "primary", fill: false }, "path44-0": { type: "path", points: [{ x: 0.52, y: 0.04 }, { x: 0.15, y: 0.04 }], color: "primary", fill: false }, "path43-8": { type: "path", points: [{ x: 0.14, y: 0.18 }, { x: 0.08, y: 0.18 }], color: "primary", fill: false } }, texts: { top1: { type: "text", text: "{REF}", x: -0.01, y: 0.27 }, bottom1: { type: "text", text: "{VAL}", x: 0, y: -0.27 } }, refblocks: { left1: { x: -0.52, y: 0.04 }, right1: { x: 0.52, y: 0.04 } }, bounds: { minX: -0.55, maxX: 0.55, minY: -0.27, maxY: 0.27, width: 1.09, height: 0.55, centerX: 0, centerY: 0 }, circles: {} };
var { paths: Xb, texts: Q1, bounds: yr, refblocks: K1, circles: Lb } = Z1;
var xr = s({ primitives: [...Object.values(Xb), ...Object.values(Lb), { ...Q1.top1, anchor: "middle_bottom" }, { ...Q1.bottom1, anchor: "middle_top" }], ports: [{ ...K1.left1, labels: ["1"] }, { ...K1.right1, labels: ["2"] }], size: { width: yr.width, height: yr.height }, center: { x: yr.centerX, y: yr.centerY } });
var Il = r(xr);
var Vb = Il.primitives.find((t) => t.type === "text" && t.text === "{REF}");
var jb = Il.primitives.find((t) => t.type === "text" && t.text === "{VAL}");
Vb.anchor = "middle_left";
jb.anchor = "middle_right";
var tf = Il;
var ef = { ac_voltmeter_down: Wl, ac_voltmeter_horz: Zl, ac_voltmeter_left: Kl, ac_voltmeter_right: ep, ac_voltmeter_up: op, ac_voltmeter_vert: lp, avalanche_diode_down: ap, avalanche_diode_horz: yp, avalanche_diode_left: sp, avalanche_diode_right: mp, avalanche_diode_up: fp, avalanche_diode_vert: cp, backward_diode_down: bp, backward_diode_left: Ut, backward_diode_right: up, backward_diode_up: vp, battery_horz: Zt, battery_vert: Sp, boxresistor_down: Tp, boxresistor_left: Xp, boxresistor_right: jp, boxresistor_small_down: zp, boxresistor_small_left: Jp, boxresistor_small_right: Mp, boxresistor_small_up: Np, boxresistor_up: qp, bridged_ground_down: Up, bridged_ground_left: Zp, bridged_ground_right: re, bridged_ground_up: ta, capacitor_down: ra, capacitor_left: oa, capacitor_polarized_down: la, capacitor_polarized_left: pa, capacitor_polarized_right: ya, capacitor_polarized_up: sa, capacitor_right: ma, capacitor_up: fa, constant_current_diode_down: ca, constant_current_diode_horz: da, constant_current_diode_left: _a, constant_current_diode_right: ga, constant_current_diode_up: va, constant_current_diode_vert: Aa, crystal_4pin_down: Pa, crystal_4pin_left: Sa, crystal_4pin_right: Fa, crystal_4pin_up: Ra, crystal_down: Ea, crystal_left: Ya, crystal_right: Xa, crystal_up: Va, darlington_pair_transistor_down: ja, darlington_pair_transistor_horz: ka, darlington_pair_transistor_left: za, darlington_pair_transistor_right: Oa, darlington_pair_transistor_up: Ja, darlington_pair_transistor_vert: $a, dc_ammeter_horz: Pt, dc_ammeter_vert: Ia, dc_voltmeter_down: qa, dc_voltmeter_horz: Ga, dc_voltmeter_left: Wa, dc_voltmeter_right: Za, dc_voltmeter_up: Ka, dc_voltmeter_vert: ey, diac_down: ry, diac_horz: oy, diac_left: iy, diac_right: ly, diac_up: py, diac_vert: ay, digital_ground_down: xy, digital_ground_left: my, digital_ground_right: fy, digital_ground_up: cy, diode_down: by, diode_left: _y, diode_right: C, diode_up: gy, dpdt_normally_closed_switch_down: vy, dpdt_normally_closed_switch_left: wy, dpdt_normally_closed_switch_right: N, dpdt_normally_closed_switch_up: Ay, dpdt_switch_down: Sy, dpdt_switch_left: Fy, dpdt_switch_right: I, dpdt_switch_up: Ry, dpst_normally_closed_switch_down: Ey, dpst_normally_closed_switch_left: Yy, dpst_normally_closed_switch_right: B, dpst_normally_closed_switch_up: Xy, dpst_switch_down: Vy, dpst_switch_left: jy, dpst_switch_right: q, dpst_switch_up: ky, ferrite_bead_down: Oy, ferrite_bead_left: Jy, ferrite_bead_right: Te, ferrite_bead_up: Re, filled_diode_down: My, filled_diode_horz: Ny, filled_diode_left: By, filled_diode_right: Dy, filled_diode_up: Uy, filled_diode_vert: Hy, frequency_meter_horz: St, frequency_meter_vert: tx, fuse_horz: Oe, fuse_vert: ox, ground_down: ix, ground_horz: lx, ground_left: px, ground_right: ax, ground_up: yx, ground_vert: xx, gunn_diode_horz: sx, gunn_diode_vert: mx, icled_down: fx, icled_left: hx, icled_right: D, icled_up: cx, igbt_transistor_horz: Je, igbt_transistor_vert: _x, illuminated_push_button_normally_open_horz: $e, illuminated_push_button_normally_open_vert: wx, inductor_down: Fx, inductor_left: Rx, inductor_right: ut, inductor_up: Ce, laser_diode_down: Tx, laser_diode_left: Ex, laser_diode_right: G, laser_diode_up: Yx, led_down: jx, led_left: kx, led_right: vt, led_up: Ie, light_dependent_resistor_horz: qe, light_dependent_resistor_vert: Cx, mosfet_depletion_normally_on_horz: Ge, mosfet_depletion_normally_on_vert: qx, mushroom_head_normally_open_momentary_horz: We, mushroom_head_normally_open_momentary_vert: Wx, n_channel_d_mosfet_transistor_horz: Qe, n_channel_d_mosfet_transistor_vert: ts, n_channel_e_mosfet_transistor_horz: t0, n_channel_e_mosfet_transistor_vert: ls, njfet_transistor_horz: r0, njfet_transistor_vert: ss, not_connected_down: fs, not_connected_left: hs, not_connected_right: U, not_connected_up: cs, npn_bipolar_transistor_down: ds, npn_bipolar_transistor_horz: bs, npn_bipolar_transistor_left: _s, npn_bipolar_transistor_right: gs, npn_bipolar_transistor_up: us, npn_bipolar_transistor_vert: vs, opamp_no_power_down: As, opamp_no_power_left: Ps, opamp_no_power_right: W, opamp_no_power_up: Ss, opamp_with_power_down: Rs, opamp_with_power_left: Ts, opamp_with_power_right: H, opamp_with_power_up: Es, p_channel_d_mosfet_transistor_horz: x0, p_channel_d_mosfet_transistor_vert: js, p_channel_e_mosfet_transistor_horz: m0, p_channel_e_mosfet_transistor_vert: $s, photodiode_horz: n0, photodiode_vert: Is, pjfet_transistor_horz: h0, pjfet_transistor_vert: Us, pnp_bipolar_transistor_down: Ws, pnp_bipolar_transistor_horz: Hs, pnp_bipolar_transistor_left: Zs, pnp_bipolar_transistor_right: Qs, pnp_bipolar_transistor_up: Ks, pnp_bipolar_transistor_vert: tm, potentiometer_horz: v0, potentiometer_vert: im, potentiometer2_down: ym, potentiometer2_left: xm, potentiometer2_right: Z, potentiometer2_up: sm, potentiometer3_down: mm, potentiometer3_left: nm, potentiometer3_right: fm, potentiometer3_up: hm, power_factor_meter_horz: R0, power_factor_meter_vert: _m, push_button_normally_closed_momentary_horz: E0, push_button_normally_closed_momentary_vert: wm, push_button_normally_open_momentary_horz: X0, push_button_normally_open_momentary_vert: Fm, rail_down: Tm, rail_left: Ym, rail_right: Lm, rail_up: jm, rectifier_diode_horz: j0, rectifier_diode_vert: Om, resistor_down: $m, resistor_left: Cm, resistor_right: Im, resistor_up: qm, resonator_down: Gm, resonator_horz: N0, resonator_left: Um, resonator_right: et, resonator_up: Wm, resonator_vert: Hm, schottky_diode_down: Qm, schottky_diode_left: Km, schottky_diode_right: rt, schottky_diode_up: tn, silicon_controlled_rectifier_horz: I0, silicon_controlled_rectifier_vert: on, solderjumper2_bridged12_down: ln, solderjumper2_bridged12_left: pn, solderjumper2_bridged12_right: an, solderjumper2_bridged12_up: yn, solderjumper2_down: xn, solderjumper2_left: sn, solderjumper2_right: mn, solderjumper2_up: nn, solderjumper3_bridged12_down: fn, solderjumper3_bridged12_left: hn, solderjumper3_bridged12_right: cn, solderjumper3_bridged12_up: dn, solderjumper3_bridged123_down: bn, solderjumper3_bridged123_left: _n, solderjumper3_bridged123_right: gn, solderjumper3_bridged123_up: un, solderjumper3_bridged23_down: vn, solderjumper3_bridged23_left: wn, solderjumper3_bridged23_right: An, solderjumper3_bridged23_up: Pn, solderjumper3_down: Sn, solderjumper3_left: Fn, solderjumper3_right: Rn, solderjumper3_up: Tn, spdt_normally_closed_switch_down: Yn, spdt_normally_closed_switch_left: Xn, spdt_normally_closed_switch_right: xt, spdt_normally_closed_switch_up: Ln, spdt_switch_down: jn, spdt_switch_left: kn, spdt_switch_right: st, spdt_switch_up: zn, spst_normally_closed_switch_down: On, spst_normally_closed_switch_left: Jn, spst_normally_closed_switch_right: mt, spst_normally_closed_switch_up: $n, spst_switch_down: Mn, spst_switch_left: Cn, spst_switch_right: nt, spst_switch_up: Nn, square_wave_down: In, square_wave_left: Bn, square_wave_right: qn, square_wave_up: Dn, step_recovery_diode_horz: B0, step_recovery_diode_vert: Gn, tachometer_horz: Yt, tachometer_vert: Zn, testpoint_down: t1, testpoint_left: e1, testpoint_right: ht, testpoint_up: i1, tilted_ground_down: p1, tilted_ground_left: a1, tilted_ground_right: wt, tilted_ground_up: D0, triac_horz: G0, triac_vert: s1, tunnel_diode_horz: W0, tunnel_diode_vert: h1, unijunction_transistor_horz: Z0, unijunction_transistor_vert: u1, usbc: w1, var_meter_horz: K0, var_meter_vert: S1, varactor_diode_horz: er, varactor_diode_vert: E1, varistor_horz: or, varistor_vert: V1, varmeter_horz: Xt, varmeter_vert: O1, vcc_down: J1, vcc_left: $1, vcc_right: M1, vcc_up: C1, volt_meter_horz: lr, volt_meter_vert: N1, watt_hour_meter_horz: Lt, watt_hour_meter_vert: D1, wattmeter_horz: Vt, wattmeter_vert: H1, zener_diode_horz: xr, zener_diode_vert: tf };
var gM = Object.fromEntries(Object.keys(ef).map((t) => [t, t]));

// node_modules/circuit-to-svg/dist/index.js
var import_svgson5 = __toESM(require_svgson_umd(), 1);
var import_svgson6 = __toESM(require_svgson_umd(), 1);
var import_svgson7 = __toESM(require_svgson_umd(), 1);
function createSvgObjectsFromPcbTraceError(pcbTraceError, circuitJson, ctx) {
  const { transform: transform3, shouldDrawErrors } = ctx;
  if (!shouldDrawErrors)
    return [];
  const { pcb_port_ids } = pcbTraceError;
  const port1 = circuitJson.find((el2) => el2.type === "pcb_port" && el2.pcb_port_id === pcb_port_ids?.[0]);
  const port2 = circuitJson.find((el2) => el2.type === "pcb_port" && el2.pcb_port_id === pcb_port_ids?.[1]);
  if (!port1 || !port2) {
    const viaIdMatch = pcbTraceError.message?.match(/pcb_via\[#?(pcb_via_\d+)\]/);
    const viaId = viaIdMatch?.[1];
    const via = circuitJson.find((el2) => el2.type === "pcb_via" && el2.pcb_via_id === viaId);
    if (via && via.type === "pcb_via") {
      return createSvgObjectsForViaTraceError(pcbTraceError, via, ctx);
    }
    if (pcbTraceError.center) {
      const screenCenter = applyToPoint(transform3, {
        x: pcbTraceError.center.x,
        y: pcbTraceError.center.y
      });
      return [
        {
          name: "rect",
          type: "element",
          attributes: {
            x: (screenCenter.x - 5).toString(),
            y: (screenCenter.y - 5).toString(),
            width: "10",
            height: "10",
            fill: "red",
            transform: `rotate(45 ${screenCenter.x} ${screenCenter.y})`
          },
          children: [],
          value: ""
        },
        {
          name: "text",
          type: "element",
          attributes: {
            x: screenCenter.x.toString(),
            y: (screenCenter.y - 15).toString(),
            fill: "red",
            "font-family": "sans-serif",
            "font-size": "12",
            "text-anchor": "middle"
          },
          children: [
            {
              type: "text",
              value: pcbTraceError.message || "Pcb Trace Error",
              name: "",
              attributes: {},
              children: []
            }
          ],
          value: ""
        }
      ];
    } else
      return [];
  }
  const screenPort1 = applyToPoint(transform3, {
    x: port1.x,
    y: port1.y
  });
  const screenPort2 = applyToPoint(transform3, {
    x: port2.x,
    y: port2.y
  });
  const errorCenter = {
    x: (screenPort1.x + screenPort2.x) / 2,
    y: (screenPort1.y + screenPort2.y) / 2
  };
  if (isNaN(screenPort1.x) || isNaN(screenPort1.y) || isNaN(screenPort2.x) || isNaN(screenPort2.y) || isNaN(errorCenter.x) || isNaN(errorCenter.y)) {
    return [];
  }
  const svgObjects = [
    {
      name: "line",
      type: "element",
      attributes: {
        x1: screenPort1.x.toString(),
        y1: screenPort1.y.toString(),
        x2: errorCenter.x.toString(),
        y2: errorCenter.y.toString(),
        stroke: "red",
        "stroke-width": "1.5",
        "stroke-dasharray": "2,2"
      },
      children: [],
      value: ""
    },
    {
      name: "line",
      type: "element",
      attributes: {
        x1: errorCenter.x.toString(),
        y1: errorCenter.y.toString(),
        x2: screenPort2.x.toString(),
        y2: screenPort2.y.toString(),
        stroke: "red",
        "stroke-width": "1.5",
        "stroke-dasharray": "2,2"
      },
      children: [],
      value: ""
    },
    {
      name: "rect",
      type: "element",
      attributes: {
        x: (errorCenter.x - 5).toString(),
        y: (errorCenter.y - 5).toString(),
        width: "10",
        height: "10",
        fill: "red",
        transform: `rotate(45 ${errorCenter.x} ${errorCenter.y})`
      },
      children: [],
      value: ""
    },
    {
      name: "text",
      type: "element",
      attributes: {
        x: errorCenter.x.toString(),
        y: (errorCenter.y - 15).toString(),
        fill: "red",
        "font-family": "sans-serif",
        "font-size": "12",
        "text-anchor": "middle"
      },
      children: [
        {
          type: "text",
          value: pcbTraceError.message || "Pcb Trace Error",
          name: "",
          attributes: {},
          children: []
        }
      ],
      value: ""
    }
  ];
  return svgObjects;
}
function createSvgObjectsForViaTraceError(pcbTraceError, via, ctx) {
  const { transform: transform3 } = ctx;
  if (pcbTraceError.center && via) {
    const screenCenter = applyToPoint(transform3, {
      x: pcbTraceError.center.x,
      y: pcbTraceError.center.y
    });
    const screenVia = applyToPoint(transform3, {
      x: via.x,
      y: via.y
    });
    const dx2 = screenVia.x - screenCenter.x;
    const dy2 = screenVia.y - screenCenter.y;
    const dist = Math.sqrt(dx2 * dx2 + dy2 * dy2);
    const angle = Math.atan2(dy2, dx2) * 180 / Math.PI;
    const margin = 10;
    const boxWidth = dist + margin * 2;
    const boxHeight = 20;
    const midX = (screenCenter.x + screenVia.x) / 2;
    const midY = (screenCenter.y + screenVia.y) / 2;
    return [
      {
        name: "rect",
        type: "element",
        attributes: {
          x: (midX - boxWidth / 2).toString(),
          y: (midY - boxHeight / 2).toString(),
          width: boxWidth.toString(),
          height: boxHeight.toString(),
          fill: "none",
          stroke: "red",
          "stroke-width": "1",
          "stroke-dasharray": "3,2",
          transform: `rotate(${angle} ${midX} ${midY})`
        },
        children: [],
        value: ""
      },
      {
        name: "rect",
        type: "element",
        attributes: {
          x: (midX - 5).toString(),
          y: (midY - 5).toString(),
          width: "10",
          height: "10",
          fill: "red",
          transform: `rotate(45 ${midX} ${midY})`
        },
        children: [],
        value: ""
      },
      {
        name: "text",
        type: "element",
        attributes: {
          x: midX.toString(),
          y: (midY - boxHeight / 2 - 5).toString(),
          fill: "red",
          "font-family": "sans-serif",
          "font-size": "12",
          "text-anchor": "middle"
        },
        children: [
          {
            type: "text",
            value: pcbTraceError.message || "Pcb Trace Error",
            name: "",
            attributes: {},
            children: []
          }
        ],
        value: ""
      }
    ];
  }
  return [];
}
function createSvgObjectsFromPcbFabricationNotePath(fabNotePath, ctx) {
  const { transform: transform3, layer: layerFilter } = ctx;
  if (!fabNotePath.route || !Array.isArray(fabNotePath.route))
    return [];
  const firstPoint = fabNotePath.route[0];
  const lastPoint = fabNotePath.route[fabNotePath.route.length - 1];
  const isClosed = firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y;
  const path = fabNotePath.route.slice(0, isClosed ? -1 : undefined).map((point2, index) => {
    const [x, y] = applyToPoint(transform3, [point2.x, point2.y]);
    return index === 0 ? `M ${x} ${y}` : `L ${x} ${y}`;
  }).join(" ") + (isClosed ? " Z" : "");
  return [
    {
      name: "path",
      type: "element",
      attributes: {
        class: "pcb-fabrication-note-path",
        stroke: fabNotePath.color || "rgba(255,255,255,0.5)",
        fill: "none",
        d: path,
        "stroke-width": (fabNotePath.stroke_width * Math.abs(transform3.a)).toString(),
        "data-pcb-component-id": fabNotePath.pcb_component_id,
        "data-pcb-fabrication-note-path-id": fabNotePath.pcb_fabrication_note_path_id
      },
      value: "",
      children: []
    }
  ];
}
function createSvgObjectsFromPcbFabricationNoteText(pcbFabNoteText, ctx) {
  const { transform: transform3, layer: layerFilter } = ctx;
  const {
    anchor_position,
    anchor_alignment,
    text,
    font_size = 1,
    layer = "top",
    color
  } = pcbFabNoteText;
  if (layerFilter && layer !== layerFilter)
    return [];
  if (!anchor_position || typeof anchor_position.x !== "number" || typeof anchor_position.y !== "number") {
    console.error("Invalid anchor_position:", anchor_position);
    return [];
  }
  const [transformedX, transformedY] = applyToPoint(transform3, [
    anchor_position.x,
    anchor_position.y
  ]);
  const transformedFontSize = font_size * Math.abs(transform3.a);
  const textTransform = compose(translate(transformedX, transformedY), rotate(Math.PI / 180));
  const svgObject = {
    name: "text",
    type: "element",
    attributes: {
      x: "0",
      y: "0",
      "font-family": "Arial, sans-serif",
      "font-size": transformedFontSize.toString(),
      "text-anchor": "middle",
      "dominant-baseline": "central",
      transform: toString(textTransform),
      class: "pcb-fabrication-note-text",
      fill: color || "rgba(255,255,255,0.5)"
    },
    children: [
      {
        type: "text",
        value: text,
        name: "",
        attributes: {},
        children: []
      }
    ],
    value: ""
  };
  return [svgObject];
}
function createSvgObjectsFromPcbPlatedHole(hole, ctx) {
  const { transform: transform3, colorMap: colorMap2 } = ctx;
  const [x, y] = applyToPoint(transform3, [hole.x, hole.y]);
  if (hole.shape === "pill") {
    const scaledOuterWidth = hole.outer_width * Math.abs(transform3.a);
    const scaledOuterHeight = hole.outer_height * Math.abs(transform3.a);
    const scaledHoleWidth = hole.hole_width * Math.abs(transform3.a);
    const scaledHoleHeight = hole.hole_height * Math.abs(transform3.a);
    const outerRadiusX = scaledOuterWidth / 2;
    const outerRadiusY = scaledOuterHeight / 2;
    const innerRadiusX = scaledHoleWidth / 2;
    const innerRadiusY = scaledHoleHeight / 2;
    const straightLength = scaledOuterHeight - scaledOuterWidth;
    return [
      {
        name: "g",
        type: "element",
        children: [
          {
            name: "path",
            type: "element",
            attributes: {
              class: "pcb-hole-outer",
              fill: colorMap2.copper.top,
              d: `M${x - outerRadiusX},${y - straightLength / 2} v${straightLength} a${outerRadiusX},${outerRadiusX} 0 0 0 ${scaledOuterWidth},0 v-${straightLength} a${outerRadiusX},${outerRadiusX} 0 0 0 -${scaledOuterWidth},0 z`
            },
            value: "",
            children: []
          },
          {
            name: "path",
            type: "element",
            attributes: {
              class: "pcb-hole-inner",
              fill: colorMap2.drill,
              d: `M${x - innerRadiusX},${y - (scaledHoleHeight - scaledHoleWidth) / 2} v${scaledHoleHeight - scaledHoleWidth} a${innerRadiusX},${innerRadiusX} 0 0 0 ${scaledHoleWidth},0 v-${scaledHoleHeight - scaledHoleWidth} a${innerRadiusX},${innerRadiusX} 0 0 0 -${scaledHoleWidth},0 z`
            },
            value: "",
            children: []
          }
        ],
        value: "",
        attributes: {}
      }
    ];
  }
  if (hole.shape === "circle") {
    const scaledOuterWidth = hole.outer_diameter * Math.abs(transform3.a);
    const scaledOuterHeight = hole.outer_diameter * Math.abs(transform3.a);
    const scaledHoleWidth = hole.hole_diameter * Math.abs(transform3.a);
    const scaledHoleHeight = hole.hole_diameter * Math.abs(transform3.a);
    const outerRadius = Math.min(scaledOuterWidth, scaledOuterHeight) / 2;
    const innerRadius = Math.min(scaledHoleWidth, scaledHoleHeight) / 2;
    return [
      {
        name: "g",
        type: "element",
        children: [
          {
            name: "circle",
            type: "element",
            attributes: {
              class: "pcb-hole-outer",
              fill: colorMap2.copper.top,
              cx: x.toString(),
              cy: y.toString(),
              r: outerRadius.toString()
            },
            value: "",
            children: []
          },
          {
            name: "circle",
            type: "element",
            attributes: {
              class: "pcb-hole-inner",
              fill: colorMap2.drill,
              cx: x.toString(),
              cy: y.toString(),
              r: innerRadius.toString()
            },
            value: "",
            children: []
          }
        ],
        value: "",
        attributes: {}
      }
    ];
  }
  if (hole.shape === "circular_hole_with_rect_pad") {
    const scaledHoleDiameter = hole.hole_diameter * Math.abs(transform3.a);
    const scaledRectPadWidth = hole.rect_pad_width * Math.abs(transform3.a);
    const scaledRectPadHeight = hole.rect_pad_height * Math.abs(transform3.a);
    const holeRadius = scaledHoleDiameter / 2;
    return [
      {
        name: "g",
        type: "element",
        children: [
          {
            name: "rect",
            type: "element",
            attributes: {
              class: "pcb-hole-outer-pad",
              fill: colorMap2.copper.top,
              x: (x - scaledRectPadWidth / 2).toString(),
              y: (y - scaledRectPadHeight / 2).toString(),
              width: scaledRectPadWidth.toString(),
              height: scaledRectPadHeight.toString()
            },
            value: "",
            children: []
          },
          {
            name: "circle",
            type: "element",
            attributes: {
              class: "pcb-hole-inner",
              fill: colorMap2.drill,
              cx: x.toString(),
              cy: y.toString(),
              r: holeRadius.toString()
            },
            value: "",
            children: []
          }
        ],
        value: "",
        attributes: {}
      }
    ];
  }
  if (hole.shape === "pill_hole_with_rect_pad") {
    const scaledRectPadWidth = hole.rect_pad_width * Math.abs(transform3.a);
    const scaledRectPadHeight = hole.rect_pad_height * Math.abs(transform3.a);
    const scaledHoleHeight = hole.hole_height * Math.abs(transform3.a);
    const scaledHoleWidth = hole.hole_width * Math.abs(transform3.a);
    const holeRadius = Math.min(scaledHoleHeight, scaledHoleWidth) / 2;
    return [
      {
        name: "g",
        type: "element",
        children: [
          {
            name: "rect",
            type: "element",
            attributes: {
              class: "pcb-hole-outer-pad",
              fill: colorMap2.copper.top,
              x: (x - scaledRectPadWidth / 2).toString(),
              y: (y - scaledRectPadHeight / 2).toString(),
              width: scaledRectPadWidth.toString(),
              height: scaledRectPadHeight.toString()
            },
            value: "",
            children: []
          },
          {
            name: "rect",
            type: "element",
            attributes: {
              class: "pcb-hole-inner",
              fill: colorMap2.drill,
              x: (x - scaledHoleWidth / 2).toString(),
              y: (y - scaledHoleHeight / 2).toString(),
              width: scaledHoleWidth.toString(),
              height: scaledHoleHeight.toString(),
              rx: holeRadius.toString(),
              ry: holeRadius.toString()
            },
            value: "",
            children: []
          }
        ],
        value: "",
        attributes: {}
      }
    ];
  }
  if (hole.shape === "rotated_pill_hole_with_rect_pad") {
    const scaledRectPadWidth = hole.rect_pad_width * Math.abs(transform3.a);
    const scaledRectPadHeight = hole.rect_pad_height * Math.abs(transform3.a);
    const scaledHoleHeight = hole.hole_height * Math.abs(transform3.a);
    const scaledHoleWidth = hole.hole_width * Math.abs(transform3.a);
    const holeRadius = Math.min(scaledHoleHeight, scaledHoleWidth) / 2;
    return [
      {
        name: "g",
        type: "element",
        children: [
          {
            name: "rect",
            type: "element",
            attributes: {
              class: "pcb-hole-outer-pad",
              fill: colorMap2.copper.top,
              x: (-scaledRectPadWidth / 2).toString(),
              y: (-scaledRectPadHeight / 2).toString(),
              width: scaledRectPadWidth.toString(),
              height: scaledRectPadHeight.toString(),
              transform: `translate(${x} ${y}) rotate(${-hole.rect_ccw_rotation})`
            },
            value: "",
            children: []
          },
          {
            name: "rect",
            type: "element",
            attributes: {
              class: "pcb-hole-inner",
              fill: colorMap2.drill,
              x: (-scaledHoleWidth / 2).toString(),
              y: (-scaledHoleHeight / 2).toString(),
              width: scaledHoleWidth.toString(),
              height: scaledHoleHeight.toString(),
              rx: holeRadius.toString(),
              ry: holeRadius.toString(),
              transform: `translate(${x} ${y}) rotate(${-hole.hole_ccw_rotation})`
            },
            value: "",
            children: []
          }
        ],
        value: "",
        attributes: {}
      }
    ];
  }
  return [];
}
function createSvgObjectsFromPcbSilkscreenPath(silkscreenPath, ctx) {
  const { transform: transform3, layer: layerFilter, colorMap: colorMap2 } = ctx;
  if (!silkscreenPath.route || !Array.isArray(silkscreenPath.route))
    return [];
  let path = silkscreenPath.route.map((point2, index) => {
    const [x, y] = applyToPoint(transform3, [point2.x, point2.y]);
    return index === 0 ? `M ${x} ${y}` : `L ${x} ${y}`;
  }).join(" ");
  const firstPoint = silkscreenPath.route[0];
  const lastPoint = silkscreenPath.route[silkscreenPath.route.length - 1];
  if (firstPoint && lastPoint && firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y) {
    path += " Z";
  }
  const layer = silkscreenPath.layer || "top";
  if (layerFilter && layer !== layerFilter)
    return [];
  const color = layer === "bottom" ? colorMap2.silkscreen.bottom : colorMap2.silkscreen.top;
  return [
    {
      name: "path",
      type: "element",
      attributes: {
        class: `pcb-silkscreen pcb-silkscreen-${layer}`,
        d: path,
        fill: "none",
        stroke: color,
        "stroke-width": (silkscreenPath.stroke_width * Math.abs(transform3.a)).toString(),
        "stroke-linecap": "round",
        "stroke-linejoin": "round",
        "data-pcb-component-id": silkscreenPath.pcb_component_id,
        "data-pcb-silkscreen-path-id": silkscreenPath.pcb_silkscreen_path_id
      },
      value: "",
      children: []
    }
  ];
}
function createSvgObjectsFromPcbSilkscreenText(pcbSilkscreenText, ctx) {
  const { transform: transform3, layer: layerFilter, colorMap: colorMap2 } = ctx;
  const {
    anchor_position,
    text,
    font_size = 1,
    layer = "top",
    ccw_rotation = 0,
    anchor_alignment = "center"
  } = pcbSilkscreenText;
  if (layerFilter && layer !== layerFilter)
    return [];
  if (!anchor_position || typeof anchor_position.x !== "number" || typeof anchor_position.y !== "number") {
    console.error("Invalid anchor_position:", anchor_position);
    return [];
  }
  const [transformedX, transformedY] = applyToPoint(transform3, [
    anchor_position.x,
    anchor_position.y
  ]);
  const transformedFontSize = font_size * Math.abs(transform3.a);
  let textAnchor = "middle";
  let dominantBaseline = "central";
  let dx2 = 0;
  let dy2 = 0;
  switch (anchor_alignment) {
    case "top_left":
      textAnchor = "start";
      dominantBaseline = "text-before-edge";
      break;
    case "top_center":
      textAnchor = "middle";
      dominantBaseline = "text-before-edge";
      break;
    case "top_right":
      textAnchor = "end";
      dominantBaseline = "text-before-edge";
      break;
    case "center_left":
      textAnchor = "start";
      dominantBaseline = "central";
      break;
    case "center_right":
      textAnchor = "end";
      dominantBaseline = "central";
      break;
    case "bottom_left":
      textAnchor = "start";
      dominantBaseline = "text-after-edge";
      break;
    case "bottom_center":
      textAnchor = "middle";
      dominantBaseline = "text-after-edge";
      break;
    case "bottom_right":
      textAnchor = "end";
      dominantBaseline = "text-after-edge";
      break;
    case "center":
    default:
      textAnchor = "middle";
      dominantBaseline = "central";
      break;
  }
  const textTransform = compose(translate(transformedX, transformedY), rotate(ccw_rotation * Math.PI / 180), ...layer === "bottom" ? [scale(-1, 1)] : []);
  const color = layer === "bottom" ? colorMap2.silkscreen.bottom : colorMap2.silkscreen.top;
  const lines = text.split(`
`);
  const children = lines.length === 1 ? [
    {
      type: "text",
      value: text,
      name: "",
      attributes: {},
      children: []
    }
  ] : lines.map((line, idx) => ({
    type: "element",
    name: "tspan",
    value: "",
    attributes: {
      x: "0",
      ...idx > 0 ? { dy: transformedFontSize.toString() } : {}
    },
    children: [
      {
        type: "text",
        value: line,
        name: "",
        attributes: {},
        children: []
      }
    ]
  }));
  const svgObject = {
    name: "text",
    type: "element",
    attributes: {
      x: "0",
      y: "0",
      dx: dx2.toString(),
      dy: dy2.toString(),
      fill: color,
      "font-family": "Arial, sans-serif",
      "font-size": transformedFontSize.toString(),
      "text-anchor": textAnchor,
      "dominant-baseline": dominantBaseline,
      transform: toString(textTransform),
      class: `pcb-silkscreen-text pcb-silkscreen-${layer}`,
      "data-pcb-silkscreen-text-id": pcbSilkscreenText.pcb_component_id,
      stroke: "none"
    },
    children,
    value: ""
  };
  return [svgObject];
}
function createSvgObjectsFromPcbSilkscreenRect(pcbSilkscreenRect, ctx) {
  const { transform: transform3, layer: layerFilter, colorMap: colorMap2 } = ctx;
  const {
    center,
    width,
    height,
    layer = "top",
    pcb_silkscreen_rect_id,
    stroke_width,
    is_filled,
    has_stroke,
    is_stroke_dashed
  } = pcbSilkscreenRect;
  if (layerFilter && layer !== layerFilter)
    return [];
  if (!center || typeof center.x !== "number" || typeof center.y !== "number" || typeof width !== "number" || typeof height !== "number") {
    console.error("Invalid rectangle data:", { center, width, height });
    return [];
  }
  const [transformedX, transformedY] = applyToPoint(transform3, [
    center.x,
    center.y
  ]);
  const transformedWidth = width * Math.abs(transform3.a);
  const transformedHeight = height * Math.abs(transform3.d);
  const transformedStrokeWidth = stroke_width * Math.abs(transform3.a);
  const color = layer === "bottom" ? colorMap2.silkscreen.bottom : colorMap2.silkscreen.top;
  const attributes = {
    x: (transformedX - transformedWidth / 2).toString(),
    y: (transformedY - transformedHeight / 2).toString(),
    width: transformedWidth.toString(),
    height: transformedHeight.toString(),
    class: `pcb-silkscreen-rect pcb-silkscreen-${layer}`,
    "data-pcb-silkscreen-rect-id": pcb_silkscreen_rect_id
  };
  attributes.fill = is_filled ? color : "none";
  let actualHasStroke;
  if (has_stroke === undefined) {
    actualHasStroke = transformedStrokeWidth > 0;
  } else {
    actualHasStroke = has_stroke;
  }
  if (actualHasStroke) {
    attributes.stroke = color;
    attributes["stroke-width"] = transformedStrokeWidth.toString();
    if (is_stroke_dashed) {
      const dashLength = 0.1 * Math.abs(transform3.a);
      const gapLength = 0.05 * Math.abs(transform3.a);
      attributes["stroke-dasharray"] = `${dashLength} ${gapLength}`;
    }
  } else {
    attributes.stroke = "none";
  }
  const svgObject = {
    name: "rect",
    type: "element",
    attributes,
    value: "",
    children: []
  };
  return [svgObject];
}
function createSvgObjectsFromPcbSilkscreenCircle(pcbSilkscreenCircle, ctx) {
  const { transform: transform3, layer: layerFilter, colorMap: colorMap2 } = ctx;
  const {
    center,
    radius,
    layer = "top",
    pcb_silkscreen_circle_id,
    stroke_width = 1
  } = pcbSilkscreenCircle;
  if (layerFilter && layer !== layerFilter)
    return [];
  if (!center || typeof center.x !== "number" || typeof center.y !== "number" || typeof radius !== "number") {
    console.error("Invalid PCB Silkscreen Circle data:", { center, radius });
    return [];
  }
  const [transformedX, transformedY] = applyToPoint(transform3, [
    center.x,
    center.y
  ]);
  const transformedRadius = radius * Math.abs(transform3.a);
  const transformedStrokeWidth = stroke_width * Math.abs(transform3.a);
  const color = layer === "bottom" ? colorMap2.silkscreen.bottom : colorMap2.silkscreen.top;
  const svgObject = {
    name: "circle",
    type: "element",
    attributes: {
      cx: transformedX.toString(),
      cy: transformedY.toString(),
      r: transformedRadius.toString(),
      class: `pcb-silkscreen-circle pcb-silkscreen-${layer}`,
      stroke: color,
      "stroke-width": transformedStrokeWidth.toString(),
      "data-pcb-silkscreen-circle-id": pcb_silkscreen_circle_id
    },
    value: "",
    children: []
  };
  return [svgObject];
}
function createSvgObjectsFromPcbSilkscreenLine(pcbSilkscreenLine, ctx) {
  const { transform: transform3, layer: layerFilter, colorMap: colorMap2 } = ctx;
  const {
    x1: x12,
    y1: y12,
    x2: x22,
    y2: y22,
    stroke_width,
    layer = "top",
    pcb_silkscreen_line_id
  } = pcbSilkscreenLine;
  if (layerFilter && layer !== layerFilter)
    return [];
  if (typeof x12 !== "number" || typeof y12 !== "number" || typeof x22 !== "number" || typeof y22 !== "number") {
    console.error("Invalid coordinates:", { x1: x12, y1: y12, x2: x22, y2: y22 });
    return [];
  }
  const [transformedX1, transformedY1] = applyToPoint(transform3, [x12, y12]);
  const [transformedX2, transformedY2] = applyToPoint(transform3, [x22, y22]);
  const transformedStrokeWidth = stroke_width * Math.abs(transform3.a);
  const color = layer === "bottom" ? colorMap2.silkscreen.bottom : colorMap2.silkscreen.top;
  return [
    {
      name: "line",
      type: "element",
      attributes: {
        x1: transformedX1.toString(),
        y1: transformedY1.toString(),
        x2: transformedX2.toString(),
        y2: transformedY2.toString(),
        stroke: color,
        "stroke-width": transformedStrokeWidth.toString(),
        class: `pcb-silkscreen-line pcb-silkscreen-${layer}`,
        "data-pcb-silkscreen-line-id": pcb_silkscreen_line_id
      },
      value: "",
      children: []
    }
  ];
}
function pairs(arr) {
  const result = [];
  for (let i = 0;i < arr.length - 1; i++) {
    result.push([arr[i], arr[i + 1]]);
  }
  return result;
}
var DEFAULT_PCB_COLOR_MAP = {
  copper: {
    top: "rgb(200, 52, 52)",
    bottom: "rgb(77, 127, 196)"
  },
  soldermask: {
    top: "rgb(200, 52, 52)",
    bottom: "rgb(77, 127, 196)"
  },
  drill: "#FF26E2",
  silkscreen: {
    top: "#f2eda1",
    bottom: "#5da9e9"
  },
  boardOutline: "rgba(255, 255, 255, 0.5)",
  debugComponent: {
    fill: null,
    stroke: null
  }
};
var HOLE_COLOR = DEFAULT_PCB_COLOR_MAP.drill;
var SILKSCREEN_TOP_COLOR = DEFAULT_PCB_COLOR_MAP.silkscreen.top;
var SILKSCREEN_BOTTOM_COLOR = DEFAULT_PCB_COLOR_MAP.silkscreen.bottom;
var LAYER_NAME_TO_COLOR = {
  top: DEFAULT_PCB_COLOR_MAP.copper.top,
  bottom: DEFAULT_PCB_COLOR_MAP.copper.bottom
};
function layerNameToColor(layerName, colorMap2 = DEFAULT_PCB_COLOR_MAP) {
  return colorMap2.copper[layerName] ?? "white";
}
function createSvgObjectsFromPcbTrace(trace, ctx) {
  const { transform: transform3, layer: layerFilter, colorMap: colorMap2 } = ctx;
  if (!trace.route || !Array.isArray(trace.route) || trace.route.length < 2)
    return [];
  const segments = pairs(trace.route);
  const svgObjects = [];
  for (const [start, end] of segments) {
    const startPoint = applyToPoint(transform3, [start.x, start.y]);
    const endPoint = applyToPoint(transform3, [end.x, end.y]);
    const layer = "layer" in start ? start.layer : ("layer" in end) ? end.layer : null;
    if (!layer)
      continue;
    if (layerFilter && layer !== layerFilter)
      continue;
    const layerColor = colorMap2.soldermask[layer] ?? layerNameToColor(layer, colorMap2);
    const traceWidth = "width" in start ? start.width : ("width" in end) ? end.width : null;
    const svgObject = {
      name: "path",
      type: "element",
      value: "",
      children: [],
      attributes: {
        class: "pcb-trace",
        stroke: layerColor,
        fill: "none",
        d: `M ${startPoint[0]} ${startPoint[1]} L ${endPoint[0]} ${endPoint[1]}`,
        "stroke-width": traceWidth ? (traceWidth * Math.abs(transform3.a)).toString() : "0.3",
        "stroke-linecap": "round",
        "stroke-linejoin": "round",
        "shape-rendering": "crispEdges",
        "data-layer": layer
      }
    };
    svgObjects.push(svgObject);
  }
  svgObjects.sort((a, b) => {
    const layerA = a.attributes["data-layer"];
    const layerB = b.attributes["data-layer"];
    if (layerA === "bottom" && layerB !== "bottom") {
      return -1;
    }
    if (layerA === "top" && layerB !== "top") {
      return 1;
    }
    return 0;
  });
  return svgObjects;
}
function createSvgObjectsFromSmtPad(pad, ctx) {
  const { transform: transform3, layer: layerFilter, colorMap: colorMap2 } = ctx;
  if (layerFilter && pad.layer !== layerFilter)
    return [];
  if (pad.shape === "rect" || pad.shape === "rotated_rect") {
    const width = pad.width * Math.abs(transform3.a);
    const height = pad.height * Math.abs(transform3.d);
    const [x, y] = applyToPoint(transform3, [pad.x, pad.y]);
    if (pad.shape === "rotated_rect" && pad.ccw_rotation) {
      return [
        {
          name: "rect",
          type: "element",
          attributes: {
            class: "pcb-pad",
            fill: layerNameToColor(pad.layer, colorMap2),
            x: (-width / 2).toString(),
            y: (-height / 2).toString(),
            width: width.toString(),
            height: height.toString(),
            transform: `translate(${x} ${y}) rotate(${-pad.ccw_rotation})`,
            "data-layer": pad.layer
          }
        }
      ];
    }
    return [
      {
        name: "rect",
        type: "element",
        attributes: {
          class: "pcb-pad",
          fill: layerNameToColor(pad.layer, colorMap2),
          x: (x - width / 2).toString(),
          y: (y - height / 2).toString(),
          width: width.toString(),
          height: height.toString(),
          "data-layer": pad.layer
        }
      }
    ];
  }
  if (pad.shape === "pill") {
    const width = pad.width * Math.abs(transform3.a);
    const height = pad.height * Math.abs(transform3.d);
    const radius = pad.radius * Math.abs(transform3.a);
    const [x, y] = applyToPoint(transform3, [pad.x, pad.y]);
    return [
      {
        name: "rect",
        type: "element",
        attributes: {
          class: "pcb-pad",
          fill: layerNameToColor(pad.layer, colorMap2),
          x: (x - width / 2).toString(),
          y: (y - height / 2).toString(),
          width: width.toString(),
          height: height.toString(),
          rx: radius.toString(),
          ry: radius.toString(),
          "data-layer": pad.layer
        }
      }
    ];
  }
  if (pad.shape === "circle") {
    const radius = pad.radius * Math.abs(transform3.a);
    const [x, y] = applyToPoint(transform3, [pad.x, pad.y]);
    return [
      {
        name: "circle",
        type: "element",
        attributes: {
          class: "pcb-pad",
          fill: layerNameToColor(pad.layer, colorMap2),
          cx: x.toString(),
          cy: y.toString(),
          r: radius.toString(),
          "data-layer": pad.layer
        }
      }
    ];
  }
  if (pad.shape === "polygon") {
    const points = (pad.points ?? []).map((point2) => applyToPoint(transform3, [point2.x, point2.y]));
    return [
      {
        name: "polygon",
        type: "element",
        attributes: {
          class: "pcb-pad",
          fill: layerNameToColor(pad.layer),
          points: points.map((p) => p.join(",")).join(" "),
          "data-layer": pad.layer
        }
      }
    ];
  }
  return [];
}
function createSvgObjectsFromPcbBoard(pcbBoard, ctx) {
  const { transform: transform3, colorMap: colorMap2 } = ctx;
  const { width, height, center, outline } = pcbBoard;
  let path;
  if (outline && Array.isArray(outline) && outline.length >= 3) {
    path = outline.map((point2, index) => {
      const [x, y] = applyToPoint(transform3, [point2.x, point2.y]);
      return index === 0 ? `M ${x} ${y}` : `L ${x} ${y}`;
    }).join(" ");
  } else {
    const halfWidth = width / 2;
    const halfHeight = height / 2;
    const topLeft = applyToPoint(transform3, [
      center.x - halfWidth,
      center.y - halfHeight
    ]);
    const topRight = applyToPoint(transform3, [
      center.x + halfWidth,
      center.y - halfHeight
    ]);
    const bottomRight = applyToPoint(transform3, [
      center.x + halfWidth,
      center.y + halfHeight
    ]);
    const bottomLeft = applyToPoint(transform3, [
      center.x - halfWidth,
      center.y + halfHeight
    ]);
    path = `M ${topLeft[0]} ${topLeft[1]} L ${topRight[0]} ${topRight[1]} L ${bottomRight[0]} ${bottomRight[1]} L ${bottomLeft[0]} ${bottomLeft[1]}`;
  }
  path += " Z";
  return [
    {
      name: "path",
      type: "element",
      value: "",
      children: [],
      attributes: {
        class: "pcb-board",
        d: path,
        fill: "none",
        stroke: colorMap2.boardOutline,
        "stroke-width": (0.1 * Math.abs(transform3.a)).toString()
      }
    }
  ];
}
function createSvgObjectsFromPcbVia(hole, ctx) {
  const { transform: transform3, colorMap: colorMap2 } = ctx;
  const [x, y] = applyToPoint(transform3, [hole.x, hole.y]);
  const scaledOuterWidth = hole.outer_diameter * Math.abs(transform3.a);
  const scaledOuterHeight = hole.outer_diameter * Math.abs(transform3.a);
  const scaledHoleWidth = hole.hole_diameter * Math.abs(transform3.a);
  const scaledHoleHeight = hole.hole_diameter * Math.abs(transform3.a);
  const outerRadius = Math.min(scaledOuterWidth, scaledOuterHeight) / 2;
  const innerRadius = Math.min(scaledHoleWidth, scaledHoleHeight) / 2;
  return {
    name: "g",
    type: "element",
    children: [
      {
        name: "circle",
        type: "element",
        attributes: {
          class: "pcb-hole-outer",
          fill: colorMap2.copper.top,
          cx: x.toString(),
          cy: y.toString(),
          r: outerRadius.toString()
        }
      },
      {
        name: "circle",
        type: "element",
        attributes: {
          class: "pcb-hole-inner",
          fill: colorMap2.drill,
          cx: x.toString(),
          cy: y.toString(),
          r: innerRadius.toString()
        }
      }
    ]
  };
}
function createSvgObjectsFromPcbHole(hole, ctx) {
  const { transform: transform3, colorMap: colorMap2 } = ctx;
  const [x, y] = applyToPoint(transform3, [hole.x, hole.y]);
  if (hole.hole_shape === "circle" || hole.hole_shape === "square") {
    const scaledDiameter = hole.hole_diameter * Math.abs(transform3.a);
    const radius = scaledDiameter / 2;
    if (hole.hole_shape === "circle") {
      return [
        {
          name: "circle",
          type: "element",
          attributes: {
            class: "pcb-hole",
            cx: x.toString(),
            cy: y.toString(),
            r: radius.toString(),
            fill: colorMap2.drill
          },
          children: [],
          value: ""
        }
      ];
    }
    return [
      {
        name: "rect",
        type: "element",
        attributes: {
          class: "pcb-hole",
          x: (x - radius).toString(),
          y: (y - radius).toString(),
          width: scaledDiameter.toString(),
          height: scaledDiameter.toString(),
          fill: colorMap2.drill
        },
        children: [],
        value: ""
      }
    ];
  }
  if (hole.hole_shape === "oval") {
    const scaledWidth = hole.hole_width * Math.abs(transform3.a);
    const scaledHeight = hole.hole_height * Math.abs(transform3.a);
    const rx2 = scaledWidth / 2;
    const ry2 = scaledHeight / 2;
    return [
      {
        name: "ellipse",
        type: "element",
        attributes: {
          class: "pcb-hole",
          cx: x.toString(),
          cy: y.toString(),
          rx: rx2.toString(),
          ry: ry2.toString(),
          fill: colorMap2.drill
        },
        children: [],
        value: ""
      }
    ];
  }
  return [];
}
var getElementPosition = (id, circuitJson) => {
  const pcbSmtpad = su(circuitJson).pcb_smtpad.get(id);
  if (pcbSmtpad && "x" in pcbSmtpad && "y" in pcbSmtpad) {
    return { x: pcbSmtpad.x, y: pcbSmtpad.y };
  }
  const pcbPlatedHole = su(circuitJson).pcb_plated_hole.get(id);
  if (pcbPlatedHole && "x" in pcbPlatedHole && "y" in pcbPlatedHole) {
    return { x: pcbPlatedHole.x, y: pcbPlatedHole.y };
  }
  return null;
};
var findNearestPointInNet = (sourcePoint, netId, connectivity, circuitJson) => {
  const connectedIds = connectivity.getIdsConnectedToNet(netId);
  let nearestPoint = null;
  let minDistance = Infinity;
  for (const id of connectedIds) {
    const pos = getElementPosition(id, circuitJson);
    if (pos) {
      const dx2 = sourcePoint.x - pos.x;
      const dy2 = sourcePoint.y - pos.y;
      const distance3 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
      if (distance3 > 0 && distance3 < minDistance) {
        minDistance = distance3;
        nearestPoint = pos;
      }
    }
  }
  return nearestPoint;
};
function createSvgObjectsForRatsNest(circuitJson, ctx) {
  const { transform: transform3 } = ctx;
  const connectivity = getFullConnectivityMapFromCircuitJson(circuitJson);
  const pcbPorts = circuitJson.filter((elm) => elm.type === "pcb_port");
  const sourceTraces = circuitJson.filter((elm) => elm.type === "source_trace");
  const ratsNestLines = [];
  pcbPorts.forEach((port, index) => {
    const portId = port.pcb_port_id;
    if (!portId)
      return;
    const netId = connectivity.getNetConnectedToId(portId);
    if (!netId)
      return;
    let isInNet = false;
    const sourcePort = su(circuitJson).source_port.getWhere({
      pcb_port_id: portId
    });
    if (sourcePort && sourcePort.source_port_id) {
      const sourcePortId = sourcePort.source_port_id;
      for (const trace of sourceTraces) {
        if (Array.isArray(trace.connected_source_port_ids) && trace.connected_source_port_ids.includes(sourcePortId) && Array.isArray(trace.connected_source_net_ids) && trace.connected_source_net_ids.length > 0) {
          isInNet = true;
          break;
        }
      }
    }
    const startPoint = { x: port.x, y: port.y };
    const nearestPoint = findNearestPointInNet(startPoint, netId, connectivity, circuitJson);
    if (!nearestPoint)
      return;
    ratsNestLines.push({
      key: `${portId}-${index}`,
      startPoint,
      endPoint: nearestPoint,
      isInNet
    });
  });
  const svgObjects = [];
  for (const line of ratsNestLines) {
    const transformedStart = applyToPoint(transform3, [
      line.startPoint.x,
      line.startPoint.y
    ]);
    const transformedEnd = applyToPoint(transform3, [
      line.endPoint.x,
      line.endPoint.y
    ]);
    const attributes = {
      x1: transformedStart[0].toString(),
      y1: transformedStart[1].toString(),
      x2: transformedEnd[0].toString(),
      y2: transformedEnd[1].toString(),
      stroke: "white",
      "stroke-width": "1",
      "stroke-dasharray": "6,6"
    };
    svgObjects.push({
      name: "line",
      type: "element",
      attributes,
      value: "",
      children: []
    });
  }
  return svgObjects;
}
function createSvgObjectsFromPcbCutout(cutout, ctx) {
  const { transform: transform3, colorMap: colorMap2 } = ctx;
  if (cutout.shape === "rect") {
    const rectCutout = cutout;
    const [cx2, cy2] = applyToPoint(transform3, [
      rectCutout.center.x,
      rectCutout.center.y
    ]);
    const scaledWidth = rectCutout.width * Math.abs(transform3.a);
    const scaledHeight = rectCutout.height * Math.abs(transform3.d);
    const svgRotation = -(rectCutout.rotation ?? 0);
    return [
      {
        name: "rect",
        type: "element",
        attributes: {
          class: "pcb-cutout pcb-cutout-rect",
          x: (-scaledWidth / 2).toString(),
          y: (-scaledHeight / 2).toString(),
          width: scaledWidth.toString(),
          height: scaledHeight.toString(),
          fill: colorMap2.drill,
          transform: toString(compose(translate(cx2, cy2), rotate(svgRotation * Math.PI / 180)))
        },
        children: [],
        value: ""
      }
    ];
  }
  if (cutout.shape === "circle") {
    const circleCutout = cutout;
    const [cx2, cy2] = applyToPoint(transform3, [
      circleCutout.center.x,
      circleCutout.center.y
    ]);
    const scaledRadius = circleCutout.radius * Math.abs(transform3.a);
    return [
      {
        name: "circle",
        type: "element",
        attributes: {
          class: "pcb-cutout pcb-cutout-circle",
          cx: cx2.toString(),
          cy: cy2.toString(),
          r: scaledRadius.toString(),
          fill: colorMap2.drill
        },
        children: [],
        value: ""
      }
    ];
  }
  if (cutout.shape === "polygon") {
    const polygonCutout = cutout;
    if (!polygonCutout.points || polygonCutout.points.length === 0)
      return [];
    const transformedPoints = polygonCutout.points.map((p) => applyToPoint(transform3, [p.x, p.y]));
    const pointsString = transformedPoints.map((p) => `${p[0]},${p[1]}`).join(" ");
    return [
      {
        name: "polygon",
        type: "element",
        attributes: {
          class: "pcb-cutout pcb-cutout-polygon",
          points: pointsString,
          fill: colorMap2.drill
        },
        children: [],
        value: ""
      }
    ];
  }
  return [];
}
function createSvgObjectsFromPcbComponent(component, ctx) {
  const { transform: transform3 } = ctx;
  const { center, width, height, rotation: rotation2 = 0 } = component;
  const [x, y] = applyToPoint(transform3, [center.x, center.y]);
  const scaledWidth = width * Math.abs(transform3.a);
  const scaledHeight = height * Math.abs(transform3.d);
  const transformStr = `translate(${x}, ${y}) rotate(${-rotation2}) scale(1, -1)`;
  if (!ctx.colorMap.debugComponent?.fill && !ctx.colorMap.debugComponent?.stroke) {
    return [];
  }
  return [
    {
      name: "g",
      type: "element",
      attributes: { transform: transformStr },
      children: [
        {
          name: "rect",
          type: "element",
          attributes: {
            class: "pcb-component",
            x: (-scaledWidth / 2).toString(),
            y: (-scaledHeight / 2).toString(),
            width: scaledWidth.toString(),
            height: scaledHeight.toString(),
            fill: ctx.colorMap.debugComponent.fill ?? "transparent",
            stroke: ctx.colorMap.debugComponent.stroke ?? "transparent"
          }
        }
      ],
      value: ""
    }
  ];
}
function getSoftwareUsedString(circuitJson) {
  const metadata = circuitJson.find((e3) => e3.type === "project_software_metadata" || e3.type === "source_project_metadata");
  return metadata?.software_used_string;
}
var package_default = {
  name: "circuit-to-svg",
  type: "module",
  version: "0.0.174",
  description: "Convert Circuit JSON to SVG",
  main: "dist/index.js",
  files: [
    "dist"
  ],
  scripts: {
    start: "storybook dev -p 6006",
    prepublish: "npm run build",
    build: "tsup-node ./lib/index.ts --format esm --dts --sourcemap",
    format: "biome format . --write",
    "format:check": "biome format .",
    storybook: "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  license: "ISC",
  devDependencies: {
    "@biomejs/biome": "^1.9.4",
    "@chromatic-com/storybook": "^1.6.1",
    "@storybook/addon-essentials": "^8.2.5",
    "@storybook/addon-interactions": "^8.2.5",
    "@storybook/addon-links": "^8.2.5",
    "@storybook/addon-onboarding": "^8.2.5",
    "@storybook/blocks": "^8.2.5",
    "@storybook/react": "^8.2.5",
    "@storybook/react-vite": "^8.2.5",
    "@storybook/test": "^8.2.5",
    "@types/bun": "^1.2.8",
    biome: "^0.3.3",
    "bun-match-svg": "^0.0.12",
    esbuild: "^0.20.2",
    "performance-now": "^2.1.0",
    react: "^18.3.1",
    storybook: "^8.2.5",
    tscircuit: "^0.0.571",
    tsup: "^8.0.2",
    typescript: "^5.4.5",
    "vite-tsconfig-paths": "^5.0.1"
  },
  peerDependencies: {
    tscircuit: "*"
  },
  dependencies: {
    "@types/node": "^22.5.5",
    "bun-types": "^1.1.40",
    svgson: "^5.3.1",
    "transformation-matrix": "^2.16.1"
  }
};
var CIRCUIT_TO_SVG_VERSION = package_default.version;
var OBJECT_ORDER = [
  "pcb_trace_error",
  "pcb_plated_hole",
  "pcb_fabrication_note_text",
  "pcb_fabrication_note_path",
  "pcb_silkscreen_text",
  "pcb_silkscreen_path",
  "pcb_via",
  "pcb_cutout",
  "pcb_smtpad",
  "pcb_trace",
  "pcb_component",
  "pcb_board"
];
function convertCircuitJsonToPcbSvg(circuitJson, options) {
  const drawPaddingOutsideBoard = options?.drawPaddingOutsideBoard ?? true;
  const layer = options?.layer;
  const colorOverrides = options?.colorOverrides;
  const colorMap2 = {
    copper: {
      top: colorOverrides?.copper?.top ?? DEFAULT_PCB_COLOR_MAP.copper.top,
      bottom: colorOverrides?.copper?.bottom ?? DEFAULT_PCB_COLOR_MAP.copper.bottom
    },
    drill: colorOverrides?.drill ?? DEFAULT_PCB_COLOR_MAP.drill,
    silkscreen: {
      top: colorOverrides?.silkscreen?.top ?? DEFAULT_PCB_COLOR_MAP.silkscreen.top,
      bottom: colorOverrides?.silkscreen?.bottom ?? DEFAULT_PCB_COLOR_MAP.silkscreen.bottom
    },
    boardOutline: colorOverrides?.boardOutline ?? DEFAULT_PCB_COLOR_MAP.boardOutline,
    soldermask: {
      top: colorOverrides?.soldermask?.top ?? DEFAULT_PCB_COLOR_MAP.soldermask.top,
      bottom: colorOverrides?.soldermask?.bottom ?? DEFAULT_PCB_COLOR_MAP.soldermask.bottom
    },
    debugComponent: {
      fill: colorOverrides?.debugComponent?.fill ?? DEFAULT_PCB_COLOR_MAP.debugComponent.fill,
      stroke: colorOverrides?.debugComponent?.stroke ?? DEFAULT_PCB_COLOR_MAP.debugComponent.stroke
    }
  };
  let minX = Number.POSITIVE_INFINITY;
  let minY = Number.POSITIVE_INFINITY;
  let maxX = Number.NEGATIVE_INFINITY;
  let maxY = Number.NEGATIVE_INFINITY;
  let boardMinX = Number.POSITIVE_INFINITY;
  let boardMinY = Number.POSITIVE_INFINITY;
  let boardMaxX = Number.NEGATIVE_INFINITY;
  let boardMaxY = Number.NEGATIVE_INFINITY;
  for (const circuitJsonElm of circuitJson) {
    if (circuitJsonElm.type === "pcb_board") {
      if (circuitJsonElm.outline && Array.isArray(circuitJsonElm.outline) && circuitJsonElm.outline.length >= 3) {
        updateBoundsToIncludeOutline(circuitJsonElm.outline);
        updateBoardBoundsToIncludeOutline(circuitJsonElm.outline);
      } else if ("center" in circuitJsonElm && "width" in circuitJsonElm && "height" in circuitJsonElm) {
        updateBounds(circuitJsonElm.center, circuitJsonElm.width, circuitJsonElm.height);
        updateBoardBounds(circuitJsonElm.center, circuitJsonElm.width, circuitJsonElm.height);
      }
    } else if ("x" in circuitJsonElm && "y" in circuitJsonElm) {
      updateBounds({ x: circuitJsonElm.x, y: circuitJsonElm.y }, 0, 0);
    } else if (circuitJsonElm.type === "pcb_smtpad") {
      const pad = circuitJsonElm;
      if (pad.shape === "rect" || pad.shape === "rotated_rect" || pad.shape === "pill") {
        updateBounds({ x: pad.x, y: pad.y }, pad.width, pad.height);
      } else if (pad.shape === "circle") {
        updateBounds({ x: pad.x, y: pad.y }, pad.radius * 2, pad.radius * 2);
      } else if (pad.shape === "polygon") {
        updateTraceBounds(pad.points);
      }
    } else if ("route" in circuitJsonElm) {
      updateTraceBounds(circuitJsonElm.route);
    } else if (circuitJsonElm.type === "pcb_silkscreen_text" || circuitJsonElm.type === "pcb_silkscreen_rect" || circuitJsonElm.type === "pcb_silkscreen_circle" || circuitJsonElm.type === "pcb_silkscreen_line") {
      updateSilkscreenBounds(circuitJsonElm);
    }
  }
  const padding = drawPaddingOutsideBoard ? 1 : 0;
  const boundsMinX = drawPaddingOutsideBoard || !isFinite(boardMinX) ? minX : boardMinX;
  const boundsMinY = drawPaddingOutsideBoard || !isFinite(boardMinY) ? minY : boardMinY;
  const boundsMaxX = drawPaddingOutsideBoard || !isFinite(boardMaxX) ? maxX : boardMaxX;
  const boundsMaxY = drawPaddingOutsideBoard || !isFinite(boardMaxY) ? maxY : boardMaxY;
  const circuitWidth = boundsMaxX - boundsMinX + 2 * padding;
  const circuitHeight = boundsMaxY - boundsMinY + 2 * padding;
  let svgWidth = options?.width ?? 800;
  let svgHeight = options?.height ?? 600;
  if (options?.matchBoardAspectRatio) {
    const boardWidth = boardMaxX - boardMinX;
    const boardHeight = boardMaxY - boardMinY;
    if (boardWidth > 0 && boardHeight > 0) {
      const aspect = boardWidth / boardHeight;
      if (options?.width && !options?.height) {
        svgHeight = options.width / aspect;
      } else if (options?.height && !options?.width) {
        svgWidth = options.height * aspect;
      } else {
        svgHeight = svgWidth / aspect;
      }
    }
  }
  const paths = [];
  for (const circuitJsonElm of circuitJson) {
    if ("route" in circuitJsonElm && circuitJsonElm.route !== undefined) {
      paths.push(circuitJsonElm.route);
    }
  }
  const scaleX = svgWidth / circuitWidth;
  const scaleY = svgHeight / circuitHeight;
  const scaleFactor = Math.min(scaleX, scaleY);
  const offsetX = (svgWidth - circuitWidth * scaleFactor) / 2;
  const offsetY = (svgHeight - circuitHeight * scaleFactor) / 2;
  const transform3 = compose(translate(offsetX - boundsMinX * scaleFactor + padding * scaleFactor, svgHeight - offsetY + boundsMinY * scaleFactor - padding * scaleFactor), scale(scaleFactor, -scaleFactor));
  const ctx = {
    transform: transform3,
    layer,
    shouldDrawErrors: options?.shouldDrawErrors,
    drawPaddingOutsideBoard,
    colorMap: colorMap2
  };
  function getLayer(elm) {
    if (elm.type === "pcb_smtpad") {
      return elm.layer === "top" || elm.layer === "bottom" ? elm.layer : undefined;
    }
    if (elm.type === "pcb_trace") {
      for (const seg of elm.route ?? []) {
        const candidate = "layer" in seg && seg.layer || "from_layer" in seg && seg.from_layer || "to_layer" in seg && seg.to_layer || undefined;
        if (candidate === "top" || candidate === "bottom") {
          return candidate;
        }
      }
    }
    return;
  }
  function isCopper(elm) {
    return elm.type === "pcb_trace" || elm.type === "pcb_smtpad";
  }
  let svgObjects = circuitJson.sort((a, b) => {
    const layerA = getLayer(a);
    const layerB = getLayer(b);
    if (isCopper(a) && isCopper(b) && layerA !== layerB) {
      if (layerA === "top")
        return 1;
      if (layerB === "top")
        return -1;
      if (layerA === "bottom")
        return -1;
      if (layerB === "bottom")
        return 1;
    }
    return (OBJECT_ORDER.indexOf(b.type) ?? 9999) - (OBJECT_ORDER.indexOf(a.type) ?? 9999);
  }).flatMap((elm) => createSvgObjects({ elm, circuitJson, ctx }));
  let strokeWidth = String(0.05 * scaleFactor);
  for (const element of circuitJson) {
    if ("stroke_width" in element) {
      strokeWidth = String(scaleFactor * element.stroke_width);
      break;
    }
  }
  if (options?.shouldDrawRatsNest) {
    const ratsNestObjects = createSvgObjectsForRatsNest(circuitJson, ctx);
    svgObjects = svgObjects.concat(ratsNestObjects);
  }
  const children = [
    {
      name: "style",
      type: "element",
      value: "",
      attributes: {},
      children: [
        {
          type: "text",
          value: "",
          name: "",
          attributes: {},
          children: []
        }
      ]
    },
    {
      name: "rect",
      type: "element",
      value: "",
      attributes: {
        class: "boundary",
        x: "0",
        y: "0",
        fill: options?.backgroundColor ?? "#000",
        width: svgWidth.toString(),
        height: svgHeight.toString()
      },
      children: []
    }
  ];
  if (drawPaddingOutsideBoard) {
    children.push(createSvgObjectFromPcbBoundary(transform3, minX, minY, maxX, maxY));
  }
  children.push(...svgObjects);
  const softwareUsedString = getSoftwareUsedString(circuitJson);
  const version = CIRCUIT_TO_SVG_VERSION;
  const svgObject = {
    name: "svg",
    type: "element",
    attributes: {
      xmlns: "http://www.w3.org/2000/svg",
      width: svgWidth.toString(),
      height: svgHeight.toString(),
      ...softwareUsedString && {
        "data-software-used-string": softwareUsedString
      },
      ...options?.includeVersion && {
        "data-circuit-to-svg-version": version
      }
    },
    value: "",
    children: children.filter((child) => child !== null)
  };
  try {
    return import_svgson.stringify(svgObject);
  } catch (error) {
    console.error("Error stringifying SVG object:", error);
    throw error;
  }
  function updateBounds(center, width, height) {
    const halfWidth = width / 2;
    const halfHeight = height / 2;
    minX = Math.min(minX, center.x - halfWidth);
    minY = Math.min(minY, center.y - halfHeight);
    maxX = Math.max(maxX, center.x + halfWidth);
    maxY = Math.max(maxY, center.y + halfHeight);
  }
  function updateBoardBounds(center, width, height) {
    const halfWidth = width / 2;
    const halfHeight = height / 2;
    boardMinX = Math.min(boardMinX, center.x - halfWidth);
    boardMinY = Math.min(boardMinY, center.y - halfHeight);
    boardMaxX = Math.max(boardMaxX, center.x + halfWidth);
    boardMaxY = Math.max(boardMaxY, center.y + halfHeight);
  }
  function updateBoundsToIncludeOutline(outline) {
    for (const point2 of outline) {
      minX = Math.min(minX, point2.x);
      minY = Math.min(minY, point2.y);
      maxX = Math.max(maxX, point2.x);
      maxY = Math.max(maxY, point2.y);
    }
  }
  function updateBoardBoundsToIncludeOutline(outline) {
    for (const point2 of outline) {
      boardMinX = Math.min(boardMinX, point2.x);
      boardMinY = Math.min(boardMinY, point2.y);
      boardMaxX = Math.max(boardMaxX, point2.x);
      boardMaxY = Math.max(boardMaxY, point2.y);
    }
  }
  function updateTraceBounds(route) {
    for (const point2 of route) {
      minX = Math.min(minX, point2.x);
      minY = Math.min(minY, point2.y);
      maxX = Math.max(maxX, point2.x);
      maxY = Math.max(maxY, point2.y);
    }
  }
  function updateSilkscreenBounds(item) {
    if (item.type === "pcb_silkscreen_text") {
      updateBounds(item.anchor_position, 0, 0);
    } else if (item.type === "pcb_silkscreen_path") {
      updateTraceBounds(item.route);
    } else if (item.type === "pcb_silkscreen_rect") {
      updateBounds(item.center, item.width, item.height);
    } else if (item.type === "pcb_silkscreen_circle") {
      updateBounds(item.center, item.radius * 2, item.radius * 2);
    } else if (item.type === "pcb_silkscreen_line") {
      updateBounds({ x: item.x1, y: item.y1 }, 0, 0);
      updateBounds({ x: item.x2, y: item.y2 }, 0, 0);
    } else if (item.type === "pcb_cutout") {
      const cutout = item;
      if (cutout.shape === "rect") {
        updateBounds(cutout.center, cutout.width, cutout.height);
      } else if (cutout.shape === "circle") {
        updateBounds(cutout.center, cutout.radius * 2, cutout.radius * 2);
      } else if (cutout.shape === "polygon") {
        updateTraceBounds(cutout.points);
      }
    }
  }
}
function createSvgObjects({
  elm,
  circuitJson,
  ctx
}) {
  switch (elm.type) {
    case "pcb_trace_error":
      return createSvgObjectsFromPcbTraceError(elm, circuitJson, ctx).filter(Boolean);
    case "pcb_component":
      return createSvgObjectsFromPcbComponent(elm, ctx).filter(Boolean);
    case "pcb_trace":
      return createSvgObjectsFromPcbTrace(elm, ctx);
    case "pcb_plated_hole":
      return createSvgObjectsFromPcbPlatedHole(elm, ctx).filter(Boolean);
    case "pcb_hole":
      return createSvgObjectsFromPcbHole(elm, ctx);
    case "pcb_smtpad":
      return createSvgObjectsFromSmtPad(elm, ctx);
    case "pcb_silkscreen_text":
      return createSvgObjectsFromPcbSilkscreenText(elm, ctx);
    case "pcb_silkscreen_rect":
      return createSvgObjectsFromPcbSilkscreenRect(elm, ctx);
    case "pcb_silkscreen_circle":
      return createSvgObjectsFromPcbSilkscreenCircle(elm, ctx);
    case "pcb_silkscreen_line":
      return createSvgObjectsFromPcbSilkscreenLine(elm, ctx);
    case "pcb_fabrication_note_path":
      return createSvgObjectsFromPcbFabricationNotePath(elm, ctx);
    case "pcb_fabrication_note_text":
      return createSvgObjectsFromPcbFabricationNoteText(elm, ctx);
    case "pcb_silkscreen_path":
      return createSvgObjectsFromPcbSilkscreenPath(elm, ctx);
    case "pcb_board":
      return ctx.drawPaddingOutsideBoard ? createSvgObjectsFromPcbBoard(elm, ctx) : [];
    case "pcb_via":
      return createSvgObjectsFromPcbVia(elm, ctx);
    case "pcb_cutout":
      return createSvgObjectsFromPcbCutout(elm, ctx);
    default:
      return [];
  }
}
function createSvgObjectFromPcbBoundary(transform3, minX, minY, maxX, maxY) {
  const [x12, y12] = applyToPoint(transform3, [minX, minY]);
  const [x22, y22] = applyToPoint(transform3, [maxX, maxY]);
  const width = Math.abs(x22 - x12);
  const height = Math.abs(y22 - y12);
  const x = Math.min(x12, x22);
  const y = Math.min(y12, y22);
  return {
    name: "rect",
    type: "element",
    value: "",
    children: [],
    attributes: {
      class: "pcb-boundary",
      fill: "none",
      stroke: "#fff",
      "stroke-width": "0.3",
      x: x.toString(),
      y: y.toString(),
      width: width.toString(),
      height: height.toString()
    }
  };
}
var fontSizeMap = {
  pin_number: 0.15,
  negated_pin_number: 0.15 * 0.8,
  reference_designator: 0.18,
  manufacturer_number: 0.18,
  net_label: 0.18,
  error: 0.05
};

// gallery/index.tsx
var import_react = __toESM(require_react(), 1);
var import_client = __toESM(require_client(), 1);

// src/fn/index.ts
var exports_fn = {};
__export(exports_fn, {
  vssop: () => vssop,
  tssop: () => tssop,
  tqfp: () => tqfp,
  to92s: () => to92s,
  to92: () => to92,
  to220: () => to220,
  stampreceiver: () => stampreceiver,
  stampboard: () => stampboard,
  ssop: () => ssop,
  sot89: () => sot89,
  sot723: () => sot723,
  sot563: () => sot563,
  sot457: () => sot457,
  sot363: () => sot363,
  sot323: () => sot323,
  sot25: () => sot25,
  sot23w: () => sot23w,
  sot23: () => sot23,
  sot223: () => sot223,
  sot: () => sot,
  sop8: () => sop8,
  son: () => son,
  solderjumper: () => solderjumper,
  soic: () => soic,
  sod923: () => sod923,
  sod882d: () => sod882d,
  sod882: () => sod882,
  sod80: () => sod80,
  sod723: () => sod723,
  sod523: () => sod523,
  sod323w: () => sod323w,
  sod323fl: () => sod323fl,
  sod323f: () => sod323f,
  sod323: () => sod323,
  sod128: () => sod128,
  sod123w: () => sod123w,
  sod123fl: () => sod123fl,
  sod123f: () => sod123f,
  sod123: () => sod123,
  sod110: () => sod110,
  smtpad: () => smtpad,
  smf: () => smf,
  smc: () => smc,
  smbf: () => smbf,
  smb: () => smb,
  sma: () => sma,
  res: () => res,
  quad: () => quad,
  qfp: () => qfp,
  qfn: () => qfn,
  pushbutton: () => pushbutton,
  potentiometer: () => potentiometer,
  platedhole: () => platedhole2,
  pinrow: () => pinrow,
  pad: () => pad,
  msop: () => msop,
  ms013: () => ms013,
  ms012: () => ms012,
  mlp: () => mlp,
  minimelf: () => minimelf,
  micromelf: () => micromelf,
  melf: () => melf,
  m2host: () => m2host,
  lqfp: () => lqfp,
  led: () => led,
  jst: () => jst,
  hc49: () => hc49,
  electrolytic: () => electrolytic,
  dip: () => dip,
  diode: () => diode,
  dfn: () => dfn,
  cap: () => cap,
  breakoutheaders: () => breakoutheaders,
  bga: () => bga,
  axial: () => axial
});

// src/helpers/silkscreenRef.ts
var silkscreenRef = (x, y, font_size) => {
  return {
    type: "pcb_silkscreen_text",
    pcb_silkscreen_text_id: "silkscreen_text_1",
    font: "tscircuit2024",
    font_size,
    pcb_component_id: "pcb_component_1",
    text: "{REF}",
    layer: "top",
    anchor_position: { x, y },
    anchor_alignment: "center"
  };
};

// node_modules/@tscircuit/mm/dist/index.js
var unitToMm = {
  in: 25.4,
  inch: 25.4,
  mil: 0.0254,
  mm: 1,
  m: 1000,
  cm: 10,
  ft: 304.8,
  feet: 304.8
};
var mm2 = (n) => {
  let unit = typeof n === "number" ? "mm" : n.replace(/^[^a-zA-Z]+/g, "").toLowerCase();
  if (!unit)
    unit = "mm";
  const val = typeof n === "number" ? n : Number.parseFloat(n.split(unit)[0]);
  if (unit in unitToMm) {
    return val * unitToMm[unit];
  }
  throw new Error(`Unsupported unit: ${unit}`);
};
var mm_default = mm2;

// src/helpers/platedhole.ts
var platedhole = (pn2, x, y, id, od) => {
  return {
    pcb_plated_hole_id: "",
    type: "pcb_plated_hole",
    shape: "circle",
    x,
    y,
    hole_diameter: mm2(id),
    outer_diameter: mm2(od),
    pcb_port_id: "",
    layers: ["top", "bottom"],
    port_hints: [pn2.toString()]
  };
};

// src/helpers/platedHoleWithRectPad.ts
var platedHoleWithRectPad = (pn2, x, y, holeDiameter, rectPadWidth, rectPadHeight) => {
  return {
    pcb_plated_hole_id: "",
    type: "pcb_plated_hole",
    shape: "circular_hole_with_rect_pad",
    x,
    y,
    hole_diameter: mm2(holeDiameter),
    hole_shape: "circle",
    pad_shape: "rect",
    rect_pad_width: mm2(rectPadWidth),
    rect_pad_height: mm2(rectPadHeight),
    pcb_port_id: "",
    layers: ["top", "bottom"],
    port_hints: [pn2.toString()]
  };
};

// src/helpers/u-curve.ts
var u_curve = Array.from({ length: 9 }, (_2, i) => Math.cos(i / 8 * Math.PI - Math.PI)).map((x) => ({
  x,
  y: -Math.sqrt(1 - x ** 2)
}));

// src/fn/dip.ts
function convertMilToMm(value) {
  if (typeof value === "string") {
    if (value.trim().toLowerCase().endsWith("mil")) {
      return parseFloat(value) * 0.0254;
    }
    return parseFloat(value);
  }
  return Number(value);
}
var lengthInMm = exports_external.union([exports_external.string(), exports_external.number()]).transform((val) => convertMilToMm(val));
var extendDipDef = (newDefaults) => exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.number().optional().default(6),
  wide: exports_external.boolean().optional(),
  narrow: exports_external.boolean().optional(),
  w: lengthInMm.optional(),
  p: lengthInMm.default(newDefaults.p ?? "2.54mm"),
  id: lengthInMm.optional(),
  od: lengthInMm.optional(),
  nosquareplating: exports_external.boolean().optional().default(false).describe("do not use rectangular pad for pin 1")
}).transform((v3) => {
  if (!v3.id && !v3.od) {
    if (Math.abs(v3.p - 1.27) < 0.01) {
      v3.id = convertMilToMm("0.55mm");
      v3.od = convertMilToMm("0.95mm");
    } else {
      v3.id = convertMilToMm("1.0mm");
      v3.od = convertMilToMm("1.5mm");
    }
  } else if (!v3.id) {
    v3.id = v3.od * (1 / 1.5);
  } else if (!v3.od) {
    v3.od = v3.id * (1.5 / 1);
  }
  if (!v3.w) {
    if (v3.wide) {
      v3.w = convertMilToMm("600mil");
    } else if (v3.narrow) {
      v3.w = convertMilToMm("300mil");
    } else {
      v3.w = convertMilToMm(newDefaults.w ?? "300mil");
    }
  }
  return v3;
});
var dip_def = extendDipDef({});
var getCcwDipCoords = (pinCount, pn2, w3, p, nosquareplating) => {
  const ph2 = pinCount / 2;
  const isLeft = pn2 <= ph2;
  const leftPinGaps = ph2 - 1;
  const gs2 = p;
  const h = gs2 * leftPinGaps;
  if (isLeft) {
    return { x: -w3 / 2, y: h / 2 - (pn2 - 1) * gs2 };
  }
  return { x: w3 / 2, y: -h / 2 + (pn2 - ph2 - 1) * gs2 };
};
var dip = (raw_params) => {
  const parameters = dip_def.parse(raw_params);
  const platedHoles = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getCcwDipCoords(parameters.num_pins, i + 1, parameters.w, parameters.p ?? 2.54, parameters.nosquareplating);
    if (i === 0 && !parameters.nosquareplating) {
      platedHoles.push(platedHoleWithRectPad(i + 1, x, y, parameters.id ?? "0.8mm", parameters.od ?? "1mm", parameters.od ?? "1mm"));
      continue;
    }
    platedHoles.push(platedhole(i + 1, x, y, parameters.id ?? "0.8mm", parameters.od ?? "1mm"));
  }
  const padEdgeHeight = (parameters.num_pins / 2 - 1) * parameters.p + parameters.od;
  const innerGap = parameters.w - parameters.od;
  const sw = innerGap - 1;
  const sh2 = (parameters.num_pins / 2 - 1) * parameters.p + parameters.od + 0.4;
  const silkscreenBorder = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -sw / 2, y: -sh2 / 2 },
      { x: -sw / 2, y: sh2 / 2 },
      ...u_curve.map(({ x, y }) => ({
        x: x * sw / 6,
        y: y * sw / 6 + sh2 / 2
      })),
      { x: sw / 2, y: sh2 / 2 },
      { x: sw / 2, y: -sh2 / 2 },
      { x: -sw / 2, y: -sh2 / 2 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenPins = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const isLeft = i < parameters.num_pins / 2;
    const clearance = 0.6;
    const { y: pinCenterY } = getCcwDipCoords(parameters.num_pins, i + 1, parameters.w, parameters.p ?? 2.54, parameters.nosquareplating);
    const pinLabelX = isLeft ? -parameters.w / 2 - parameters.od / 2 - clearance : parameters.w / 2 + parameters.od / 2 + clearance;
    const pinLabelY = pinCenterY;
    silkscreenPins.push({
      type: "pcb_fabrication_note_text",
      pcb_fabrication_note_text_id: `pin_${i + 1}`,
      layer: "top",
      pcb_component_id: `pin_${i + 1}`,
      text: `{pin${i + 1}}`,
      anchor_position: { x: pinLabelX, y: pinLabelY },
      font_size: 0.3,
      font: "tscircuit2024",
      anchor_alignment: "top_left"
    });
  }
  const silkscreenRefText = silkscreenRef(0, sh2 / 2 + 0.5, 0.4);
  return {
    circuitJson: [
      ...platedHoles,
      silkscreenBorder,
      silkscreenRefText,
      ...silkscreenPins
    ],
    parameters
  };
};
// src/helpers/rectpad.ts
var rectpad = (pn2, x, y, w3, h) => {
  return {
    type: "pcb_smtpad",
    x,
    y,
    width: w3,
    height: h,
    layer: "top",
    shape: "rect",
    pcb_smtpad_id: "",
    port_hints: Array.isArray(pn2) ? pn2.map((item) => item.toString()) : [pn2.toString()]
  };
};

// src/helpers/passive-fn.ts
var footprintSizes = [
  {
    imperial: "01005",
    metric: "0402",
    p_mm_min: 0.5,
    pw_mm_min: 0.4,
    ph_mm_min: 0.3,
    w_mm_min: 0.58,
    h_mm_min: 0.21
  },
  {
    imperial: "0504",
    metric: "1310",
    p_mm_min: 1.1,
    pw_mm_min: 0.65,
    ph_mm_min: 1.3,
    w_mm_min: 0.58,
    h_mm_min: 0.21
  },
  {
    imperial: "1812",
    metric: "4532",
    p_mm_min: 4.275,
    pw_mm_min: 1.125,
    ph_mm_min: 3.4,
    w_mm_min: 5.4,
    h_mm_min: 3.4
  },
  {
    imperial: "0201",
    metric: "0603",
    p_mm_min: 0.66,
    pw_mm_min: 0.46,
    ph_mm_min: 0.4,
    w_mm_min: 0.9,
    h_mm_min: 0.3
  },
  {
    imperial: "0402",
    metric: "1005",
    p_mm_min: 1.02,
    pw_mm_min: 0.54,
    ph_mm_min: 0.64,
    w_mm_min: 1.56,
    h_mm_min: 0.64
  },
  {
    imperial: "0603",
    metric: "1608",
    p_mm_min: 1.65,
    pw_mm_min: 0.8,
    ph_mm_min: 0.95,
    w_mm_min: 2.45,
    h_mm_min: 0.95
  },
  {
    imperial: "0805",
    metric: "2012",
    p_mm_min: 1.825,
    pw_mm_min: 1.025,
    ph_mm_min: 1.4,
    w_mm_min: 2.8499999999999996,
    h_mm_min: 1.4
  },
  {
    imperial: "1206",
    metric: "3216",
    p_mm_min: 2.925,
    pw_mm_min: 1.125,
    ph_mm_min: 1.75,
    w_mm_min: 4.05,
    h_mm_min: 1.75
  },
  {
    imperial: "1210",
    metric: "3225",
    p_mm_min: 2.925,
    pw_mm_min: 1.125,
    ph_mm_min: 2.65,
    w_mm_min: 4.05,
    h_mm_min: 2.65
  },
  {
    imperial: "2010",
    metric: "5025",
    p_mm_min: 4.625,
    pw_mm_min: 1.225,
    ph_mm_min: 2.65,
    w_mm_min: 5.85,
    h_mm_min: 2.65
  },
  {
    imperial: "2512",
    metric: "6332",
    p_mm_min: 5.925,
    pw_mm_min: 1.225,
    ph_mm_min: 3.35,
    w_mm_min: 7.15,
    h_mm_min: 3.35
  }
];
var metricMap = Object.fromEntries(footprintSizes.map((s3) => [s3.metric, s3]));
var imperialMap = Object.fromEntries(footprintSizes.map((s3) => [s3.imperial, s3]));
var passive_def = exports_external.object({
  tht: exports_external.boolean(),
  p: length.optional(),
  pw: length.optional(),
  ph: length.optional(),
  metric: distance2.optional(),
  imperial: distance2.optional(),
  w: length.optional(),
  h: length.optional(),
  textbottom: exports_external.boolean().optional()
});
var passive = (params) => {
  let { tht, p, pw, ph: ph2, metric, imperial, w: w3, h, textbottom } = params;
  if (typeof w3 === "string")
    w3 = mm_default(w3);
  if (typeof h === "string")
    h = mm_default(h);
  if (typeof p === "string")
    p = mm_default(p);
  if (typeof pw === "string")
    pw = mm_default(pw);
  if (typeof ph2 === "string")
    ph2 = mm_default(ph2);
  if (h !== undefined && w3 !== undefined && h > w3) {
    throw new Error("height cannot be greater than width (rotated footprint not yet implemented)");
  }
  let sz;
  if (metric)
    sz = metricMap[metric];
  if (imperial)
    sz = imperialMap[imperial];
  if (sz) {
    w3 = sz.w_mm_min;
    h = sz.h_mm_min;
    p = sz.p_mm_min;
    pw = sz.pw_mm_min;
    ph2 = sz.ph_mm_min;
  }
  if (p === undefined || pw === undefined || ph2 === undefined) {
    throw new Error("Could not determine required pad dimensions (p, pw, ph)");
  }
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: p / 2, y: ph2 / 2 + 0.4 },
      { x: -p / 2 - pw / 2 - 0.2, y: ph2 / 2 + 0.4 },
      { x: -p / 2 - pw / 2 - 0.2, y: -ph2 / 2 - 0.4 },
      { x: p / 2, y: -ph2 / 2 - 0.4 }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const textY = textbottom ? -ph2 / 2 - 0.9 : ph2 / 2 + 0.9;
  const silkscreenRefText = silkscreenRef(0, textY, 0.2);
  if (tht) {
    return [
      platedhole(1, -p / 2, 0, pw, pw * 1 / 0.8),
      platedhole(2, p / 2, 0, pw, pw * 1 / 0.8),
      silkscreenLine,
      silkscreenRefText
    ];
  } else {
    return [
      rectpad(["1", "left"], -p / 2, 0, pw, ph2),
      rectpad(["2", "right"], p / 2, 0, pw, ph2),
      silkscreenLine,
      silkscreenRefText
    ];
  }
};

// src/fn/diode.ts
var diode = (parameters) => {
  return { circuitJson: passive(parameters), parameters };
};
// src/fn/cap.ts
var cap = (parameters) => {
  return { circuitJson: passive(parameters), parameters };
};
// src/fn/led.ts
var led = (parameters) => {
  return { circuitJson: passive(parameters), parameters };
};
// src/fn/res.ts
var res = (parameters) => {
  return { circuitJson: passive(parameters), parameters };
};
// src/helpers/circlepad.ts
var circlepad = (pn2, { x, y, radius }) => {
  return {
    type: "pcb_smtpad",
    x,
    y,
    radius,
    layer: "top",
    shape: "circle",
    pcb_smtpad_id: "",
    port_hints: Array.isArray(pn2) ? pn2.map((item) => item.toString()) : [pn2.toString()]
  };
};

// src/helpers/zod/ALPHABET.ts
var ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

// src/helpers/zod/dim-2d.ts
var dim2d = exports_external.string().transform((a) => {
  const [x, y] = a.split(/[x ]/);
  return {
    x: parseFloat(x),
    y: parseFloat(y)
  };
}).pipe(exports_external.object({
  x: exports_external.number(),
  y: exports_external.number()
}));

// src/helpers/zod/function-call.ts
var function_call = exports_external.string().or(exports_external.array(exports_external.any())).transform((a) => {
  if (Array.isArray(a))
    return a;
  if (a.startsWith("(") && a.endsWith(")")) {
    a = a.slice(1, -1);
  }
  return a.split(",").map((v3) => {
    const numVal = Number(v3);
    return isNaN(numVal) ? v3 : numVal;
  });
}).pipe(exports_external.array(exports_external.string().or(exports_external.number())));

// src/fn/bga.ts
var bga_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.number().optional().default(64),
  grid: dim2d.optional(),
  p: distance2.default("0.8mm"),
  w: length.optional(),
  h: length.optional(),
  ball: length.optional().describe("ball diameter"),
  pad: length.optional().describe("pad width/height"),
  circularpads: exports_external.boolean().optional().describe("use circular pads"),
  tlorigin: exports_external.boolean().optional(),
  blorigin: exports_external.boolean().optional(),
  trorigin: exports_external.boolean().optional(),
  brorigin: exports_external.boolean().optional(),
  missing: function_call.default([])
}).transform((a) => {
  let origin = "tl";
  if (a.blorigin)
    origin = "bl";
  if (a.trorigin)
    origin = "tr";
  if (a.brorigin)
    origin = "br";
  if (!a.grid) {
    const largest_square = Math.ceil(Math.sqrt(a.num_pins));
    a.grid = { x: largest_square, y: largest_square };
  }
  if (a.missing) {
    a.missing = a.missing.map((s3) => {
      if (typeof s3 === "number")
        return s3;
      if (s3 === "center")
        return "center";
      if (s3 === "topleft")
        return "topleft";
      const m = s3.match(/([A-Z]+)(\d+)/);
      if (!m)
        return s3;
      const Y3 = ALPHABET.indexOf(m[1]);
      const X2 = Number.parseInt(m[2]) - 1;
      return Y3 * a.grid.x + X2 + 1;
    });
  }
  const new_def = { ...a, origin };
  return new_def;
});
var bga = (raw_params) => {
  const parameters = bga_def.parse(raw_params);
  let { num_pins, grid: grid2, p, w: w3, h, ball, pad, missing } = parameters;
  ball ??= 0.75 / 1.27 * p;
  pad ??= ball * 0.8;
  const pads = [];
  const missing_pin_nums = (missing ?? []).filter((a) => typeof a === "number");
  const num_pins_missing = grid2.x * grid2.y - num_pins;
  if (missing.length === 0 && num_pins_missing > 0) {
    if (Math.sqrt(num_pins_missing) % 1 === 0) {
      missing.push("center");
    } else if (num_pins_missing === 1) {
      missing.push("topleft");
    }
  }
  if (missing?.includes("center")) {
    const square_size = Math.floor(Math.sqrt(num_pins_missing));
    const inner_square_x = Math.floor((grid2.x - square_size) / 2);
    const inner_square_y = Math.floor((grid2.y - square_size) / 2);
    for (let y = inner_square_y;y < inner_square_y + square_size; y++) {
      for (let x = inner_square_x;x < inner_square_x + square_size; x++) {
        missing_pin_nums.push(y * grid2.x + x + 1);
      }
    }
  }
  if (missing?.includes("topleft")) {
    missing_pin_nums.push(1);
  }
  const missing_pin_nums_set = new Set(missing_pin_nums);
  let missing_pins_passed = 0;
  for (let y = 0;y < grid2.y; y++) {
    for (let x = 0;x < grid2.x; x++) {
      const pad_x = (x - (grid2.x - 1) / 2) * p;
      const pad_y = (y - (grid2.y - 1) / 2) * p;
      let pin_x = x;
      let pin_y = y;
      switch (parameters.origin) {
        case "bl":
          pin_x = x;
          pin_y = grid2.y - 1 - y;
          break;
        case "br":
          pin_x = grid2.x - 1 - x;
          pin_y = grid2.y - 1 - y;
          break;
        case "tr":
          pin_x = grid2.x - 1 - x;
          pin_y = y;
          break;
        case "tl":
        default:
          break;
      }
      let pin_num = pin_y * grid2.x + pin_x + 1;
      if (missing_pin_nums_set.has(pin_num)) {
        missing_pins_passed++;
        continue;
      }
      pin_num -= missing_pins_passed;
      const portHints = [pin_num, `${ALPHABET[pin_y]}${pin_x + 1}`];
      pads.push(parameters.circularpads ? circlepad(portHints, {
        x: pad_x,
        y: pad_y,
        radius: pad / 2
      }) : rectpad(portHints, pad_x, pad_y, pad, pad));
    }
  }
  const silkscreenRefText = silkscreenRef(0, grid2.y * p / 2, 0.2);
  const pin1MarkerSize = p / 6;
  let markerRoute;
  const edgeX = grid2.x * p / 2;
  const edgeY = grid2.y * p / 2;
  switch (parameters.origin) {
    case "bl":
      markerRoute = [
        { x: -edgeX, y: -edgeY },
        { x: -edgeX, y: -edgeY - pin1MarkerSize },
        { x: -edgeX - pin1MarkerSize, y: -edgeY },
        { x: -edgeX, y: -edgeY }
      ];
      break;
    case "br":
      markerRoute = [
        { x: edgeX, y: -edgeY },
        { x: edgeX, y: -edgeY - pin1MarkerSize },
        { x: edgeX + pin1MarkerSize, y: -edgeY },
        { x: edgeX, y: -edgeY }
      ];
      break;
    case "tr":
      markerRoute = [
        { x: edgeX, y: edgeY },
        { x: edgeX, y: edgeY + pin1MarkerSize },
        { x: edgeX + pin1MarkerSize, y: edgeY },
        { x: edgeX, y: edgeY }
      ];
      break;
    case "tl":
    default:
      markerRoute = [
        { x: -edgeX, y: edgeY },
        { x: -edgeX, y: edgeY + pin1MarkerSize },
        { x: -edgeX - pin1MarkerSize, y: edgeY },
        { x: -edgeX, y: edgeY }
      ];
      break;
  }
  const pin1Marker = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "pin1_marker",
    route: markerRoute,
    stroke_width: 0.05
  };
  return {
    circuitJson: [...pads, silkscreenRefText, pin1Marker],
    parameters
  };
};
// src/helpers/pillpad.ts
var pillpad = (pn2, x, y, w3, h) => {
  return {
    type: "pcb_smtpad",
    x,
    y,
    width: w3,
    height: h,
    radius: h / 2,
    layer: "top",
    shape: "pill",
    pcb_smtpad_id: "",
    port_hints: Array.isArray(pn2) ? pn2.map((item) => item.toString()) : [pn2.toString()]
  };
};

// src/fn/soic.ts
var extendSoicDef = (newDefaults) => exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.number().optional().default(8),
  w: length.default(length.parse(newDefaults.w ?? "5.3mm")),
  p: length.default(length.parse(newDefaults.p ?? "1.27mm")),
  pw: length.default(length.parse(newDefaults.pw ?? "0.6mm")),
  pl: length.default(length.parse(newDefaults.pl ?? "1.0mm")),
  legsoutside: exports_external.boolean().optional().default(newDefaults.legsoutside ?? false),
  pillpads: exports_external.boolean().optional().default(newDefaults.pillpads ?? false)
}).transform((v3) => {
  if (!v3.pw && !v3.pl) {
    v3.pw = length.parse("0.6mm");
    v3.pl = length.parse("1.0mm");
  } else if (!v3.pw) {
    v3.pw = v3.pl * (0.6 / 1);
  } else if (!v3.pl) {
    v3.pl = v3.pw * (1 / 0.6);
  }
  return v3;
});
var soic_def = extendSoicDef({});
var getCcwSoicCoords = (parameters) => {
  if (parameters.widthincludeslegs !== undefined) {
    parameters.legsoutside = !parameters.widthincludeslegs;
  }
  const { num_pins, pn: pn2, w: w3, p, pl: pl2, legsoutside } = parameters;
  const ph2 = num_pins / 2;
  const isLeft = pn2 <= ph2;
  const leftPinGaps = ph2 - 1;
  const gs2 = p;
  const h = gs2 * leftPinGaps;
  const legoffset = legsoutside ? pl2 / 2 : -pl2 / 2;
  if (isLeft) {
    return { x: -w3 / 2 - legoffset, y: h / 2 - (pn2 - 1) * gs2 };
  }
  return { x: w3 / 2 + legoffset, y: -h / 2 + (pn2 - ph2 - 1) * gs2 };
};
var soic = (raw_params) => {
  const parameters = soic_def.parse(raw_params);
  return {
    circuitJson: soicWithoutParsing(parameters),
    parameters
  };
};
var soicWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getCcwSoicCoords({
      num_pins: parameters.num_pins,
      pn: i + 1,
      w: parameters.w,
      p: parameters.p,
      pl: parameters.pl,
      legsoutside: parameters.legsoutside
    });
    if (parameters.pillpads) {
      pads.push(pillpad(i + 1, x, y, parameters.pl, parameters.pw));
    } else {
      pads.push(rectpad(i + 1, x, y, parameters.pl, parameters.pw));
    }
  }
  const m = Math.min(1, parameters.p / 2);
  const sw = parameters.w - (parameters.legsoutside ? 0 : parameters.pl * 2) - 0.2;
  const sh2 = (parameters.num_pins / 2 - 1) * parameters.p + parameters.pw + m;
  const silkscreenRefText = silkscreenRef(0, sh2 / 2 + 0.4, sh2 / 12);
  const silkscreenBorder = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    stroke_width: 0.1,
    route: [
      { x: -sw / 2, y: -sh2 / 2 },
      { x: -sw / 2, y: sh2 / 2 },
      ...u_curve.map(({ x, y }) => ({
        x: x * sw / 6,
        y: y * sw / 6 + sh2 / 2
      })),
      { x: sw / 2, y: sh2 / 2 },
      { x: sw / 2, y: -sh2 / 2 },
      { x: -sw / 2, y: -sh2 / 2 }
    ]
  };
  return [...pads, silkscreenBorder, silkscreenRefText];
};
// src/helpers/zod/pin-order-specifier.ts
var pin_order_specifier = exports_external.enum([
  "leftside",
  "topside",
  "rightside",
  "bottomside",
  "toppin",
  "bottompin",
  "leftpin",
  "rightpin"
]);

// src/helpers/get-quad-pin-map.ts
var getQuadPinMap = ({
  num_pins,
  cw,
  ccw,
  startingpin
}) => {
  const pin_map = [];
  const pins_per_side = num_pins / 4;
  let current_position_ccw_normal = 1;
  const sfp = {};
  for (const specifier of startingpin ?? []) {
    sfp[specifier] = true;
  }
  if (!sfp.leftside && !sfp.topside && !sfp.rightside && !sfp.bottomside) {
    sfp.leftside = true;
  }
  if (!sfp.bottompin && !sfp.leftpin && !sfp.rightpin && !sfp.toppin) {
    if (sfp.leftside) {
      sfp.toppin = true;
    } else if (sfp.topside) {
      sfp.rightpin = true;
    } else if (sfp.rightside) {
      sfp.bottompin = true;
    } else if (sfp.bottomside) {
      sfp.leftpin = true;
    }
  }
  if (sfp.leftside && sfp.toppin) {
    current_position_ccw_normal = 1;
  } else if (sfp.leftside && sfp.bottompin) {
    current_position_ccw_normal = pins_per_side;
  } else if (sfp.bottomside && sfp.leftpin) {
    current_position_ccw_normal = pins_per_side + 1;
  } else if (sfp.bottomside && sfp.rightpin) {
    current_position_ccw_normal = pins_per_side * 2;
  } else if (sfp.rightside && sfp.bottompin) {
    current_position_ccw_normal = pins_per_side * 2 + 1;
  } else if (sfp.rightside && sfp.toppin) {
    current_position_ccw_normal = pins_per_side * 3;
  } else if (sfp.topside && sfp.rightpin) {
    current_position_ccw_normal = pins_per_side * 3 + 1;
  } else if (sfp.topside && sfp.leftpin) {
    current_position_ccw_normal = pins_per_side * 4;
  }
  pin_map.push(-1);
  for (let i = 0;i < num_pins; i++) {
    pin_map[current_position_ccw_normal] = i + 1;
    if (ccw || !cw) {
      current_position_ccw_normal++;
      if (current_position_ccw_normal > num_pins) {
        current_position_ccw_normal = 1;
      }
    } else {
      current_position_ccw_normal--;
      if (current_position_ccw_normal < 1) {
        current_position_ccw_normal = num_pins;
      }
    }
  }
  return pin_map;
};

// src/fn/quad.ts
var base_quad_def = exports_external.object({
  fn: exports_external.string(),
  cc: exports_external.boolean().default(true).optional(),
  ccw: exports_external.boolean().default(true).optional(),
  startingpin: exports_external.string().or(exports_external.array(pin_order_specifier)).transform((a) => typeof a === "string" ? a.slice(1, -1).split(",") : a).pipe(exports_external.array(pin_order_specifier)).optional(),
  num_pins: exports_external.number().optional().default(64),
  w: length.optional(),
  h: length.optional(),
  p: length.default(length.parse("0.5mm")),
  pw: length.optional(),
  pl: length.optional(),
  thermalpad: exports_external.union([exports_external.literal(true), dim2d]).optional(),
  legsoutside: exports_external.boolean().default(false)
});
var quadTransform = (v3) => {
  if (v3.w && !v3.h) {
    v3.h = v3.w;
  } else if (!v3.w && v3.h) {
    v3.w = v3.h;
  }
  const side_pin_count = v3.num_pins / 4;
  if (!v3.p && !v3.pw && !v3.pl && v3.w) {
    const approx_pin_size_of_side = side_pin_count + 4;
    v3.p = v3.w / approx_pin_size_of_side;
  }
  if (!v3.p && v3.w && v3.h && v3.pw && v3.pl) {
    v3.p = (v3.w - v3.pl * 2) / (side_pin_count - 1);
  }
  if (!v3.w && !v3.h && v3.p) {
    v3.w = v3.p * (side_pin_count + 4);
    v3.h = v3.w;
  }
  if (v3.p && !v3.pw && !v3.pl) {
    v3.pw = v3.p / 2;
    v3.pl = v3.p / 2;
  } else if (!v3.pw) {
    v3.pw = v3.pl * (0.6 / 1);
  } else if (!v3.pl) {
    v3.pl = v3.pw * (1 / 0.6);
  }
  return v3;
};
var quad_def = base_quad_def.transform(quadTransform);
var SIDES_CCW = ["left", "bottom", "right", "top"];
var getQuadCoords = (params) => {
  const { pin_count, pn: pn2, w: w3, h, p, pl: pl2, legsoutside } = params;
  const sidePinCount = pin_count / 4;
  const side = SIDES_CCW[Math.floor((pn2 - 1) / sidePinCount)];
  const pos = (pn2 - 1) % sidePinCount;
  const ibw = p * (sidePinCount - 1);
  const ibh = p * (sidePinCount - 1);
  const pcdfe = legsoutside ? pl2 / 2 : -pl2 / 2;
  switch (side) {
    case "left":
      return { x: -w3 / 2 - pcdfe, y: ibh / 2 - pos * p, o: "vert" };
    case "bottom":
      return { x: -ibw / 2 + pos * p, y: -h / 2 - pcdfe, o: "horz" };
    case "right":
      return { x: w3 / 2 + pcdfe, y: -ibh / 2 + pos * p, o: "vert" };
    case "top":
      return { x: ibw / 2 - pos * p, y: h / 2 + pcdfe, o: "horz" };
    default:
      throw new Error("Invalid pin number");
  }
};
var quad = (raw_params) => {
  const parameters = quad_def.parse(raw_params);
  const pads = [];
  const pin_map = getQuadPinMap(parameters);
  const spc = parameters.num_pins / 4;
  for (let i = 0;i < parameters.num_pins; i++) {
    const {
      x,
      y,
      o: orientation2
    } = getQuadCoords({
      pin_count: parameters.num_pins,
      pn: i + 1,
      w: parameters.w,
      h: parameters.h,
      p: parameters.p ?? 0.5,
      pl: parameters.pl,
      legsoutside: parameters.legsoutside
    });
    let pw = parameters.pw;
    let pl2 = parameters.pl;
    if (orientation2 === "vert") {
      [pw, pl2] = [pl2, pw];
    }
    const pn2 = pin_map[i + 1];
    pads.push(rectpad(pn2, x, y, pw, pl2));
  }
  if (parameters.thermalpad) {
    if (typeof parameters.thermalpad === "boolean") {
      const ibw = parameters.p * (spc - 1) + parameters.pw;
      const ibh = parameters.p * (spc - 1) + parameters.pw;
      pads.push(rectpad(["thermalpad"], 0, 0, ibw, ibh));
    } else {
      pads.push(rectpad(["thermalpad"], 0, 0, parameters.thermalpad.x, parameters.thermalpad.y));
    }
  }
  const silkscreen_corners = [];
  for (const [corner, dx2, dy2] of [
    ["top-left", -1, 1],
    ["bottom-left", -1, -1],
    ["bottom-right", 1, -1],
    ["top-right", 1, 1]
  ]) {
    const corner_x = parameters.w / 2 * dx2;
    const corner_y = parameters.h / 2 * dy2;
    let arrow = "none";
    let arrow_x = corner_x;
    let arrow_y = corner_y;
    const csz = parameters.pw * 2;
    if (pin_map[1] === 1 && corner === "top-left") {
      arrow = "in1";
    } else if (pin_map[spc * 4] === 1 && corner === "top-left") {
      arrow = "in2";
    } else if (pin_map[spc * 3 + 1] === 1 && corner === "top-right") {
      arrow = "in2";
    } else if (pin_map[spc * 3] === 1 && corner === "top-right") {
      arrow = "in1";
    } else if (pin_map[spc] === 1 && corner === "bottom-left") {
      arrow = "in1";
    } else if (pin_map[spc + 1] === 1 && corner === "bottom-left") {
      arrow = "in2";
    } else if (pin_map[spc * 2] === 1 && corner === "bottom-right") {
      arrow = "in1";
    } else if (pin_map[spc * 2 + 1] === 1 && corner === "bottom-right") {
      arrow = "in2";
    }
    const rotate_arrow = arrow === "in1" ? 1 : -1;
    if (parameters.legsoutside) {
      const arrow_dx = arrow === "in1" ? parameters.pl / 2 : parameters.pw / 2;
      const arrow_dy = arrow === "in1" ? parameters.pw / 2 : parameters.pl / 2;
      arrow_x += arrow_dx * dx2 * rotate_arrow;
      arrow_y -= arrow_dy * dy2 * rotate_arrow;
    }
    if (arrow === "none" || parameters.legsoutside) {
      silkscreen_corners.push({
        layer: "top",
        pcb_component_id: "",
        pcb_silkscreen_path_id: `pcb_silkscreen_path_${corner}`,
        route: [
          {
            x: corner_x - csz * dx2,
            y: corner_y
          },
          {
            x: corner_x,
            y: corner_y
          },
          {
            x: corner_x,
            y: corner_y - csz * dy2
          }
        ],
        type: "pcb_silkscreen_path",
        stroke_width: 0.1
      });
    }
    if ((arrow === "in1" || arrow === "in2") && !parameters.legsoutside) {
      silkscreen_corners.push({
        layer: "top",
        pcb_component_id: "",
        pcb_silkscreen_path_id: `pcb_silkscreen_path_${corner}_1`,
        route: [
          {
            x: corner_x - csz * dx2,
            y: corner_y
          },
          {
            x: corner_x - csz * dx2 / 2,
            y: corner_y
          }
        ],
        type: "pcb_silkscreen_path",
        stroke_width: 0
      }, {
        layer: "top",
        pcb_component_id: "",
        pcb_silkscreen_path_id: `pcb_silkscreen_path_${corner}_2`,
        route: [
          {
            x: corner_x,
            y: corner_y - csz * dy2 / 2
          },
          {
            x: corner_x,
            y: corner_y - csz * dy2
          }
        ],
        type: "pcb_silkscreen_path",
        stroke_width: 0.1
      });
    }
    if (arrow === "in1" || arrow === "in2") {
      silkscreen_corners.push({
        layer: "top",
        pcb_component_id: "",
        pcb_silkscreen_path_id: `pcb_silkscreen_path_${corner}_3`,
        route: [
          {
            x: arrow_x - 0.2 * -dx2,
            y: arrow_y + 0.2 * rotate_arrow
          },
          {
            x: arrow_x,
            y: arrow_y
          },
          {
            x: arrow_x + 0.2 * rotate_arrow * -dx2,
            y: arrow_y + 0.2
          },
          {
            x: arrow_x - 0.2 * -dx2,
            y: arrow_y + 0.2 * rotate_arrow
          }
        ],
        type: "pcb_silkscreen_path",
        stroke_width: 0.1
      });
    }
  }
  const silkscreenRefText = silkscreenRef(0, parameters.h / 2 + (parameters.legsoutside ? parameters.pl * 1.2 : 0.5), 0.3);
  return {
    circuitJson: [
      ...pads,
      ...silkscreen_corners,
      silkscreenRefText
    ],
    parameters
  };
};
// src/fn/qfn.ts
var qfn_def = base_quad_def.extend({}).transform(quadTransform);
var qfn = (parameters) => {
  parameters.legsoutside = false;
  return quad(parameters);
};
// src/fn/tqfp.ts
var tqfp = (raw_params) => {
  raw_params.legsoutside = true;
  return quad(raw_params);
};
// src/fn/qfp.ts
var qfp = (raw_params) => {
  raw_params.legsoutside = true;
  const quad_defaults = quad_def.parse(raw_params);
  if (!raw_params.p) {
    switch (raw_params.num_pins) {
      case 44:
      case 64:
        raw_params.p = 0.8;
        break;
      case 52:
        if (raw_params.w === 14)
          raw_params.p = 1;
        else
          raw_params.p = 0.65;
        break;
      case 208:
        raw_params.p = 0.5;
        break;
    }
  }
  if (!raw_params.pl) {
    switch (raw_params.num_pins) {
      case 44:
      case 52:
      case 64:
        raw_params.pl = 2.25;
        break;
      case 208:
        raw_params.pl = 1.65;
        break;
      default:
        raw_params.pl = quad_defaults.pl * 4;
        break;
    }
  }
  if (!raw_params.pw) {
    switch (raw_params.num_pins) {
      case 44:
      case 64:
        raw_params.pw = 0.5;
        break;
      case 52:
        if (raw_params.w === 14)
          raw_params.pw = 0.45;
        else
          raw_params.pw = 0.55;
        break;
      case 208:
        raw_params.pw = 0.3;
        break;
      default:
        raw_params.pw = quad_defaults.pw;
        break;
    }
  }
  return quad(raw_params);
};
// src/fn/mlp.ts
var mlp_def = base_quad_def.extend({}).transform(quadTransform);
var mlp = (parameters) => {
  parameters.legsoutside = false;
  if (parameters.thermalpad === undefined) {
    parameters.thermalpad = true;
  }
  return quad(parameters);
};
// src/fn/ssop.ts
var ssop_def = extendSoicDef({
  w: "3.9mm",
  p: "1.27mm"
});
var ssop = (raw_params) => {
  const parameters = ssop_def.parse(raw_params);
  return {
    circuitJson: soicWithoutParsing(parameters),
    parameters
  };
};
// src/fn/tssop.ts
var tssop_def = extendSoicDef({
  w: "7.1mm",
  p: "0.65mm",
  pl: "1.35mm",
  pw: "0.40mm",
  legsoutside: true
});
var tssop = (raw_params) => {
  const parameters = tssop_def.parse(raw_params);
  return {
    circuitJson: soicWithoutParsing(parameters),
    parameters
  };
};
// src/fn/sot363.ts
var sot363_def = extendSoicDef({});
var sot363 = (raw_params) => {
  const parameters = sot363_def.parse({
    fn: "sot363",
    num_pins: 6,
    w: 1.94,
    p: 0.65,
    pw: 0.3,
    pl: 0.7,
    legoutside: true
  });
  return {
    circuitJson: soicWithoutParsing(parameters),
    parameters
  };
};
// src/fn/sot23.ts
var sot23_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.number().default(3),
  w: exports_external.string().default("1.92mm"),
  h: exports_external.string().default("2.74mm"),
  pl: exports_external.string().default("0.8mm"),
  pw: exports_external.string().default("0.764mm"),
  p: exports_external.string().default("0.95mm"),
  string: exports_external.string().optional()
});
var sot23_6_or_8_def = extendSoicDef({
  p: "0.95mm",
  w: "1.6mm",
  legsoutside: true
});
var sot23 = (raw_params) => {
  const match = raw_params.string?.match(/^sot23_(\d+)/);
  const numPins = match ? Number.parseInt(match[1], 10) : 3;
  if (numPins === 6 || numPins === 8) {
    const parameters2 = sot23_6_or_8_def.parse({
      ...raw_params,
      num_pins: numPins
    });
    return {
      circuitJson: soicWithoutParsing(parameters2),
      parameters: parameters2
    };
  }
  const parameters = sot23_def.parse({
    ...raw_params,
    num_pins: numPins
  });
  if (parameters.num_pins === 3) {
    return {
      circuitJson: sot23_3(parameters),
      parameters
    };
  }
  if (parameters.num_pins === 5) {
    return {
      circuitJson: sot23_5(parameters),
      parameters
    };
  }
  throw new Error("Invalid number of pins");
};
var getCcwSot23Coords = (parameters) => {
  const { pn: pn2, w: w3, h, pl: pl2 } = parameters;
  if (pn2 === 1) {
    return { x: -1.7, y: 0 };
  }
  if (pn2 === 2) {
    return { x: 1.7, y: -0.95 };
  }
  return { x: 1.7, y: 0.95 };
};
var sot23_3 = (parameters) => {
  const pads = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getCcwSot23Coords({
      num_pins: parameters.num_pins,
      pn: i + 1,
      w: Number.parseFloat(parameters.w),
      h: Number.parseFloat(parameters.h),
      pl: Number.parseFloat(parameters.pl)
    });
    pads.push(rectpad(i + 1, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  const silkscreenRefText = silkscreenRef(0, Number.parseInt(parameters.h), 0.3);
  return [...pads, silkscreenRefText];
};
var getCcwSot235Coords = (parameters) => {
  const { p, h, pn: pn2 } = parameters;
  if (pn2 === 1) {
    return { x: -h / 2 - 0.5, y: p };
  }
  if (pn2 === 2) {
    return { x: -h / 2 - 0.5, y: 0 };
  }
  if (pn2 === 3) {
    return { x: -h / 2 - 0.5, y: -p };
  }
  if (pn2 === 4) {
    return { x: h / 2 + 0.5, y: -p };
  }
  if (pn2 === 5) {
    return { x: h / 2 + 0.5, y: p };
  }
  throw new Error("Invalid pin number");
};
var sot23_5 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getCcwSot235Coords({
      h: Number.parseFloat(parameters.h),
      p: Number.parseFloat(parameters.p),
      pn: i
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  const width = (parameters.num_pins + 1) / 2 * Number.parseFloat(parameters.p);
  const height = Number.parseFloat(parameters.h);
  const silkscreenPath1 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width / 3, y: height / 2 + Number.parseFloat(parameters.p) / 1.3 },
      { x: width / 3, y: height / 2 + Number.parseFloat(parameters.p) / 1.3 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.05
  };
  const silkscreenPath2 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width / 3, y: -height / 2 - Number.parseFloat(parameters.p) / 1.3 },
      { x: width / 3, y: -height / 2 - Number.parseFloat(parameters.p) / 1.3 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.05
  };
  const silkscreenRefText = silkscreenRef(0, height + 0.3, 0.3);
  const pin1Position = getCcwSot235Coords({
    h: Number.parseFloat(parameters.h),
    p: Number.parseFloat(parameters.p),
    pn: 1
  });
  pin1Position.x = pin1Position.x - Number.parseFloat(parameters.pw) * 1.5;
  const triangleHeight = 0.7;
  const triangleWidth = 0.3;
  const pin1Indicator = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "pin1_indicator",
    route: [
      {
        x: pin1Position.x + triangleHeight / 2,
        y: pin1Position.y
      },
      {
        x: pin1Position.x - triangleHeight / 2,
        y: pin1Position.y + triangleWidth / 2
      },
      {
        x: pin1Position.x - triangleHeight / 2,
        y: pin1Position.y - triangleWidth / 2
      },
      {
        x: pin1Position.x + triangleHeight / 2,
        y: pin1Position.y
      }
    ],
    stroke_width: 0.05
  };
  return [
    ...pads,
    silkscreenRefText,
    silkscreenPath1,
    silkscreenPath2,
    pin1Indicator
  ];
};
// src/fn/sot25.ts
var sot25_def = sot23_def.extend({});
var sot25 = (raw_params) => {
  const parameters = sot25_def.parse({
    ...raw_params,
    num_pins: 5
  });
  return {
    circuitJson: sot23_5(parameters),
    parameters
  };
};
// src/helpers/corner.ts
var CORNERS = [
  { name: "top-left", dx: -1, dy: 1 },
  { name: "top-right", dx: 1, dy: 1 },
  { name: "bottom-left", dx: -1, dy: -1 },
  { name: "bottom-right", dx: 1, dy: -1 }
];

// src/fn/dfn.ts
var dfn_def = extendSoicDef({});
var dfn = (raw_params) => {
  const parameters = dfn_def.parse(raw_params);
  const pads = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getCcwSoicCoords({
      num_pins: parameters.num_pins,
      pn: i + 1,
      w: parameters.w,
      p: parameters.p ?? 1.27,
      pl: parameters.pl,
      widthincludeslegs: true
    });
    pads.push(rectpad(i + 1, x, y, parameters.pl ?? "1mm", parameters.pw ?? "0.6mm"));
  }
  const m = Math.min(1, parameters.p / 2);
  const sw = parameters.w + m;
  const sh2 = (parameters.num_pins / 2 - 1) * parameters.p + parameters.pw + m;
  const silkscreenPaths = [];
  for (const corner of CORNERS) {
    const { dx: dx2, dy: dy2 } = corner;
    silkscreenPaths.push({
      layer: "top",
      pcb_component_id: "",
      pcb_silkscreen_path_id: "",
      route: [
        { x: dx2 * sw / 2 - dx2 * parameters.p, y: dy2 * sh2 / 2 },
        { x: dx2 * sw / 2, y: dy2 * sh2 / 2 },
        { x: dx2 * sw / 2, y: dy2 * sh2 / 2 - dy2 * parameters.p }
      ],
      type: "pcb_silkscreen_path",
      stroke_width: 0.1
    });
  }
  const as2 = parameters.p / 4;
  const atx = -sw / 2 - as2 / 2;
  const aty = sh2 / 2 - parameters.p / 2;
  silkscreenPaths.push({
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "",
    type: "pcb_silkscreen_path",
    route: [
      {
        x: atx,
        y: aty
      },
      {
        x: atx - as2,
        y: aty + as2
      },
      {
        x: atx - as2,
        y: aty - as2
      },
      {
        x: atx,
        y: aty
      }
    ],
    stroke_width: 0.1
  });
  const silkscreenRefText = silkscreenRef(0, sh2 / 2 + 0.4, sh2 / 12);
  return {
    circuitJson: [
      ...pads,
      silkscreenRefText,
      ...silkscreenPaths
    ],
    parameters
  };
};
// src/helpers/silkscreenPin.ts
var silkscreenPin = ({
  fs: fs2,
  pn: pn2,
  anchor_x,
  anchor_y,
  textalign = "center",
  orthogonal = false,
  verticallyinverted = false,
  layer = "top"
}) => {
  let ccw_rotation = 0;
  if (orthogonal && verticallyinverted) {
    ccw_rotation = 270;
  } else if (verticallyinverted) {
    ccw_rotation = 180;
  } else if (orthogonal) {
    ccw_rotation = 90;
  } else {
    ccw_rotation = 0;
  }
  let anchor_alignment = "center";
  if (textalign === "left") {
    if (verticallyinverted)
      anchor_alignment = "center_right";
    else
      anchor_alignment = "center_left";
  }
  if (textalign === "right") {
    if (verticallyinverted)
      anchor_alignment = "center_left";
    else
      anchor_alignment = "center_right";
  }
  if (layer === "bottom") {
    if (anchor_alignment === "center_left") {
      anchor_alignment = "center_right";
    } else if (anchor_alignment === "center_right") {
      anchor_alignment = "center_left";
    }
  }
  return {
    type: "pcb_silkscreen_text",
    pcb_silkscreen_text_id: "silkscreen_text_1",
    font: "tscircuit2024",
    font_size: fs2,
    pcb_component_id: "pcb_component_1",
    text: `{PIN${pn2}}`,
    layer,
    anchor_position: { x: anchor_x, y: anchor_y },
    anchor_alignment,
    ccw_rotation
  };
};

// src/helpers/determine-pin-label-anchor-side.ts
function determinePinlabelAnchorSide({
  pinlabeltextalignleft,
  pinlabeltextalignright,
  pinlabelorthogonal
}) {
  let pinlabelAnchorSide = "top";
  if (pinlabelorthogonal) {
    pinlabelAnchorSide = "left";
  } else {
    pinlabelAnchorSide = "top";
  }
  if (pinlabeltextalignleft) {
    if (pinlabelorthogonal) {
      pinlabelAnchorSide = "bottom";
    } else {
      pinlabelAnchorSide = "right";
    }
  }
  if (pinlabeltextalignright) {
    if (pinlabelorthogonal) {
      pinlabelAnchorSide = "top";
    } else {
      pinlabelAnchorSide = "left";
    }
  }
  return pinlabelAnchorSide;
}

// src/fn/pinrow.ts
var pinrow_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.number().optional().default(6),
  rows: exports_external.union([exports_external.string(), exports_external.number()]).transform((val) => Number(val)).optional().default(1).describe("number of rows"),
  p: length.default("0.1in").describe("pitch"),
  id: length.default("1.0mm").describe("inner diameter"),
  od: length.default("1.5mm").describe("outer diameter"),
  male: exports_external.boolean().optional().describe("for male pin headers"),
  female: exports_external.boolean().optional().describe("for female pin headers"),
  pinlabeltextalignleft: exports_external.boolean().optional().default(false),
  pinlabeltextaligncenter: exports_external.boolean().optional().default(false),
  pinlabeltextalignright: exports_external.boolean().optional().default(false),
  pinlabelverticallyinverted: exports_external.boolean().optional().default(false),
  pinlabelorthogonal: exports_external.boolean().optional().default(false),
  nosquareplating: exports_external.boolean().optional().default(false).describe("do not use rectangular pad for pin 1"),
  nopinlabels: exports_external.boolean().optional().default(false).describe("omit silkscreen pin labels"),
  doublesidedpinlabel: exports_external.boolean().optional().default(false).describe("add silkscreen pins in top and bottom layers"),
  bottomsidepinlabel: exports_external.boolean().optional().default(false).describe("place the silkscreen reference text on the bottom layer instead of top")
}).transform((data) => {
  const pinlabelAnchorSide = determinePinlabelAnchorSide(data);
  return {
    ...data,
    pinlabelAnchorSide,
    male: data.male ?? (data.female ? false : true),
    female: data.female ?? false
  };
}).superRefine((data, ctx) => {
  if (data.male && data.female) {
    ctx.addIssue({
      code: exports_external.ZodIssueCode.custom,
      message: "'male' and 'female' cannot both be true; it should be male or female.",
      path: ["male", "female"]
    });
  }
});
var pinrow = (raw_params) => {
  const parameters = pinrow_def.parse(raw_params);
  const {
    p,
    id,
    od,
    rows,
    num_pins,
    pinlabelAnchorSide,
    pinlabelverticallyinverted,
    pinlabelorthogonal,
    pinlabeltextalignleft,
    pinlabeltextalignright,
    nopinlabels,
    doublesidedpinlabel,
    bottomsidepinlabel
  } = parameters;
  let pinlabelTextAlign = "center";
  if (pinlabeltextalignleft)
    pinlabelTextAlign = "left";
  else if (pinlabeltextalignright)
    pinlabelTextAlign = "right";
  const holes = [];
  const numPinsPerRow = Math.ceil(num_pins / rows);
  const ySpacing = -p;
  const calculateAnchorPosition = ({
    xoff,
    yoff,
    od: od2,
    anchorSide
  }) => {
    let dx2 = 0, dy2 = 0;
    const offset = od2 * 0.75;
    switch (anchorSide) {
      case "right":
        dx2 = offset;
        break;
      case "top":
        dy2 = offset;
        break;
      case "bottom":
        dy2 = -offset;
        break;
      case "left":
        dx2 = -offset;
        break;
    }
    return { anchor_x: xoff + dx2, anchor_y: yoff + dy2 };
  };
  const addPin = (pinNumber, xoff, yoff) => {
    if (pinNumber === 1 && !parameters.nosquareplating) {
      holes.push(platedHoleWithRectPad(pinNumber, xoff, yoff, id, od, od));
    } else {
      holes.push(platedhole(pinNumber, xoff, yoff, id, od));
    }
    const { anchor_x, anchor_y } = calculateAnchorPosition({
      xoff,
      yoff,
      od,
      anchorSide: pinlabelAnchorSide
    });
    if (!nopinlabels) {
      if (!bottomsidepinlabel) {
        holes.push(silkscreenPin({
          fs: od / 5,
          pn: pinNumber,
          anchor_x,
          anchor_y,
          anchorplacement: pinlabelAnchorSide,
          textalign: pinlabelTextAlign,
          orthogonal: pinlabelorthogonal,
          verticallyinverted: pinlabelverticallyinverted,
          layer: "top"
        }));
      } else {
        holes.push(silkscreenPin({
          fs: od / 5,
          pn: pinNumber,
          anchor_x,
          anchor_y,
          anchorplacement: pinlabelAnchorSide,
          textalign: pinlabelTextAlign,
          orthogonal: pinlabelorthogonal,
          verticallyinverted: pinlabelverticallyinverted,
          layer: "bottom"
        }));
      }
      if (doublesidedpinlabel) {
        holes.push(silkscreenPin({
          fs: od / 5,
          pn: pinNumber,
          anchor_x,
          anchor_y,
          anchorplacement: pinlabelAnchorSide,
          textalign: pinlabelTextAlign,
          orthogonal: pinlabelorthogonal,
          verticallyinverted: pinlabelverticallyinverted,
          layer: "bottom"
        }));
      }
    }
  };
  const usedPositions = new Set;
  const useBGAStyle = rows > 2 && numPinsPerRow > 2;
  if (rows === 1) {
    const xStart = -((num_pins - 1) / 2) * p;
    for (let i = 0;i < num_pins; i++) {
      const pinNumber = i + 1;
      const xoff = xStart + i * p;
      const posKey = `${xoff},${0}`;
      if (usedPositions.has(posKey))
        throw new Error(`Overlap at ${posKey}`);
      usedPositions.add(posKey);
      addPin(pinNumber, xoff, 0);
    }
  } else if (useBGAStyle) {
    const xStart = -((numPinsPerRow - 1) / 2) * p;
    let currentPin = 1;
    for (let row = 0;row < rows && currentPin <= num_pins; row++) {
      for (let col = 0;col < numPinsPerRow && currentPin <= num_pins; col++) {
        const xoff = xStart + col * p;
        const yoff = row * ySpacing;
        const posKey = `${xoff},${yoff}`;
        if (usedPositions.has(posKey))
          throw new Error(`Overlap at ${posKey}`);
        usedPositions.add(posKey);
        addPin(currentPin++, xoff, yoff);
      }
    }
  } else {
    const xStart = -((numPinsPerRow - 1) / 2) * p;
    let currentPin = 1;
    let top = 0;
    let bottom = rows - 1;
    let left = 0;
    let right = numPinsPerRow - 1;
    while (currentPin <= num_pins && top <= bottom && left <= right) {
      for (let row = top;row <= bottom && currentPin <= num_pins; row++) {
        const xoff = xStart + left * p;
        const yoff = row * ySpacing;
        const posKey = `${xoff},${yoff}`;
        if (usedPositions.has(posKey))
          throw new Error(`Overlap at ${posKey}`);
        usedPositions.add(posKey);
        addPin(currentPin++, xoff, yoff);
      }
      left++;
      for (let col = left;col <= right && currentPin <= num_pins; col++) {
        const xoff = xStart + col * p;
        const yoff = bottom * ySpacing;
        const posKey = `${xoff},${yoff}`;
        if (usedPositions.has(posKey))
          throw new Error(`Overlap at ${posKey}`);
        usedPositions.add(posKey);
        addPin(currentPin++, xoff, yoff);
      }
      bottom--;
      if (left <= right) {
        for (let row = bottom;row >= top && currentPin <= num_pins; row--) {
          const xoff = xStart + right * p;
          const yoff = row * ySpacing;
          const posKey = `${xoff},${yoff}`;
          if (usedPositions.has(posKey))
            throw new Error(`Overlap at ${posKey}`);
          usedPositions.add(posKey);
          addPin(currentPin++, xoff, yoff);
        }
        right--;
      }
      if (top <= bottom) {
        for (let col = right;col >= left && currentPin <= num_pins; col--) {
          const xoff = xStart + col * p;
          const yoff = top * ySpacing;
          const posKey = `${xoff},${yoff}`;
          if (usedPositions.has(posKey))
            throw new Error(`Overlap at ${posKey}`);
          usedPositions.add(posKey);
          addPin(currentPin++, xoff, yoff);
        }
        top++;
      }
    }
    if (currentPin - 1 < num_pins) {
      throw new Error(`Missing pins: assigned ${currentPin - 1}, expected ${num_pins}`);
    }
  }
  const refText = silkscreenRef(0, p, 0.5);
  return {
    circuitJson: [...holes, refText],
    parameters
  };
};
// src/fn/sot563.ts
var sot563_def = extendSoicDef({});
var sot563 = (raw_params) => {
  const parameters = sot563_def.parse({
    fn: "sot563",
    num_pins: 6,
    w: 1.94,
    p: 0.5,
    pw: 0.3,
    pl: 0.67,
    legoutside: true
  });
  return {
    circuitJson: soicWithoutParsing(parameters),
    parameters
  };
};
// src/fn/ms012.ts
var ms012_def = extendSoicDef({
  p: "1.27mm",
  w: "3.9mm",
  legsoutside: true
});
var ms012 = (raw_params) => {
  const parameters = ms012_def.parse({ ...raw_params, num_pins: 8 });
  return {
    circuitJson: soicWithoutParsing(parameters),
    parameters
  };
};
// src/fn/ms013.ts
var ms013_def = extendSoicDef({
  p: "1.27mm",
  w: "7.5mm",
  legsoutside: true
});
var ms013 = (raw_params) => {
  const parameters = ms013_def.parse({ ...raw_params, num_pins: 16 });
  return {
    circuitJson: soicWithoutParsing(parameters),
    parameters
  };
};
// src/fn/sot723.ts
var sot723_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(3).default(3),
  w: exports_external.string().default("1.2mm"),
  h: exports_external.string().default("1.2mm"),
  pl: exports_external.string().default("0.3mm"),
  pw: exports_external.string().default("0.32mm")
});
var sot723 = (raw_params) => {
  const parameters = sot723_def.parse(raw_params);
  const pad = sot723WithoutParsing(parameters);
  const silkscreenRefText = silkscreenRef(0.4, length.parse(parameters.h), 0.2);
  return {
    circuitJson: [...pad, silkscreenRefText],
    parameters
  };
};
var getCcwSot723Coords = (parameters) => {
  const { pn: pn2, w: w3, h, pl: pl2 } = parameters;
  if (pn2 === 1) {
    return { x: 0, y: 0 };
  } else if (pn2 === 2) {
    return { x: 1, y: -0.4 };
  } else {
    return { x: 1, y: 0.4 };
  }
};
var sot723WithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 0;i < 3; i++) {
    const { x, y } = getCcwSot723Coords({
      num_pins: parameters.num_pins,
      pn: i + 1,
      w: Number.parseFloat(parameters.w),
      h: Number.parseFloat(parameters.h),
      pl: Number.parseFloat(parameters.pl)
    });
    pads.push(rectpad(i + 1, x, y, Number.parseFloat(parameters.pl), i !== 0 ? Number.parseFloat(parameters.pw) : 0.42));
  }
  return pads;
};
// src/fn/sod123.ts
var sod_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("2.36mm"),
  h: exports_external.string().default("1.22mm"),
  pl: exports_external.string().default("0.9mm"),
  pw: exports_external.string().default("0.9mm"),
  p: exports_external.string().default("4.19mm")
});
var sod123 = (raw_params) => {
  const parameters = sod_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) / 4 + 0.4, 0.3);
  return {
    circuitJson: sodWithoutParsing(parameters).concat(silkscreenRefText),
    parameters
  };
};
var getSodCoords = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var sodWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/axial.ts
var axial_def = exports_external.object({
  fn: exports_external.string(),
  p: length.optional().default("2.54mm"),
  id: length.optional().default("0.7mm"),
  od: length.optional().default("1mm")
});
var axial = (raw_params) => {
  const parameters = axial_def.parse(raw_params);
  const { p, id, od } = parameters;
  const plated_holes = [
    platedhole(1, -p / 2, 0, id, od),
    platedhole(2, p / 2, 0, id, od)
  ];
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -p / 2 + od + id / 2, y: 0 },
      { x: p / 2 - od - id / 2, y: 0 }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenRefText = silkscreenRef(0, p / 4, 0.5);
  return {
    circuitJson: [
      ...plated_holes,
      silkscreenLine,
      silkscreenRefText
    ],
    parameters
  };
};
// src/helpers/silkscreenpath.ts
var silkscreenpath = (route, options = {}) => {
  return {
    type: "pcb_silkscreen_path",
    layer: options.layer || "top",
    pcb_component_id: options.pcb_component_id || "",
    pcb_silkscreen_path_id: options.pcb_silkscreen_path_id || "",
    route,
    stroke_width: options.stroke_width || 0.1
  };
};

// src/fn/pushbutton.ts
var pushbutton_def = exports_external.object({
  fn: exports_external.literal("pushbutton"),
  w: length.default(4.5),
  h: length.default(6.5),
  id: length.default(1),
  od: length.default(1.2)
});
var pushbutton = (raw_params) => {
  const parameters = pushbutton_def.parse(raw_params);
  const width = parameters.w;
  const height = parameters.h;
  const holeDiameter = parameters.id;
  const holes = [
    platedhole(1, -width / 2, height / 2, holeDiameter, holeDiameter * 1.5),
    platedhole(2, -width / 2, -height / 2, holeDiameter, holeDiameter * 1.5),
    platedhole(3, width / 2, -height / 2, holeDiameter, holeDiameter * 1.5),
    platedhole(4, width / 2, height / 2, holeDiameter, holeDiameter * 1.5)
  ];
  const silkscreenLines = [
    silkscreenpath([
      { x: -width / 2, y: -height / 2 },
      { x: -width / 2, y: height / 2 }
    ]),
    silkscreenpath([
      { x: width / 2, y: -height / 2 },
      { x: width / 2, y: height / 2 }
    ]),
    silkscreenpath([
      { x: -width / 2, y: 0 },
      { x: -width / 5, y: 0 },
      { x: width / 5 * 1 / Math.sqrt(2), y: height / 8 }
    ]),
    silkscreenpath([
      { x: width / 2, y: 0 },
      { x: width / 5, y: 0 }
    ])
  ];
  const silkscreenRefText = silkscreenRef(0, height / 2 + 0.4, 0.5);
  return {
    circuitJson: [...holes, ...silkscreenLines, silkscreenRefText],
    parameters
  };
};
// src/fn/stampboard.ts
var stampboard_def = exports_external.object({
  fn: exports_external.string(),
  w: length.default("22.58mm"),
  h: length.optional(),
  left: length.optional().default(20),
  right: length.optional().default(20),
  top: length.optional().default(2),
  bottom: length.optional().default(2),
  p: length.default(length.parse("2.54mm")),
  pw: length.default(length.parse("1.6mm")),
  pl: length.default(length.parse("2.4mm")),
  innerhole: exports_external.boolean().default(false),
  innerholeedgedistance: length.default(length.parse("1.61mm")),
  silkscreenlabels: exports_external.boolean().default(false),
  silkscreenlabelmargin: length.default(length.parse("0.1mm"))
});
var getHeight = (parameters) => {
  const params = stampboard_def.parse(parameters);
  if (params.left && params.right) {
    return Math.max(params.left, params.right) * params.p;
  }
  if (params.left) {
    return params.left * params.p;
  }
  if (params.right) {
    return params.right * params.p;
  }
  return 51;
};
var getTriangleDir = (x, y, side) => {
  let routes = [];
  const triangleHeight = 1;
  const triangleWidth = 0.6;
  if (side === "right") {
    routes = [
      {
        x: x + triangleHeight / 2,
        y
      },
      {
        x: x - triangleHeight / 2,
        y: y + triangleWidth / 2
      },
      {
        x: x - triangleHeight / 2,
        y: y - triangleWidth / 2
      },
      {
        x: x + triangleHeight / 2,
        y
      }
    ];
  }
  if (side === "left") {
    routes = [
      {
        x: x - triangleHeight / 2,
        y
      },
      {
        x: x + triangleHeight / 2,
        y: y + triangleWidth / 2
      },
      {
        x: x + triangleHeight / 2,
        y: y - triangleWidth / 2
      },
      {
        x: x - triangleHeight / 2,
        y
      }
    ];
  }
  if (side === "top") {
    routes = [
      {
        x,
        y: y + triangleHeight / 2
      },
      {
        x: x - triangleWidth / 2,
        y: y - triangleHeight / 2
      },
      {
        x: x + triangleWidth / 2,
        y: y - triangleHeight / 2
      },
      {
        x,
        y: y + triangleHeight / 2
      }
    ];
  }
  if (side === "bottom") {
    routes = [
      {
        x,
        y: y - triangleHeight / 2
      },
      {
        x: x - triangleWidth / 2,
        y: y + triangleHeight / 2
      },
      {
        x: x + triangleWidth / 2,
        y: y + triangleHeight / 2
      },
      {
        x,
        y: y - triangleHeight / 2
      }
    ];
  }
  return routes;
};
var stampboard = (raw_params) => {
  const params = stampboard_def.parse(raw_params);
  const height = params.h ?? getHeight(params);
  const rectpads = [];
  const holes = [];
  const pinLabels = [];
  let routes = [];
  const innerDiameter = 1;
  const outerDiameter = innerDiameter;
  const totalPadsNumber = params.left + params.right + (params.bottom ?? 0) + (params.top ?? 0);
  const maxLabelLength = `pin${totalPadsNumber}`.length;
  const textHalf = maxLabelLength * 0.7 / 2;
  if (params.right) {
    const yoff = -((params.right - 1) / 2) * params.p;
    for (let i = 0;i < params.right; i++) {
      if (i === 0 && !params.left && !params.bottom && !params.silkscreenlabels) {
        routes = getTriangleDir(params.w / 2 - params.pl * 1.4, yoff + i * params.p, "right");
      }
      rectpads.push(rectpad(i + 1 + params.left + (params.bottom ?? 0), params.w / 2 - params.pl / 2, yoff + i * params.p, params.pl, params.pw));
      if (params.silkscreenlabels) {
        const padIndex = i + 1 + params.left + (params.bottom ?? 0);
        const label = `pin${padIndex}`;
        pinLabels.push({
          type: "pcb_silkscreen_text",
          pcb_silkscreen_text_id: `pin_${padIndex}`,
          pcb_component_id: "1",
          layer: "top",
          anchor_position: {
            x: params.w / 2 - params.pl - (textHalf + params.silkscreenlabelmargin),
            y: yoff + i * params.p
          },
          text: label,
          font_size: 0.7,
          font: "tscircuit2024",
          anchor_alignment: "center"
        });
      }
      if (params.innerhole) {
        holes.push(platedhole(i + 1 + params.left + (params.bottom ?? 0) + totalPadsNumber, params.w / 2, yoff + i * params.p, innerDiameter, outerDiameter));
        holes.push(platedhole(i + 1 + params.left + (params.bottom ?? 0) + totalPadsNumber * 2, params.w / 2 - params.innerholeedgedistance, yoff + i * params.p, innerDiameter, outerDiameter));
      }
    }
  }
  if (params.left) {
    const yoff = (params.left - 1) / 2 * params.p;
    for (let i = 0;i < params.left; i++) {
      if (i === 0 && !params.silkscreenlabels) {
        routes = getTriangleDir(-params.w / 2 + params.pl * 1.4, yoff - i * params.p, "left");
      }
      rectpads.push(rectpad(i + 1, -params.w / 2 + params.pl / 2, yoff - i * params.p, params.pl, params.pw));
      if (params.silkscreenlabels) {
        const padIndex = i + 1;
        const label = `pin${padIndex}`;
        pinLabels.push({
          type: "pcb_silkscreen_text",
          pcb_silkscreen_text_id: `pin_${padIndex}`,
          pcb_component_id: "1",
          layer: "top",
          anchor_position: {
            x: -params.w / 2 + params.pl + (textHalf + params.silkscreenlabelmargin),
            y: yoff - i * params.p
          },
          text: label,
          font_size: 0.7,
          font: "tscircuit2024",
          anchor_alignment: "center"
        });
      }
      if (params.innerhole) {
        holes.push(platedhole(i + 1 + totalPadsNumber, -params.w / 2, yoff - i * params.p, innerDiameter, outerDiameter));
        holes.push(platedhole(i + 1 + totalPadsNumber * 2, -params.w / 2 + params.innerholeedgedistance, yoff - i * params.p, innerDiameter, outerDiameter));
      }
    }
  }
  if (params.top) {
    const xoff = (params.top - 1) / 2 * params.p;
    for (let i = 0;i < params.top; i++) {
      if (i === 0 && !params.left && !params.bottom && !params.right && !params.silkscreenlabels) {
        routes = getTriangleDir(xoff - i * params.p, height / 2 - params.pl * 1.4, "top");
      }
      rectpads.push(rectpad(i + 1 + params.left + params.right + (params.bottom ?? 0), xoff - i * params.p, height / 2 - params.pl / 2, params.pw, params.pl));
      if (params.silkscreenlabels) {
        const padIndex = i + 1 + params.left + params.right + (params.bottom ?? 0);
        const label = `pin${padIndex}`;
        pinLabels.push({
          type: "pcb_silkscreen_text",
          pcb_silkscreen_text_id: `pin_${padIndex}`,
          pcb_component_id: "1",
          layer: "top",
          anchor_position: {
            x: xoff - i * params.p,
            y: height / 2 - params.pl - (textHalf + params.silkscreenlabelmargin)
          },
          text: label,
          font_size: 0.7,
          font: "tscircuit2024",
          anchor_alignment: "center",
          ccw_rotation: 270
        });
      }
      if (params.innerhole) {
        holes.push(platedhole(i + 1 + params.left + params.right + (params.bottom ?? 0) + totalPadsNumber, xoff - i * params.p, height / 2, innerDiameter, outerDiameter));
        holes.push(platedhole(i + 1 + params.left + params.right + (params.bottom ?? 0) + totalPadsNumber * 2, xoff - i * params.p, height / 2 - params.innerholeedgedistance, innerDiameter, outerDiameter));
      }
    }
  }
  if (params.bottom) {
    const xoff = -((params.bottom - 1) / 2) * params.p;
    for (let i = 0;i < params.bottom; i++) {
      if (i === 0 && !params.left && !params.silkscreenlabels) {
        routes = getTriangleDir(xoff + i * params.p, -height / 2 + params.pl * 1.4, "bottom");
      }
      rectpads.push(rectpad(i + 1 + params.left, xoff + i * params.p, -height / 2 + params.pl / 2, params.pw, params.pl));
      if (params.silkscreenlabels) {
        const padIndex = i + 1 + params.left;
        const label = `pin${padIndex}`;
        pinLabels.push({
          type: "pcb_silkscreen_text",
          pcb_silkscreen_text_id: `pin_${padIndex}`,
          pcb_component_id: "1",
          layer: "top",
          anchor_position: {
            x: xoff + i * params.p,
            y: -height / 2 + params.pl + (textHalf + params.silkscreenlabelmargin)
          },
          text: label,
          font_size: 0.7,
          font: "tscircuit2024",
          anchor_alignment: "center",
          ccw_rotation: 90
        });
      }
      if (params.innerhole) {
        holes.push(platedhole(i + 1 + params.left + totalPadsNumber, xoff + i * params.p, -height / 2, innerDiameter, outerDiameter));
        holes.push(platedhole(i + 1 + params.left + totalPadsNumber * 2, xoff + i * params.p, -height / 2 + params.innerholeedgedistance, innerDiameter, outerDiameter));
      }
    }
  }
  const silkscreenTriangle = {
    type: "pcb_silkscreen_path",
    pcb_silkscreen_path_id: "pcb_silkscreen_triangle_1",
    pcb_component_id: "2",
    route: routes,
    stroke_width: 0.1,
    layer: "top"
  };
  const silkscreenPath = {
    type: "pcb_silkscreen_path",
    pcb_silkscreen_path_id: "pcb_silkscreen_path_1",
    pcb_component_id: "1",
    route: [
      { x: -params.w / 2, y: height / 2 },
      { x: params.w / 2, y: height / 2 },
      { x: params.w / 2, y: -height / 2 },
      { x: -params.w / 2, y: -height / 2 },
      { x: -params.w / 2, y: height / 2 }
    ],
    stroke_width: 0.1,
    layer: "top"
  };
  const silkscreenRefText = silkscreenRef(0, height / 1.8, height / 25);
  return {
    circuitJson: [
      ...rectpads,
      ...holes,
      ...pinLabels,
      silkscreenPath,
      ...params.silkscreenlabels ? [] : [silkscreenTriangle],
      silkscreenRefText
    ],
    parameters: params
  };
};
// src/fn/stampreceiver.ts
var stampreceiver_def = exports_external.object({
  fn: exports_external.string(),
  w: length.default("22.58mm"),
  h: length.optional(),
  left: length.optional().default(20),
  right: length.optional().default(20),
  top: length.optional().default(2),
  bottom: length.optional().default(2),
  p: length.default(length.parse("2.54mm")),
  pw: length.default(length.parse("1.6mm")),
  pl: length.default(length.parse("3.2mm")),
  innerhole: exports_external.boolean().default(false),
  innerholeedgedistance: length.default(length.parse("1.61mm"))
});
var getHeight2 = (parameters) => {
  const params = stampreceiver_def.parse(parameters);
  if (params.left && params.right) {
    return Math.max(params.left, params.right) * params.p;
  }
  if (params.left) {
    return params.left * params.p;
  }
  if (params.right) {
    return params.right * params.p;
  }
  return 51;
};
var getTriangleDir2 = (x, y, side, triangleHeight = 1, triangleWidth = 0.6) => {
  const halfHeight = triangleHeight / 2;
  const halfWidth = triangleWidth / 2;
  const routes = {
    left: [
      { x: x + halfHeight, y },
      { x: x - halfHeight, y: y + halfWidth },
      { x: x - halfHeight, y: y - halfWidth },
      { x: x + halfHeight, y }
    ],
    right: [
      { x: x - halfHeight, y },
      { x: x + halfHeight, y: y + halfWidth },
      { x: x + halfHeight, y: y - halfWidth },
      { x: x - halfHeight, y }
    ],
    top: [
      { x, y: y - halfHeight },
      { x: x - halfWidth, y: y + halfHeight },
      { x: x + halfWidth, y: y + halfHeight },
      { x, y: y - halfHeight }
    ],
    bottom: [
      { x, y: y + halfHeight },
      { x: x - halfWidth, y: y - halfHeight },
      { x: x + halfWidth, y: y - halfHeight },
      { x, y: y + halfHeight }
    ]
  };
  return routes[side];
};
var stampreceiver = (raw_params) => {
  const params = stampreceiver_def.parse(raw_params);
  const height = params.h ?? getHeight2(params);
  const rectpads = [];
  const pinLabels = [];
  const holes = [];
  const innerDiameter = 1;
  const outerDiameter = 1.2;
  const totalPadsNumber = params.left + params.right + (params.bottom ?? 0) + (params.top ?? 0);
  let routes = [];
  let padIndex = 1;
  if (params.left) {
    const yoff = (params.left - 1) / 2 * params.p;
    for (let i = 0;i < params.left; i++) {
      if (i === 0) {
        routes = getTriangleDir2(-params.w / 2 - params.pl / 2, yoff - i * params.p, "left");
      }
      rectpads.push(rectpad(padIndex, -params.w / 2 + params.pl / 2, yoff - i * params.p, params.pl, params.pw));
      pinLabels.push({
        type: "pcb_silkscreen_text",
        pcb_silkscreen_text_id: `pin_${padIndex}`,
        pcb_component_id: "1",
        layer: "top",
        anchor_position: {
          x: -params.w / 2 + params.pl / 2 - 4.5,
          y: yoff - i * params.p
        },
        text: `pin${padIndex}`,
        font_size: 0.7,
        font: "tscircuit2024",
        anchor_alignment: "center"
      });
      padIndex++;
      params.innerhole && holes.push(platedhole(padIndex + totalPadsNumber, -params.w / 2 + params.innerholeedgedistance, yoff - i * params.p, innerDiameter, outerDiameter));
    }
  }
  if (params.bottom) {
    const xoff = (params.bottom - 1) / 2 * params.p;
    for (let i = params.bottom - 1;i >= 0; i--) {
      rectpads.push(rectpad(padIndex, xoff - i * params.p, -height / 2 + params.pl / 2, params.pw, params.pl));
      pinLabels.push({
        type: "pcb_silkscreen_text",
        pcb_silkscreen_text_id: `pin_${padIndex}`,
        pcb_component_id: "1",
        layer: "top",
        anchor_position: {
          x: xoff - i * params.p,
          y: -height / 2 + params.pl / 2 - 3.2
        },
        text: `pin${padIndex}`,
        font_size: 0.7,
        font: "tscircuit2024",
        anchor_alignment: "center"
      });
      padIndex++;
      params.innerhole && holes.push(platedhole(padIndex + totalPadsNumber, xoff - i * params.p, -height / 2 + params.innerholeedgedistance, innerDiameter, outerDiameter));
    }
  }
  if (params.right) {
    const yoff = -((params.right - 1) / 2) * params.p;
    for (let i = 0;i < params.right; i++) {
      rectpads.push(rectpad(padIndex, params.w / 2 - params.pl / 2, yoff + i * params.p, params.pl, params.pw));
      pinLabels.push({
        type: "pcb_silkscreen_text",
        pcb_silkscreen_text_id: `pin_${padIndex}`,
        pcb_component_id: "1",
        layer: "top",
        anchor_position: {
          x: params.w / 2 - params.pl / 2 + 3.7,
          y: yoff + i * params.p
        },
        text: `pin${padIndex}`,
        font_size: 0.7,
        font: "tscircuit2024",
        anchor_alignment: "center"
      });
      padIndex++;
      params.innerhole && holes.push(platedhole(padIndex + totalPadsNumber, params.w / 2 - params.innerholeedgedistance, yoff + i * params.p, innerDiameter, outerDiameter));
    }
  }
  if (params.top) {
    const xoff = -((params.top - 1) / 2) * params.p;
    for (let i = params.top - 1;i >= 0; i--) {
      rectpads.push(rectpad(padIndex, xoff + i * params.p, height / 2 - params.pl / 2, params.pw, params.pl));
      pinLabels.push({
        type: "pcb_silkscreen_text",
        pcb_silkscreen_text_id: `pin_${padIndex}`,
        pcb_component_id: "1",
        layer: "top",
        anchor_position: {
          x: xoff + i * params.p,
          y: height / 2 - params.pl / 2 + 3.2
        },
        text: `pin${padIndex}`,
        font_size: 0.7,
        font: "tscircuit2024",
        anchor_alignment: "center"
      });
      padIndex++;
      params.innerhole && holes.push(platedhole(padIndex + totalPadsNumber, xoff + i * params.p, height / 2 - params.innerholeedgedistance, innerDiameter, outerDiameter));
    }
  }
  const silkscreenTriangle = {
    type: "pcb_silkscreen_path",
    pcb_silkscreen_path_id: "1",
    pcb_component_id: "1",
    layer: "top",
    route: routes,
    stroke_width: 0.1
  };
  const silkscreenPath = {
    type: "pcb_silkscreen_path",
    pcb_silkscreen_path_id: "pcb_silkscreen_path_1",
    pcb_component_id: "1",
    route: [
      {
        x: -params.w / 2 - params.pl / 3,
        y: height / 2 + params.pl / 3
      },
      {
        x: params.w / 2 + params.pl / 3,
        y: height / 2 + params.pl / 3
      },
      {
        x: params.w / 2 + params.pl / 3,
        y: -height / 2 - params.pl / 3
      },
      {
        x: -params.w / 2 - params.pl / 3,
        y: -height / 2 - params.pl / 3
      },
      {
        x: -params.w / 2 - params.pl / 3,
        y: height / 2 + params.pl / 3
      }
    ],
    stroke_width: 0.1,
    layer: "top"
  };
  const silkscreenRefText = silkscreenRef(0, height / 1.8, height / 25);
  return {
    circuitJson: [
      ...holes,
      ...rectpads,
      ...pinLabels,
      silkscreenPath,
      silkscreenTriangle,
      silkscreenRefText
    ],
    parameters: params
  };
};
// src/fn/lqfp.ts
var lqfp = (parameters) => {
  parameters.legsoutside = true;
  if (!parameters.pl) {
    parameters.pl = 1.5;
  }
  return quad(parameters);
};
// src/fn/breakoutheaders.ts
var breakoutheaders_def = exports_external.object({
  fn: exports_external.string(),
  w: length.default("10mm"),
  h: length.optional(),
  left: length.optional().default(20),
  right: length.optional().default(20),
  top: length.optional().default(0),
  bottom: length.optional().default(0),
  p: length.default(length.parse("2.54mm")),
  id: length.optional().default(length.parse("1mm")),
  od: length.optional().default(length.parse("1.5mm"))
});
var getHeight3 = (parameters) => {
  const params = breakoutheaders_def.parse(parameters);
  if (params.left && params.right) {
    return Math.max(params.left, params.right) * params.p;
  }
  if (params.left) {
    return params.left * params.p;
  }
  if (params.right) {
    return params.right * params.p;
  }
  return 51;
};
var getTrianglePath = (x, y, side, triangleHeight = 1, triangleWidth = 0.6) => {
  const halfHeight = triangleHeight / 2;
  const halfWidth = triangleWidth / 2;
  const silkscreenTriangleRoutes = {
    left: [
      { x: x + halfHeight, y },
      { x: x - halfHeight, y: y + halfWidth },
      { x: x - halfHeight, y: y - halfWidth },
      { x: x + halfHeight, y }
    ],
    right: [
      { x: x - halfHeight, y },
      { x: x + halfHeight, y: y + halfWidth },
      { x: x + halfHeight, y: y - halfWidth },
      { x: x - halfHeight, y }
    ],
    top: [
      { x, y: y - halfHeight },
      { x: x - halfWidth, y: y + halfHeight },
      { x: x + halfWidth, y: y + halfHeight },
      { x, y: y - halfHeight }
    ],
    bottom: [
      { x, y: y + halfHeight },
      { x: x - halfWidth, y: y - halfHeight },
      { x: x + halfWidth, y: y - halfHeight },
      { x, y: y + halfHeight }
    ]
  };
  return silkscreenTriangleRoutes[side];
};
var breakoutheaders = (raw_params) => {
  const params = breakoutheaders_def.parse(raw_params);
  const height = params.h ?? getHeight3(params);
  const holes = [];
  const innerDiameter = params.id;
  const outerDiameter = params.od;
  let silkscreenTriangleRoutes = [];
  if (params.right) {
    const yoff = -((params.right - 1) / 2) * params.p;
    for (let i = 0;i < params.right; i++) {
      if (i === 0 && !params.left && !params.bottom) {
        silkscreenTriangleRoutes = getTrianglePath(params.w / 2 + outerDiameter * 1.4, yoff + i * params.p, "right");
      }
      holes.push(platedhole(i + 1 + params.left + (params.bottom ?? 0), params.w / 2, yoff + i * params.p, innerDiameter, outerDiameter));
    }
  }
  if (params.left) {
    const yoff = -((params.left - 1) / 2) * params.p;
    for (let i = 0;i < params.left; i++) {
      if (i === params.left - 1) {
        silkscreenTriangleRoutes = getTrianglePath(-params.w / 2 - outerDiameter * 1.4, yoff + i * params.p, "left");
      }
      holes.push(platedhole(i + 1, -params.w / 2, yoff + i * params.p, innerDiameter, outerDiameter));
    }
  }
  if (params.top) {
    const xoff = -((params.top - 1) / 2) * params.p;
    for (let i = 0;i < params.top; i++) {
      if (i === params.top - 1 && !params.left && !params.bottom && !params.right) {
        silkscreenTriangleRoutes = getTrianglePath(xoff + i * params.p, height / 2 + outerDiameter * 1.4, "top");
      }
      holes.push(platedhole(i + 1 + params.right + (params.bottom ?? 0) + params.left, xoff + i * params.p, height / 2, innerDiameter, outerDiameter));
    }
  }
  if (params.bottom) {
    const xoff = -((params.bottom - 1) / 2) * params.p;
    for (let i = 0;i < params.bottom; i++) {
      if (i === 0 && !params.left) {
        silkscreenTriangleRoutes = getTrianglePath(xoff + i * params.p, -height / 2 - outerDiameter * 1.4, "bottom");
      }
      holes.push(platedhole(i + 1 + params.left, xoff + i * params.p, -height / 2, innerDiameter, outerDiameter));
    }
  }
  const silkscreenTriangle = {
    type: "pcb_silkscreen_path",
    pcb_silkscreen_path_id: "1",
    pcb_component_id: "1",
    layer: "top",
    route: silkscreenTriangleRoutes,
    stroke_width: 0.1
  };
  const silkscreenPath = {
    type: "pcb_silkscreen_path",
    pcb_silkscreen_path_id: "pcb_silkscreen_path_1",
    pcb_component_id: "1",
    route: [
      {
        x: -params.w / 2 - outerDiameter,
        y: height / 2 + outerDiameter
      },
      {
        x: params.w / 2 + outerDiameter,
        y: height / 2 + outerDiameter
      },
      {
        x: params.w / 2 + outerDiameter,
        y: -height / 2 - outerDiameter
      },
      {
        x: -params.w / 2 - outerDiameter,
        y: -height / 2 - outerDiameter
      },
      {
        x: -params.w / 2 - outerDiameter,
        y: height / 2 + outerDiameter
      }
    ],
    stroke_width: 0.1,
    layer: "top"
  };
  const silkscreenRefText = silkscreenRef(0, height / 1.7, height / 25);
  return {
    circuitJson: [
      ...holes,
      silkscreenPath,
      silkscreenRefText,
      silkscreenTriangle
    ],
    parameters: params
  };
};
// src/fn/hc49.ts
var generate_u_curve = (centerX, centerY, radius, direction) => {
  return Array.from({ length: 25 }, (_2, i) => {
    const theta = i / 24 * Math.PI - Math.PI / 2;
    return {
      x: centerX + (direction === "right" ? 1 : -1) * Math.cos(theta) * radius,
      y: centerY + Math.sin(theta) * radius
    };
  });
};
var hc49_def = exports_external.object({
  fn: exports_external.string(),
  p: length.optional().default("4.88mm"),
  id: length.optional().default("0.6mm"),
  od: length.optional().default("1.2mm"),
  w: length.optional().default("5.6mm"),
  h: length.optional().default("3.5mm")
});
var hc49 = (raw_params) => {
  const parameters = hc49_def.parse(raw_params);
  const { p, id, od, w: w3, h } = parameters;
  const radius = h / 2;
  const plated_holes = [
    platedhole(1, -p / 2, 0, id, od),
    platedhole(2, p / 2, 0, id, od)
  ];
  const leftCurve = generate_u_curve(-w3 / 2, 0, radius, "left");
  const rightCurve = generate_u_curve(w3 / 2, 0, radius, "right");
  const silkscreenBody = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      ...leftCurve,
      ...leftCurve.slice(1).reverse(),
      { x: -w3 / 2, y: -h / 2 },
      { x: w3 / 2, y: -h / 2 },
      ...rightCurve,
      { x: w3 / 2, y: h / 2 },
      { x: -w3 / 2, y: h / 2 }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenRefText = silkscreenRef(0, p / 4, 0.5);
  return {
    circuitJson: [
      ...plated_holes,
      silkscreenBody,
      silkscreenRefText
    ],
    parameters
  };
};
// src/fn/pad.ts
var pad_def = exports_external.object({
  w: length,
  h: length
});
var pad = (params) => {
  const { w: w3, h } = params;
  const width = mm2(w3);
  const height = mm2(h);
  return {
    circuitJson: [
      rectpad(1, 0, 0, width, height),
      silkscreenRef(0, height / 2 + 0.5, 0.2)
    ],
    parameters: params
  };
};
// src/fn/to92.ts
var to92_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.union([exports_external.literal(3), exports_external.literal(2)]).default(3),
  p: exports_external.string().default("1.27mm"),
  id: exports_external.string().default("0.72mm"),
  od: exports_external.string().default("0.95mm"),
  w: exports_external.string().default("4.5mm"),
  h: exports_external.string().default("4.5mm"),
  inline: exports_external.boolean().default(false),
  string: exports_external.string().optional()
});
var generateSemicircle = (centerX, centerY, radius) => {
  return Array.from({ length: 25 }, (_2, i) => {
    const theta = i / 24 * Math.PI;
    return {
      x: centerX + Math.cos(theta) * radius,
      y: centerY + Math.sin(theta) * radius
    };
  });
};
var to92_2 = (parameters) => {
  const { p, id, od, h } = parameters;
  const holeY = Number.parseFloat(h) / 2;
  const padSpacing = Number.parseFloat(p);
  return [
    platedhole(1, -padSpacing, holeY - padSpacing, id, od),
    platedhole(2, padSpacing, holeY - padSpacing, id, od)
  ];
};
var to92 = (raw_params) => {
  const match = raw_params.string?.match(/^to92_(\d+)/);
  const numPins = match ? Number.parseInt(match[1], 10) : 3;
  const parameters = to92_def.parse({
    ...raw_params,
    num_pins: numPins
  });
  const { p, id, od, w: w3, h, inline } = parameters;
  const holeY = Number.parseFloat(h) / 2;
  const padSpacing = Number.parseFloat(p);
  let platedHoles = [];
  if (parameters.num_pins === 3) {
    platedHoles = inline ? [
      platedhole(1, -padSpacing, holeY - padSpacing, id, od),
      platedhole(2, 0, holeY - padSpacing, id, od),
      platedhole(3, padSpacing, holeY - padSpacing, id, od)
    ] : [
      platedhole(1, 0, holeY, id, od),
      platedhole(2, -padSpacing, holeY - padSpacing, id, od),
      platedhole(3, padSpacing, holeY - padSpacing, id, od)
    ];
  } else if (parameters.num_pins === 2) {
    platedHoles = to92_2(parameters);
  } else {
    throw new Error("Invalid number of pins for TO-92");
  }
  const radius = Number.parseFloat(w3) / 2;
  const semicircle = generateSemicircle(0, holeY, radius);
  const silkscreenBody = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      ...semicircle,
      { x: -radius, y: 0 },
      { x: radius, y: 0 },
      semicircle[0]
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenRefText = silkscreenRef(0, holeY + 1, 0.5);
  return {
    circuitJson: [
      ...platedHoles,
      silkscreenBody,
      silkscreenRefText
    ],
    parameters
  };
};
// src/fn/sod523.ts
var sod_def2 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("2.15mm"),
  h: exports_external.string().default("1.20mm"),
  pl: exports_external.string().default("0.5mm"),
  pw: exports_external.string().default("0.6mm"),
  p: exports_external.string().default("1.4mm")
});
var sod523 = (raw_params) => {
  const parameters = sod_def2.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing2(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords2 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var sodWithoutParsing2 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords2({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sop8.ts
var sop8_def = extendSoicDef({});
var sop8 = (raw_params) => {
  const parameters = sop8_def.parse(raw_params);
  const pads = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getCcwSoicCoords({
      num_pins: parameters.num_pins,
      pn: i + 1,
      w: parameters.w,
      p: parameters.p ?? 1.27,
      pl: parameters.pl,
      widthincludeslegs: true
    });
    pads.push(rectpad(i + 1, x, y, parameters.pl ?? "1.5mm", parameters.pw ?? "0.6mm"));
  }
  const sh2 = (parameters.num_pins / 2 - 1) * parameters.p + parameters.pw;
  const silkscreenRefText = silkscreenRef(0, sh2 / 2 - 0.5, sh2 / 12);
  const silkscreenLine = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "",
    type: "pcb_silkscreen_path",
    route: [
      { x: -parameters.w / 3, y: sh2 / 2 + 0.2 },
      { x: parameters.w / 3, y: sh2 / 2 + 0.2 }
    ],
    stroke_width: 0.1
  };
  return {
    circuitJson: [
      ...pads,
      silkscreenRefText,
      silkscreenLine
    ],
    parameters
  };
};
// src/fn/sod80.ts
var sod80_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("5.0mm"),
  h: exports_external.string().default("2.30mm"),
  pl: exports_external.string().default("1.25mm"),
  pw: exports_external.string().default("2mm"),
  p: exports_external.string().default("3.75mm")
});
var sod80 = (raw_params) => {
  const parameters = sod80_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) / 2 + 1, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2 + 0.5,
        y: length.parse(parameters.h) / 2 + 0.5
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.5,
        y: length.parse(parameters.h) / 2 + 0.5
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.5,
        y: -length.parse(parameters.h) / 2 - 0.5
      },
      {
        x: length.parse(parameters.p) / 2 + 0.5,
        y: -length.parse(parameters.h) / 2 - 0.5
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sod80WithoutParsing(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getsod80Coords = (parameters) => {
  const { pn: pn2, p } = parameters;
  return pn2 === 1 ? { x: -p / 2, y: 0 } : { x: p / 2, y: 0 };
};
var sod80WithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getsod80Coords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod123w.ts
var sod_def3 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("4.4mm"),
  h: exports_external.string().default("2.1mm"),
  pl: exports_external.string().default("1.2mm"),
  pw: exports_external.string().default("1.2mm"),
  p: exports_external.string().default("2.9mm")
});
var sod123w = (raw_params) => {
  const parameters = sod_def3.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) - 0.5, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing3(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords3 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  }
  return { x: p / 2, y: 0 };
};
var sodWithoutParsing3 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords3({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod323.ts
var sod_def4 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("3.30mm"),
  h: exports_external.string().default("1.80mm"),
  pl: exports_external.string().default("0.60mm"),
  pw: exports_external.string().default("0.45mm"),
  p: exports_external.string().default("2.1mm")
});
var sod323 = (raw_params) => {
  const parameters = sod_def4.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) - 0.5, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing4(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords4 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  }
  return { x: p / 2, y: 0 };
};
var sodWithoutParsing4 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords4({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod923.ts
var sod_def5 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("1.4mm"),
  h: exports_external.string().default("0.9mm"),
  pl: exports_external.string().default("0.36mm"),
  pw: exports_external.string().default("0.25mm"),
  p: exports_external.string().default("0.85mm")
});
var sod923 = (raw_params) => {
  const parameters = sod_def5.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2 + 0.15,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.15,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.15,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2 + 0.15,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing5(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords5 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var sodWithoutParsing5 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords5({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod882.ts
var sod_def6 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("1.3mm"),
  h: exports_external.string().default("0.9mm"),
  pl: exports_external.string().default("0.4mm"),
  pw: exports_external.string().default("0.7mm"),
  p: exports_external.string().default("0.7mm")
});
var sod882 = (raw_params) => {
  const parameters = sod_def6.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) + 0.1, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2 + 0.2,
        y: length.parse(parameters.h) / 2 + 0.2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: length.parse(parameters.h) / 2 + 0.2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: -length.parse(parameters.h) / 2 - 0.2
      },
      {
        x: length.parse(parameters.p) / 2 + 0.2,
        y: -length.parse(parameters.h) / 2 - 0.2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing6(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords6 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var sodWithoutParsing6 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords6({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod323f.ts
var sod_def7 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("3,05mm"),
  h: exports_external.string().default("1.65mm"),
  pl: exports_external.string().default("0.6mm"),
  pw: exports_external.string().default("0.6mm"),
  pad_spacing: exports_external.string().default("2.2mm")
});
var sod323f = (raw_params) => {
  const parameters = sod_def7.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.pad_spacing) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.pad_spacing) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing7(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords7 = (parameters) => {
  const { pn: pn2, pad_spacing } = parameters;
  if (pn2 === 1) {
    return { x: -pad_spacing / 2, y: 0 };
  } else {
    return { x: pad_spacing / 2, y: 0 };
  }
};
var sodWithoutParsing7 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords7({
      pn: i,
      pad_spacing: Number.parseFloat(parameters.pad_spacing)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod123f.ts
var sod_def8 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("4.4mm"),
  h: exports_external.string().default("2.1mm"),
  pl: exports_external.string().default("1.2mm"),
  pw: exports_external.string().default("1.2mm"),
  p: exports_external.string().default("2.9mm")
});
var sod123f = (raw_params) => {
  const parameters = sod_def8.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing8(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords8 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var sodWithoutParsing8 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords8({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod123fl.ts
var sod123FL_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("4.4mm"),
  h: exports_external.string().default("2.1mm"),
  pl: exports_external.string().default("0.91mm"),
  pw: exports_external.string().default("1.22mm"),
  p: exports_external.string().default("3.146mm")
});
var sod123fl = (raw_params) => {
  const parameters = sod123FL_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing9(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords9 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var sodWithoutParsing9 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords9({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod723.ts
var sod_def9 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("1.80mm"),
  h: exports_external.string().default("1.00mm"),
  pl: exports_external.string().default("0.66mm"),
  pw: exports_external.string().default("0.5mm"),
  p: exports_external.string().default("0.8mm")
});
var sod723 = (raw_params) => {
  const parameters = sod_def9.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.1,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.1,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing10(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords10 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var sodWithoutParsing10 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords10({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod128.ts
var sod_def10 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("6.2mm"),
  h: exports_external.string().default("3.4mm"),
  pl: exports_external.string().default("1.4mm"),
  pw: exports_external.string().default("2.1mm"),
  p: exports_external.string().default("4.4mm")
});
var sod128 = (raw_params) => {
  const parameters = sod_def10.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) / 2 + 0.4, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing11(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords11 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var sodWithoutParsing11 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords11({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sot89.ts
var sot89_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.union([exports_external.literal(3), exports_external.literal(5)]).default(3),
  w: exports_external.string().default("4.80mm"),
  h: exports_external.string().default("4.80mm"),
  pl: exports_external.string().default("1.3mm"),
  pw: exports_external.string().default("0.9mm"),
  p: exports_external.string().default("1.5mm"),
  string: exports_external.string().optional()
});
var sot89_3 = (parameters) => {
  const pads = [];
  const padGap = Number.parseFloat(parameters.p);
  const padWidth = Number.parseFloat(parameters.pw);
  const length2 = Number.parseFloat(parameters.w);
  const padHeight = Number.parseFloat(parameters.pl);
  pads.push(rectpad(1, -length2 / 2, padGap, padHeight, padWidth), rectpad(2, -length2 / 2 + (1.5 - 1.3) / 2, 0, 1.5, padWidth), rectpad(3, -length2 / 2, -padGap, padHeight, padWidth));
  const silkscreenRefText = silkscreenRef(0, 0, 0.3);
  const width = Number.parseFloat(parameters.w) / 2 - 1;
  const height = Number.parseFloat(parameters.h) / 2;
  const silkscreenPath1 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width, y: height },
      { x: width, y: height },
      { x: width, y: height / 2 + 0.5 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenPath2 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width, y: -height },
      { x: width, y: -height },
      { x: width, y: -height / 2 - 0.5 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  return [
    ...pads,
    silkscreenPath1,
    silkscreenPath2,
    silkscreenRefText
  ];
};
var sot89_5 = (parameters) => {
  const pads = [];
  const padGap = Number.parseFloat(parameters.p);
  const padWidth = Number.parseFloat(parameters.pw);
  const length2 = Number.parseFloat(parameters.w);
  pads.push(rectpad(1, -1.85, -1.5, 1.5, 0.7), rectpad(2, -1.85, 1.5, 1.5, 0.7), rectpad(3, 0, 0, 0.8, 2), rectpad(4, 1.85, -1.5, 1.5, 0.7), rectpad(5, 1.85, 1.5, 1.5, 0.7));
  const silkscreenRefText = silkscreenRef(0, Number.parseFloat(parameters.h) / 2 + 0.5, 0.3);
  const width = Number.parseFloat(parameters.w) / 2 - 1;
  const height = Number.parseFloat(parameters.h) / 2;
  const silkscreenPath1 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width, y: height },
      { x: width, y: height }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenPath2 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width, y: -height },
      { x: width, y: -height }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  return [
    ...pads,
    silkscreenPath1,
    silkscreenPath2,
    silkscreenRefText
  ];
};
var sot89 = (raw_params) => {
  const match = raw_params.string?.match(/^sot89_(\d+)/);
  const numPins = match ? Number.parseInt(match[1], 10) : 3;
  const parameters = sot89_def.parse({
    ...raw_params,
    num_pins: numPins
  });
  if (parameters.num_pins === 3) {
    return {
      circuitJson: sot89_3(parameters),
      parameters
    };
  }
  if (parameters.num_pins === 5) {
    return {
      circuitJson: sot89_5(parameters),
      parameters
    };
  }
  throw new Error("Invalid number of pins for SOT89");
};
// src/fn/to220.ts
var to220_def = exports_external.object({
  fn: exports_external.string(),
  p: length.optional().default("5.0mm"),
  id: length.optional().default("1.0mm"),
  od: length.optional().default("1.9mm"),
  w: length.optional().default("13mm"),
  h: length.optional().default("7mm"),
  num_pins: exports_external.number().optional(),
  string: exports_external.string().optional()
});
var to220 = (raw_params) => {
  const parameters = to220_def.parse(raw_params);
  const { fn: fn2, id, od, w: w3, h, string } = parameters;
  const numPins = Number.parseInt(string?.split("_")[1] ?? "3");
  const holeY = -1;
  const halfWidth = w3 / 2;
  const halfHeight = h / 2;
  const minPitch = 2.5;
  const maxHoleWidth = w3 * 0.4;
  const computedPitch = Math.max(minPitch, maxHoleWidth / (numPins - 1));
  const plated_holes = Array.from({ length: numPins }, (_2, i) => {
    const x = numPins % 2 === 0 ? (i - numPins / 2 + 0.5) * computedPitch : (i - Math.floor(numPins / 2)) * computedPitch;
    return platedhole(i + 1, x, holeY, id, od);
  });
  const silkscreenBody = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -halfWidth, y: -halfHeight },
      { x: halfWidth, y: -halfHeight },
      { x: halfWidth, y: halfHeight },
      { x: -halfWidth, y: halfHeight },
      { x: -halfWidth, y: -halfHeight }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const yLine = -halfHeight + 2 * h / 3;
  const horizontalLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -halfWidth, y: yLine },
      { x: halfWidth, y: yLine }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const verticalLines = [
    {
      type: "pcb_silkscreen_path",
      layer: "top",
      pcb_component_id: "",
      route: [
        { x: -w3 / 6, y: yLine },
        { x: -w3 / 6, y: halfHeight }
      ],
      stroke_width: 0.1,
      pcb_silkscreen_path_id: ""
    },
    {
      type: "pcb_silkscreen_path",
      layer: "top",
      pcb_component_id: "",
      route: [
        { x: w3 / 6, y: yLine },
        { x: w3 / 6, y: halfHeight }
      ],
      stroke_width: 0.1,
      pcb_silkscreen_path_id: ""
    }
  ];
  const silkscreenRefText = silkscreenRef(0, h / 2 + 0.6, 0.5);
  return {
    circuitJson: [
      ...plated_holes,
      silkscreenBody,
      horizontalLine,
      ...verticalLines,
      silkscreenRefText
    ],
    parameters: { ...parameters, p: computedPitch }
  };
};
// src/fn/minimelf.ts
var minimelf_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("5.40mm"),
  h: exports_external.string().default("2.30mm"),
  pl: exports_external.string().default("1.30mm"),
  pw: exports_external.string().default("1.70mm"),
  p: exports_external.string().default("3.5mm")
});
var minimelf = (raw_params) => {
  const parameters = minimelf_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) / 2 + 0.4, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: miniMelfWithoutParsing(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getMiniMelfCoords = (parameters) => {
  const { pn: pn2, p } = parameters;
  return pn2 === 1 ? { x: -p / 2, y: 0 } : { x: p / 2, y: 0 };
};
var miniMelfWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getMiniMelfCoords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod882d.ts
var sod_def11 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("1.90mm"),
  h: exports_external.string().default("1.33mm"),
  pl: exports_external.string().default("0.5mm"),
  pw: exports_external.string().default("0.7mm"),
  p: exports_external.string().default("0.8mm")
});
var sod882d = (raw_params) => {
  const parameters = sod_def11.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) + 0.1, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2 + 0.1,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2 + 0.1,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing12(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords12 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var sodWithoutParsing12 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords12({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/melf.ts
var melf_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("7.0mm"),
  h: exports_external.string().default("3.35mm"),
  pl: exports_external.string().default("1.50mm"),
  pw: exports_external.string().default("2.70mm"),
  p: exports_external.string().default("4.8mm")
});
var melf = (raw_params) => {
  const parameters = melf_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: melfWithoutParsing(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getMelfCoords = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var melfWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getMelfCoords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/micromelf.ts
var micromelf_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("3.0mm"),
  h: exports_external.string().default("1.80mm"),
  pl: exports_external.string().default("0.80mm"),
  pw: exports_external.string().default("1.20mm"),
  p: exports_external.string().default("1.6mm")
});
var micromelf = (raw_params) => {
  const parameters = micromelf_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.1,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.1,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: microMelfWithoutParsing(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getMicroMelfCoords = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var microMelfWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getMicroMelfCoords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sma.ts
var sma_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("7.10mm"),
  h: exports_external.string().default("3.40mm"),
  pl: exports_external.string().default("2.45mm"),
  pw: exports_external.string().default("1.80mm"),
  p: exports_external.string().default("4.05mm")
});
var sma = (raw_params) => {
  const parameters = sma_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) / 2 + 0.5, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.5,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.5,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: smaWithoutParsing(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSmaCoords = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  }
  return { x: p / 2, y: 0 };
};
var smaWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSmaCoords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/smf.ts
var smf_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("4.80mm"),
  h: exports_external.string().default("2.10mm"),
  pl: exports_external.string().default("1.30mm"),
  pw: exports_external.string().default("1.40mm"),
  p: exports_external.string().default("2.9mm")
});
var smf = (raw_params) => {
  const parameters = smf_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) - 0.5, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: smfWithoutParsing(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSmfCoords = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var smfWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSmfCoords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/smb.ts
var smb_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("7.30mm"),
  h: exports_external.string().default("4.40mm"),
  pl: exports_external.string().default("2.50mm"),
  pw: exports_external.string().default("2.30mm"),
  p: exports_external.string().default("4.30mm")
});
var smb = (raw_params) => {
  const parameters = smb_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) / 2 + 0.5, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.1,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.1,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: smbWithoutParsing(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSmbCoords = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  } else {
    return { x: p / 2, y: 0 };
  }
};
var smbWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSmbCoords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/smc.ts
var smc_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("10.70mm"),
  h: exports_external.string().default("6.60mm"),
  pl: exports_external.string().default("3.30mm"),
  pw: exports_external.string().default("2.50mm"),
  p: exports_external.string().default("6.80mm")
});
var smc = (raw_params) => {
  const parameters = smc_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, 3, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2 - 0.8
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.8,
        y: length.parse(parameters.h) / 2 - 0.8
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.8,
        y: -length.parse(parameters.h) / 2 + 0.8
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2 + 0.8
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: smcWithoutParsing(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSmcCoords = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  }
  return { x: p / 2, y: 0 };
};
var smcWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSmcCoords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sot223.ts
var sot223_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.number().default(4),
  w: exports_external.string().default("8.50mm"),
  h: exports_external.string().default("6.90mm"),
  pl: exports_external.string().default("2mm"),
  pw: exports_external.string().default("1.5mm"),
  p: exports_external.string().default("2.30mm"),
  string: exports_external.string().optional()
});
var sot223 = (raw_params) => {
  const match = raw_params.string?.match(/^sot223_(\d+)/);
  const numPins = match ? Number.parseInt(match[1], 10) : 4;
  if (numPins === 8) {
    const parameters2 = sot223_8_def.parse({
      ...raw_params,
      num_pins: numPins
    });
    return {
      circuitJson: soicWithoutParsing(parameters2),
      parameters: parameters2
    };
  }
  const parameters = sot223_def.parse({
    ...raw_params,
    num_pins: numPins
  });
  if (parameters.num_pins === 4) {
    return {
      circuitJson: sot223_4(parameters),
      parameters
    };
  }
  if (parameters.num_pins === 5) {
    return {
      circuitJson: sot223_5(parameters),
      parameters
    };
  }
  if (parameters.num_pins === 6) {
    return {
      circuitJson: sot223_6(parameters),
      parameters
    };
  }
  throw new Error("Invalid number of pins");
};
var get2CcwSot223Coords = (parameters) => {
  const { pn: pn2, w: w3, h, pl: pl2, p } = parameters;
  if (pn2 === 1) {
    return { x: -w3 / 2 + 1.1, y: p };
  }
  if (pn2 === 2) {
    return { x: -w3 / 2 + 1.1, y: 0 };
  }
  if (pn2 === 3) {
    return { x: -w3 / 2 + 1.1, y: -p };
  }
  return { x: w3 / 2 - 1.1, y: 0 };
};
var sot223_4 = (parameters) => {
  const pads = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = get2CcwSot223Coords({
      num_pins: parameters.num_pins,
      pn: i + 1,
      w: Number.parseFloat(parameters.w),
      h: Number.parseFloat(parameters.h),
      pl: Number.parseFloat(parameters.pl),
      p: Number.parseFloat(parameters.p)
    });
    const pinWidth = i === 3 ? 3.8 : Number.parseFloat(parameters.pw);
    pads.push(rectpad(i + 1, x, y, Number.parseFloat(parameters.pl), pinWidth));
  }
  const silkscreenRefText = silkscreenRef(0, 0, 0.3);
  const width = Number.parseFloat(parameters.w) / 2 - 2.4;
  const height = Number.parseFloat(parameters.h) / 2;
  const silkscreenPath1 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width, y: height },
      { x: width, y: height },
      { x: width, y: height / 2 + 0.5 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenPath2 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width, y: -height },
      { x: width, y: -height },
      { x: width, y: -height / 2 - 0.5 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  return [
    ...pads,
    silkscreenPath1,
    silkscreenPath2,
    silkscreenRefText
  ];
};
var sot223_8_def = extendSoicDef({
  p: "0.90mm",
  w: "2.8mm",
  legsoutside: true
});
var get2CcwSot2235Coords = (parameters) => {
  const { p, h, pn: pn2, w: w3 } = parameters;
  if (pn2 === 1) {
    return { x: -w3 / 2 + 1.2, y: p / 2 + p };
  }
  if (pn2 === 2) {
    return { x: -w3 / 2 + 1.2, y: p / 2 };
  }
  if (pn2 === 3) {
    return { x: -w3 / 2 + 1.2, y: -p / 2 };
  }
  if (pn2 === 4) {
    return { x: -w3 / 2 + 1.2, y: -p / 2 - p };
  }
  if (pn2 === 5) {
    return { x: w3 / 2 - 1, y: 0 };
  }
  throw new Error("Invalid pin number");
};
var sot223_5 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = get2CcwSot2235Coords({
      h: Number.parseFloat(parameters.h),
      p: 1.5,
      pn: i,
      w: Number.parseFloat(parameters.w)
    });
    let pinWidth = Number.parseFloat(parameters.pw);
    let pinLength = Number.parseFloat(parameters.pl);
    if (i === 5) {
      pinWidth = 3.4;
      pinLength = 1.8;
    } else {
      pinWidth = 1;
      pinLength = 2.2;
    }
    pads.push(rectpad(i, x, y, pinLength, pinWidth));
  }
  const width = Number.parseFloat(parameters.w) / 2 - 2.4;
  const height = Number.parseFloat(parameters.h) / 2;
  const silkscreenPath1 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width, y: height },
      { x: width, y: height },
      { x: width, y: height / 2 + 0.5 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenPath2 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width, y: -height },
      { x: width, y: -height },
      { x: width, y: -height / 2 - 0.5 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenRefText = silkscreenRef(0, 0, 0.3);
  return [...pads, silkscreenPath1, silkscreenPath2, silkscreenRefText];
};
var get2CcwSot2236Coords = (parameters) => {
  const { p, h, pn: pn2, w: w3 } = parameters;
  if (pn2 === 1) {
    return { x: -w3 / 2 + 1.2, y: 2 * p };
  }
  if (pn2 === 2) {
    return { x: -w3 / 2 + 1.2, y: p };
  }
  if (pn2 === 3) {
    return { x: -w3 / 2 + 1.2, y: 0 };
  }
  if (pn2 === 4) {
    return { x: -w3 / 2 + 1.2, y: -p };
  }
  if (pn2 === 5) {
    return { x: -w3 / 2 + 1.2, y: -2 * p };
  }
  if (pn2 === 6) {
    return { x: w3 / 2 - 1.175, y: 0 };
  }
  throw new Error("Invalid pin number");
};
var sot223_6 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = get2CcwSot2236Coords({
      h: Number.parseFloat(parameters.h),
      p: 1.3,
      pn: i,
      w: 8.7
    });
    let pinWidth = Number.parseFloat(parameters.pw);
    let pinLength = Number.parseFloat(parameters.pl);
    if (i === 6) {
      pinWidth = 3.4;
      pinLength = 2.15;
    } else {
      pinWidth = 0.6;
      pinLength = 2.2;
    }
    pads.push(rectpad(i, x, y, pinLength, pinWidth));
  }
  const width = Number.parseFloat(parameters.w) / 2 - 2.4;
  const height = Number.parseFloat(parameters.h) / 2;
  const silkscreenPath1 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width, y: height },
      { x: width, y: height },
      { x: width, y: height / 2 + 0.5 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenPath2 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width, y: -height },
      { x: width, y: -height },
      { x: width, y: -height / 2 - 0.5 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenRefText = silkscreenRef(0, 0, 0.3);
  return [...pads, silkscreenPath1, silkscreenPath2, silkscreenRefText];
};
// src/fn/sot23w.ts
var sot23w_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.number().default(3),
  w: exports_external.string().default("3.40mm"),
  h: exports_external.string().default("3.30mm"),
  pl: exports_external.string().default("1mm"),
  pw: exports_external.string().default("0.7mm"),
  p: exports_external.string().default("1.2mm"),
  string: exports_external.string().optional()
});
var sot23w = (raw_params) => {
  const match = raw_params.string?.match(/^sot23w_(\d+)/);
  const numPins = match ? Number.parseInt(match[1], 3) : 3;
  const parameters = sot23w_def.parse({
    ...raw_params,
    num_pins: numPins
  });
  if (parameters.num_pins === 3) {
    return {
      circuitJson: sot23w_3(parameters),
      parameters
    };
  }
  throw new Error("Invalid number of pins");
};
var getCcwSot23wCoords = (parameters) => {
  const { pn: pn2, w: w3, h, pl: pl2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p, y: 0.95 };
  }
  if (pn2 === 2) {
    return { x: -p, y: -0.95 };
  }
  return { x: p, y: 0 };
};
var sot23w_3 = (parameters) => {
  const pads = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getCcwSot23wCoords({
      num_pins: parameters.num_pins,
      pn: i + 1,
      w: Number.parseFloat(parameters.w),
      h: Number.parseFloat(parameters.h),
      pl: Number.parseFloat(parameters.pl),
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i + 1, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  const silkscreenRefText = silkscreenRef(0, Number.parseInt(parameters.h) / 2 + 1, 0.3);
  const width = Number.parseFloat(parameters.w) / 2 - 1;
  const height = Number.parseFloat(parameters.h) / 2;
  const silkscreenPath1 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width, y: height },
      { x: width + 0.3, y: height },
      { x: width + 0.3, y: height / 2 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenPath2 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width, y: -height },
      { x: width + 0.3, y: -height },
      { x: width + 0.3, y: -height / 2 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  return [
    ...pads,
    silkscreenPath1,
    silkscreenPath2,
    silkscreenRefText
  ];
};
// src/fn/to92s.ts
var to92s_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.union([exports_external.literal(3), exports_external.literal(2)]).default(3),
  p: exports_external.string().default("1.27mm"),
  id: exports_external.string().default("0.72mm"),
  od: exports_external.string().default("0.95mm"),
  w: exports_external.string().default("2.5mm"),
  h: exports_external.string().default("4.2mm"),
  string: exports_external.string().optional()
});
var to92s_3 = (parameters) => {
  const { p, id, od, w: w3, h } = parameters;
  const holeY = Number.parseFloat(h) / 2;
  const padSpacing = Number.parseFloat(p);
  return [
    platedhole(1, -padSpacing, holeY - padSpacing, id, od),
    platedhole(2, 0, holeY - padSpacing, id, od),
    platedhole(3, padSpacing, holeY - padSpacing, id, od)
  ];
};
var to92s_2 = (parameters) => {
  const { p, id, od, h } = parameters;
  const holeY = Number.parseFloat(h) / 2;
  const padSpacing = Number.parseFloat(p);
  return [
    platedhole(1, -padSpacing, holeY - padSpacing, id, od),
    platedhole(2, padSpacing, holeY - padSpacing, id, od)
  ];
};
var to92s = (raw_params) => {
  const match = raw_params.string?.match(/^to92s_(\d+)/);
  const numPins = match ? Number.parseInt(match[1], 10) : 3;
  const parameters = to92s_def.parse({
    ...raw_params,
    num_pins: numPins
  });
  let platedHoles = [];
  if (parameters.num_pins === 3) {
    platedHoles = to92s_3(parameters);
  } else if (parameters.num_pins === 2) {
    platedHoles = to92s_2(parameters);
  } else {
    throw new Error("Invalid number of pins for TO-92");
  }
  const holeY = Number.parseFloat(parameters.h) / 2;
  const padSpacing = Number.parseFloat(parameters.p);
  const silkscreenBody = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -holeY, y: holeY - padSpacing },
      { x: -1.9, y: 0 },
      { x: 1.9, y: 0 },
      { x: holeY, y: holeY - padSpacing },
      { x: 1.5, y: Number.parseFloat(parameters.h) / 2 + 0.5 },
      { x: -1.5, y: Number.parseFloat(parameters.h) / 2 + 0.5 },
      { x: -holeY, y: holeY - padSpacing }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenRefText = silkscreenRef(0, holeY + 1, 0.5);
  return {
    circuitJson: [
      ...platedHoles,
      silkscreenBody,
      silkscreenRefText
    ],
    parameters
  };
};
// src/fn/jst.ts
var jst_def = exports_external.object({
  fn: exports_external.string(),
  p: length.optional(),
  id: length.optional(),
  pw: length.optional(),
  pl: length.optional(),
  w: length.optional(),
  h: length.optional(),
  sh: exports_external.union([exports_external.boolean(), exports_external.string(), exports_external.number()]).optional().transform((v3) => {
    if (typeof v3 === "string") {
      const n = Number(v3);
      return Number.isNaN(n) ? true : n;
    }
    return v3;
  }).describe('JST SH (Surface-mount) connector family. SH stands for "Super High-density".'),
  ph: exports_external.boolean().optional().describe('JST PH (Through-hole) connector family. PH stands for "Pin Header".'),
  string: exports_external.string().optional()
});
var variantDefaults = {
  ph: {
    p: length.parse("2.2mm"),
    id: length.parse("0.70mm"),
    pw: length.parse("1.20mm"),
    pl: length.parse("1.20mm"),
    w: length.parse("6mm"),
    h: length.parse("5mm")
  },
  sh: {
    p: length.parse("1mm"),
    pw: length.parse("0.6mm"),
    pl: length.parse("1.55mm"),
    w: length.parse("5.8mm"),
    h: length.parse("7.8mm")
  }
};
function getVariant(params) {
  if (params.sh)
    return "sh";
  if (params.ph)
    return "ph";
  return "ph";
}
function generatePads(variant, numPins, p, id, pw, pl2) {
  const pads = [];
  if (variant === "ph") {
    const half_p = p / 2;
    pads.push(platedHoleWithRectPad(1, -half_p, 2, id, pw, pl2));
    pads.push(platedHoleWithRectPad(2, half_p, 2, id, pw, pl2));
  } else {
    const startX = -((numPins - 1) / 2) * p;
    for (let i = 0;i < numPins; i++) {
      const x = startX + i * p;
      console.log("x si", x);
      pads.push(rectpad(i + 1, x, -1.325, pw, pl2));
    }
    const sideOffset = (numPins - 1) / 2 * p + 1.3;
    console.log("offset", sideOffset);
    pads.push(rectpad(numPins + 1, -sideOffset, 1.22, 1.2, 1.8));
    pads.push(rectpad(numPins + 2, sideOffset, 1.22, 1.2, 1.8));
  }
  return pads;
}
function generateSilkscreenBody(variant, w3, h) {
  if (variant === "ph") {
    return {
      type: "pcb_silkscreen_path",
      layer: "top",
      pcb_component_id: "",
      route: [
        { x: -3, y: 3 },
        { x: 3, y: 3 },
        { x: 3, y: -2 },
        { x: -3, y: -2 },
        { x: -3, y: 3 }
      ],
      stroke_width: 0.1,
      pcb_silkscreen_path_id: ""
    };
  } else {
    return {
      type: "pcb_silkscreen_path",
      layer: "top",
      pcb_component_id: "",
      route: [],
      stroke_width: 0.1,
      pcb_silkscreen_path_id: ""
    };
  }
}
var jst = (raw_params) => {
  const params = jst_def.parse(raw_params);
  const variant = getVariant(params);
  const defaults = variantDefaults[variant];
  const p = params.p ?? defaults.p;
  const id = params.id ?? defaults.id;
  const pw = params.pw ?? defaults.pw;
  const pl2 = params.pl ?? defaults.pl;
  const w3 = params.w ?? defaults.w;
  const h = params.h ?? defaults.h;
  let numPins = variant === "sh" ? 4 : 2;
  if (variant === "sh") {
    const str = typeof raw_params.string === "string" ? raw_params.string : "";
    const match = str.match(/sh(\d+)/);
    if (match && match[1]) {
      const parsed = parseInt(match[1], 10);
      if (!Number.isNaN(parsed)) {
        numPins = parsed;
      }
    } else if (typeof params.sh === "number") {
      numPins = params.sh;
    }
  }
  const pads = generatePads(variant, numPins, p, id, pw, pl2);
  const silkscreenBody = generateSilkscreenBody(variant, w3, h);
  const silkscreenRefText = silkscreenRef(0, h / 2 + 1, 0.5);
  return {
    circuitJson: [...pads, silkscreenBody, silkscreenRefText],
    parameters: {
      ...params,
      p,
      id,
      pw,
      pl: pl2,
      w: w3,
      h,
      num_pins: numPins,
      sh: variant === "sh",
      ph: variant === "ph"
    }
  };
};
// src/fn/sod110.ts
var sod_def12 = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("3.30mm"),
  h: exports_external.string().default("1.70mm"),
  pl: exports_external.string().default("0.80mm"),
  pw: exports_external.string().default("1mm"),
  p: exports_external.string().default("1.90mm")
});
var sod110 = (raw_params) => {
  const parameters = sod_def12.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) / 2 + 0.5, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing13(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords13 = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  }
  return { x: p / 2, y: 0 };
};
var sodWithoutParsing13 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords13({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/vssop.ts
var getDefaultValues = (num_pins) => {
  switch (num_pins) {
    case 8:
      return {
        w: "3.06mm",
        h: "3.14mm",
        p: "0.65mm",
        pl: "1.6mm",
        pw: "0.5mm"
      };
    case 10:
      return {
        w: "3.10mm",
        h: "3.33mm",
        p: "0.5mm",
        pl: "1.45mm",
        pw: "0.3mm"
      };
    default:
      return {
        w: "3.06mm",
        h: "3.14mm",
        p: "0.65mm",
        pl: "1.6mm",
        pw: "0.5mm"
      };
  }
};
var vssop_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.union([exports_external.literal(8), exports_external.literal(10)]).default(8),
  w: exports_external.string().optional(),
  h: exports_external.string().optional(),
  p: exports_external.string().optional(),
  pl: exports_external.string().optional(),
  pw: exports_external.string().optional(),
  string: exports_external.string().optional()
});
var vssop = (raw_params) => {
  const parameters = vssop_def.parse(raw_params);
  const defaults = getDefaultValues(parameters.num_pins);
  const w3 = length.parse(parameters.w || defaults.w);
  const h = length.parse(parameters.h || defaults.h);
  const p = length.parse(parameters.p || defaults.p);
  const pl2 = length.parse(parameters.pl || defaults.pl);
  const pw = length.parse(parameters.pw || defaults.pw);
  const pads = [];
  const half = parameters.num_pins / 2;
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getVssopPadCoord(parameters.num_pins, i + 1, w3, p);
    const logical_pn = i < half ? i + 1 : parameters.num_pins - (i - half);
    pads.push(rectpad(logical_pn, x, y, pl2, pw));
  }
  const silkscreenBoxWidth = w3;
  const silkscreenBoxHeight = h;
  const silkscreenTopLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -silkscreenBoxWidth / 2, y: silkscreenBoxHeight / 2 },
      { x: silkscreenBoxWidth / 2, y: silkscreenBoxHeight / 2 }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenBottomLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -silkscreenBoxWidth / 2, y: -silkscreenBoxHeight / 2 },
      { x: silkscreenBoxWidth / 2, y: -silkscreenBoxHeight / 2 }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: ""
  };
  const pin1Position = getVssopPadCoord(parameters.num_pins, 1, silkscreenBoxWidth, p);
  const pin1MarkerPosition = {
    x: pin1Position.x - 0.8,
    y: pin1Position.y
  };
  const pin1Marking = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "pin_marker_1",
    route: [
      { x: pin1MarkerPosition.x - 0.4, y: pin1MarkerPosition.y },
      { x: pin1MarkerPosition.x - 0.7, y: pin1MarkerPosition.y + 0.3 },
      { x: pin1MarkerPosition.x - 0.7, y: pin1MarkerPosition.y - 0.3 },
      { x: pin1MarkerPosition.x - 0.4, y: pin1MarkerPosition.y }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: "pin_marker_1"
  };
  const silkscreenRefText = silkscreenRef(0, silkscreenBoxHeight / 2 + 0.5, 0.3);
  return {
    circuitJson: [
      ...pads,
      silkscreenTopLine,
      silkscreenBottomLine,
      silkscreenRefText,
      pin1Marking
    ],
    parameters
  };
};
var getVssopPadCoord = (pinCount, pn2, w3, p) => {
  const half = pinCount / 2;
  const rowIndex = (pn2 - 1) % half;
  const col = pn2 <= half ? -1 : 1;
  const row = (half - 1) / 2 - rowIndex;
  return {
    x: col * length.parse(pinCount === 8 ? "1.8mm" : "2.2mm"),
    y: row * p
  };
};
// src/fn/msop.ts
var getDefaultValues2 = (num_pins) => {
  switch (num_pins) {
    case 10:
      return {
        w: "3.10mm",
        h: "3.32mm",
        p: "0.5mm",
        pl: "1.63mm",
        pw: "0.33mm"
      };
    case 12:
      return {
        w: "3mm",
        h: "4mm",
        p: "0.65mm",
        pl: "0.88mm",
        pw: "0.4mm"
      };
    case 16:
      return {
        w: "3.10mm",
        h: "4mm",
        p: "0.5mm",
        pl: "0.88mm",
        pw: "0.3mm"
      };
    default:
      return {
        w: "3.10mm",
        h: "3.32mm",
        p: "0.65mm",
        pl: "1.63mm",
        pw: "0.4mm"
      };
  }
};
var msop_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.union([exports_external.literal(8), exports_external.literal(10), exports_external.literal(12), exports_external.literal(16)]).default(8),
  w: exports_external.string().optional(),
  h: exports_external.string().optional(),
  p: exports_external.string().optional(),
  pl: exports_external.string().optional(),
  pw: exports_external.string().optional(),
  string: exports_external.string().optional()
});
var getMsopCoords = (pinCount, pn2, w3, p) => {
  const half = pinCount / 2;
  const rowIndex = (pn2 - 1) % half;
  const col = pn2 <= half ? -1 : 1;
  const row = (half - 1) / 2 - rowIndex;
  return {
    x: col * length.parse("2mm"),
    y: row * p
  };
};
var msop = (raw_params) => {
  const parameters = msop_def.parse(raw_params);
  const defaults = getDefaultValues2(parameters.num_pins);
  const w3 = length.parse(parameters.w || defaults.w);
  const h = length.parse(parameters.h || defaults.h);
  const p = length.parse(parameters.p || defaults.p);
  const pl2 = length.parse(parameters.pl || defaults.pl);
  const pw = length.parse(parameters.pw || defaults.pw);
  const pads = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getMsopCoords(parameters.num_pins, i + 1, w3, p);
    pads.push(rectpad(i + 1, x, y, pl2, pw));
  }
  const silkscreenBoxWidth = w3;
  const silkscreenBoxHeight = h;
  const silkscreenTopLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -silkscreenBoxWidth / 2, y: silkscreenBoxHeight / 2 },
      { x: silkscreenBoxWidth / 2, y: silkscreenBoxHeight / 2 }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenBottomLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -silkscreenBoxWidth / 2, y: -silkscreenBoxHeight / 2 },
      { x: silkscreenBoxWidth / 2, y: -silkscreenBoxHeight / 2 }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: ""
  };
  const pin1Position = getMsopCoords(parameters.num_pins, 1, silkscreenBoxWidth, p);
  const pin1MarkerPosition = {
    x: pin1Position.x - 0.8,
    y: pin1Position.y
  };
  const pin1Marking = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "pin_marker_1",
    route: [
      { x: pin1MarkerPosition.x - 0.4, y: pin1MarkerPosition.y },
      { x: pin1MarkerPosition.x - 0.7, y: pin1MarkerPosition.y + 0.3 },
      { x: pin1MarkerPosition.x - 0.7, y: pin1MarkerPosition.y - 0.3 },
      { x: pin1MarkerPosition.x - 0.4, y: pin1MarkerPosition.y }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: "pin_marker_1"
  };
  const silkscreenRefText = silkscreenRef(0, silkscreenBoxHeight / 2 + 0.5, 0.3);
  return {
    circuitJson: [
      ...pads,
      silkscreenTopLine,
      silkscreenBottomLine,
      silkscreenRefText,
      pin1Marking
    ],
    parameters
  };
};
// src/fn/sod323w.ts
var sod323w_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("3.8mm"),
  h: exports_external.string().default("1.65mm"),
  pl: exports_external.string().default("1.2mm"),
  pw: exports_external.string().default("1.2mm"),
  pad_spacing: exports_external.string().default("2.6mm")
});
var sod323w = (raw_params) => {
  const parameters = sod323w_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.pad_spacing) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.pad_spacing) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing14(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords14 = (parameters) => {
  const { pn: pn2, pad_spacing } = parameters;
  if (pn2 === 1) {
    return { x: -pad_spacing / 2, y: 0 };
  } else {
    return { x: pad_spacing / 2, y: 0 };
  }
};
var sodWithoutParsing14 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords14({
      pn: i,
      pad_spacing: Number.parseFloat(parameters.pad_spacing)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sod323fl.ts
var sod323FL_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("3.20mm"),
  h: exports_external.string().default("1.65mm"),
  pl: exports_external.string().default("0.8mm"),
  pw: exports_external.string().default("0.9mm"),
  pad_spacing: exports_external.string().default("2.1mm")
});
var sod323fl = (raw_params) => {
  const parameters = sod323FL_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h), 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.pad_spacing) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.2,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.pad_spacing) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: sodWithoutParsing15(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSodCoords15 = (parameters) => {
  const { pn: pn2, pad_spacing } = parameters;
  if (pn2 === 1) {
    return { x: -pad_spacing / 2, y: 0 };
  } else {
    return { x: pad_spacing / 2, y: 0 };
  }
};
var sodWithoutParsing15 = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSodCoords15({
      pn: i,
      pad_spacing: Number.parseFloat(parameters.pad_spacing)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/son.ts
var son_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.union([exports_external.literal(6), exports_external.literal(8)]).default(8),
  w: exports_external.string().default("3mm"),
  h: exports_external.string().default("3mm"),
  p: exports_external.string().default("0.5mm"),
  pl: exports_external.string().default("0.52mm"),
  pw: exports_external.string().default("0.35mm"),
  epw: exports_external.string().default("1.40mm"),
  eph: exports_external.string().default("1.60mm"),
  string: exports_external.string().optional(),
  ep: exports_external.boolean().default(false)
});
var son = (raw_params) => {
  if (raw_params.string && raw_params.string.includes("_ep")) {
    raw_params.ep = true;
  }
  const match = raw_params.string?.match(/^son_(\d+)/);
  const numPins = match ? Number.parseInt(match[1], 10) : raw_params.num_pins || 8;
  const parameters = son_def.parse({
    ...raw_params,
    num_pins: numPins
  });
  const w3 = length.parse(parameters.w);
  const h = length.parse(parameters.h);
  const p = length.parse(parameters.p);
  const pl2 = length.parse(parameters.pl);
  const pw = length.parse(parameters.pw);
  const epw = length.parse(parameters.epw);
  const eph = length.parse(parameters.eph);
  const pads = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getSonPadCoord(parameters.num_pins, i + 1, w3, p);
    pads.push(rectpad(i + 1, x, y, pl2, pw));
  }
  if (parameters.ep) {
    pads.push(rectpad(parameters.num_pins + 1, 0, 0, epw, eph));
  }
  const silkscreenBoxWidth = w3;
  const silkscreenBoxHeight = h;
  const silkscreenTopLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -silkscreenBoxWidth / 2, y: silkscreenBoxHeight / 2 },
      { x: silkscreenBoxWidth / 2, y: silkscreenBoxHeight / 2 }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenBottomLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: -silkscreenBoxWidth / 2, y: -silkscreenBoxHeight / 2 },
      { x: silkscreenBoxWidth / 2, y: -silkscreenBoxHeight / 2 }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: ""
  };
  const pin1Position = getSonPadCoord(parameters.num_pins, 1, silkscreenBoxWidth, p);
  const pin1MarkerPosition = {
    x: pin1Position.x - 0.4,
    y: pin1Position.y
  };
  const pin1Marking = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "pin_marker_1",
    route: [
      { x: pin1MarkerPosition.x - 0.4, y: pin1MarkerPosition.y },
      { x: pin1MarkerPosition.x - 0.7, y: pin1MarkerPosition.y + 0.3 },
      { x: pin1MarkerPosition.x - 0.7, y: pin1MarkerPosition.y - 0.3 },
      { x: pin1MarkerPosition.x - 0.4, y: pin1MarkerPosition.y }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: "pin_marker_1"
  };
  const silkscreenRefText = silkscreenRef(0, silkscreenBoxHeight / 2 + 0.5, 0.3);
  return {
    circuitJson: [
      ...pads,
      silkscreenTopLine,
      silkscreenBottomLine,
      silkscreenRefText,
      pin1Marking
    ],
    parameters
  };
};
var getSonPadCoord = (num_pins, pn2, w3, p) => {
  const half = num_pins / 2;
  const rowIndex = (pn2 - 1) % half;
  const col = pn2 <= half ? -1 : 1;
  const row = (half - 1) / 2 - rowIndex;
  return {
    x: col * length.parse("1.4mm"),
    y: row * p
  };
};
// src/fn/solderjumper.ts
var solderjumper = (params) => {
  const { num_pins, bridged, p = 2.54, pw = 1.5, ph: ph2 = 1.5 } = params;
  const padSpacing = length.parse(p);
  const padWidth = length.parse(pw);
  const padHeight = length.parse(ph2);
  const traceWidth = Math.min(padHeight / 4, 0.5);
  const pads = [];
  for (let i = 0;i < num_pins; i++) {
    pads.push(rectpad(i + 1, i * padSpacing, 0, padWidth, padHeight));
  }
  let traces = [];
  if (bridged) {
    const pins = bridged.split("").map(Number);
    if (pins.length > 1) {
      for (let i = 0;i < pins.length - 1; i++) {
        const from = pins[i];
        const to2 = pins[i + 1];
        if (typeof from === "number" && typeof to2 === "number" && !isNaN(from) && !isNaN(to2)) {
          const xCenterFrom = (from - 1) * padSpacing;
          const xCenterTo = (to2 - 1) * padSpacing;
          const directionMult = Math.sign(xCenterTo - xCenterFrom);
          const x12 = xCenterFrom + directionMult * (padWidth / 2);
          const x22 = xCenterTo - directionMult * (padWidth / 2);
          traces.push({
            type: "pcb_trace",
            pcb_trace_id: "",
            route: [
              {
                start_pcb_port_id: `{PIN${from}}`,
                x: x12,
                y: 0,
                width: traceWidth,
                layer: "top",
                route_type: "wire"
              },
              {
                end_pcb_port_id: `{PIN${to2}}`,
                x: x22,
                y: 0,
                width: traceWidth,
                layer: "top",
                route_type: "wire"
              }
            ]
          });
        }
      }
    }
  }
  const outlineWidth = (num_pins - 1) * padSpacing + padWidth + 0.7;
  const outlineHeight = padHeight + 1;
  const outlineCenterX = (num_pins - 1) * padSpacing / 2;
  const outlineCenterY = 0;
  const silkscreenRect = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "outline",
    route: [
      {
        x: outlineCenterX - outlineWidth / 2,
        y: outlineCenterY - outlineHeight / 2
      },
      {
        x: outlineCenterX + outlineWidth / 2,
        y: outlineCenterY - outlineHeight / 2
      },
      {
        x: outlineCenterX + outlineWidth / 2,
        y: outlineCenterY + outlineHeight / 2
      },
      {
        x: outlineCenterX - outlineWidth / 2,
        y: outlineCenterY + outlineHeight / 2
      },
      {
        x: outlineCenterX - outlineWidth / 2,
        y: outlineCenterY - outlineHeight / 2
      }
    ],
    stroke_width: 0.15
  };
  const refOffset = 0.6;
  const refY = outlineCenterY + outlineHeight / 2 + refOffset;
  const silk = silkscreenRef(outlineCenterX, refY, 0.4);
  return {
    circuitJson: [...pads, ...traces, silkscreenRect, silk],
    parameters: params
  };
};
// src/fn/sot457.ts
var commonSchema = {
  fn: exports_external.literal("sot457"),
  num_pins: exports_external.literal(6).default(6),
  pillh: exports_external.string().default("0.45mm"),
  pillw: exports_external.string().default("1.45mm"),
  pl: exports_external.string(),
  pw: exports_external.string(),
  p: exports_external.string(),
  wave: exports_external.boolean().optional(),
  reflow: exports_external.boolean().optional()
};
var sot457DefSchema = exports_external.object({
  ...commonSchema,
  h: exports_external.string().default("2.5mm"),
  w: exports_external.string().default("2.7mm"),
  pl: exports_external.string().default("0.8mm"),
  pw: exports_external.string().default("0.55mm"),
  p: exports_external.string().default("0.95mm")
});
var sot457WaveSchema = exports_external.object({
  ...commonSchema,
  h: exports_external.string().default("3mm"),
  w: exports_external.string().default("4mm"),
  pillr: exports_external.string().default("0.225mm"),
  pl: exports_external.string().default("1.45mm"),
  pw: exports_external.string().default("1.5mm"),
  p: exports_external.string().default("1.475mm")
}).transform((data) => ({
  ...data,
  wave: data.wave ?? (data.reflow === undefined ? true : !data.reflow),
  reflow: data.reflow ?? (data.wave === undefined ? false : !data.wave)
}));
var parseDimension = (value) => {
  return Number.parseFloat(value.replace("mm", ""));
};
var getCcwSot457Coords = ({
  pitch,
  width,
  pinNumber
}) => {
  const offset = 0.1;
  const coords = {
    1: { x: -width / 2 - offset, y: pitch },
    2: { x: -width / 2 - offset, y: 0 },
    3: { x: -width / 2 - offset, y: -pitch },
    4: { x: width / 2 + offset, y: -pitch },
    5: { x: width / 2 + offset, y: 0 },
    6: { x: width / 2 + offset, y: pitch }
  };
  const coord = coords[pinNumber];
  if (!coord) {
    throw new Error(`Invalid pin number: ${pinNumber}`);
  }
  return coord;
};
var generateSot457Elements = (params) => {
  const pads = [];
  const pitch = parseDimension(params.p);
  const padLength = parseDimension(params.pl);
  const padWidth = parseDimension(params.pw);
  const width = parseDimension(params.w);
  const height = parseDimension(params.h);
  if (params.wave) {
    const pinConfigs = {
      1: ({ padWidth: padWidth2, padHeight }) => rectpad(1, -pitch, pitch, padHeight, padWidth2),
      2: ({ padWidth: padWidth2, padHeight }) => rectpad(2, -pitch, -pitch, padHeight, padWidth2),
      3: ({ padWidth: padWidth2, padHeight }) => pillpad(3, -pitch, 0, parseDimension(params.pillw), parseDimension(params.pillh)),
      4: ({ padWidth: padWidth2, padHeight }) => pillpad(4, pitch, 0, parseDimension(params.pillw), parseDimension(params.pillh)),
      5: ({ padWidth: padWidth2, padHeight }) => rectpad(5, pitch, pitch, padHeight, padWidth2),
      6: ({ padWidth: padWidth2, padHeight }) => rectpad(6, pitch, -pitch, padHeight, padWidth2)
    };
    for (let i = 1;i <= params.num_pins; i++) {
      const config = pinConfigs[i];
      if (config) {
        pads.push(config({ padWidth: padLength, padHeight: padWidth }));
      }
    }
  } else {
    for (let i = 1;i <= params.num_pins; i++) {
      const { x, y } = getCcwSot457Coords({ pitch, width, pinNumber: i });
      pads.push(rectpad(i, x, y, padLength, padWidth));
    }
  }
  const silkscreenPath1 = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width / 3, y: height / 2 + pitch / 1.3 },
      { x: width / 3, y: height / 2 + pitch / 1.3 }
    ],
    stroke_width: 0.05
  };
  const silkscreenPath2 = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width / 3, y: -height / 2 - pitch / 1.3 },
      { x: width / 3, y: -height / 2 - pitch / 1.3 }
    ],
    stroke_width: 0.05
  };
  const silkscreenRefText = silkscreenRef(0, height + 0.5, 0.3);
  const pin1Position = getCcwSot457Coords({ pitch, width, pinNumber: 1 });
  const triangleHeight = params.wave ? 1 : 0.5;
  const triangleWidth = params.wave ? 0.7 : 0.3;
  pin1Position.x -= params.wave ? padWidth : padWidth * 1.7;
  const pin1Indicator = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "pin1_indicator",
    route: [
      { x: pin1Position.x + triangleHeight / 2, y: pin1Position.y },
      {
        x: pin1Position.x - triangleHeight / 2,
        y: pin1Position.y + triangleWidth / 2
      },
      {
        x: pin1Position.x - triangleHeight / 2,
        y: pin1Position.y - triangleWidth / 2
      },
      { x: pin1Position.x + triangleHeight / 2, y: pin1Position.y }
    ],
    stroke_width: 0.05
  };
  return [
    silkscreenRefText,
    silkscreenPath1,
    silkscreenPath2,
    pin1Indicator,
    ...pads
  ];
};
var sot457 = (rawParams) => {
  if (rawParams.wave) {
    const parameters2 = sot457WaveSchema.parse({ ...rawParams, fn: "sot457" });
    return {
      circuitJson: generateSot457Elements(parameters2),
      parameters: parameters2
    };
  }
  const parameters = sot457DefSchema.parse(rawParams);
  return {
    circuitJson: generateSot457Elements(parameters),
    parameters
  };
};
// src/fn/potentiometer.ts
var potentiometer_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.union([exports_external.literal(3), exports_external.literal(2)]).default(3),
  p: exports_external.string().default("3.8mm"),
  id: exports_external.string().default("1.25mm"),
  od: exports_external.string().default("2.35mm"),
  ca: exports_external.string().default("14mm").describe("Caliper axis (width or diameter of the potentiometer body or adjustment knob)"),
  w: exports_external.string().default("5.35mm"),
  h: exports_external.string().default("4mm"),
  string: exports_external.string().optional()
});
var potentiometer_acp = (parameters) => {
  const { p, id, od, h, ca: ca2 } = parameters;
  const y = Number.parseFloat(h);
  const caliper = Number.parseFloat(ca2);
  return [
    platedhole(1, 0, caliper / 4 + 0.3, id, od),
    platedhole(2, y, 0, id, od),
    platedhole(3, 0, -caliper / 4 - 0.3, id, od)
  ];
};
var potentiometer = (raw_params) => {
  const match = raw_params.string?.match(/^potentiometer_(\d+)/);
  const numPins = match ? Number.parseInt(match[1], 10) : 3;
  const parameters = potentiometer_def.parse({
    ...raw_params,
    num_pins: numPins
  });
  let platedHoles = [];
  if (parameters.num_pins === 3) {
    platedHoles = potentiometer_acp(parameters);
  }
  const y = Number.parseFloat(parameters.ca) / 2 + 0.15;
  const x = Number.parseFloat(parameters.w);
  const od = Number.parseFloat(parameters.od) / 2 + 0.35;
  const silkscreenBody = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: 0, y: y - 1.75 },
      { x: 0, y },
      { x, y },
      { x, y: od }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenBody2 = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x, y: -od },
      { x, y: -y },
      { x: 0, y: -y },
      { x: 0, y: -y + 1.75 }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const W3 = Number.parseFloat(parameters.w) / 2;
  const silkscreenRefText = silkscreenRef(W3, y + 1, 0.5);
  return {
    circuitJson: [
      ...platedHoles,
      silkscreenBody,
      silkscreenBody2,
      silkscreenRefText
    ],
    parameters
  };
};
// src/fn/electrolytic.ts
var electrolytic_def = exports_external.object({
  fn: exports_external.string(),
  p: length.optional().default("7.5mm"),
  id: length.optional().default("1mm"),
  od: length.optional().default("2mm"),
  d: length.optional().default("10.5mm")
});
var generate_circle_arcs = (centerX, centerY, radius, cut, cutHeight) => {
  const topArc = [];
  const bottomArc = [];
  for (let i = 0;i <= 50; i++) {
    const theta = i / 50 * Math.PI;
    const x = centerX + Math.cos(theta) * radius;
    const y = centerY + Math.sin(theta) * radius;
    if (x < centerX - cut && y >= centerY - cutHeight / 2 && y <= centerY + cutHeight / 2) {
      continue;
    }
    topArc.push({ x, y });
  }
  for (let i = 0;i <= 50; i++) {
    const theta = Math.PI + i / 50 * Math.PI;
    const x = centerX + Math.cos(theta) * radius;
    const y = centerY + Math.sin(theta) * radius;
    if (x < centerX - cut && y >= centerY - cutHeight / 2 && y <= centerY + cutHeight / 2) {
      continue;
    }
    bottomArc.push({ x, y });
  }
  return { topArc, bottomArc };
};
var electrolytic = (raw_params) => {
  const parameters = electrolytic_def.parse(raw_params);
  const { p, id, od, d } = parameters;
  const plated_holes = [
    platedhole(1, -p / 2, 0, id, od),
    platedhole(2, p / 2, 0, id, od)
  ];
  const { topArc, bottomArc } = generate_circle_arcs(0, 0, d / 2 + 0.1, od / 2, od);
  const silkscreenBody2 = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: topArc,
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenBody3 = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: bottomArc,
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenBody = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: 0, y: d / 2 + 0.1 },
      { x: 0, y: -(d / 2 + 0.1) }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const X2 = -(d / 2 + 0.5);
  const plusY = od / 2 + 1.5;
  const Size = 0.5;
  const silkscreenpath2 = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: X2 - Size, y: plusY },
      { x: X2 + Size, y: plusY }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenline = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      { x: X2, y: plusY - Size },
      { x: X2, y: plusY + Size }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  const silkscreenRefText = silkscreenRef(0, d / 2 + 1, 0.5);
  return {
    circuitJson: [
      ...plated_holes,
      silkscreenBody2,
      silkscreenBody3,
      silkscreenBody,
      silkscreenpath2,
      silkscreenline,
      silkscreenRefText
    ],
    parameters
  };
};
// src/fn/smbf.ts
var smbf_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(2).default(2),
  w: exports_external.string().default("6.5mm"),
  h: exports_external.string().default("3mm"),
  pl: exports_external.string().default("1.75mm"),
  pw: exports_external.string().default("2.40mm"),
  p: exports_external.string().default("4.75mm")
});
var smbf = (raw_params) => {
  const parameters = smbf_def.parse(raw_params);
  const silkscreenRefText = silkscreenRef(0, length.parse(parameters.h) - 0.5, 0.3);
  const silkscreenLine = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    route: [
      {
        x: length.parse(parameters.p) / 2,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.3,
        y: length.parse(parameters.h) / 2
      },
      {
        x: -length.parse(parameters.w) / 2 - 0.3,
        y: -length.parse(parameters.h) / 2
      },
      {
        x: length.parse(parameters.p) / 2,
        y: -length.parse(parameters.h) / 2
      }
    ],
    stroke_width: 0.1,
    pcb_silkscreen_path_id: ""
  };
  return {
    circuitJson: smbfWithoutParsing(parameters).concat(silkscreenLine, silkscreenRefText),
    parameters
  };
};
var getSmbfCoords = (parameters) => {
  const { pn: pn2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p / 2, y: 0 };
  }
  return { x: p / 2, y: 0 };
};
var smbfWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getSmbfCoords({
      pn: i,
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  return pads;
};
// src/fn/sot323.ts
var sot323_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.number().default(3),
  w: exports_external.string().default("2.45mm"),
  h: exports_external.string().default("2.40mm"),
  pl: exports_external.string().default("0.45mm"),
  pw: exports_external.string().default("0.70mm"),
  p: exports_external.string().default("1mm"),
  string: exports_external.string().optional()
});
var sot323 = (raw_params) => {
  const match = raw_params.string?.match(/^sot323_(\d+)/);
  const numPins = match ? Number.parseInt(match[1], 3) : 3;
  const parameters = sot323_def.parse({
    ...raw_params,
    num_pins: numPins
  });
  if (parameters.num_pins === 3) {
    return {
      circuitJson: sot323_3(parameters),
      parameters
    };
  }
  throw new Error("Invalid number of pins");
};
var getCcwSot323Coords = (parameters) => {
  const { pn: pn2, w: w3, h, pl: pl2, p } = parameters;
  if (pn2 === 1) {
    return { x: -p, y: 0.65 };
  }
  if (pn2 === 2) {
    return { x: -p, y: -0.65 };
  }
  return { x: p, y: 0 };
};
var sot323_3 = (parameters) => {
  const pads = [];
  for (let i = 0;i < parameters.num_pins; i++) {
    const { x, y } = getCcwSot323Coords({
      num_pins: parameters.num_pins,
      pn: i + 1,
      w: Number.parseFloat(parameters.w),
      h: Number.parseFloat(parameters.h),
      pl: Number.parseFloat(parameters.pl),
      p: Number.parseFloat(parameters.p)
    });
    pads.push(rectpad(i + 1, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  const silkscreenRefText = silkscreenRef(0, Number.parseInt(parameters.h) / 2 + 1, 0.3);
  const width = Number.parseFloat(parameters.w) / 2 - Number.parseFloat(parameters.pl);
  const height = Number.parseFloat(parameters.h) / 2;
  const silkscreenPath1 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width, y: height + 0.3 },
      { x: width, y: height + 0.3 },
      { x: width, y: height / 2 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  const silkscreenPath2 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width, y: -height - 0.3 },
      { x: width, y: -height - 0.3 },
      { x: width, y: -height / 2 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.1
  };
  return [
    ...pads,
    silkscreenPath1,
    silkscreenPath2,
    silkscreenRefText
  ];
};
// src/fn/smtpad.ts
var smtpad_def = exports_external.object({
  fn: exports_external.string(),
  circle: exports_external.boolean().optional(),
  rect: exports_external.boolean().optional(),
  square: exports_external.boolean().optional(),
  pill: exports_external.boolean().optional(),
  d: length.optional(),
  pd: length.optional(),
  diameter: length.optional(),
  r: length.optional(),
  pr: length.optional(),
  radius: length.optional(),
  w: length.optional(),
  pw: length.optional(),
  width: length.optional(),
  h: length.optional(),
  ph: length.optional(),
  height: length.optional(),
  s: length.optional(),
  size: length.optional(),
  string: exports_external.string().optional()
}).transform((v3) => {
  let shape = "rect";
  if (v3.circle)
    shape = "circle";
  if (v3.square)
    shape = "square";
  if (v3.rect)
    shape = "rect";
  if (v3.pill)
    shape = "pill";
  let radius;
  let width;
  let height;
  if (shape === "circle") {
    if (v3.r !== undefined)
      radius = mm2(v3.r);
    else if (v3.pr !== undefined)
      radius = mm2(v3.pr);
    else if (v3.radius !== undefined)
      radius = mm2(v3.radius);
    else if (v3.d !== undefined)
      radius = mm2(v3.d) / 2;
    else if (v3.pd !== undefined)
      radius = mm2(v3.pd) / 2;
    else if (v3.diameter !== undefined)
      radius = mm2(v3.diameter) / 2;
    else
      radius = mm2("1mm") / 2;
  } else {
    if (v3.w !== undefined)
      width = mm2(v3.w);
    else if (v3.pw !== undefined)
      width = mm2(v3.pw);
    else if (v3.width !== undefined)
      width = mm2(v3.width);
    else if (v3.s !== undefined)
      width = mm2(v3.s);
    else if (v3.size !== undefined)
      width = mm2(v3.size);
    else
      width = mm2("1mm");
    if (v3.h !== undefined)
      height = mm2(v3.h);
    else if (v3.ph !== undefined)
      height = mm2(v3.ph);
    else if (v3.height !== undefined)
      height = mm2(v3.height);
    else if (shape === "square")
      height = width;
    else if (shape === "rect")
      height = width;
    else
      height = mm2("1mm");
  }
  return {
    fn: v3.fn,
    shape,
    radius,
    width,
    height
  };
});
var smtpad = (raw_params) => {
  const params = smtpad_def.parse(raw_params);
  const { shape, radius, width, height } = params;
  let pad2;
  let silkscreenOffset;
  if (shape === "circle") {
    pad2 = circlepad(1, { x: 0, y: 0, radius });
    silkscreenOffset = radius + 0.5;
  } else if (shape === "pill") {
    pad2 = pillpad(1, 0, 0, width, height);
    silkscreenOffset = Math.max(width, height) / 2 + 0.5;
  } else {
    pad2 = rectpad(1, 0, 0, width, height);
    silkscreenOffset = height / 2 + 0.5;
  }
  return {
    circuitJson: [
      pad2,
      silkscreenRef(0, silkscreenOffset, 0.2)
    ],
    parameters: params
  };
};
// src/fn/platedhole.ts
var platedhole_def = exports_external.object({
  fn: exports_external.string(),
  d: length.optional(),
  hd: length.optional(),
  r: length.optional(),
  hr: length.optional(),
  pd: length.optional(),
  pr: length.optional(),
  squarepad: exports_external.boolean().optional().default(false)
}).transform((v3) => {
  let holeD;
  if (v3.d !== undefined)
    holeD = mm2(v3.d);
  else if (v3.hd !== undefined)
    holeD = mm2(v3.hd);
  else if (v3.r !== undefined)
    holeD = mm2(v3.r) * 2;
  else if (v3.hr !== undefined)
    holeD = mm2(v3.hr) * 2;
  else
    holeD = mm2("1mm");
  let padD;
  if (v3.pd !== undefined)
    padD = mm2(v3.pd);
  else if (v3.pr !== undefined)
    padD = mm2(v3.pr) * 2;
  else
    padD = holeD * (1.5 / 1);
  return {
    fn: v3.fn,
    d: holeD,
    pd: padD,
    squarepad: v3.squarepad ?? false
  };
});
var platedhole2 = (raw_params) => {
  const params = platedhole_def.parse(raw_params);
  const { d, pd: pd2, squarepad } = params;
  return {
    circuitJson: [
      squarepad ? platedHoleWithRectPad(1, 0, 0, d, pd2, pd2) : platedhole(1, 0, 0, d, pd2),
      silkscreenRef(0, pd2 / 2 + 0.5, 0.2)
    ],
    parameters: params
  };
};
// src/fn/sot.ts
var sot_def = exports_external.object({
  fn: exports_external.string(),
  num_pins: exports_external.literal(6).default(6),
  h: exports_external.string().default("1.6mm"),
  pl: exports_external.string().default("1mm"),
  pw: exports_external.string().default("0.7mm"),
  p: exports_external.string().default("0.95mm")
});
var sot = (raw_params) => {
  const parameters = sot_def.parse(raw_params);
  return {
    circuitJson: sotWithoutParsing(parameters),
    parameters
  };
};
var getCcwSotCoords = (parameters) => {
  const { p, h, pn: pn2 } = parameters;
  if (pn2 === 1) {
    return { x: -h / 2 - 0.5, y: p };
  }
  if (pn2 === 2) {
    return { x: -h / 2 - 0.5, y: 0 };
  }
  if (pn2 === 3) {
    return { x: -h / 2 - 0.5, y: -p };
  }
  if (pn2 === 4) {
    return { x: h / 2 + 0.5, y: -p };
  }
  if (pn2 === 5) {
    return { x: h / 2 + 0.5, y: 0 };
  }
  if (pn2 === 6) {
    return { x: h / 2 + 0.5, y: p };
  }
  throw new Error("Invalid pin number");
};
var sotWithoutParsing = (parameters) => {
  const pads = [];
  for (let i = 1;i <= parameters.num_pins; i++) {
    const { x, y } = getCcwSotCoords({
      h: Number.parseFloat(parameters.h),
      p: Number.parseFloat(parameters.p),
      pn: i
    });
    pads.push(rectpad(i, x, y, Number.parseFloat(parameters.pl), Number.parseFloat(parameters.pw)));
  }
  const width = parameters.num_pins / 2 * Number.parseFloat(parameters.p);
  const height = Number.parseFloat(parameters.h);
  const silkscreenPath1 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_1",
    route: [
      { x: -width / 3, y: height / 2 + Number.parseFloat(parameters.p) / 1.3 },
      { x: width / 3, y: height / 2 + Number.parseFloat(parameters.p) / 1.3 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.05
  };
  const silkscreenPath2 = {
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "silkscreen_path_2",
    route: [
      { x: -width / 3, y: -height / 2 - Number.parseFloat(parameters.p) / 1.3 },
      { x: width / 3, y: -height / 2 - Number.parseFloat(parameters.p) / 1.3 }
    ],
    type: "pcb_silkscreen_path",
    stroke_width: 0.05
  };
  const silkscreenRefText = silkscreenRef(0, height + 0.3, 0.3);
  const pin1Position = getCcwSotCoords({
    h: Number.parseFloat(parameters.h),
    p: Number.parseFloat(parameters.p),
    pn: 1
  });
  pin1Position.x = pin1Position.x - Number.parseFloat(parameters.pw) * 1.5;
  const triangleHeight = 0.7;
  const triangleWidth = 0.3;
  const pin1Indicator = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "",
    pcb_silkscreen_path_id: "pin1_indicator",
    route: [
      {
        x: pin1Position.x + triangleHeight / 2,
        y: pin1Position.y
      },
      {
        x: pin1Position.x - triangleHeight / 2,
        y: pin1Position.y + triangleWidth / 2
      },
      {
        x: pin1Position.x - triangleHeight / 2,
        y: pin1Position.y - triangleWidth / 2
      },
      {
        x: pin1Position.x + triangleHeight / 2,
        y: pin1Position.y
      }
    ],
    stroke_width: 0.05
  };
  return [
    ...pads,
    silkscreenRefText,
    silkscreenPath1,
    silkscreenPath2,
    pin1Indicator
  ];
};
// src/fn/m2host.ts
var m2host_def = exports_external.object({
  fn: exports_external.string()
});
var m2host = (raw_params) => {
  const parameters = m2host_def.parse(raw_params);
  const pads = [];
  const padWidth = 0.5 - 0.15;
  const padLength = 1.5;
  const pitch = 0.5;
  const halfPitch = pitch / 2;
  const rowOffset = 0.5;
  const numPads = 75;
  const startY = -((numPads - 1) * pitch) / 2;
  for (let i = 0;i < numPads; i++) {
    const pn2 = i + 1;
    if (pn2 >= 24 && pn2 <= 31)
      continue;
    const y = startY - i * halfPitch;
    const isBottomLayer = pn2 % 2 === 0;
    const padLengthWithOffset = padLength + (isBottomLayer ? 0.25 : 0);
    const rightEdgeOffset = 0.5;
    const x = rightEdgeOffset - padLengthWithOffset / 2;
    const pad2 = rectpad(pn2, x, y, padLengthWithOffset, padWidth);
    pad2.layer = isBottomLayer ? "bottom" : "top";
    pads.push(pad2);
  }
  const cutoutWidth = 46 * 0.0254;
  const cutoutDepth = 137 * 0.0254;
  const cutoutOffsetFromPin1 = 261 * 0.0254;
  const cutout = {
    type: "pcb_cutout",
    pcb_cutout_id: "",
    shape: "rect",
    center: {
      x: -cutoutDepth / 2 + padLength / 2,
      y: startY - cutoutOffsetFromPin1
    },
    width: cutoutDepth,
    height: cutoutWidth
  };
  const pin1MarkerPosition = {
    x: -0.5,
    y: startY
  };
  const pin1Marker = {
    type: "pcb_silkscreen_path",
    layer: "top",
    pcb_component_id: "pin_marker_1",
    route: [
      { x: pin1MarkerPosition.x - 0.4, y: pin1MarkerPosition.y },
      { x: pin1MarkerPosition.x - 0.7, y: pin1MarkerPosition.y + 0.3 },
      { x: pin1MarkerPosition.x - 0.7, y: pin1MarkerPosition.y - 0.3 },
      { x: pin1MarkerPosition.x - 0.4, y: pin1MarkerPosition.y }
    ],
    stroke_width: 0.05,
    pcb_silkscreen_path_id: "pin_marker_1"
  };
  let minX = Infinity;
  let maxX = -Infinity;
  let minY = Infinity;
  let maxY = -Infinity;
  const updateBounds = (x, y, w3 = 0, h = 0) => {
    minX = Math.min(minX, x - w3 / 2);
    maxX = Math.max(maxX, x + w3 / 2);
    minY = Math.min(minY, y - h / 2);
    maxY = Math.max(maxY, y + h / 2);
  };
  for (const pad2 of pads) {
    updateBounds(pad2.x, pad2.y, pad2.width, pad2.height);
  }
  updateBounds(cutout.center.x, cutout.center.y, cutout.width, cutout.height);
  for (const point2 of pin1Marker.route) {
    updateBounds(point2.x, point2.y);
  }
  const centerX = (minX + maxX) / 2;
  const centerY = (minY + maxY) / 2;
  const translate3 = (el2) => {
    if (typeof el2.x === "number")
      el2.x -= centerX;
    if (typeof el2.y === "number")
      el2.y -= centerY;
    if (el2.center) {
      el2.center.x -= centerX;
      el2.center.y -= centerY;
    }
    if (Array.isArray(el2.route)) {
      el2.route = el2.route.map((p) => ({
        x: p.x - centerX,
        y: p.y - centerY
      }));
    }
  };
  for (const pad2 of pads)
    translate3(pad2);
  translate3(cutout);
  translate3(pin1Marker);
  return {
    circuitJson: [
      ...pads,
      cutout,
      pin1Marker
    ],
    parameters
  };
};
// src/helpers/is-not-null.ts
function isNotNull(value) {
  return value !== null && value !== undefined;
}

// src/helpers/apply-origin.ts
var applyOrigin = (elements, origin) => {
  if (!origin)
    return elements;
  const pads = elements.filter((el2) => el2.type === "pcb_smtpad" || el2.type === "pcb_plated_hole" || el2.type === "pcb_thtpad");
  if (pads.length === 0)
    return elements;
  let minX = Infinity;
  let maxX = -Infinity;
  let minY = Infinity;
  let maxY = -Infinity;
  const updateBounds = (x, y, w3 = 0, h = 0) => {
    const left = x - w3 / 2;
    const right = x + w3 / 2;
    const bottom = y - h / 2;
    const top = y + h / 2;
    minX = Math.min(minX, left);
    maxX = Math.max(maxX, right);
    minY = Math.min(minY, bottom);
    maxY = Math.max(maxY, top);
  };
  for (const pad2 of pads) {
    if (pad2.type === "pcb_smtpad") {
      const w3 = pad2.shape === "circle" ? pad2.radius * 2 : pad2.width;
      const h = pad2.shape === "circle" ? pad2.radius * 2 : pad2.height;
      updateBounds(pad2.x, pad2.y, w3, h);
    } else if (pad2.type === "pcb_plated_hole") {
      const d = pad2.outer_diameter ?? pad2.hole_diameter;
      updateBounds(pad2.x, pad2.y, d, d);
    } else if (pad2.type === "pcb_thtpad") {
      const d = pad2.diameter;
      updateBounds(pad2.x, pad2.y, d, d);
    }
  }
  let dx2 = 0;
  let dy2 = 0;
  switch (origin) {
    case "center":
      dx2 = (minX + maxX) / 2;
      dy2 = (minY + maxY) / 2;
      break;
    case "bottomleft":
      dx2 = minX;
      dy2 = minY;
      break;
    case "bottomcenter":
    case "centerbottom":
      dx2 = (minX + maxX) / 2;
      dy2 = minY;
      break;
    case "topcenter":
    case "centertop":
      dx2 = (minX + maxX) / 2;
      dy2 = maxY;
      break;
    case "leftcenter":
    case "centerleft":
      dx2 = minX;
      dy2 = (minY + maxY) / 2;
      break;
    case "rightcenter":
    case "centerright":
      dx2 = maxX;
      dy2 = (minY + maxY) / 2;
      break;
    case "pin1":
      const pin1 = pads.find((p) => p.port_hints?.[0] === "1") || pads[0];
      dx2 = pin1.x;
      dy2 = pin1.y;
      break;
  }
  if (dx2 === 0 && dy2 === 0)
    return elements;
  for (const el2 of elements) {
    if (typeof el2.x === "number")
      el2.x -= dx2;
    if (typeof el2.y === "number")
      el2.y -= dy2;
    if (el2.center && typeof el2.center.x === "number") {
      el2.center.x -= dx2;
      el2.center.y -= dy2;
    }
    if (el2.type === "pcb_silkscreen_path") {
      for (const pt2 of el2.route) {
        pt2.x -= dx2;
        pt2.y -= dy2;
      }
    }
    if (el2.type === "pcb_silkscreen_text" && el2.anchor_position) {
      el2.anchor_position.x -= dx2;
      el2.anchor_position.y -= dy2;
    }
  }
  return elements;
};

// src/footprinter.ts
var string2 = (def) => {
  let fp2 = footprinter();
  const modifiedDef = def.replace(/^((?:\d{4}|\d{5}))(?=$|_)/, "res$1");
  const def_parts = modifiedDef.split(/_(?!metric)/).map((s3) => {
    const m = s3.match(/([a-zA-Z]+)([\(\d\.\+\?].*)?/);
    if (!m)
      return null;
    const [, rawFn, v3] = m;
    if (!rawFn)
      return null;
    const fn2 = rawFn.toLowerCase();
    if (v3?.includes("?"))
      return null;
    return { fn: fn2, v: v3 };
  }).filter(isNotNull);
  for (const { fn: fn2, v: v3 } of def_parts) {
    fp2 = fp2[fn2](v3);
  }
  fp2.setString(def);
  return fp2;
};
var getFootprintNames = () => {
  return Object.keys(exports_fn);
};
var footprinter = () => {
  const proxy = new Proxy({}, {
    get: (target, prop) => {
      if (prop === "soup" || prop === "circuitJson") {
        if ("fn" in target && exports_fn[target.fn]) {
          return () => {
            const { circuitJson } = exports_fn[target.fn](target);
            return applyOrigin(circuitJson, target.origin);
          };
        }
        if (!exports_fn[target.fn]) {
          throw new Error(`Invalid footprint function, got "${target.fn}"${target.string ? `, from string "${target.string}"` : ""}`);
        }
        return () => {
          throw new Error(`No function found for footprinter, make sure to specify .dip, .lr, .p, etc. Got "${prop}"`);
        };
      }
      if (prop === "json") {
        if (!exports_fn[target.fn]) {
          throw new Error(`Invalid footprint function, got "${target.fn}"${target.string ? `, from string "${target.string}"` : ""}`);
        }
        return () => exports_fn[target.fn](target).parameters;
      }
      if (prop === "getFootprintNames") {
        return () => Object.keys(exports_fn);
      }
      if (prop === "params") {
        return () => target;
      }
      if (prop === "setString") {
        return (v3) => {
          target.string = v3;
          return proxy;
        };
      }
      return (v3) => {
        if (Object.keys(target).length === 0) {
          if (`${prop}${v3}` in exports_fn) {
            target[`${prop}${v3}`] = true;
            target.fn = `${prop}${v3}`;
          } else {
            target[prop] = true;
            target.fn = prop;
            if (prop === "res" || prop === "cap") {
              if (v3) {
                if (typeof v3 === "string" && v3.includes("_metric")) {
                  target.metric = v3.split("_metric")[0];
                } else {
                  target.imperial = v3;
                }
              }
            } else {
              target.num_pins = Number.isNaN(Number.parseFloat(v3)) ? undefined : Number.parseFloat(v3);
            }
          }
        } else {
          if (!v3 && ["w", "h", "p"].includes(prop)) {} else {
            target[prop] = v3 ?? true;
          }
        }
        return proxy;
      };
    }
  });
  return proxy;
};
footprinter.string = string2;
footprinter.getFootprintNames = getFootprintNames;
var fp2 = footprinter;

// gallery/content.ts
var content_default = [
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="121.17647058823528" y="117.64705882352933" width="557.6470588235295" height="364.7058823529412"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="162.35294117647058" y="247.0588235294117" width="176.47058823529414" height="176.47058823529414" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="461.17647058823536" y="247.0588235294117" width="176.47058823529414" height="176.47058823529414" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 121.17647058823528 482.35294117647055 L 678.8235294117648 482.35294117647055 L 678.8235294117648 188.23529411764702 L 121.17647058823528 188.23529411764702 L 121.17647058823528 482.35294117647055 Z" fill="none" stroke="#f2eda1" stroke-width="17.647058823529413" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="outline"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="47.05882352941177" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,117.64705882352933)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "solderjumper2"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="116.49484536082474" y="103.09278350515473" width="567.0103092783504" height="393.8144329896907"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="204.63917525773206" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="271.6494845360826" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="338.6597938144331" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="405.6701030927836" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="204.63917525773206" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="271.6494845360826" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="338.6597938144331" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="405.6701030927836" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 154.6391752577321 L 637.1134020618556 154.6391752577321" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 496.90721649484544 L 637.1134020618556 496.90721649484544" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 147.4226804123711 225.25773195876297 L 116.49484536082474 194.32989690721658 L 116.49484536082474 256.18556701030934 L 147.4226804123711 225.25773195876297 Z" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.92783505154639" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,477.3195876288659,103.09278350515473)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "msop8_w3.10mm_h3.32mm_p0.65mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="168.56310679611647" y="116.50485436893203" width="462.87378640776706" height="366.9902912621359"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="211.90291262135923" y="290.09708737864077" width="106.01941747572815" height="142.13592233009706" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.4271844660194" y="290.09708737864077" width="106.01941747572815" height="142.13592233009706" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 631.4368932038835 238.83495145631065 L 168.56310679611647 238.83495145631065 L 168.56310679611647 483.49514563106794 L 631.4368932038835 483.49514563106794" fill="none" stroke="#f2eda1" stroke-width="11.650485436893204" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="34.95145631067961" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,448.1747572815534,116.50485436893203)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod123fl"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="282.92682926829264" y="97.56097560975607" width="234.14634146341461" height="404.8780487804878"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="234.1463414634146" y="214.6341463414634" width="97.5609756097561" height="68.29268292682926" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="234.1463414634146" y="400" width="97.5609756097561" height="68.29268292682926" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="468.29268292682923" y="307.3170731707317" width="97.5609756097561" height="68.29268292682926" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 331.70731707317066 180.48780487804876 L 497.56097560975604 180.48780487804876 L 497.56097560975604 260.9756097560975" fill="none" stroke="#f2eda1" stroke-width="9.756097560975611" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 331.70731707317066 502.43902439024384 L 497.56097560975604 502.43902439024384 L 497.56097560975604 421.9512195121951" fill="none" stroke="#f2eda1" stroke-width="9.756097560975611" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="29.268292682926827" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,97.56097560975607)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot23w"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="169.57831325301203" y="90.3614457831325" width="460.8433734939759" height="419.27710843373495"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="223.79518072289156" y="150.90361445783128" width="162.65060240963857" height="72.28915662650603" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="223.79518072289156" y="241.2650602409638" width="162.65060240963857" height="72.28915662650603" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="223.79518072289156" y="331.6265060240964" width="162.65060240963857" height="72.28915662650603" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="223.79518072289156" y="421.9879518072289" width="162.65060240963857" height="72.28915662650603" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="549.0963855421686" y="150.90361445783128" width="162.65060240963857" height="72.28915662650603" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="549.0963855421686" y="241.2650602409638" width="162.65060240963857" height="72.28915662650603" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="549.0963855421686" y="331.6265060240964" width="162.65060240963857" height="72.28915662650603" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="549.0963855421686" y="421.9879518072289" width="162.65060240963857" height="72.28915662650603" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 329.51807228915663 135.5421686746988 L 606.0240963855422 135.5421686746988" fill="none" stroke="#f2eda1" stroke-width="4.518072289156627" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 329.51807228915663 509.6385542168674 L 606.0240963855422 509.6385542168674" fill="none" stroke="#f2eda1" stroke-width="4.518072289156627" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 196.68674698795178 187.0481927710843 L 169.57831325301203 159.93975903614455 L 169.57831325301203 214.15662650602405 L 196.68674698795178 187.0481927710843 Z" fill="none" stroke="#f2eda1" stroke-width="4.518072289156627" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.108433734939762" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,467.7710843373494,90.3614457831325)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "vssop8_h4.14mm_pl1.8mm_pw0.8mm_p1mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="263.6363636363636" y="163.6363636363637" width="272.72727272727275" height="272.72727272727275"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.98210450966354" y="397.70937723693635" width="77.30851825340014" height="77.30851825340014" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="388.61846814602717" y="397.70937723693635" width="77.30851825340014" height="77.30851825340014" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.98210450966354" y="234.07301360057272" width="77.30851825340014" height="77.30851825340014" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="388.61846814602717" y="234.07301360057272" width="77.30851825340014" height="77.30851825340014" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 509.09090909090907 190.909090909091 L 509.09090909090907 163.6363636363637 L 536.3636363636364 190.909090909091 L 509.09090909090907 190.909090909091 Z" fill="none" stroke="#f2eda1" stroke-width="8.181818181818182" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_marker"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,345.45454545454544,190.909090909091)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "bga_2x2_top_right_origin"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="143.4782608695652" y="86.95652173913038" width="513.0434782608695" height="426.0869565217391"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="173.91304347826082" y="221.73913043478257" width="217.3913043478261" height="200" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="547.8260869565217" y="221.73913043478257" width="217.3913043478261" height="200" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 656.5217391304348 130.4347826086956 L 143.4782608695652 130.4347826086956 L 143.4782608695652 513.0434782608695 L 656.5217391304348 513.0434782608695" fill="none" stroke="#f2eda1" stroke-width="8.695652173913045" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="26.08695652173913" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,469.5652173913043,86.95652173913038)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "smb"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="280" y="171.42857142857147" width="240" height="257.1428571428571"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="326.28571428571433" y="300.00000000000006" width="113.14285714285714" height="85.71428571428571" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="463.42857142857144" y="300.00000000000006" width="113.14285714285714" height="85.71428571428571" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 520 257.14285714285717 L 280 257.14285714285717 L 280 428.5714285714286 L 520 428.5714285714286" fill="none" stroke="#f2eda1" stroke-width="17.142857142857142" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="51.42857142857142" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,451.42857142857144,171.42857142857147)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod723"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="116.49484536082474" y="103.09278350515473" width="567.0103092783504" height="393.8144329896907"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="205.67010309278362" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="257.2164948453609" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="308.76288659793823" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="360.30927835051557" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="411.85567010309285" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="205.67010309278362" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="257.2164948453609" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="308.76288659793823" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="360.30927835051557" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="411.85567010309285" width="168.04123711340202" height="34.02061855670103" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 154.6391752577321 L 637.1134020618556 154.6391752577321" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 496.90721649484544 L 637.1134020618556 496.90721649484544" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 147.4226804123711 222.68041237113414 L 116.49484536082474 191.75257731958774 L 116.49484536082474 253.6082474226805 L 147.4226804123711 222.68041237113414 Z" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.92783505154639" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,477.3195876288659,103.09278350515473)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "msop10"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="86.20689655172413" y="166.37931034482753" width="627.5862068965519" height="267.2413793103449"/><path class="pcb-trace" stroke="rgb(200, 52, 52)" fill="none" d="M 245.6896551724138 325.8620689655172 L 335.3448275862069 325.8620689655172" stroke-width="32.327586206896555" stroke-linecap="round" stroke-linejoin="round" shape-rendering="crispEdges" data-layer="top"/><path class="pcb-trace" stroke="rgb(200, 52, 52)" fill="none" d="M 464.65517241379314 325.8620689655172 L 554.3103448275863 325.8620689655172" stroke-width="32.327586206896555" stroke-linecap="round" stroke-linejoin="round" shape-rendering="crispEdges" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="116.37931034482759" y="261.20689655172407" width="129.31034482758622" height="129.31034482758622" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="335.34482758620686" y="261.20689655172407" width="129.31034482758622" height="129.31034482758622" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="554.3103448275862" y="261.20689655172407" width="129.31034482758622" height="129.31034482758622" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 86.20689655172413 433.6206896551724 L 713.7931034482759 433.6206896551724 L 713.7931034482759 218.10344827586204 L 86.20689655172413 218.10344827586204 L 86.20689655172413 433.6206896551724 Z" fill="none" stroke="#f2eda1" stroke-width="12.931034482758621" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="outline"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="34.48275862068966" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,166.37931034482753)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "solderjumper3_bridged123"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="101.2658227848101" y="106.07594936708861" width="597.4683544303798" height="387.84810126582283"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="208.86075949367088" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="259.49367088607596" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="310.126582278481" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="360.75949367088606" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="411.3924050632911" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="208.86075949367088" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="259.49367088607596" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="310.126582278481" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="360.75949367088606" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="411.3924050632911" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 318.98734177215186 156.70886075949366 L 632.9113924050632 156.70886075949366" fill="none" stroke="#f2eda1" stroke-width="5.063291139240507" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 318.98734177215186 493.9240506329114 L 632.9113924050632 493.9240506329114" fill="none" stroke="#f2eda1" stroke-width="5.063291139240507" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 131.64556962025313 224.0506329113924 L 101.2658227848101 193.67088607594937 L 101.2658227848101 254.43037974683546 L 131.64556962025313 224.0506329113924 Z" fill="none" stroke="#f2eda1" stroke-width="5.063291139240507" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.379746835443036" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,475.9493670886076,106.07594936708861)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "vssop10"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="152.9411764705882" y="117.64705882352939" width="494.11764705882365" height="364.7058823529412"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 152.9411764705882 384.7058823529412 L 176.47058823529412 482.3529411764706 L 623.5294117647059 482.3529411764706 L 647.0588235294118 384.7058823529412 L 576.4705882352941 176.4705882352941 L 223.52941176470586 176.4705882352941 L 152.9411764705882 384.7058823529412 Z" fill="none" stroke="#f2eda1" stroke-width="11.764705882352942" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="58.82352941176471" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,117.64705882352939)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="250.58823529411762" cy="384.7058823529412" r="55.88235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="250.58823529411762" cy="384.7058823529412" r="42.35294117647059"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="384.7058823529412" r="55.88235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="384.7058823529412" r="42.35294117647059"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="549.4117647058824" cy="384.7058823529412" r="55.88235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="549.4117647058824" cy="384.7058823529412" r="42.35294117647059"/></g></svg>',
    title: "to92s"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="180.94059405940595" y="118.81188118811875" width="438.1188118811882" height="362.37623762376245"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="204.70297029702976" y="225.7425742574257" width="133.66336633663366" height="207.92079207920793" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.2277227722773" y="225.7425742574257" width="133.66336633663366" height="207.92079207920793" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 619.0594059405942 178.21782178217816 L 180.94059405940595 178.21782178217816 L 180.94059405940595 481.18811881188117 L 619.0594059405942 481.18811881188117" fill="none" stroke="#f2eda1" stroke-width="11.881188118811883" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="23.762376237623766" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,445.29702970297035,118.81188118811875)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "led_1206"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="195.56259904912838" y="95.08716323296355" width="408.87480190174324" height="409.82567353407285"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="148.0190174326466" y="114.10459587955627" width="95.08716323296355" height="57.05229793977813" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="148.0190174326466" y="234.86529318542" width="95.08716323296355" height="57.05229793977813" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="148.0190174326466" y="355.6259904912837" width="95.08716323296355" height="57.05229793977813" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="148.0190174326466" y="476.3866877971474" width="95.08716323296355" height="57.05229793977813" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.8938193343898" y="476.3866877971474" width="95.08716323296355" height="57.05229793977813" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.8938193343898" y="355.6259904912837" width="95.08716323296355" height="57.05229793977813" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.8938193343898" y="234.86529318542" width="95.08716323296355" height="57.05229793977813" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.8938193343898" y="114.10459587955627" width="95.08716323296355" height="57.05229793977813" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 232.01267828843106 95.08716323296355 L 567.9873217115689 95.08716323296355" fill="none" stroke="#f2eda1" stroke-width="9.508716323296355" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="34.944532488114106" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,161.64817749603804)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sop8"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="83.16008316008316" y="94.59459459459455" width="633.6798336798336" height="410.8108108108107"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 187.11018711018707 505.4054054054053 L 187.11018711018707 136.1746361746361 L 329.03672903672896 136.1746361746361 L 334.4384863969814 163.33110427871455 L 349.8213898866926 186.35324628794345 L 372.8435318959215 201.73614977765465 L 399.99999999999994 207.13790713790706 L 427.1564681040784 201.73614977765465 L 450.1786101133073 186.35324628794345 L 465.5615136030185 163.33110427871455 L 470.96327096327093 136.1746361746361 L 612.8898128898128 136.1746361746361 L 612.8898128898128 505.4054054054053 L 187.11018711018707 505.4054054054053 Z" fill="none" stroke="#f2eda1" stroke-width="8.316008316008315" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.26403326403326" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,94.59459459459455)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="24.948024948024944" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,-29.106029106029098,215.1767151767151)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin1}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="24.948024948024944" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,-29.106029106029098,426.40332640332633)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin2}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="24.948024948024944" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,829.1060291060289,426.40332640332633)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin3}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="24.948024948024944" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,829.1060291060289,215.1767151767151)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin4}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="20.790020790020804" y="152.80665280665275" width="124.74012474012471" height="124.74012474012471"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="83.16008316008316" cy="215.1767151767151" r="41.58004158004157"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="83.16008316008316" cy="426.40332640332633" r="62.37006237006236"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="83.16008316008316" cy="426.40332640332633" r="41.58004158004157"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="716.8399168399167" cy="426.40332640332633" r="62.37006237006236"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="716.8399168399167" cy="426.40332640332633" r="41.58004158004157"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="716.8399168399167" cy="215.1767151767151" r="62.37006237006236"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="716.8399168399167" cy="215.1767151767151" r="41.58004158004157"/></g></svg>',
    title: "dip4"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="216.4473684210527" width="668.4210526315787" height="167.1052631578947"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,65.78947368421058,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,232.8947368421053,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,400,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,567.1052631578947,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,734.2105263157894,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,216.4473684210527)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="334.2105263157895" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="383.5526315789474" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_textalignright_orthogonal_verticallyinverted"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="189.4736842105263" y="105.26315789473685" width="421.05263157894734" height="389.47368421052636"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="277.89473684210526" y="189.4736842105263" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="277.89473684210526" y="268.42105263157896" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="277.89473684210526" y="347.36842105263156" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="277.89473684210526" y="426.3157894736842" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="572.6315789473684" y="189.4736842105263" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="572.6315789473684" y="268.42105263157896" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="572.6315789473684" y="347.36842105263156" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="572.6315789473684" y="426.3157894736842" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="378.9473684210526" y="242.10526315789474" width="147.36842105263156" height="168.42105263157896" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 294.7368421052631 157.89473684210526 L 610.5263157894736 157.89473684210526" fill="none" stroke="#f2eda1" stroke-width="5.2631578947368425" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 294.7368421052631 494.7368421052632 L 610.5263157894736 494.7368421052632" fill="none" stroke="#f2eda1" stroke-width="5.2631578947368425" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 221.05263157894737 207.89473684210526 L 189.4736842105263 176.31578947368422 L 189.4736842105263 239.47368421052633 L 221.05263157894737 207.89473684210526 Z" fill="none" stroke="#f2eda1" stroke-width="5.2631578947368425" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.578947368421048" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,452.6315789473684,105.26315789473685)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "son8_ep_p0.75mm_h3.2mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="206.1538461538462" y="92.30769230769226" width="387.69230769230774" height="415.38461538461536"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="256.1538461538461" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="293.07692307692304" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="329.99999999999994" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="366.9230769230769" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="342.3076923076923" y="470.7692307692307" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="379.2307692307693" y="470.7692307692307" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="416.1538461538462" y="470.7692307692307" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="453.07692307692315" y="470.7692307692307" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.923076923077" y="366.9230769230769" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.923076923077" y="329.99999999999994" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.923076923077" y="293.07692307692304" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.923076923077" y="256.1538461538461" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="453.07692307692315" y="138.46153846153842" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="416.1538461538462" y="138.46153846153842" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="379.2307692307693" y="138.46153846153842" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="342.3076923076923" y="138.46153846153842" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 270.76923076923083 138.46153846153842 L 247.69230769230774 138.46153846153842" fill="none" stroke="#f2eda1" stroke-width="0" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 224.61538461538467 161.5384615384615 L 224.61538461538467 184.61538461538458" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 206.1538461538462 119.99999999999994 L 224.61538461538467 138.46153846153842 L 243.07692307692312 119.99999999999994 L 206.1538461538462 119.99999999999994 Z" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 270.76923076923083 507.6923076923076 L 224.61538461538467 507.6923076923076 L 224.61538461538467 461.5384615384615" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 547.6923076923077 507.6923076923076 L 593.8461538461539 507.6923076923076 L 593.8461538461539 461.5384615384615" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 547.6923076923077 138.46153846153842 L 593.8461538461539 138.46153846153842 L 593.8461538461539 184.61538461538458" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.69230769230769" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,409.2307692307693,92.30769230769226)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "quad16_w4_l4_p0.4_pw0.25_pl0.4"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="192.30769230769232" y="92.30769230769232" width="415.3846153846153" height="415.38461538461536"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 607.6923076923076 300 L 605.9154712084068 272.89071392352776 L 600.6153639215757 246.24527524793803 L 591.8826721369595 220.51959481648134 L 579.8668146321527 196.15384615384613 L 564.7733860604873 173.56493397511184 L 546.8606391695138 153.13936083048628 L 526.4350660248881 135.22661393951267 L 503.84615384615387 120.13318536784732 L 479.48040518351866 108.11732786304043 L 453.754724752062 99.38463607842425 L 427.1092860764723 94.08452879159319 L 400 92.30769230769232 L 372.8907139235278 94.08452879159319 L 346.24527524793797 99.38463607842425 L 320.51959481648134 108.11732786304043 L 296.1538461538462 120.13318536784732 L 273.5649339751119 135.22661393951267 L 253.13936083048628 153.13936083048623 L 235.22661393951273 173.56493397511179 L 220.13318536784735 196.15384615384613 L 208.11732786304046 220.51959481648134 L 199.3846360784243 246.2452752479379 L 194.08452879159324 272.89071392352776 L 192.30769230769232 299.99999999999994 L 192.30769230769232 507.6923076923077 L 607.6923076923076 507.6923076923077 L 607.6923076923076 300 Z" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="46.15384615384615" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,207.69230769230768)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="282.7692307692308" cy="417.2307692307692" r="43.84615384615385"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="282.7692307692308" cy="417.2307692307692" r="33.230769230769226"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="417.2307692307692" r="43.84615384615385"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="417.2307692307692" r="33.230769230769226"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="517.2307692307693" cy="417.2307692307692" r="43.84615384615385"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="517.2307692307693" cy="417.2307692307692" r="33.230769230769226"/></g></svg>',
    title: "to92_inline"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="96.05263157894734" y="90.2255639097744" width="607.8947368421054" height="419.54887218045116"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="114.09774436090228" y="171.4285714285714" width="110.5263157894737" height="302.2556390977444" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="648.6842105263158" y="171.4285714285714" width="110.5263157894737" height="302.2556390977444" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 703.9473684210527 135.33834586466162 L 96.05263157894734 135.33834586466162 L 96.05263157894734 509.77443609022555 L 703.9473684210527 509.77443609022555" fill="none" stroke="#f2eda1" stroke-width="9.022556390977444" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.045112781954888" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,436.6541353383459,90.2255639097744)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "diode2512"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="158.57315181802517" y="41.35791831811133" width="482.85369636394967" height="517.2841633637775"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="160.05514389109084" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="180.7341030501465" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="201.41306220920217" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="222.09202136825783" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="242.7709805273135" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="263.44993968636913" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="284.1288988454248" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="304.80785800448047" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="325.48681716353616" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="346.1657763225918" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="366.8447354816475" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="387.5236946407031" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="408.20265379975876" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="428.88161295881446" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="449.56057211787015" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="136.34327072204036" y="470.2395312769258" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="242.839910391177" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.5188695502327" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="284.19782870928833" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="304.87678786834397" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="325.55574702739966" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="346.2347061864553" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="366.913665345511" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="387.59262450456663" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="408.2715836636223" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="428.95054282267796" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="449.62950198173365" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="470.3084611407893" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="490.987420299845" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="511.66637945890056" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.3453386179563" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="553.024297777012" y="528.1406169222817" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="470.2395312769258" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="449.56057211787015" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="428.88161295881446" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="408.20265379975876" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="387.5236946407031" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="366.8447354816475" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="346.1657763225918" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="325.48681716353616" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="304.80785800448047" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="284.1288988454248" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="263.44993968636913" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="242.7709805273135" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="222.09202136825783" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="201.41306220920217" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="180.7341030501465" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="610.9253834223678" y="160.05514389109084" width="61.002929519214206" height="12.407375495433397" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="553.024297777012" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.3453386179563" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="511.66637945890056" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="490.987420299845" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="470.3084611407893" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="449.62950198173365" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="428.95054282267796" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="408.2715836636223" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="387.59262450456663" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="366.913665345511" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="346.2347061864553" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="325.55574702739966" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="304.87678786834397" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="284.19782870928833" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.5188695502327" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="242.839910391177" y="53.558504221954195" width="12.407375495433397" height="61.002929519214206" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 222.16095123212133 114.56143374116837 L 197.34620024125454 114.56143374116837 L 197.34620024125454 139.37618473203517" fill="none" stroke="#f2eda1" stroke-width="4.135791831811132" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 158.57315181802517 112.49353782526282 L 166.84473548164746 120.76512148888509 L 175.11631914526973 112.49353782526282 L 158.57315181802517 112.49353782526282 Z" fill="none" stroke="#f2eda1" stroke-width="4.135791831811132" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 222.16095123212133 528.1406169222817 L 197.34620024125454 528.1406169222817 L 197.34620024125454 503.3258659314148" fill="none" stroke="#f2eda1" stroke-width="4.135791831811132" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 586.110632431501 528.1406169222817 L 610.9253834223678 528.1406169222817 L 610.9253834223678 503.3258659314148" fill="none" stroke="#f2eda1" stroke-width="4.135791831811132" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 586.110632431501 114.56143374116837 L 610.9253834223678 114.56143374116837 L 610.9253834223678 139.37618473203517" fill="none" stroke="#f2eda1" stroke-width="4.135791831811132" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="12.407375495433397" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,404.13579183181116,41.35791831811133)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "tqfp64_w10_p0.5mm_pw0.3_pl1.475mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="180.02369923516108" y="84.0245610255306" width="439.95260152967785" height="431.9508779489389"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="272.1146181191425" y="227.53851125713675" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="272.1146181191425" y="307.36184423139076" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="272.1146181191425" y="387.1851772056448" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.3664763546267" y="387.1851772056448" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.3664763546267" y="227.53851125713675" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 383.0270386728429 162.94301411181735 L 542.6737046213508 162.94301411181735" fill="none" stroke="#f2eda1" stroke-width="4.2012280512765265" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 383.0270386728429 515.9754389744695 L 542.6737046213508 515.9754389744695" fill="none" stroke="#f2eda1" stroke-width="4.2012280512765265" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 238.84089195303244 259.6358935688894 L 180.02369923516108 247.03220941505984 L 180.02369923516108 272.239577722719 L 238.84089195303244 259.6358935688894 Z" fill="none" stroke="#f2eda1" stroke-width="4.2012280512765265" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_indicator"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.20736830765916" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,462.85037164709684,84.0245610255306)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot23_5"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="103.75" y="100" width="592.5" height="400"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="133.75" y="230" width="175" height="240" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="608.75" y="230" width="175" height="240" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 696.25 200 L 103.75 200 L 103.75 500 L 696.25 500" fill="none" stroke="#f2eda1" stroke-width="10" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,458.75,100)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "smbf"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="254.88372093023256" y="111.62790697674421" width="290.23255813953483" height="376.74418604651163"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="199.06976744186045" y="182.79069767441865" width="111.62790697674419" height="66.9767441860465" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="199.06976744186045" y="288.8372093023256" width="111.62790697674419" height="66.9767441860465" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="199.06976744186045" y="394.8837209302326" width="111.62790697674419" height="66.9767441860465" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="489.30232558139534" y="394.8837209302326" width="111.62790697674419" height="66.9767441860465" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="489.30232558139534" y="288.8372093023256" width="111.62790697674419" height="66.9767441860465" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="489.30232558139534" y="182.79069767441865" width="111.62790697674419" height="66.9767441860465" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 321.86046511627904 488.37209302325584 L 321.86046511627904 156.27906976744188 L 373.95348837209303 156.27906976744188 L 375.9361610136595 166.24663823834658 L 381.5823350016527 174.6967347657892 L 390.03243152909533 180.34290875378238 L 400 182.32558139534888 L 409.96756847090467 180.34290875378238 L 418.4176649983473 174.6967347657892 L 424.0638389863405 166.24663823834658 L 426.04651162790697 156.27906976744188 L 478.13953488372096 156.27906976744188 L 478.13953488372096 488.37209302325584 L 321.86046511627904 488.37209302325584 Z" fill="none" stroke="#f2eda1" stroke-width="11.162790697674419" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.674418604651162" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,111.62790697674421)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot23_6"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="96.05263157894734" y="90.2255639097744" width="607.8947368421054" height="419.54887218045116"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="114.09774436090228" y="171.4285714285714" width="110.5263157894737" height="302.2556390977444" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="648.6842105263158" y="171.4285714285714" width="110.5263157894737" height="302.2556390977444" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 703.9473684210527 135.33834586466162 L 96.05263157894734 135.33834586466162 L 96.05263157894734 509.77443609022555 L 703.9473684210527 509.77443609022555" fill="none" stroke="#f2eda1" stroke-width="9.022556390977444" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.045112781954888" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,436.6541353383459,90.2255639097744)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "cap_2512"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="241.1764705882353" y="141.1764705882353" width="317.64705882352945" height="317.64705882352945"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="269.4117647058823" y="268.2352941176471" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="502.3529411764706" y="268.2352941176471" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 558.8235294117648 211.76470588235296 L 241.1764705882353 211.76470588235296 L 241.1764705882353 458.82352941176475 L 558.8235294117648 458.82352941176475" fill="none" stroke="#f2eda1" stroke-width="14.11764705882353" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="28.23529411764706" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,442.3529411764706,141.1764705882353)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "led_0603"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="296.9341749323715" y="27.051397655545543" width="206.13165013525702" height="545.8972046889089"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 330.7484220018034 572.9486023444545 L 330.7484220018034 40.577096483318314 L 376.9161406672678 40.577096483318314 L 378.67329483111905 49.41090700500121 L 383.6772465298687 56.8998499534496 L 391.1661894783171 61.903801652199235 L 400 63.66095581605052 L 408.8338105216829 61.903801652199235 L 416.3227534701313 56.8998499534496 L 421.32670516888095 49.41090700500121 L 423.0838593327322 40.577096483318314 L 469.2515779981966 40.577096483318314 L 469.2515779981966 572.9486023444545 L 330.7484220018034 572.9486023444545 Z" fill="none" stroke="#f2eda1" stroke-width="2.705139765554554" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="10.820559062218216" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,27.051397655545543)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,66.27592425608657)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin1}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,134.98647430117222)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin2}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,203.69702434625788)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin3}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,272.40757439134353)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin4}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,341.1181244364292)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin5}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,409.82867448151484)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin6}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,478.5392245266005)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin7}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,547.2497745716862)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin8}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,547.2497745716862)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin9}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,478.53922452660055)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin10}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,409.8286744815149)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin11}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,341.11812443642924)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin12}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,272.4075743913436)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin13}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,203.69702434625793)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin14}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,134.98647430117225)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin15}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,66.27592425608657)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin16}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="276.64562669071233" y="45.98737601442742" width="40.5770964833183" height="40.5770964833183"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="66.27592425608657" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="134.98647430117222" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="134.98647430117222" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="203.69702434625788" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="203.69702434625788" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="272.40757439134353" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="272.40757439134353" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="341.1181244364292" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="341.1181244364292" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="409.82867448151484" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="409.82867448151484" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="478.5392245266005" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="478.5392245266005" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="547.2497745716862" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="547.2497745716862" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="547.2497745716862" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="547.2497745716862" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="478.53922452660055" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="478.53922452660055" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="409.8286744815149" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="409.8286744815149" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="341.11812443642924" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="341.11812443642924" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="272.4075743913436" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="272.4075743913436" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="203.69702434625793" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="203.69702434625793" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="134.98647430117225" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="134.98647430117225" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="66.27592425608657" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="66.27592425608657" r="13.525698827772768"/></g></svg>',
    title: "dip16"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="212.29050279329613" y="134.07821229050282" width="375.41899441340775" height="331.8435754189944"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="252.51396648044695" y="315.08379888268155" width="80.44692737430167" height="80.44692737430167" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="547.4860335195531" y="315.08379888268155" width="80.44692737430167" height="80.44692737430167" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 587.7094972067039 244.6927374301676 L 212.29050279329613 244.6927374301676 L 212.29050279329613 465.9217877094972 L 587.7094972067039 465.9217877094972" fill="none" stroke="#f2eda1" stroke-width="13.40782122905028" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="40.22346368715083" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,440.22346368715085,134.07821229050282)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod323f"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="122.79635258358667" y="72.94832826747728" width="554.4072948328267" height="454.1033434650456"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="195.74468085106383" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="268.69300911854106" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="341.6413373860182" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="414.58966565349544" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.5379939209726" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="560.4863221884499" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="79.02735562310036" y="275.7446808510639" width="87.53799392097262" height="131.30699088145894" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="633.434650455927" y="275.7446808510639" width="87.53799392097262" height="131.30699088145894" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="" fill="none" stroke="#f2eda1" stroke-width="7.29483282674772" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="36.4741641337386" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,72.94832826747728)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "jst.test.tsjst_sh6"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="121.98275862068965" y="103.44827586206898" width="556.0344827586207" height="393.1034482758621"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="173.70689655172416" y="222.4137931034483" width="129.31034482758622" height="206.89655172413794" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="561.6379310344827" y="222.4137931034483" width="129.31034482758622" height="206.89655172413794" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 678.0172413793103 155.1724137931035 L 121.98275862068965 155.1724137931035 L 121.98275862068965 496.55172413793105 L 678.0172413793103 496.55172413793105" fill="none" stroke="#f2eda1" stroke-width="10.344827586206897" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.03448275862069" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,432.32758620689657,103.44827586206898)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod80"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="241.1764705882353" y="141.17647058823528" width="317.64705882352945" height="317.6470588235294"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="269.4117647058823" y="197.6470588235294" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="502.3529411764706" y="197.6470588235294" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 558.8235294117648 141.17647058823528 L 241.1764705882353 141.17647058823528 L 241.1764705882353 388.2352941176471 L 558.8235294117648 388.2352941176471" fill="none" stroke="#f2eda1" stroke-width="14.11764705882353" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="28.23529411764706" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,442.3529411764706,458.8235294117647)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "0603_textbottom"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="316.66666666666663" y="166.66666666666677" width="166.66666666666663" height="266.66666666666663"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="291.66666666666663" y="331.66666666666674" width="49.99999999999999" height="70" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="458.33333333333326" y="406.66666666666674" width="49.99999999999999" height="53.33333333333333" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="458.33333333333326" y="273.33333333333337" width="49.99999999999999" height="53.33333333333333" data-layer="top"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.333333333333336" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,383.3333333333333,166.66666666666677)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot723"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="72.07207207207205" y="173.87387387387386" width="655.8558558558559" height="252.25225225225225"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 198.1981981981982 426.1261261261261 L 181.735435215489 425.04709963273285 L 165.55435467175414 421.8284825950176 L 149.93181934134003 416.525346442865 L 135.13513513513516 409.2284293061454 L 121.41747742232354 400.0625834601558 L 109.01355912962464 389.1846390685736 L 98.13561473804242 376.78072077587467 L 88.9697688920528 363.06306306306305 L 81.67285175533323 348.2663788568582 L 76.36971560318057 332.6438435264441 L 73.15109856546536 316.4627629827092 L 72.07207207207205 300 L 73.15109856546536 283.5372370172908 L 76.36971560318057 267.3561564735559 L 81.67285175533323 251.73362114314182 L 88.9697688920528 236.93693693693695 L 98.13561473804242 223.2192792241253 L 109.01355912962464 210.81536093142645 L 121.41747742232349 199.9374165398442 L 135.13513513513516 190.77157069385458 L 149.93181934134003 183.474653557135 L 165.55435467175414 178.17151740498238 L 181.73543521548902 174.95290036726715 L 198.1981981981982 173.87387387387386 L 198.1981981981982 173.87387387387386 L 181.73543521548902 174.95290036726715 L 165.55435467175414 178.17151740498238 L 149.93181934134003 183.474653557135 L 135.13513513513516 190.77157069385458 L 121.41747742232349 199.9374165398442 L 109.01355912962464 210.81536093142645 L 98.13561473804242 223.2192792241253 L 88.9697688920528 236.93693693693695 L 81.67285175533323 251.73362114314182 L 76.36971560318057 267.3561564735559 L 73.15109856546536 283.5372370172908 L 72.07207207207205 300 L 73.15109856546536 316.4627629827092 L 76.36971560318057 332.6438435264441 L 81.67285175533323 348.2663788568582 L 88.9697688920528 363.06306306306305 L 98.13561473804242 376.78072077587467 L 109.01355912962464 389.1846390685736 L 121.41747742232354 400.0625834601558 L 135.13513513513516 409.2284293061454 L 149.93181934134003 416.525346442865 L 165.55435467175414 421.8284825950176 L 181.735435215489 425.04709963273285 L 198.1981981981982 426.1261261261261 L 601.8018018018017 426.1261261261261 L 601.8018018018017 426.1261261261261 L 618.264564784511 425.04709963273285 L 634.4456453282459 421.8284825950176 L 650.0681806586599 416.525346442865 L 664.8648648648648 409.2284293061454 L 678.5825225776764 400.0625834601558 L 690.9864408703754 389.1846390685736 L 701.8643852619575 376.78072077587467 L 711.0302311079472 363.06306306306305 L 718.3271482446668 348.2663788568582 L 723.6302843968194 332.6438435264441 L 726.8489014345346 316.4627629827092 L 727.927927927928 300 L 726.8489014345346 283.5372370172908 L 723.6302843968194 267.3561564735559 L 718.3271482446668 251.73362114314182 L 711.0302311079472 236.93693693693695 L 701.8643852619575 223.2192792241253 L 690.9864408703754 210.81536093142645 L 678.5825225776765 199.9374165398442 L 664.8648648648648 190.77157069385458 L 650.0681806586599 183.474653557135 L 634.4456453282459 178.17151740498238 L 618.264564784511 174.95290036726715 L 601.8018018018017 173.87387387387386 L 601.8018018018017 173.87387387387386 L 198.1981981981982 173.87387387387386" fill="none" stroke="#f2eda1" stroke-width="7.207207207207208" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="36.03603603603604" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,212.07207207207207)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="224.14414414414415" cy="300" r="43.24324324324324"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="224.14414414414415" cy="300" r="21.62162162162162"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="575.8558558558559" cy="300" r="43.24324324324324"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="575.8558558558559" cy="300" r="21.62162162162162"/></g></svg>',
    title: "hc49"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="286.5482233502537" y="152.28426395939087" width="226.9035532994924" height="295.4314720812183"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="317.0050761421319" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="472.33502538071053" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 513.4517766497461 228.42639593908632 L 286.5482233502537 228.42639593908632 L 286.5482233502537 447.71573604060916 L 513.4517766497461 447.71573604060916" fill="none" stroke="#f2eda1" stroke-width="15.228426395939088" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.456852791878177" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,435.7868020304568,152.28426395939087)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "cap footprint"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="187.64044943820224" y="67.41573033707874" width="424.71910112359535" height="465.1685393258426"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="120.2247191011236" y="94.3820224719102" width="134.83146067415728" height="101.12359550561797" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="120.2247191011236" y="249.43820224719107" width="134.83146067415728" height="101.12359550561797" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="120.2247191011236" y="404.494382022472" width="134.83146067415728" height="101.12359550561797" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="544.9438202247189" y="171.91011235955065" width="134.83146067415728" height="256.1797752808988" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 275.2808988764044 67.41573033707874 L 524.7191011235955 67.41573033707874 L 524.7191011235955 150.00000000000009" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 275.2808988764044 532.5842696629213 L 524.7191011235955 532.5842696629213 L 524.7191011235955 450" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="20.224719101123593" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,300.00000000000006)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot223"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="303.5443037974684" y="151.8987341772152" width="192.91139240506322" height="296.2025316455696"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="252.6582278481013" y="231.64556962025318" width="101.77215189873418" height="45.56962025316455" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="252.6582278481013" y="307.59493670886076" width="101.77215189873418" height="45.56962025316455" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="252.6582278481013" y="383.54430379746833" width="101.77215189873418" height="45.56962025316455" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="445.56962025316454" y="383.54430379746833" width="101.77215189873418" height="45.56962025316455" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="445.56962025316454" y="307.59493670886076" width="101.77215189873418" height="45.56962025316455" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="445.56962025316454" y="231.64556962025318" width="101.77215189873418" height="45.56962025316455" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 369.62025316455697 448.1012658227848 L 369.62025316455697 212.65822784810126 L 389.873417721519 212.65822784810126 L 390.6442578986199 216.53350311255787 L 392.83942500064256 219.8188028474587 L 396.1247247355434 222.0139699494814 L 400 222.78481012658227 L 403.8752752644566 222.0139699494814 L 407.16057499935744 219.8188028474587 L 409.3557421013801 216.53350311255787 L 410.126582278481 212.65822784810126 L 430.37974683544303 212.65822784810126 L 430.37974683544303 448.1012658227848 L 369.62025316455697 448.1012658227848 Z" fill="none" stroke="#f2eda1" stroke-width="15.189873417721518" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.620253164556964" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,151.8987341772152)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot563"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="54.42176870748301" y="230.88435374149657" width="691.156462585034" height="138.2312925170068"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="16.3265306122449" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,54.42176870748301,307.891156462585)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="16.3265306122449" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,192.6530612244898,307.891156462585)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="16.3265306122449" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,330.8843537414966,307.891156462585)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="16.3265306122449" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,469.11564625850343,307.891156462585)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="16.3265306122449" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,607.3469387755102,307.891156462585)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="16.3265306122449" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,745.578231292517,307.891156462585)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN6}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.2108843537415" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,230.88435374149657)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="54.42176870748301" cy="369.1156462585034" r="40.816326530612244"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="54.42176870748301" cy="369.1156462585034" r="27.2108843537415"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="192.6530612244898" cy="369.1156462585034" r="40.816326530612244"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="192.6530612244898" cy="369.1156462585034" r="27.2108843537415"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="330.8843537414966" cy="369.1156462585034" r="40.816326530612244"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="330.8843537414966" cy="369.1156462585034" r="27.2108843537415"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="469.11564625850343" cy="369.1156462585034" r="40.816326530612244"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="469.11564625850343" cy="369.1156462585034" r="27.2108843537415"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="607.3469387755102" cy="369.1156462585034" r="40.816326530612244"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="607.3469387755102" cy="369.1156462585034" r="27.2108843537415"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="745.578231292517" cy="369.1156462585034" r="40.816326530612244"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="745.578231292517" cy="369.1156462585034" r="27.2108843537415"/></g></svg>',
    title: "pinrow6_nosquareplating_1"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="160" y="80" width="480" height="440"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 160 120 L 640 120 L 640 520 L 160 520 L 160 120 Z" fill="none" stroke="#f2eda1" stroke-width="8" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="40" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,80)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="264" y="152" width="96" height="96"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="312" cy="200" r="28"/></g><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="440" y="152" width="96" height="96"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="488" cy="200" r="28"/></g></svg>',
    title: "jst.test.tsjst_ph"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="216.4473684210527" width="668.4210526315787" height="167.1052631578947"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,216.4473684210527)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="334.2105263157895" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="383.5526315789474" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_nopinlabels"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="307.22543352601156" y="34.682080924855484" width="185.5491329479769" height="530.6358381502891"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 307.22543352601156 130.0578034682081 L 307.22543352601156 69.364161849711 L 492.77456647398844 69.364161849711 L 492.77456647398844 264.45086705202317" fill="none" stroke="#f2eda1" stroke-width="3.468208092485549" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 492.77456647398844 370.23121387283237 L 492.77456647398844 565.3179190751446 L 307.22543352601156 565.3179190751446 L 307.22543352601156 504.6242774566474" fill="none" stroke="#f2eda1" stroke-width="3.468208092485549" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="17.341040462427745" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,34.682080924855484)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="307.22543352601156" cy="185.54913294797691" r="40.7514450867052"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="307.22543352601156" cy="185.54913294797691" r="21.67630057803468"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="480.63583815028903" cy="317.34104046242777" r="40.7514450867052"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="480.63583815028903" cy="317.34104046242777" r="21.67630057803468"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="307.22543352601156" cy="449.13294797687865" r="40.7514450867052"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="307.22543352601156" cy="449.13294797687865" r="21.67630057803468"/></g></svg>',
    title: "potentiometer_ca14_h5"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="152.9411764705882" y="117.64705882352939" width="494.11764705882365" height="364.7058823529412"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 152.9411764705882 384.7058823529412 L 176.47058823529412 482.3529411764706 L 623.5294117647059 482.3529411764706 L 647.0588235294118 384.7058823529412 L 576.4705882352941 176.4705882352941 L 223.52941176470586 176.4705882352941 L 152.9411764705882 384.7058823529412 Z" fill="none" stroke="#f2eda1" stroke-width="11.764705882352942" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="58.82352941176471" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,117.64705882352939)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="250.58823529411762" cy="384.7058823529412" r="55.88235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="250.58823529411762" cy="384.7058823529412" r="42.35294117647059"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="549.4117647058824" cy="384.7058823529412" r="55.88235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="549.4117647058824" cy="384.7058823529412" r="42.35294117647059"/></g></svg>',
    title: "to92s_2"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="181.33436174315466" y="20.82529888160434" width="437.3312765136907" height="558.3494022367913"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="536.0663324334747" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="483.1700732741998" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="430.27381411492485" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="377.3775549556498" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="324.48129579637487" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="271.58503663709996" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="218.6887774778249" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="165.79251831854992" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="112.896259159275" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="60.00000000000004" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="60.00000000000004" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="112.896259159275" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="165.79251831854998" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="218.68877747782494" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="271.58503663709996" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="324.48129579637487" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="377.3775549556499" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="430.27381411492485" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="483.1700732741998" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="536.0663324334747" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="462.68414963362903" y="50.212109525646014" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="409.78789047435407" y="50.212109525646014" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="356.89163131507905" y="50.212109525646014" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="303.9953721558041" y="50.212109525646014" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="303.9953721558041" y="529.1939838025453" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="356.89163131507905" y="529.1939838025453" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="409.78789047435407" y="529.1939838025453" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="462.68414963362903" y="529.1939838025453" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 181.33436174315466 50.21210952564604 L 618.6656382568453 50.21210952564604 L 618.6656382568453 579.1747011183957 L 181.33436174315466 579.1747011183957 L 181.33436174315466 50.21210952564604 Z" fill="none" stroke="#f2eda1" stroke-width="2.082529888160432" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,552.7265715387582)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin15</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,499.83031237948325)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin16</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,446.9340532202083)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin17</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,394.03779406093327)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin18</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,341.1415349016583)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin19</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,288.2452757423834)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin20</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,235.34901658310838)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin21</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,182.4527574238334)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin22</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,129.55649826455846)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin23</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,530.158118010027,76.6602391052835)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin24</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,76.6602391052835)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin1</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,129.55649826455846)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin2</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,182.45275742383345)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin3</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,235.3490165831084)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin4</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,288.2452757423834)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin5</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,341.1415349016583)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin6</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,394.0377940609333)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin7</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,446.9340532202083)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin8</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,499.83031237948325)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin9</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,269.841881989973,552.7265715387582)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin10</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,479.34438873891247,138.71962977246437)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin25</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,426.4481295796375,138.71962977246437)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin26</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,373.5518704203625,138.71962977246437)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin27</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,320.65561126108753,138.71962977246437)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin28</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,320.65561126108753,490.66718087157733)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin11</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,373.5518704203625,490.66718087157733)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin12</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,426.4481295796375,490.66718087157733)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin13</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.577709217123022" text-anchor="middle" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,479.34438873891247,490.66718087157733)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin14</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="21.158503663709986" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,20.82529888160434)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "stampboard_left10_right10_bottom4_top4_w21mm_p2.54mm_silkscreenlabels"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="311.62162162162167" y="162.16216216216213" width="176.75675675675677" height="275.6756756756757"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.05405405405406" y="308.10810810810807" width="74.5945945945946" height="64.86486486486487" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="451.08108108108115" y="308.10810810810807" width="74.5945945945946" height="64.86486486486487" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 488.37837837837844 243.24324324324323 L 311.62162162162167 243.24324324324323 L 311.62162162162167 437.8378378378378 L 488.37837837837844 437.8378378378378" fill="none" stroke="#f2eda1" stroke-width="16.216216216216218" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.432432432432435" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,434.8648648648649,162.16216216216213)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "cap_0201"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="101.56657963446474" y="78.32898172323766" width="596.8668407310704" height="443.34203655352474"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 177.93733681462137 521.6710182767624 L 177.93733681462137 117.49347258485648 L 325.97911227154043 117.49347258485648 L 331.6136168493603 145.82003996749432 L 347.6593283377581 169.8341442470983 L 371.6734326173621 185.87985573549608 L 399.99999999999994 191.51436031331596 L 428.3265673826378 185.87985573549608 L 452.3406716622418 169.8341442470983 L 468.3863831506396 145.82003996749432 L 474.02088772845946 117.49347258485648 L 622.0626631853785 117.49347258485648 L 622.0626631853785 521.6710182767624 L 177.93733681462137 521.6710182767624 Z" fill="none" stroke="#f2eda1" stroke-width="7.832898172323759" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.331592689295036" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,78.32898172323766)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="23.498694516971277" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,17.362924281984363,170.36553524804185)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin1}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="23.498694516971277" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,17.362924281984363,269.84334203655357)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin2}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="23.498694516971277" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,17.362924281984363,369.32114882506534)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin3}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="23.498694516971277" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,17.362924281984363,468.79895561357705)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin4}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="23.498694516971277" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,782.6370757180155,468.79895561357705)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin5}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="23.498694516971277" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,782.6370757180155,369.32114882506534)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin6}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="23.498694516971277" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,782.6370757180155,269.84334203655357)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin7}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="23.498694516971277" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,782.6370757180155,170.36553524804185)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin8}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="64.36031331592689" y="133.15926892950398" width="74.41253263707571" height="74.41253263707571"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="101.56657963446474" cy="170.36553524804185" r="21.54046997389034"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="101.56657963446474" cy="269.84334203655357" r="37.20626631853786"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="101.56657963446474" cy="269.84334203655357" r="21.54046997389034"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="101.56657963446474" cy="369.32114882506534" r="37.20626631853786"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="101.56657963446474" cy="369.32114882506534" r="21.54046997389034"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="101.56657963446474" cy="468.79895561357705" r="37.20626631853786"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="101.56657963446474" cy="468.79895561357705" r="21.54046997389034"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="698.4334203655351" cy="468.79895561357705" r="37.20626631853786"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="698.4334203655351" cy="468.79895561357705" r="21.54046997389034"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="698.4334203655351" cy="369.32114882506534" r="37.20626631853786"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="698.4334203655351" cy="369.32114882506534" r="21.54046997389034"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="698.4334203655351" cy="269.84334203655357" r="37.20626631853786"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="698.4334203655351" cy="269.84334203655357" r="21.54046997389034"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="698.4334203655351" cy="170.36553524804185" r="37.20626631853786"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="698.4334203655351" cy="170.36553524804185" r="21.54046997389034"/></g></svg>',
    title: "dip8_p1.27mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="263.6363636363636" y="163.6363636363637" width="272.72727272727263" height="272.72727272727275"/><circle class="pcb-pad" fill="rgb(200, 52, 52)" cx="372.7272727272727" cy="436.36363636363643" r="81.81818181818181" data-layer="top"/><circle class="pcb-pad" fill="rgb(200, 52, 52)" cx="536.3636363636363" cy="436.36363636363643" r="81.81818181818181" data-layer="top"/><circle class="pcb-pad" fill="rgb(200, 52, 52)" cx="372.7272727272727" cy="272.7272727272728" r="81.81818181818181" data-layer="top"/><circle class="pcb-pad" fill="rgb(200, 52, 52)" cx="536.3636363636363" cy="272.7272727272728" r="81.81818181818181" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.9090909090909 190.909090909091 L 290.9090909090909 163.6363636363637 L 263.6363636363636 190.909090909091 L 290.9090909090909 190.909090909091 Z" fill="none" stroke="#f2eda1" stroke-width="8.181818181818182" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_marker"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,454.5454545454545,190.909090909091)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "bga_circular_pads"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="53.333333333333314" y="97.33333333333334" width="693.3333333333335" height="405.33333333333337"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 53.333333333333314 502.6666666666667 L 746.6666666666667 502.6666666666667 L 746.6666666666667 129.33333333333331 L 53.333333333333314 129.33333333333331 L 53.333333333333314 502.6666666666667 Z" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 53.333333333333314 253.77777777777777 L 746.6666666666667 253.77777777777777" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 284.44444444444446 253.77777777777777 L 284.44444444444446 129.33333333333331" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 515.5555555555555 253.77777777777777 L 515.5555555555555 129.33333333333331" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="26.666666666666668" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,97.33333333333334)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="200" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="200" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="333.3333333333333" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="333.3333333333333" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="466.6666666666667" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="466.6666666666667" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="600" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="600" cy="369.3333333333333" r="26.666666666666668"/></g></svg>',
    title: "to220_4"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="216.4473684210527" width="668.4210526315787" height="167.1052631578947"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,65.78947368421058,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,232.8947368421053,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,567.1052631578947,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,734.2105263157894,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,216.4473684210527)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="334.2105263157895" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="383.5526315789474" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_1"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="250" y="75" width="300" height="450"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="205" y="232.5" width="90" height="67.5" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="205" y="375" width="90" height="67.5" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="505" y="303.75" width="90" height="67.5" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 280 150 L 542.5 150 L 542.5 243.75" fill="none" stroke="#f2eda1" stroke-width="7.5" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 280 525 L 542.5 525 L 542.5 431.25" fill="none" stroke="#f2eda1" stroke-width="7.5" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="22.5" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,75)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot23w_pl1.2_pw0.9_p2_w5.2_h5"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="320" y="40" width="160" height="520"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 370 560 L 370 60 L 390 60 L 390.76120467488715 63.82683432365093 L 392.9289321881345 67.07106781186548 L 396.17316567634913 69.23879532511285 L 400 70 L 403.82683432365087 69.23879532511285 L 407.0710678118655 67.07106781186548 L 409.23879532511285 63.82683432365093 L 410 60 L 430 60 L 430 560 L 370 560 Z" fill="none" stroke="#f2eda1" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="16" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,40)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,266,98)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin1}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,266,204)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin2}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,266,310)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin3}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,266,416)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin4}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,266,522)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin5}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,534,522)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin6}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,534,416)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin7}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,534,310)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin8}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,534,204.00000000000003)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin9}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,534,98)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin10}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="290" y="68" width="60" height="60"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="320" cy="98" r="20"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="320" cy="204" r="30"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="320" cy="204" r="20"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="320" cy="310" r="30"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="320" cy="310" r="20"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="320" cy="416" r="30"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="320" cy="416" r="20"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="320" cy="522" r="30"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="320" cy="522" r="20"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="480" cy="522" r="30"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="480" cy="522" r="20"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="480" cy="416" r="30"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="480" cy="416" r="20"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="480" cy="310" r="30"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="480" cy="310" r="20"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="480" cy="204.00000000000003" r="30"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="480" cy="204.00000000000003" r="20"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="480" cy="98" r="30"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="480" cy="98" r="20"/></g></svg>',
    title: "dip10_w4.00mm_p2.65mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="400" y="176.47058823529412" width="0" height="247.05882352941174"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="35.294117647058826" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,176.47058823529412)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="423.52941176470586" r="158.8235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="423.52941176470586" r="105.88235294117646"/></g></svg>',
    title: "platedhole_d1.2"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="186.79775280898878" y="67.41573033707874" width="426.40449438202234" height="465.1685393258426"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="112.64044943820227" y="104.49438202247198" width="148.31460674157302" height="40.44943820224719" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="112.64044943820227" y="192.13483146067423" width="148.31460674157302" height="40.44943820224719" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="112.64044943820227" y="279.7752808988765" width="148.31460674157302" height="40.44943820224719" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="112.64044943820227" y="367.4157303370787" width="148.31460674157302" height="40.44943820224719" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="112.64044943820227" y="455.05617977528095" width="148.31460674157302" height="40.44943820224719" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="540.7303370786516" y="185.39325842696638" width="144.94382022471908" height="229.21348314606738" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 274.43820224719093 67.41573033707874 L 523.876404494382 67.41573033707874 L 523.876404494382 150.00000000000009" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 274.43820224719093 532.5842696629213 L 523.876404494382 532.5842696629213 L 523.876404494382 450" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="20.224719101123593" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.15730337078645,300.00000000000006)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot223_6"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="148.04270462633446" y="85.40925266903912" width="503.9145907473309" height="429.18149466192165"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="177.93594306049818" y="256.2277580071174" width="128.11387900355874" height="230.6049822064057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="587.900355871886" y="256.2277580071174" width="128.11387900355874" height="230.6049822064057" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 651.9572953736654 228.4697508896797 L 148.04270462633446 228.4697508896797 L 148.04270462633446 514.5907473309608 L 651.9572953736654 514.5907473309608" fill="none" stroke="#f2eda1" stroke-width="8.540925266903916" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.622775800711743" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,446.9750889679715,85.40925266903912)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "melf"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="112.99435028248587" y="228.24858757062142" width="574.0112994350284" height="143.50282485875707"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 265.5367231638418 371.7514124293785 L 534.4632768361582 371.7514124293785" fill="none" stroke="#f2eda1" stroke-width="11.299435028248588" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="56.497175141242934" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,228.24858757062142)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="112.99435028248587" cy="371.7514124293785" r="56.497175141242934"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="112.99435028248587" cy="371.7514124293785" r="39.54802259887005"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="687.0056497175142" cy="371.7514124293785" r="56.497175141242934"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="687.0056497175142" cy="371.7514124293785" r="39.54802259887005"/></g></svg>',
    title: "axial_p0.2in"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="207.14285714285717" y="142.85714285714283" width="385.7142857142857" height="314.2857142857143"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="250.00000000000003" y="296.4285714285714" width="85.71428571428571" height="64.28571428571429" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="550" y="296.4285714285714" width="85.71428571428571" height="64.28571428571429" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 592.8571428571429 199.99999999999997 L 207.14285714285717 199.99999999999997 L 207.14285714285717 457.1428571428571 L 592.8571428571429 457.1428571428571" fill="none" stroke="#f2eda1" stroke-width="14.285714285714286" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="42.857142857142854" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,442.8571428571429,142.85714285714283)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod323"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="224.4462809917355" y="85.95041322314046" width="351.10743801652893" height="428.0991735537191"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="291.91735537190084" y="238.51239669421483" width="68.76033057851241" height="47.27272727272728" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="291.91735537190084" y="320.1652892561983" width="68.76033057851241" height="47.27272727272728" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="291.91735537190084" y="401.8181818181818" width="68.76033057851241" height="47.27272727272728" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.1735537190083" y="401.8181818181818" width="68.76033057851241" height="47.27272727272728" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.1735537190083" y="320.1652892561983" width="68.76033057851241" height="47.27272727272728" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.1735537190083" y="238.51239669421483" width="68.76033057851241" height="47.27272727272728" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 373.5702479338843 173.5537190082644 L 528.2809917355372 173.5537190082644" fill="none" stroke="#f2eda1" stroke-width="4.297520661157026" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 373.5702479338843 514.0495867768595 L 528.2809917355372 514.0495867768595" fill="none" stroke="#f2eda1" stroke-width="4.297520661157026" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 267.42148760330576 262.14876033057845 L 224.4462809917355 249.25619834710741 L 224.4462809917355 275.0413223140496 L 267.42148760330576 262.14876033057845 Z" fill="none" stroke="#f2eda1" stroke-width="4.297520661157026" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_indicator"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.785123966942148" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,450.92561983471074,85.95041322314046)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot457"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="133.433734939759" y="90.3614457831325" width="533.132530120482" height="419.27710843373495"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.46385542168673" y="218.67469879518072" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.46385542168673" y="263.8554216867469" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.46385542168673" y="309.0361445783132" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.46385542168673" y="354.2168674698795" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.46385542168673" y="399.39759036144574" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="601.0542168674699" y="218.67469879518072" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="601.0542168674699" y="263.8554216867469" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="601.0542168674699" y="309.0361445783132" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="601.0542168674699" y="354.2168674698795" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="601.0542168674699" y="399.39759036144574" width="131.02409638554218" height="27.108433734939762" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 282.5301204819277 135.5421686746988 L 653.0120481927711 135.5421686746988" fill="none" stroke="#f2eda1" stroke-width="4.518072289156627" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 282.5301204819277 509.6385542168674 L 653.0120481927711 509.6385542168674" fill="none" stroke="#f2eda1" stroke-width="4.518072289156627" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 160.54216867469876 232.2289156626506 L 133.433734939759 205.1204819277108 L 133.433734939759 259.33734939759034 L 160.54216867469876 232.2289156626506 Z" fill="none" stroke="#f2eda1" stroke-width="4.518072289156627" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.108433734939762" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,467.7710843373494,90.3614457831325)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "vssop10_w4.1mm_h4.14mm_p0.5mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="232.3529411764706" y="88.23529411764707" width="335.2941176470588" height="423.52941176470586"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="175.00000000000003" y="127.94117647058825" width="114.70588235294117" height="79.41176470588235" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="175.00000000000006" y="260.29411764705884" width="132.35294117647058" height="79.41176470588235" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="175.00000000000003" y="392.64705882352945" width="114.70588235294117" height="79.41176470588235" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 320.5882352941177 88.23529411764707 L 567.6470588235294 88.23529411764707 L 567.6470588235294 150" fill="none" stroke="#f2eda1" stroke-width="8.823529411764707" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 320.5882352941177 511.7647058823529 L 567.6470588235294 511.7647058823529 L 567.6470588235294 450" fill="none" stroke="#f2eda1" stroke-width="8.823529411764707" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="26.470588235294116" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,444.11764705882354,300)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot89_3"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="167.10526315789474" y="157.89473684210526" width="465.78947368421046" height="284.2105263157895"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="198.68421052631584" y="300" width="78.94736842105263" height="78.94736842105263" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="593.4210526315788" y="300" width="78.94736842105263" height="78.94736842105263" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 632.8947368421052 236.84210526315786 L 167.10526315789474 236.84210526315786 L 167.10526315789474 442.10526315789474 L 632.8947368421052 442.10526315789474" fill="none" stroke="#f2eda1" stroke-width="15.789473684210527" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.578947368421055" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,435.5263157894737,157.89473684210526)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "led_rect"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="286.5482233502537" y="152.28426395939087" width="226.9035532994924" height="295.4314720812183"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="317.0050761421319" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="472.33502538071053" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 513.4517766497461 228.42639593908632 L 286.5482233502537 228.42639593908632 L 286.5482233502537 447.71573604060916 L 513.4517766497461 447.71573604060916" fill="none" stroke="#f2eda1" stroke-width="15.228426395939088" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.456852791878177" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,435.7868020304568,152.28426395939087)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "diode0402"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="325.00000000000006" y="166.66666666666663" width="150" height="266.6666666666667"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="358.33333333333337" y="316.66666666666663" width="66.66666666666667" height="49.99999999999999" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="441.66666666666674" y="316.66666666666663" width="66.66666666666667" height="49.99999999999999" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 475.00000000000006 249.99999999999994 L 325.00000000000006 249.99999999999994 L 325.00000000000006 433.3333333333333 L 475.00000000000006 433.3333333333333" fill="none" stroke="#f2eda1" stroke-width="16.666666666666668" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.333333333333336" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,433.33333333333337,166.66666666666663)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "cap_01005"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="196.40718562874252" y="47.90419161676641" width="407.1856287425149" height="504.19161676646706"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="172.4550898203593" y="82.27544910179635" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="172.4550898203593" y="143.11377245508976" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="172.4550898203593" y="203.95209580838318" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="172.4550898203593" y="264.7904191616766" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="172.4550898203593" y="325.62874251497" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="172.4550898203593" y="386.4670658682634" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="172.4550898203593" y="447.3053892215568" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="172.4550898203593" y="508.1437125748502" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="579.6407185628742" y="508.1437125748502" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="579.6407185628742" y="447.3053892215568" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="579.6407185628742" y="386.46706586826343" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="579.6407185628742" y="325.62874251497" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="579.6407185628742" y="264.7904191616766" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="579.6407185628742" y="203.95209580838323" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="579.6407185628742" y="143.1137724550898" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="579.6407185628742" y="82.27544910179635" width="47.90419161676647" height="28.74251497005988" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 225.14970059880238 552.0958083832335 L 225.14970059880238 67.06586826347299 L 341.7165668662675 67.06586826347299 L 346.15312904325435 89.36997250511098 L 358.78738920030503 108.27847906316799 L 377.69589575836204 120.91273922021864 L 400 125.34930139720555 L 422.30410424163796 120.91273922021864 L 441.21261079969497 108.27847906316799 L 453.84687095674565 89.36997250511098 L 458.2834331337325 67.06586826347299 L 574.8502994011976 67.06586826347299 L 574.8502994011976 552.0958083832335 L 225.14970059880238 552.0958083832335 Z" fill="none" stroke="#f2eda1" stroke-width="4.790419161676647" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="40.41916167664671" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,47.90419161676641)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "ms013"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="181.81818181818187" y="109.09090909090907" width="436.3636363636364" height="381.8181818181818"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="226.36363636363635" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="280.90909090909093" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="335.45454545454544" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="390" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="226.36363636363635" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="280.90909090909093" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="335.45454545454544" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="390" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="378.18181818181824" y="239.99999999999997" width="152.72727272727272" height="174.54545454545456" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 163.63636363636363 L 618.1818181818182 163.63636363636363" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 490.9090909090909 L 618.1818181818182 490.9090909090909" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 214.54545454545465 245.45454545454544 L 181.81818181818187 212.7272727272727 L 181.81818181818187 278.18181818181813 L 214.54545454545465 245.45454545454544 Z" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,454.5454545454546,109.09090909090907)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "son8_ep"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="216.4473684210527" width="668.4210526315787" height="167.1052631578947"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,65.78947368421058,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,232.8947368421053,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,400,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,567.1052631578947,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,734.2105263157894,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,216.4473684210527)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="334.2105263157895" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="383.5526315789474" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_textalignright_orthogonal"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="202.5520483546004" y="80.59100067159162" width="394.8959032907992" height="438.8179986568167"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="162.25654801880455" y="138.41504365345864" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="162.25654801880455" y="240.76561450638005" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="162.25654801880455" y="343.1161853593015" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="162.25654801880455" y="445.4667562122229" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="557.1524513096037" y="445.4667562122229" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="557.1524513096037" y="343.1161853593015" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="557.1524513096037" y="240.76561450638005" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="557.1524513096037" y="138.41504365345864" width="80.59100067159167" height="48.354600402955" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 250.90664875755542 519.4089993284083 L 250.90664875755542 112.82740094022827 L 350.30221625251846 112.82740094022827 L 354.08523478452975 131.8459194056525 L 364.8583601022132 147.96904083801508 L 380.9814815345758 158.74216615569853 L 400 162.5251846877098 L 419.0185184654242 158.74216615569853 L 435.1416398977868 147.96904083801505 L 445.91476521547025 131.8459194056525 L 449.69778374748154 112.82740094022827 L 549.0933512424446 112.82740094022827 L 549.0933512424446 519.4089993284083 L 250.90664875755542 519.4089993284083 Z" fill="none" stroke="#f2eda1" stroke-width="8.059100067159168" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.881799865681664" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,80.59100067159162)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "ms012"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="280" y="144" width="240" height="312"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="341.98425196850394" y="325.98425196850394" width="68.03149606299212" height="68.03149606299212" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="485.98425196850394" y="325.98425196850394" width="68.03149606299212" height="68.03149606299212" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="341.98425196850394" y="181.98425196850394" width="68.03149606299212" height="68.03149606299212" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="485.98425196850394" y="181.98425196850394" width="68.03149606299212" height="68.03149606299212" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 304 432 L 304 456 L 280 432 L 304 432 Z" fill="none" stroke="#f2eda1" stroke-width="7.2" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_marker"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="28.8" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,448,144)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "bga_2x2_bottom_left_origin"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="216.4473684210527" width="668.4210526315787" height="167.1052631578947"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,65.78947368421058,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,65.78947368421058,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,232.8947368421053,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,232.8947368421053,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,400,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,567.1052631578947,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,567.1052631578947,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,734.2105263157894,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,734.2105263157894,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,216.4473684210527)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="334.2105263157895" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="383.5526315789474" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_doublesidedpinlabel"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="152.57731958762884" y="30.927835051546367" width="494.84536082474233" height="538.1443298969073"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="143.8144329896907" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="174.7422680412371" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="205.67010309278348" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="236.5979381443299" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="267.52577319587624" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="298.45360824742266" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="329.38144329896903" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="360.30927835051546" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="391.2371134020618" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="422.16494845360825" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="453.0927835051546" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="121.64948453608244" y="484.02061855670104" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="222.16494845360822" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="253.09278350515464" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="284.020618556701" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="314.9484536082474" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="345.8762886597938" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="376.8041237113402" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="407.73195876288656" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.659793814433" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="469.58762886597935" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="500.5154639175258" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="531.4432989690721" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="562.3711340206186" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="484.02061855670104" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="453.0927835051546" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="422.16494845360825" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="391.2371134020618" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="360.30927835051546" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="329.38144329896903" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="298.45360824742266" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="267.52577319587624" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="236.5979381443299" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="205.67010309278348" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="174.7422680412371" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4948453608248" y="143.8144329896907" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="562.3711340206186" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="531.4432989690721" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="500.5154639175258" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="469.58762886597935" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.659793814433" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="407.73195876288656" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="376.8041237113402" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="345.8762886597938" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="314.9484536082474" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="284.020618556701" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="253.09278350515464" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="222.16494845360822" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 214.43298969072163 105.1546391752577 L 183.50515463917523 105.1546391752577 L 183.50515463917523 136.0824742268041" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 185.05154639175254 80.41237113402059 L 191.23711340206182 74.2268041237113 L 185.05154639175254 68.04123711340205 L 185.05154639175254 80.41237113402059 Z" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 214.43298969072163 538.1443298969073 L 183.50515463917523 538.1443298969073 L 183.50515463917523 507.21649484536084" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 585.5670103092784 538.1443298969073 L 616.4948453608248 538.1443298969073 L 616.4948453608248 507.21649484536084" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 585.5670103092784 105.1546391752577 L 616.4948453608248 105.1546391752577 L 616.4948453608248 136.0824742268041" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="9.278350515463918" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,30.927835051546367)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "qfp48_w14_p1mm_startingpin(topside,leftpin)"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="179.44078947368425" width="668.4210526315787" height="241.11842105263153"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,65.78947368421058,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,232.8947368421053,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,400,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,567.1052631578947,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="start" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,734.2105263157894,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,179.44078947368425)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="297.20394736842104" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="346.54605263157896" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="346.54605263157896" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="346.54605263157896" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="346.54605263157896" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="346.54605263157896" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="346.54605263157896" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="346.54605263157896" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="346.54605263157896" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="346.54605263157896" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_textalignleft_orthogonal"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="325.00000000000006" y="166.66666666666663" width="150" height="266.6666666666667"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="358.33333333333337" y="316.66666666666663" width="66.66666666666667" height="49.99999999999999" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="441.66666666666674" y="316.66666666666663" width="66.66666666666667" height="49.99999999999999" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 475.00000000000006 249.99999999999994 L 325.00000000000006 249.99999999999994 L 325.00000000000006 433.3333333333333 L 475.00000000000006 433.3333333333333" fill="none" stroke="#f2eda1" stroke-width="16.666666666666668" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.333333333333336" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,433.33333333333337,166.66666666666663)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "res01005"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="116.49484536082474" y="103.09278350515473" width="567.0103092783504" height="393.8144329896907"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="189.17525773195888" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="266.49484536082485" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="343.81443298969083" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="421.1340206185568" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="189.17525773195888" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="266.49484536082485" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="343.81443298969083" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="421.1340206185568" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 154.6391752577321 L 637.1134020618556 154.6391752577321" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 496.90721649484544 L 637.1134020618556 496.90721649484544" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 147.4226804123711 209.7938144329898 L 116.49484536082474 178.8659793814434 L 116.49484536082474 240.7216494845362 L 147.4226804123711 209.7938144329898 Z" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.92783505154639" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,477.3195876288659,103.09278350515473)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "msop8_p0.75mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="206.1538461538462" y="92.30769230769226" width="387.69230769230774" height="415.38461538461536"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="256.1538461538461" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="293.07692307692304" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="329.99999999999994" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="366.9230769230769" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="342.3076923076923" y="470.7692307692307" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="379.2307692307693" y="470.7692307692307" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="416.1538461538462" y="470.7692307692307" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="453.07692307692315" y="470.7692307692307" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.923076923077" y="366.9230769230769" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.923076923077" y="329.99999999999994" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.923076923077" y="293.07692307692304" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="556.923076923077" y="256.1538461538461" width="36.92307692307693" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="453.07692307692315" y="138.46153846153842" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="416.1538461538462" y="138.46153846153842" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="379.2307692307693" y="138.46153846153842" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="342.3076923076923" y="138.46153846153842" width="23.076923076923077" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="340.00000000000006" y="276.9230769230769" width="138.46153846153845" height="92.3076923076923" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 270.76923076923083 138.46153846153842 L 247.69230769230774 138.46153846153842" fill="none" stroke="#f2eda1" stroke-width="0" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 224.61538461538467 161.5384615384615 L 224.61538461538467 184.61538461538458" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 206.1538461538462 119.99999999999994 L 224.61538461538467 138.46153846153842 L 243.07692307692312 119.99999999999994 L 206.1538461538462 119.99999999999994 Z" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 270.76923076923083 507.6923076923076 L 224.61538461538467 507.6923076923076 L 224.61538461538467 461.5384615384615" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 547.6923076923077 507.6923076923076 L 593.8461538461539 507.6923076923076 L 593.8461538461539 461.5384615384615" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 547.6923076923077 138.46153846153842 L 593.8461538461539 138.46153846153842 L 593.8461538461539 184.61538461538458" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.69230769230769" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,409.2307692307693,92.30769230769226)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "quad-custom-thermalpad"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="116.49484536082474" y="103.09278350515473" width="567.0103092783504" height="393.8144329896907"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="181.44329896907226" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="263.91752577319596" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="346.3917525773197" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="428.8659793814434" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="181.44329896907226" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="263.91752577319596" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="346.3917525773197" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="428.8659793814434" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 154.6391752577321 L 637.1134020618556 154.6391752577321" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 496.90721649484544 L 637.1134020618556 496.90721649484544" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 147.4226804123711 202.06185567010317 L 116.49484536082474 171.13402061855678 L 116.49484536082474 232.9896907216496 L 147.4226804123711 202.06185567010317 Z" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.92783505154639" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,477.3195876288659,103.09278350515473)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "msop8_h3.32mm_pl1.63mm_pw0.4mm_p0.8mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="294.0217391304348" y="130.4347826086956" width="211.95652173913044" height="339.13043478260875"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="320.1086956521739" y="247.8260869565217" width="84.78260869565219" height="169.56521739130437" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="463.5869565217391" y="247.8260869565217" width="84.78260869565219" height="169.56521739130437" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 505.97826086956525 195.65217391304344 L 294.0217391304348 195.65217391304344 L 294.0217391304348 469.5652173913043 L 505.97826086956525 469.5652173913043" fill="none" stroke="#f2eda1" stroke-width="13.043478260869566" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="26.086956521739133" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,434.2391304347826,130.4347826086956)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "cap_0504"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="158.28313253012044" y="90.3614457831325" width="483.43373493975906" height="419.27710843373495"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="221.5361445783132" y="211.89759036144574" width="144.57831325301206" height="45.18072289156627" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="221.5361445783132" y="270.63253012048193" width="144.57831325301206" height="45.18072289156627" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="221.5361445783132" y="329.36746987951807" width="144.57831325301206" height="45.18072289156627" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="221.5361445783132" y="388.1024096385542" width="144.57831325301206" height="45.18072289156627" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="546.8373493975904" y="211.89759036144574" width="144.57831325301206" height="45.18072289156627" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="546.8373493975904" y="270.63253012048193" width="144.57831325301206" height="45.18072289156627" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="546.8373493975904" y="329.36746987951807" width="144.57831325301206" height="45.18072289156627" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="546.8373493975904" y="388.1024096385542" width="144.57831325301206" height="45.18072289156627" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 271.23493975903614 135.5421686746988 L 641.7168674698795 135.5421686746988" fill="none" stroke="#f2eda1" stroke-width="4.518072289156627" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 271.23493975903614 509.6385542168674 L 641.7168674698795 509.6385542168674" fill="none" stroke="#f2eda1" stroke-width="4.518072289156627" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 185.3915662650602 234.48795180722888 L 158.28313253012044 207.3795180722891 L 158.28313253012044 261.59638554216866 L 185.3915662650602 234.48795180722888 Z" fill="none" stroke="#f2eda1" stroke-width="4.518072289156627" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.108433734939762" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,456.4759036144578,90.3614457831325)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "vssop8_w4.1mm_h4.14mm_p0.65mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="307.22543352601156" y="34.682080924855484" width="185.5491329479769" height="530.6358381502891"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 307.22543352601156 130.0578034682081 L 307.22543352601156 69.364161849711 L 492.77456647398844 69.364161849711 L 492.77456647398844 264.45086705202317" fill="none" stroke="#f2eda1" stroke-width="3.468208092485549" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 492.77456647398844 370.23121387283237 L 492.77456647398844 565.3179190751446 L 307.22543352601156 565.3179190751446 L 307.22543352601156 504.6242774566474" fill="none" stroke="#f2eda1" stroke-width="3.468208092485549" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="17.341040462427745" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,34.682080924855484)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="307.22543352601156" cy="185.54913294797691" r="40.7514450867052"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="307.22543352601156" cy="185.54913294797691" r="21.67630057803468"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="393.9306358381503" cy="317.34104046242777" r="40.7514450867052"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="393.9306358381503" cy="317.34104046242777" r="21.67630057803468"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="307.22543352601156" cy="449.13294797687865" r="40.7514450867052"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="307.22543352601156" cy="449.13294797687865" r="21.67630057803468"/></g></svg>',
    title: "potentiometer_ca14_h2.5"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="60.21829130598417" y="223.52277004140012" width="679.5634173880317" height="152.95445991719987"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,60.21829130598417,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,213.172751223184,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,366.1272111403839,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,519.0816710575838,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,672.0361309747836,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.109145652992098" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,433.8727888596161,223.52277004140012)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="82.8001505457282" y="331.31351147911187" width="90.32743695897629" height="90.32743695897629"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="127.96386902521635" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="280.9183289424162" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="280.9183289424162" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="433.8727888596161" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="433.8727888596161" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="586.827248776816" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="586.827248776816" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="739.7817086940158" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="739.7817086940158" cy="376.4772299586" r="30.109145652992098"/></g></svg>',
    title: "pinrow5_textaligncenter_orthogonal"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="141.65547347212902" y="80.59100067159162" width="516.6890530557421" height="438.8179986568167"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="205.62458025520488" y="138.41504365345864" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="205.62458025520488" y="240.76561450638005" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="205.62458025520488" y="343.1161853593015" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="205.62458025520488" y="445.4667562122229" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.1658831430491" y="445.4667562122229" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.1658831430491" y="343.1161853593015" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.1658831430491" y="240.76561450638005" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.1658831430491" y="138.41504365345864" width="80.59100067159167" height="48.354600402955" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 282.3875083948959 112.82740094022827 L 180.03693754197454 112.82740094022827 L 180.03693754197454 215.1779717931497" fill="none" stroke="#f2eda1" stroke-width="8.059100067159168" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 555.9939556749497 112.82740094022827 L 658.344526527871 112.82740094022827 L 658.344526527871 215.1779717931497" fill="none" stroke="#f2eda1" stroke-width="8.059100067159168" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 282.3875083948959 519.4089993284083 L 180.03693754197454 519.4089993284083 L 180.03693754197454 417.05842847548683" fill="none" stroke="#f2eda1" stroke-width="8.059100067159168" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 555.9939556749497 519.4089993284083 L 658.344526527871 519.4089993284083 L 658.344526527871 417.05842847548683" fill="none" stroke="#f2eda1" stroke-width="8.059100067159168" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 167.24311618535936 164.002686366689 L 141.65547347212902 138.41504365345864 L 141.65547347212902 189.59032907991934 L 167.24311618535936 164.002686366689 Z" fill="none" stroke="#f2eda1" stroke-width="8.059100067159168" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.881799865681664" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,419.1907320349228,80.59100067159162)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "dfn8_w5.3mm_p1.27mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="192.30769230769232" y="92.30769230769232" width="415.3846153846153" height="415.38461538461536"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 607.6923076923076 300 L 605.9154712084068 272.89071392352776 L 600.6153639215757 246.24527524793803 L 591.8826721369595 220.51959481648134 L 579.8668146321527 196.15384615384613 L 564.7733860604873 173.56493397511184 L 546.8606391695138 153.13936083048628 L 526.4350660248881 135.22661393951267 L 503.84615384615387 120.13318536784732 L 479.48040518351866 108.11732786304043 L 453.754724752062 99.38463607842425 L 427.1092860764723 94.08452879159319 L 400 92.30769230769232 L 372.8907139235278 94.08452879159319 L 346.24527524793797 99.38463607842425 L 320.51959481648134 108.11732786304043 L 296.1538461538462 120.13318536784732 L 273.5649339751119 135.22661393951267 L 253.13936083048628 153.13936083048623 L 235.22661393951273 173.56493397511179 L 220.13318536784735 196.15384615384613 L 208.11732786304046 220.51959481648134 L 199.3846360784243 246.2452752479379 L 194.08452879159324 272.89071392352776 L 192.30769230769232 299.99999999999994 L 192.30769230769232 507.6923076923077 L 607.6923076923076 507.6923076923077 L 607.6923076923076 300 Z" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="46.15384615384615" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,207.69230769230768)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="300" r="43.84615384615385"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="300" r="33.230769230769226"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="282.7692307692308" cy="417.2307692307692" r="43.84615384615385"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="282.7692307692308" cy="417.2307692307692" r="33.230769230769226"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="517.2307692307693" cy="417.2307692307692" r="43.84615384615385"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="517.2307692307693" cy="417.2307692307692" r="33.230769230769226"/></g></svg>',
    title: "to92"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="172.06703910614522" y="134.07821229050282" width="455.86592178770945" height="331.8435754189944"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="198.8826815642458" y="274.86033519553075" width="160.89385474860333" height="160.89385474860333" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="547.486033519553" y="274.86033519553075" width="160.89385474860333" height="160.89385474860333" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 627.9329608938547 244.6927374301676 L 172.06703910614522 244.6927374301676 L 172.06703910614522 465.9217877094972 L 627.9329608938547 465.9217877094972" fill="none" stroke="#f2eda1" stroke-width="13.40782122905028" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="40.22346368715083" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,453.6312849162011,134.07821229050282)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod323w"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="181.81818181818187" y="109.09090909090907" width="436.3636363636364" height="381.8181818181818"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.6363636363637" y="226.36363636363635" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.6363636363637" y="280.90909090909093" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.6363636363637" y="335.45454545454544" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.6363636363637" y="390" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="569.0909090909092" y="226.36363636363635" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="569.0909090909092" y="280.90909090909093" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="569.0909090909092" y="335.45454545454544" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="569.0909090909092" y="390" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 163.63636363636363 L 618.1818181818182 163.63636363636363" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 490.9090909090909 L 618.1818181818182 490.9090909090909" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 214.54545454545465 245.45454545454544 L 181.81818181818187 212.7272727272727 L 181.81818181818187 278.18181818181813 L 214.54545454545465 245.45454545454544 Z" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,454.5454545454546,109.09090909090907)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "son8_h3.0mm_pl0.7mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="181.81818181818187" y="109.09090909090907" width="436.3636363636364" height="381.8181818181818"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="201.81818181818178" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="272.72727272727275" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="343.6363636363636" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="414.54545454545456" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="201.81818181818178" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="272.72727272727275" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="343.6363636363636" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="414.54545454545456" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="378.18181818181824" y="239.99999999999997" width="152.72727272727272" height="174.54545454545456" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 163.63636363636363 L 618.1818181818182 163.63636363636363" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 490.9090909090909 L 618.1818181818182 490.9090909090909" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 214.54545454545465 220.90909090909088 L 181.81818181818187 188.18181818181813 L 181.81818181818187 253.63636363636363 L 214.54545454545465 220.90909090909088 Z" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,454.5454545454546,109.09090909090907)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "son8_ep_w3.0mm_h3.0mm_p0.65mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="175.72815533980577" y="116.50485436893203" width="448.54368932038835" height="366.9902912621359"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="216.50485436893206" y="291.26213592233006" width="139.80582524271844" height="139.80582524271844" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="554.3689320388349" y="291.26213592233006" width="139.80582524271844" height="139.80582524271844" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 624.2718446601941 238.83495145631065 L 175.72815533980577 238.83495145631065 L 175.72815533980577 483.49514563106794 L 624.2718446601941 483.49514563106794" fill="none" stroke="#f2eda1" stroke-width="11.650485436893204" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="34.95145631067961" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,455.3398058252427,116.50485436893203)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod123f"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="212.5" y="93.74999999999997" width="375" height="412.5"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 329.6875 506.25 L 329.6875 140.625 L 376.5625 140.625 L 378.3465734567667 149.5941429460568 L 383.4271848159403 157.19781518405972 L 391.03085705394324 162.27842654323328 L 400 164.0625 L 408.9691429460568 162.27842654323328 L 416.5728151840597 157.1978151840597 L 421.6534265432333 149.5941429460568 L 423.4375 140.625 L 470.3125 140.625 L 470.3125 506.25 L 329.6875 506.25 Z" fill="none" stroke="#f2eda1" stroke-width="9.375" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="37.5" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,93.74999999999997)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="28.125" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,85.9375,229.6875)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin1}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="28.125" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,85.9375,417.1875)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin2}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="28.125" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,714.0625,417.1875)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin3}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="28.125" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,714.0625,229.6875)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin4}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="142.1875" y="159.375" width="140.625" height="140.625"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="212.5" cy="229.6875" r="46.875"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="212.5" cy="417.1875" r="70.3125"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="212.5" cy="417.1875" r="46.875"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="587.5" cy="417.1875" r="70.3125"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="587.5" cy="417.1875" r="46.875"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="587.5" cy="229.6875" r="70.3125"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="587.5" cy="229.6875" r="46.875"/></g></svg>',
    title: "dip footprint"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="151.1218403862539" y="51.12184038625395" width="497.7563192274922" height="497.75631922749216"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.06844646407268" y="533.5416074978699" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="243.99318375461516" y="533.5416074978699" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="308.91792104515764" y="533.5416074978699" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="373.8426583357001" y="533.5416074978699" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.76739562624255" y="533.5416074978699" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.69213291678494" y="533.5416074978699" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.6168702073273" y="533.5416074978699" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="633.5416074978699" y="533.5416074978699" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.06844646407268" y="468.6168702073275" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="243.99318375461516" y="468.6168702073275" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="308.91792104515764" y="468.6168702073275" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="373.8426583357001" y="468.6168702073275" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.76739562624255" y="468.6168702073275" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.69213291678494" y="468.6168702073275" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.6168702073273" y="468.6168702073275" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="633.5416074978699" y="468.6168702073275" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.06844646407268" y="403.69213291678506" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="243.99318375461516" y="403.69213291678506" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="308.91792104515764" y="403.69213291678506" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="373.8426583357001" y="403.69213291678506" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.76739562624255" y="403.69213291678506" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.69213291678494" y="403.69213291678506" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.6168702073273" y="403.69213291678506" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="633.5416074978699" y="403.69213291678506" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.06844646407268" y="338.7673956262426" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="243.99318375461516" y="338.7673956262426" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="308.91792104515764" y="338.7673956262426" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="373.8426583357001" y="338.7673956262426" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.76739562624255" y="338.7673956262426" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.69213291678494" y="338.7673956262426" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.6168702073273" y="338.7673956262426" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="633.5416074978699" y="338.7673956262426" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.06844646407268" y="273.84265833570015" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="243.99318375461516" y="273.84265833570015" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="308.91792104515764" y="273.84265833570015" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="373.8426583357001" y="273.84265833570015" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.76739562624255" y="273.84265833570015" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.69213291678494" y="273.84265833570015" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.6168702073273" y="273.84265833570015" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="633.5416074978699" y="273.84265833570015" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.06844646407268" y="208.91792104515767" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="243.99318375461516" y="208.91792104515767" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="308.91792104515764" y="208.91792104515767" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="373.8426583357001" y="208.91792104515767" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.76739562624255" y="208.91792104515767" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.69213291678494" y="208.91792104515767" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.6168702073273" y="208.91792104515767" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="633.5416074978699" y="208.91792104515767" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.06844646407268" y="143.99318375461522" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="243.99318375461516" y="143.99318375461522" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="308.91792104515764" y="143.99318375461522" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="373.8426583357001" y="143.99318375461522" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.76739562624255" y="143.99318375461522" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.69213291678494" y="143.99318375461522" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.6168702073273" y="143.99318375461522" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="633.5416074978699" y="143.99318375461522" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.06844646407268" y="79.06844646407274" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="243.99318375461516" y="79.06844646407274" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="308.91792104515764" y="79.06844646407274" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="373.8426583357001" y="79.06844646407274" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="438.76739562624255" y="79.06844646407274" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.69213291678494" y="79.06844646407274" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.6168702073273" y="79.06844646407274" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="633.5416074978699" y="79.06844646407274" width="30.673104231752344" height="30.673104231752344" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 161.94262993467765 61.94262993467771 L 161.94262993467765 51.12184038625395 L 151.1218403862539 61.94262993467771 L 161.94262993467765 61.94262993467771 Z" fill="none" stroke="#f2eda1" stroke-width="2.556092019312695" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_marker"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="10.22436807725078" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,421.64157909684747,61.94262993467771)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "bga64_w10_h10_grid8x8_p1.27mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="272.3880597014926" y="179.10447761194027" width="255.22388059701495" height="241.79104477611938"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="317.1641791044777" y="317.910447761194" width="62.6865671641791" height="44.776119402985074" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="469.4029850746269" y="317.910447761194" width="62.6865671641791" height="44.776119402985074" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 527.6119402985075 259.7014925373134 L 272.3880597014926 259.7014925373134 L 272.3880597014926 420.89552238805965 L 527.6119402985075 420.89552238805965" fill="none" stroke="#f2eda1" stroke-width="17.910447761194032" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="53.731343283582085" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,424.62686567164184,179.10447761194027)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod923"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="214.07563025210084" y="100.84033613445382" width="371.8487394957983" height="398.3193277310924"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="234.2436974789916" y="191.59663865546224" width="113.4453781512605" height="267.2268907563025" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="529.2016806722689" y="191.59663865546224" width="113.4453781512605" height="267.2268907563025" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 585.9243697478992 151.26050420168073 L 214.07563025210084 151.26050420168073 L 214.07563025210084 499.15966386554624 L 585.9243697478992 499.15966386554624" fill="none" stroke="#f2eda1" stroke-width="10.084033613445378" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="20.168067226890756" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,438.4453781512605,100.84033613445382)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "diode1210"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="286.73591689972034" y="10.787055533359933" width="226.52816620055933" height="578.42588893328"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="566.883739512585" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="539.4846184578506" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="512.0854974031163" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="484.68637634838194" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="457.2872552936476" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="429.88813423891327" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="402.48901318417893" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="375.0898921294446" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="347.69077107471026" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="320.29165001997603" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="292.8925289652417" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="265.49340791050736" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="238.09428685577302" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="210.69516580103866" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="183.29604474630437" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="155.89692369157007" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="128.49780263683573" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="101.09868158210142" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="73.69956052736711" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.37514982021577" y="46.3004394726328" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="46.3004394726328" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="73.69956052736711" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="101.09868158210148" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="128.4978026368358" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="155.8969236915701" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="183.2960447463044" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="210.6951658010387" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="238.09428685577305" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="265.49340791050736" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="292.8925289652417" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="320.29165001997603" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="347.69077107471037" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="375.0898921294447" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="402.48901318417904" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="429.88813423891327" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="457.2872552936476" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="484.68637634838194" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="512.0854974031163" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="539.4846184578506" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="286.7359168997203" y="566.883739512585" width="25.888933280063924" height="17.25928885337595" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="405.06991610067917" y="41.23052337195362" width="17.25928885337595" height="25.888933280063924" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="377.6707950459448" y="41.23052337195362" width="17.25928885337595" height="25.888933280063924" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="363.9712345185777" y="563.3240111865761" width="17.25928885337595" height="25.888933280063924" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="391.37035557331205" y="563.3240111865761" width="17.25928885337595" height="25.888933280063924" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="418.7694766280464" y="563.3240111865761" width="17.25928885337595" height="25.888933280063924" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 286.73591689972034 41.23052337195361 L 513.2640831002797 41.23052337195361 L 513.2640831002797 589.21294446664 L 286.73591689972034 589.21294446664 L 286.73591689972034 41.23052337195361 Z" fill="none" stroke="#f2eda1" stroke-width="1.0787055533359968" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.5868957251298 54.93008389932078 L 328.3739512584898 51.69396723931277 L 328.3739512584898 58.166200559328786 L 317.5868957251298 54.93008389932078 Z" fill="none" stroke="#f2eda1" stroke-width="1.0787055533359968" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="2" data-pcb-silkscreen-path-id="pcb_silkscreen_triangle_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="21.919296843787457" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,10.787055533359933)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="575.5133839392729" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="575.5133839392729" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="575.5133839392729" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="575.5133839392729" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="548.1142628845386" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="548.1142628845386" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="548.1142628845386" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="548.1142628845386" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="520.7151418298042" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="520.7151418298042" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="520.7151418298042" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="520.7151418298042" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="493.3160207750699" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="493.3160207750699" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="493.3160207750699" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="493.3160207750699" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="465.91689972033555" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="465.91689972033555" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="465.91689972033555" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="465.91689972033555" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="438.5177786656012" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="438.5177786656012" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="438.5177786656012" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="438.5177786656012" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="411.11865761086693" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="411.11865761086693" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="411.11865761086693" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="411.11865761086693" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="383.7195365561326" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="383.7195365561326" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="383.7195365561326" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="383.7195365561326" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="356.32041550139826" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="356.32041550139826" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="356.32041550139826" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="356.32041550139826" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="328.921294446664" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="328.921294446664" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="328.921294446664" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="328.921294446664" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="301.52217339192964" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="301.52217339192964" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="301.52217339192964" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="301.52217339192964" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="274.1230523371953" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="274.1230523371953" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="274.1230523371953" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="274.1230523371953" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="246.723931282461" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="246.723931282461" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="246.723931282461" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="246.723931282461" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="219.32481022772663" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="219.32481022772663" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="219.32481022772663" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="219.32481022772663" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="191.92568917299235" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="191.92568917299235" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="191.92568917299235" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="191.92568917299235" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="164.52656811825804" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="164.52656811825804" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="164.52656811825804" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="164.52656811825804" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="137.1274470635237" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="137.1274470635237" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="137.1274470635237" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="137.1274470635237" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="109.7283260087894" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="109.7283260087894" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="109.7283260087894" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="109.7283260087894" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="82.32920495405509" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="82.32920495405509" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="82.32920495405509" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="82.32920495405509" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="513.2640831002797" cy="54.93008389932078" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="513.2640831002797" cy="54.93008389932078" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.8969236915701" cy="54.93008389932078" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.8969236915701" cy="54.93008389932078" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="54.93008389932078" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="54.93008389932078" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="54.93008389932078" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="54.93008389932078" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="82.32920495405509" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="82.32920495405509" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="82.32920495405509" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="82.32920495405509" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="109.72832600878945" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="109.72832600878945" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="109.72832600878945" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="109.72832600878945" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="137.12744706352376" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="137.12744706352376" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="137.12744706352376" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="137.12744706352376" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="164.52656811825807" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="164.52656811825807" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="164.52656811825807" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="164.52656811825807" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="191.92568917299238" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="191.92568917299238" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="191.92568917299238" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="191.92568917299238" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="219.3248102277267" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="219.3248102277267" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="219.3248102277267" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="219.3248102277267" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="246.72393128246102" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="246.72393128246102" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="246.72393128246102" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="246.72393128246102" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="274.12305233719536" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="274.12305233719536" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="274.12305233719536" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="274.12305233719536" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="301.52217339192964" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="301.52217339192964" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="301.52217339192964" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="301.52217339192964" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="328.921294446664" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="328.921294446664" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="328.921294446664" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="328.921294446664" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="356.3204155013983" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="356.3204155013983" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="356.3204155013983" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="356.3204155013983" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="383.71953655613265" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="383.71953655613265" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="383.71953655613265" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="383.71953655613265" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="411.118657610867" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="411.118657610867" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="411.118657610867" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="411.118657610867" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="438.51777866560127" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="438.51777866560127" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="438.51777866560127" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="438.51777866560127" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="465.91689972033555" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="465.91689972033555" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="465.91689972033555" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="465.91689972033555" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="493.3160207750699" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="493.3160207750699" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="493.3160207750699" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="493.3160207750699" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="520.7151418298042" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="520.7151418298042" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="520.7151418298042" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="520.7151418298042" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="548.1142628845386" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="548.1142628845386" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="548.1142628845386" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="548.1142628845386" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="286.73591689972034" cy="575.5133839392729" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="286.73591689972034" cy="575.5133839392729" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="304.1030763084299" cy="575.5133839392729" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="304.1030763084299" cy="575.5133839392729" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="413.69956052736717" cy="41.23052337195361" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="413.69956052736717" cy="41.23052337195361" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="413.69956052736717" cy="58.59768278066315" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="413.69956052736717" cy="58.59768278066315" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="386.30043947263283" cy="41.23052337195361" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="386.30043947263283" cy="41.23052337195361" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="386.30043947263283" cy="58.59768278066315" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="386.30043947263283" cy="58.59768278066315" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="372.60087894526566" cy="589.21294446664" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="372.60087894526566" cy="589.21294446664" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="372.60087894526566" cy="571.8457850579305" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="372.60087894526566" cy="571.8457850579305" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="589.21294446664" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="589.21294446664" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="571.8457850579305" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="571.8457850579305" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="427.39912105473434" cy="589.21294446664" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="427.39912105473434" cy="589.21294446664" r="5.393527766679984"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="427.39912105473434" cy="571.8457850579305" r="5.393527766679984"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="427.39912105473434" cy="571.8457850579305" r="5.393527766679984"/></g></svg>',
    title: "stampboard_left20_right20_bottom3_top2_w21mm_p2.54mm_innerhole"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="284.93150684931504" y="164.38356164383558" width="230.13698630136992" height="271.2328767123288"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="334.2465753424657" y="271.23287671232873" width="65.75342465753425" height="115.06849315068493" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="449.31506849315065" y="271.23287671232873" width="65.75342465753425" height="115.06849315068493" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 515.068493150685 221.91780821917803 L 284.93150684931504 221.91780821917803 L 284.93150684931504 435.6164383561644 L 515.068493150685 435.6164383561644" fill="none" stroke="#f2eda1" stroke-width="16.438356164383563" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="49.31506849315069" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,424.6575342465753,164.38356164383558)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod882"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="311.62162162162167" y="162.16216216216213" width="176.75675675675677" height="275.6756756756757"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.05405405405406" y="308.10810810810807" width="74.5945945945946" height="64.86486486486487" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="451.08108108108115" y="308.10810810810807" width="74.5945945945946" height="64.86486486486487" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 488.37837837837844 243.24324324324323 L 311.62162162162167 243.24324324324323 L 311.62162162162167 437.8378378378378 L 488.37837837837844 437.8378378378378" fill="none" stroke="#f2eda1" stroke-width="16.216216216216218" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.432432432432435" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,434.8648648648649,162.16216216216213)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "0201"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="206.1538461538462" y="92.30769230769226" width="387.69230769230774" height="415.38461538461536"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="242.30769230769226" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="288.4615384615384" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="334.6153846153846" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="380.7692307692307" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="328.4615384615385" y="484.6153846153845" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="374.61538461538464" y="484.6153846153845" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="420.76923076923083" y="484.6153846153845" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="466.92307692307696" y="484.6153846153845" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="570.7692307692308" y="380.7692307692307" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="570.7692307692308" y="334.6153846153846" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="570.7692307692308" y="288.4615384615384" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="570.7692307692308" y="242.30769230769226" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="466.92307692307696" y="138.46153846153842" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="420.76923076923083" y="138.46153846153842" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="374.61538461538464" y="138.46153846153842" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="328.4615384615385" y="138.46153846153842" width="23.076923076923077" height="23.076923076923077" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="328.4615384615385" y="242.30769230769226" width="161.53846153846155" height="161.53846153846155" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 270.76923076923083 138.46153846153842 L 247.69230769230774 138.46153846153842" fill="none" stroke="#f2eda1" stroke-width="0" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 224.61538461538467 161.5384615384615 L 224.61538461538467 184.61538461538458" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 206.1538461538462 119.99999999999994 L 224.61538461538467 138.46153846153842 L 243.07692307692312 119.99999999999994 L 206.1538461538462 119.99999999999994 Z" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 270.76923076923083 507.6923076923076 L 224.61538461538467 507.6923076923076 L 224.61538461538467 461.5384615384615" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 547.6923076923077 507.6923076923076 L 593.8461538461539 507.6923076923076 L 593.8461538461539 461.5384615384615" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 547.6923076923077 138.46153846153842 L 593.8461538461539 138.46153846153842 L 593.8461538461539 184.61538461538458" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.69230769230769" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,409.2307692307693,92.30769230769226)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "mlp16_w4_h4_p0.5mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="313.9884393063584" y="138.728323699422" width="172.02312138728325" height="322.5433526011561"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="265.4335260115607" y="216.76300578034684" width="97.10982658959537" height="41.618497109826585" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="265.4335260115607" y="306.93641618497116" width="97.10982658959537" height="41.618497109826585" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="265.4335260115607" y="397.10982658959546" width="97.10982658959537" height="41.618497109826585" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="437.4566473988439" y="397.10982658959546" width="97.10982658959537" height="41.618497109826585" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="437.4566473988439" y="306.93641618497116" width="97.10982658959537" height="41.618497109826585" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="437.4566473988439" y="216.76300578034684" width="97.10982658959537" height="41.618497109826585" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 376.4161849710983 461.27167630057806 L 376.4161849710983 194.2196531791908 L 392.1387283236994 194.2196531791908 L 392.7371319987552 197.22803160703197 L 394.44124148893815 199.77841169025265 L 396.9916215721588 201.48252118043558 L 400 202.08092485549136 L 403.0083784278412 201.48252118043558 L 405.55875851106185 199.77841169025265 L 407.2628680012448 197.22803160703197 L 407.8612716763006 194.2196531791908 L 423.5838150289017 194.2196531791908 L 423.5838150289017 461.27167630057806 L 376.4161849710983 461.27167630057806 Z" fill="none" stroke="#f2eda1" stroke-width="13.872832369942197" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="22.25433526011561" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,138.728323699422)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot363"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="241.1764705882353" y="141.1764705882353" width="317.64705882352945" height="317.64705882352945"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="269.4117647058823" y="268.2352941176471" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="502.3529411764706" y="268.2352941176471" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 558.8235294117648 211.76470588235296 L 241.1764705882353 211.76470588235296 L 241.1764705882353 458.82352941176475 L 558.8235294117648 458.82352941176475" fill="none" stroke="#f2eda1" stroke-width="14.11764705882353" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="28.23529411764706" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,442.3529411764706,141.1764705882353)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "0603_pw1.0_ph1.1"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="128.72340425531922" y="106.38297872340428" width="542.5531914893617" height="387.2340425531915"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.19148936170217" y="180.31914893617028" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.19148936170217" y="260.10638297872345" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.19148936170217" y="339.89361702127667" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.19148936170217" y="419.68085106382983" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.1702127659574" y="180.31914893617028" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.1702127659574" y="260.10638297872345" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.1702127659574" y="339.89361702127667" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.1702127659574" y="419.68085106382983" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.0212765957447 159.57446808510645 L 642.5531914893618 159.57446808510645" fill="none" stroke="#f2eda1" stroke-width="5.319148936170213" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.0212765957447 493.6170212765958 L 642.5531914893618 493.6170212765958" fill="none" stroke="#f2eda1" stroke-width="5.319148936170213" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 160.63829787234044 206.91489361702133 L 128.72340425531922 175.00000000000006 L 128.72340425531922 238.8297872340426 L 160.63829787234044 206.91489361702133 Z" fill="none" stroke="#f2eda1" stroke-width="5.319148936170213" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.914893617021274" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,479.7872340425532,106.38297872340428)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "vssop8_p0.75mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="246.8085106382979" y="127.65957446808517" width="306.3829787234042" height="344.6808510638297"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="297.87234042553195" y="280.8510638297873" width="102.12765957446808" height="153.1914893617021" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="502.12765957446805" y="280.8510638297873" width="102.12765957446808" height="153.1914893617021" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 553.1914893617021 242.55319148936175 L 246.8085106382979 242.55319148936175 L 246.8085106382979 472.3404255319149 L 553.1914893617021 472.3404255319149" fill="none" stroke="#f2eda1" stroke-width="12.76595744680851" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="38.29787234042553" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,451.06382978723406,127.65957446808517)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "micromelf"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="226.72934855607792" y="80.59100067159162" width="346.5413028878442" height="438.8179986568167"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.43384822028207" y="138.41504365345864" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.43384822028207" y="240.76561450638005" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.43384822028207" y="343.1161853593015" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.43384822028207" y="445.4667562122229" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.9751511081263" y="445.4667562122229" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.9751511081263" y="343.1161853593015" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.9751511081263" y="240.76561450638005" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.9751511081263" y="138.41504365345864" width="80.59100067159167" height="48.354600402955" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 275.0839489590329 519.4089993284083 L 275.0839489590329 112.82740094022827 L 358.36131631967766 112.82740094022827 L 361.5308723870384 128.7618353301783 L 370.5570044099624 142.27039653026586 L 384.06556561005 151.29652855318983 L 400 154.46608462055065 L 415.93443438995 151.29652855318983 L 429.4429955900376 142.27039653026586 L 438.4691276129616 128.7618353301783 L 441.63868368032234 112.82740094022827 L 524.9160510409671 112.82740094022827 L 524.9160510409671 519.4089993284083 L 275.0839489590329 519.4089993284083 Z" fill="none" stroke="#f2eda1" stroke-width="8.059100067159168" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.881799865681664" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,80.59100067159162)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "soic8"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="181.81818181818187" y="109.09090909090907" width="436.3636363636364" height="381.8181818181818"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="201.81818181818178" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="272.72727272727275" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="343.6363636363636" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="414.54545454545456" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="201.81818181818178" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="272.72727272727275" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="343.6363636363636" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="414.54545454545456" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 163.63636363636363 L 618.1818181818182 163.63636363636363" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 490.9090909090909 L 618.1818181818182 490.9090909090909" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 214.54545454545465 220.90909090909088 L 181.81818181818187 188.18181818181813 L 181.81818181818187 253.63636363636363 L 214.54545454545465 220.90909090909088 Z" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,454.5454545454546,109.09090909090907)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "son8_w3.0mm_h3.0mm_p0.65mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="60.21829130598417" y="223.52277004140012" width="679.5634173880317" height="152.95445991719987"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,60.21829130598417,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,213.172751223184,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,366.1272111403839,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,519.0816710575838,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="middle" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,672.0361309747836,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.109145652992098" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,433.8727888596161,223.52277004140012)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="82.8001505457282" y="331.31351147911187" width="90.32743695897629" height="90.32743695897629"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="127.96386902521635" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="280.9183289424162" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="280.9183289424162" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="433.8727888596161" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="433.8727888596161" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="586.827248776816" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="586.827248776816" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="739.7817086940158" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="739.7817086940158" cy="376.4772299586" r="30.109145652992098"/></g></svg>',
    title: "pinrow5_textaligncenter_orthogonal_verticallyinverted"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="154.7445255474452" y="43.79562043795613" width="490.51094890510956" height="512.4087591240876"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="145.62043795620434" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="167.51824817518244" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="189.41605839416053" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="211.31386861313865" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="233.21167883211675" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="255.10948905109484" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="277.00729927007296" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="298.9051094890511" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="320.80291970802915" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="342.7007299270073" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="364.5985401459854" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="386.4963503649635" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="408.3941605839416" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="430.2919708029197" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="452.18978102189783" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="141.60583941605836" y="474.0875912408759" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="234.6715328467153" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="256.5693430656934" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="278.4671532846715" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="300.3649635036496" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="322.2627737226277" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.1605839416058" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="366.05839416058393" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="387.95620437956205" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="409.8540145985401" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="431.75182481751824" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="453.64963503649636" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="475.5474452554745" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="497.44525547445255" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="519.3430656934306" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.2408759124088" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="563.1386861313869" y="534.3065693430657" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="474.0875912408759" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="452.18978102189783" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="430.2919708029197" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="408.3941605839416" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="386.4963503649635" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="364.5985401459854" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="342.7007299270073" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="320.80291970802915" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="298.9051094890511" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="277.00729927007296" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="255.10948905109484" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="233.21167883211675" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="211.31386861313865" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="189.41605839416053" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="167.51824817518244" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="623.3576642335767" y="145.62043795620434" width="43.79562043795621" height="10.948905109489052" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="563.1386861313869" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.2408759124088" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="519.3430656934306" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="497.44525547445255" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="475.5474452554745" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="453.64963503649636" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="431.75182481751824" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="409.8540145985401" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="387.95620437956205" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="366.05839416058393" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.1605839416058" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="322.2627737226277" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="300.3649635036496" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="278.4671532846715" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="256.5693430656934" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="234.6715328467153" y="52.55474452554738" width="10.948905109489052" height="43.79562043795621" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 207.29927007299267 96.35036496350358 L 185.40145985401455 96.35036496350358 L 185.40145985401455 118.2481751824817" fill="none" stroke="#f2eda1" stroke-width="4.379562043795621" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 154.7445255474452 93.06569343065686 L 163.50364963503645 101.82481751824812 L 172.26277372262768 93.06569343065686 L 154.7445255474452 93.06569343065686 Z" fill="none" stroke="#f2eda1" stroke-width="4.379562043795621" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 207.29927007299267 534.3065693430657 L 185.40145985401455 534.3065693430657 L 185.40145985401455 512.4087591240875" fill="none" stroke="#f2eda1" stroke-width="4.379562043795621" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 601.4598540145985 534.3065693430657 L 623.3576642335767 534.3065693430657 L 623.3576642335767 512.4087591240875" fill="none" stroke="#f2eda1" stroke-width="4.379562043795621" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 601.4598540145985 96.35036496350358 L 623.3576642335767 96.35036496350358 L 623.3576642335767 118.2481751824817" fill="none" stroke="#f2eda1" stroke-width="4.379562043795621" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="13.138686131386862" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,404.3795620437956,43.79562043795613)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "lqfp64_w10_h10_pl1_pw0.25mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="137.60445682451262" y="66.85236768802238" width="524.7910863509746" height="466.2952646239554"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="104.45682451253492" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="147.9108635097494" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="191.3649025069639" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="234.81894150417835" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="278.2729805013928" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="321.7270194986073" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="365.18105849582184" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="408.63509749303626" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="452.0891364902508" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="92.47910863509759" y="495.5431754874653" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="495.5431754874653" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="452.0891364902508" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="408.63509749303626" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="365.18105849582184" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="321.7270194986073" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="278.2729805013929" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="234.81894150417835" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="191.36490250696394" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="147.91086350974942" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="617.2701949860723" y="104.45682451253492" width="90.25069637883007" height="26.740947075208908" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 189.41504178272984 533.1476323119778 L 189.41504178272984 93.59331476323129 L 329.8050139275766 93.59331476323129 L 335.1482890827732 120.45577296824595 L 350.36464934289415 143.2286654203371 L 373.13754179498534 158.4450256804581 L 400 163.78830083565467 L 426.86245820501466 158.4450256804581 L 449.63535065710585 143.2286654203371 L 464.8517109172268 120.45577296824595 L 470.1949860724234 93.59331476323129 L 610.5849582172701 93.59331476323129 L 610.5849582172701 533.1476323119778 L 189.41504178272984 533.1476323119778 Z" fill="none" stroke="#f2eda1" stroke-width="6.685236768802227" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="36.62952646239554" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,66.85236768802238)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "tssop20_w6.5mm_p0.65mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="292.37288135593224" y="84.74576271186442" width="215.25423728813564" height="430.5084745762711"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,292.37288135593224,204.66101694915255)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,292.37288135593224,419.91525423728814)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,507.6271186440679,419.91525423728814)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,507.6271186440679,204.66101694915255)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="42.3728813559322" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400.00000000000006,84.74576271186442)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="228.81355932203394" y="236.4406779661017" width="127.1186440677966" height="127.1186440677966"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="292.37288135593224" cy="300" r="42.3728813559322"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="292.37288135593224" cy="515.2542372881355" r="63.5593220338983"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="292.37288135593224" cy="515.2542372881355" r="42.3728813559322"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="507.6271186440679" cy="515.2542372881355" r="63.5593220338983"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="507.6271186440679" cy="515.2542372881355" r="42.3728813559322"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="507.6271186440679" cy="300" r="63.5593220338983"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="507.6271186440679" cy="300" r="42.3728813559322"/></g></svg>',
    title: "pinrow4_rows2_1"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="110.49723756906076" y="183.97790055248618" width="579.0055248618785" height="232.04419889502765"/><path class="pcb-trace" stroke="rgb(200, 52, 52)" fill="none" d="M 370.16574585635357 333.1491712707182 L 429.8342541436464 333.1491712707182" stroke-width="13.812154696132596" stroke-linecap="round" stroke-linejoin="round" shape-rendering="crispEdges" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="149.17127071823205" y="305.524861878453" width="220.99447513812154" height="55.248618784530386" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="429.8342541436465" y="305.524861878453" width="220.99447513812154" height="55.248618784530386" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 110.49723756906076 416.0220994475138 L 689.5027624309392 416.0220994475138 L 689.5027624309392 250.27624309392263 L 110.49723756906076 250.27624309392263 L 110.49723756906076 416.0220994475138 Z" fill="none" stroke="#f2eda1" stroke-width="16.574585635359114" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="outline"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="44.19889502762431" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,183.97790055248618)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "solderjumper2bridged12pw2ph0.5"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="60.21829130598417" y="223.52277004140012" width="679.5634173880317" height="152.95445991719987"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(1,0,0,1,127.96386902521641,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(1,0,0,1,280.9183289424163,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(1,0,0,1,433.8727888596161,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(1,0,0,1,586.827248776816,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(1,0,0,1,739.7817086940158,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.109145652992098" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,366.1272111403839,223.52277004140012)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="15.05457282649602" y="331.31351147911187" width="90.32743695897629" height="90.32743695897629"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="60.21829130598417" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="213.17275122318404" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="213.17275122318404" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="366.1272111403839" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="366.1272111403839" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="519.0816710575838" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="519.0816710575838" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="672.0361309747836" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="672.0361309747836" cy="376.4772299586" r="30.109145652992098"/></g></svg>',
    title: "pinrow5_textalignleft"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="124.63768115942025" y="82.81573498964804" width="550.7246376811595" height="434.36853002070393"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="68.73706004140783" y="142.2360248447205" width="111.80124223602486" height="33.126293995859214" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="68.73706004140783" y="247.4120082815735" width="111.80124223602486" height="33.126293995859214" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="68.73706004140783" y="352.5879917184265" width="111.80124223602486" height="33.126293995859214" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="68.73706004140783" y="457.76397515527947" width="111.80124223602486" height="33.126293995859214" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.4616977225674" y="457.76397515527947" width="111.80124223602486" height="33.126293995859214" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.4616977225674" y="352.5879917184265" width="111.80124223602486" height="33.126293995859214" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.4616977225674" y="247.4120082815735" width="111.80124223602486" height="33.126293995859214" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.4616977225674" y="142.2360248447205" width="111.80124223602486" height="33.126293995859214" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 188.81987577639754 517.184265010352 L 188.81987577639754 115.94202898550725 L 329.60662525879917 115.94202898550725 L 334.9650018522076 142.880407247232 L 350.22436736989107 165.7176616156162 L 373.0616217382753 180.97702713329969 L 400 186.33540372670808 L 426.9383782617248 180.97702713329969 L 449.77563263010893 165.71766161561618 L 465.0349981477924 142.880407247232 L 470.39337474120083 115.94202898550725 L 611.1801242236024 115.94202898550725 L 611.1801242236024 517.184265010352 L 188.81987577639754 517.184265010352 Z" fill="none" stroke="#f2eda1" stroke-width="8.281573498964804" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.43685300207039" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,82.81573498964804)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "tssop8_w5.3mm_p1.27mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="290.9090909090909" y="109.09090909090907" width="218.18181818181824" height="381.8181818181818"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="266.3636363636363" y="218.1818181818182" width="49.09090909090909" height="76.36363636363636" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="266.3636363636363" y="359.99999999999994" width="49.09090909090909" height="76.36363636363636" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="484.54545454545456" y="289.09090909090907" width="49.09090909090909" height="76.36363636363636" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 315.45454545454544 163.63636363636363 L 484.54545454545456 163.63636363636363 L 484.54545454545456 261.8181818181818" fill="none" stroke="#f2eda1" stroke-width="10.90909090909091" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 315.45454545454544 490.9090909090909 L 484.54545454545456 490.9090909090909 L 484.54545454545456 392.7272727272727" fill="none" stroke="#f2eda1" stroke-width="10.90909090909091" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,109.09090909090907)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot323"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="273.2463797884359" y="20.951011605217218" width="253.50724042312822" height="558.0979767895656"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 296.2924925541748 32.22758549861351 L 526.7536202115641 32.22758549861351 L 526.7536202115641 579.0489883947828 L 296.2924925541748 579.0489883947828 L 296.2924925541748 32.22758549861351 Z" fill="none" stroke="#f2eda1" stroke-width="2.0951011605217214" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 294.1973913936531 79.78638184245659 L 273.2463797884359 73.5010783608914 L 273.2463797884359 86.07168532402176 L 294.1973913936531 79.78638184245659 Z" fill="none" stroke="#f2eda1" stroke-width="2.0951011605217214" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="1" data-pcb-silkscreen-path-id="1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.358734723220703" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,411.52305638286947,20.951011605217218)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="531.4901920509396" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="531.4901920509396" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="499.22563417890524" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="499.22563417890524" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="466.9610763068707" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="466.9610763068707" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="434.6965184348362" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="434.6965184348362" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="402.4319605628017" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="402.4319605628017" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="370.1674026907672" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="370.1674026907672" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="337.90284481873266" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="337.90284481873266" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="305.63828694669814" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="305.63828694669814" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="273.37372907466363" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="273.37372907466363" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="241.10917120262917" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="241.10917120262917" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="208.84461333059465" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="208.84461333059465" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="176.5800554585601" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="176.5800554585601" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="144.31549758652562" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="144.31549758652562" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="112.05093971449114" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="112.05093971449114" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="495.3271028037383" cy="79.78638184245659" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="495.3271028037383" cy="79.78638184245659" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="531.4901920509396" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="531.4901920509396" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="499.22563417890524" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="499.22563417890524" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="466.9610763068707" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="466.9610763068707" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="434.6965184348362" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="434.6965184348362" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="402.4319605628017" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="402.4319605628017" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="370.1674026907672" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="370.1674026907672" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="337.90284481873266" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="337.90284481873266" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="305.63828694669814" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="305.63828694669814" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="273.37372907466363" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="273.37372907466363" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="241.10917120262917" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="241.10917120262917" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="208.84461333059465" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="208.84461333059465" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="176.5800554585601" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="176.5800554585601" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="144.31549758652562" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="144.31549758652562" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="112.05093971449114" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="112.05093971449114" r="10.475505802608605"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="327.71900996200065" cy="79.78638184245659" r="15.713258703912908"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="327.71900996200065" cy="79.78638184245659" r="10.475505802608605"/></g></svg>',
    title: "breakoutheaders_left20_right20_w8mm_p2.54mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="296.9341749323715" y="27.051397655545543" width="206.13165013525702" height="545.8972046889089"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 330.7484220018034 572.9486023444545 L 330.7484220018034 40.577096483318314 L 376.9161406672678 40.577096483318314 L 378.67329483111905 49.41090700500121 L 383.6772465298687 56.8998499534496 L 391.1661894783171 61.903801652199235 L 400 63.66095581605052 L 408.8338105216829 61.903801652199235 L 416.3227534701313 56.8998499534496 L 421.32670516888095 49.41090700500121 L 423.0838593327322 40.577096483318314 L 469.2515779981966 40.577096483318314 L 469.2515779981966 572.9486023444545 L 330.7484220018034 572.9486023444545 Z" fill="none" stroke="#f2eda1" stroke-width="2.705139765554554" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="10.820559062218216" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,27.051397655545543)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,66.27592425608657)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin1}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,134.98647430117222)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin2}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,203.69702434625788)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin3}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,272.40757439134353)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin4}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,341.1181244364292)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin5}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,409.82867448151484)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin6}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,478.5392245266005)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin7}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,260.41478809738504,547.2497745716862)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin8}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,547.2497745716862)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin9}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,478.53922452660055)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin10}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,409.8286744815149)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin11}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,341.11812443642924)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin12}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,272.4075743913436)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin13}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,203.69702434625793)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin14}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,134.98647430117225)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin15}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="8.11541929666366" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,539.5852119026149,66.27592425608657)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin16}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="66.27592425608657" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="66.27592425608657" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="134.98647430117222" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="134.98647430117222" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="203.69702434625788" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="203.69702434625788" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="272.40757439134353" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="272.40757439134353" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="341.1181244364292" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="341.1181244364292" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="409.82867448151484" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="409.82867448151484" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="478.5392245266005" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="478.5392245266005" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="296.9341749323715" cy="547.2497745716862" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="296.9341749323715" cy="547.2497745716862" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="547.2497745716862" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="547.2497745716862" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="478.53922452660055" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="478.53922452660055" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="409.8286744815149" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="409.8286744815149" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="341.11812443642924" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="341.11812443642924" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="272.4075743913436" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="272.4075743913436" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="203.69702434625793" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="203.69702434625793" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="134.98647430117225" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="134.98647430117225" r="13.525698827772768"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="503.0658250676285" cy="66.27592425608657" r="20.28854824165915"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="503.0658250676285" cy="66.27592425608657" r="13.525698827772768"/></g></svg>',
    title: "dip16_nosquareplating"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="76.55502392344499" y="182.2966507177033" width="646.88995215311" height="235.40669856459334"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="24.880382775119628" y="225.3588516746411" width="103.34928229665073" height="30.622009569377994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="24.880382775119628" y="275.11961722488036" width="103.34928229665073" height="30.622009569377994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="24.880382775119628" y="324.88038277511964" width="103.34928229665073" height="30.622009569377994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="24.880382775119628" y="374.64114832535887" width="103.34928229665073" height="30.622009569377994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="671.7703349282297" y="374.64114832535887" width="103.34928229665073" height="30.622009569377994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="671.7703349282297" y="324.88038277511964" width="103.34928229665073" height="30.622009569377994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="671.7703349282297" y="275.11961722488036" width="103.34928229665073" height="30.622009569377994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="671.7703349282297" y="225.3588516746411" width="103.34928229665073" height="30.622009569377994" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 135.88516746411483 417.70334928229664 L 135.88516746411483 212.9186602870813 L 311.9617224880383 212.9186602870813 L 318.66323732914987 246.60945050486913 L 337.74753696730875 275.17112331977256 L 366.3092097822122 294.25542295793144 L 400 300.95693779904303 L 433.6907902177878 294.25542295793144 L 462.25246303269125 275.17112331977256 L 481.33676267085013 246.60945050486913 L 488.0382775119617 212.9186602870813 L 664.1148325358852 212.9186602870813 L 664.1148325358852 417.70334928229664 L 135.88516746411483 417.70334928229664 Z" fill="none" stroke="#f2eda1" stroke-width="7.6555023923444985" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="17.065390749601278" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,182.2966507177033)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "tssop8"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="228.57142857142856" y="128.5714285714286" width="342.8571428571428" height="342.85714285714283"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="283.91451068616425" y="441.0573678290214" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="412.4859392575928" y="441.0573678290214" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.0573678290212" y="441.0573678290214" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.0573678290212" y="312.48593925759286" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="283.91451068616425" y="183.91451068616428" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="412.4859392575928" y="183.91451068616428" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.0573678290212" y="183.91451068616428" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 250 150.00000000000006 L 250 128.5714285714286 L 228.57142857142856 150.00000000000006 L 250 150.00000000000006 Z" fill="none" stroke="#f2eda1" stroke-width="6.428571428571428" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_marker"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.71428571428571" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,442.85714285714283,150.00000000000006)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "bga7_w8_h8_grid3x3_p1_missing(center,B1)"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="214.28571428571428" y="142.8571428571428" width="371.4285714285715" height="314.28571428571433"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="257.1428571428571" y="264.2857142857142" width="114.28571428571429" height="142.85714285714286" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="528.5714285714287" y="264.2857142857142" width="114.28571428571429" height="142.85714285714286" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 585.7142857142858 214.28571428571422 L 214.28571428571428 214.28571428571422 L 214.28571428571428 457.1428571428571 L 585.7142857142858 457.1428571428571" fill="none" stroke="#f2eda1" stroke-width="14.285714285714286" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="42.857142857142854" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,450,142.8571428571428)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod110"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="146.1538461538462" y="92.30769230769226" width="507.69230769230774" height="415.38461538461536"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="147.69230769230765" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="193.8461538461538" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="239.99999999999997" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="286.1538461538461" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="332.30769230769226" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="378.4615384615384" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="424.6153846153846" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="470.7692307692307" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="147.69230769230765" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="193.8461538461538" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="239.99999999999997" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="286.1538461538461" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="332.30769230769226" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="378.4615384615384" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="424.6153846153846" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="470.7692307692307" width="81.23076923076923" height="27.69230769230769" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 326.1538461538462 138.46153846153842 L 612.3076923076924 138.46153846153842" fill="none" stroke="#f2eda1" stroke-width="4.615384615384616" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 326.1538461538462 507.6923076923076 L 612.3076923076924 507.6923076923076" fill="none" stroke="#f2eda1" stroke-width="4.615384615384616" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 173.84615384615392 161.5384615384615 L 146.1538461538462 133.84615384615384 L 146.1538461538462 189.2307692307692 L 173.84615384615392 161.5384615384615 Z" fill="none" stroke="#f2eda1" stroke-width="4.615384615384616" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.69230769230769" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,469.2307692307693,92.30769230769226)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "msop16"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="255.42168674698797" y="72.2891566265061" width="289.1566265060241" height="455.42168674698786"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="212.04819277108436" y="245.7831325301205" width="86.74698795180721" height="65.06024096385542" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="212.04819277108436" y="339.7590361445783" width="86.74698795180721" height="65.06024096385542" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="501.20481927710847" y="292.7710843373494" width="86.74698795180721" height="65.06024096385542" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 298.7951807228916 122.8915662650603 L 501.2048192771084 122.8915662650603 L 501.2048192771084 234.9397590361446" fill="none" stroke="#f2eda1" stroke-width="7.228915662650602" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 298.7951807228916 527.710843373494 L 501.2048192771084 527.710843373494 L 501.2048192771084 415.66265060240966" fill="none" stroke="#f2eda1" stroke-width="7.228915662650602" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="21.686746987951803" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,72.2891566265061)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot323_pl1.2_pw0.9_p2_w5.2_h5"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="86.20689655172413" y="166.37931034482753" width="627.5862068965519" height="267.2413793103449"/><path class="pcb-trace" stroke="rgb(200, 52, 52)" fill="none" d="M 245.6896551724138 325.8620689655172 L 335.3448275862069 325.8620689655172" stroke-width="32.327586206896555" stroke-linecap="round" stroke-linejoin="round" shape-rendering="crispEdges" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="116.37931034482759" y="261.20689655172407" width="129.31034482758622" height="129.31034482758622" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="335.34482758620686" y="261.20689655172407" width="129.31034482758622" height="129.31034482758622" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="554.3103448275862" y="261.20689655172407" width="129.31034482758622" height="129.31034482758622" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 86.20689655172413 433.6206896551724 L 713.7931034482759 433.6206896551724 L 713.7931034482759 218.10344827586204 L 86.20689655172413 218.10344827586204 L 86.20689655172413 433.6206896551724 Z" fill="none" stroke="#f2eda1" stroke-width="12.931034482758621" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="outline"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="34.48275862068966" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,166.37931034482753)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "solderjumper3_bridged12"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="216.4473684210527" width="668.4210526315787" height="167.1052631578947"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,65.78947368421058,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,232.8947368421053,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,400,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,567.1052631578947,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,734.2105263157894,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,216.4473684210527)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="334.2105263157895" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="383.5526315789474" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_textaligncenter_verticallyinverted"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="180.02369923516108" y="84.0245610255306" width="439.95260152967785" height="431.9508779489389"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="272.1146181191425" y="227.53851125713675" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="272.1146181191425" y="307.36184423139076" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="272.1146181191425" y="387.1851772056448" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.3664763546267" y="387.1851772056448" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.3664763546267" y="227.53851125713675" width="67.21964882042442" height="64.19476462350532" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 383.0270386728429 162.94301411181735 L 542.6737046213508 162.94301411181735" fill="none" stroke="#f2eda1" stroke-width="4.2012280512765265" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 383.0270386728429 515.9754389744695 L 542.6737046213508 515.9754389744695" fill="none" stroke="#f2eda1" stroke-width="4.2012280512765265" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 238.84089195303244 259.6358935688894 L 180.02369923516108 247.03220941505984 L 180.02369923516108 272.239577722719 L 238.84089195303244 259.6358935688894 Z" fill="none" stroke="#f2eda1" stroke-width="4.2012280512765265" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_indicator"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.20736830765916" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,462.85037164709684,84.0245610255306)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot25"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="179.44078947368425" width="668.4210526315787" height="241.11842105263153"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,65.78947368421058,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,232.8947368421053,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,400,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,567.1052631578947,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="end" dominant-baseline="central" transform="matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,734.2105263157894,420.5592105263158)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,179.44078947368425)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="297.20394736842104" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="346.54605263157896" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="346.54605263157896" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="346.54605263157896" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="346.54605263157896" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="346.54605263157896" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="346.54605263157896" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="346.54605263157896" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="346.54605263157896" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="346.54605263157896" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_textalignleft_orthogonal_verticallyinverted"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="263.6363636363636" y="163.6363636363637" width="272.72727272727263" height="272.72727272727275"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="334.0730136005726" y="397.70937723693635" width="77.30851825340014" height="77.30851825340014" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="497.7093772369362" y="397.70937723693635" width="77.30851825340014" height="77.30851825340014" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="334.0730136005726" y="234.07301360057272" width="77.30851825340014" height="77.30851825340014" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="497.7093772369362" y="234.07301360057272" width="77.30851825340014" height="77.30851825340014" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.9090909090909 190.909090909091 L 290.9090909090909 163.6363636363637 L 263.6363636363636 190.909090909091 L 290.9090909090909 190.909090909091 Z" fill="none" stroke="#f2eda1" stroke-width="8.181818181818182" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_marker"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,454.5454545454545,190.909090909091)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "bga_2x2_top_left_origin"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="60.21829130598417" y="223.52277004140012" width="679.5634173880317" height="152.95445991719987"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,60.21829130598417,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,213.172751223184,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,366.1272111403839,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,519.0816710575838,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="start" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,672.0361309747836,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.109145652992098" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,433.8727888596161,223.52277004140012)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="82.8001505457282" y="331.31351147911187" width="90.32743695897629" height="90.32743695897629"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="127.96386902521635" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="280.9183289424162" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="280.9183289424162" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="433.8727888596161" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="433.8727888596161" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="586.827248776816" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="586.827248776816" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="739.7817086940158" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="739.7817086940158" cy="376.4772299586" r="30.109145652992098"/></g></svg>',
    title: "pinrow5_textalignright_verticallyinverted"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="116.49484536082474" y="103.09278350515473" width="567.0103092783504" height="393.8144329896907"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="204.63917525773206" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="271.6494845360826" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="338.6597938144331" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="187.11340206185562" y="405.6701030927836" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="204.63917525773206" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="271.6494845360826" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="338.6597938144331" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="599.4845360824742" y="405.6701030927836" width="168.04123711340202" height="41.23711340206185" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 154.6391752577321 L 637.1134020618556 154.6391752577321" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.52577319587624 496.90721649484544 L 637.1134020618556 496.90721649484544" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 147.4226804123711 225.25773195876297 L 116.49484536082474 194.32989690721658 L 116.49484536082474 256.18556701030934 L 147.4226804123711 225.25773195876297 Z" fill="none" stroke="#f2eda1" stroke-width="5.154639175257731" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.92783505154639" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,477.3195876288659,103.09278350515473)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "msop8"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="337.3355263157895" y="49.342105263157876" width="125.32894736842104" height="501.3157894736842"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.802631578947368" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,337.3355263157895,119.1611842105263)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.802631578947368" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,337.3355263157895,244.49013157894734)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.802631578947368" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,337.3355263157895,369.81907894736844)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.802631578947368" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,337.3355263157895,495.1480263157895)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.802631578947368" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,462.6644736842105,495.1480263157895)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.802631578947368" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,462.6644736842105,369.81907894736844)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN6}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.802631578947368" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,462.6644736842105,244.49013157894734)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN7}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="14.802631578947368" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,462.6644736842105,119.1611842105263)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN8}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="24.67105263157895" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,49.342105263157876)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="300.32894736842104" y="137.66447368421052" width="74.01315789473685" height="74.01315789473685"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="337.3355263157895" cy="174.67105263157893" r="24.67105263157895"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="337.3355263157895" cy="300" r="37.006578947368425"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="337.3355263157895" cy="300" r="24.67105263157895"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="337.3355263157895" cy="425.32894736842104" r="37.006578947368425"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="337.3355263157895" cy="425.32894736842104" r="24.67105263157895"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="337.3355263157895" cy="550.6578947368421" r="37.006578947368425"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="337.3355263157895" cy="550.6578947368421" r="24.67105263157895"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="462.6644736842105" cy="550.6578947368421" r="37.006578947368425"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="462.6644736842105" cy="550.6578947368421" r="24.67105263157895"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="462.6644736842105" cy="425.32894736842104" r="37.006578947368425"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="462.6644736842105" cy="425.32894736842104" r="24.67105263157895"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="462.6644736842105" cy="300" r="37.006578947368425"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="462.6644736842105" cy="300" r="24.67105263157895"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="462.6644736842105" cy="174.67105263157893" r="37.006578947368425"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="462.6644736842105" cy="174.67105263157893" r="24.67105263157895"/></g></svg>',
    title: "pinrow8_rows4_1"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="286.5482233502537" y="152.28426395939087" width="226.9035532994924" height="295.4314720812183"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="317.0050761421319" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="472.33502538071053" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 513.4517766497461 228.42639593908632 L 286.5482233502537 228.42639593908632 L 286.5482233502537 447.71573604060916 L 513.4517766497461 447.71573604060916" fill="none" stroke="#f2eda1" stroke-width="15.228426395939088" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.456852791878177" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,435.7868020304568,152.28426395939087)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "0402"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="211.94029850746264" y="89.55223880597012" width="376.11940298507454" height="420.8955223880597"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="229.85074626865668" y="248.50746268656715" width="35.820895522388064" height="22.388059701492537" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="229.85074626865668" y="284.3283582089552" width="35.820895522388064" height="22.388059701492537" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="229.85074626865668" y="320.1492537313432" width="35.820895522388064" height="22.388059701492537" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="229.85074626865668" y="355.9701492537313" width="35.820895522388064" height="22.388059701492537" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.0298507462686" y="456.7164179104478" width="22.388059701492537" height="35.820895522388064" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="379.8507462686567" y="456.7164179104478" width="22.388059701492537" height="35.820895522388064" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="415.6716417910447" y="456.7164179104478" width="22.388059701492537" height="35.820895522388064" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="451.49253731343276" y="456.7164179104478" width="22.388059701492537" height="35.820895522388064" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.2388059701492" y="355.9701492537313" width="35.820895522388064" height="22.388059701492537" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.2388059701492" y="320.1492537313432" width="35.820895522388064" height="22.388059701492537" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.2388059701492" y="284.3283582089552" width="35.820895522388064" height="22.388059701492537" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.2388059701492" y="248.50746268656715" width="35.820895522388064" height="22.388059701492537" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="451.49253731343276" y="134.3283582089552" width="22.388059701492537" height="35.820895522388064" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="415.6716417910447" y="134.3283582089552" width="22.388059701492537" height="35.820895522388064" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="379.8507462686567" y="134.3283582089552" width="22.388059701492537" height="35.820895522388064" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.0298507462686" y="134.3283582089552" width="22.388059701492537" height="35.820895522388064" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.0298507462686" y="248.50746268656712" width="129.85074626865674" height="129.85074626865674" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 274.6268656716418 134.3283582089552 L 229.85074626865668 134.3283582089552 L 229.85074626865668 179.10447761194027" fill="none" stroke="#f2eda1" stroke-width="8.955223880597016" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 274.6268656716418 492.5373134328358 L 252.2388059701492 492.5373134328358" fill="none" stroke="#f2eda1" stroke-width="0" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 229.85074626865668 470.14925373134326 L 229.85074626865668 447.7611940298507" fill="none" stroke="#f2eda1" stroke-width="8.955223880597016" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 211.94029850746264 510.4477611940298 L 229.85074626865668 492.5373134328358 L 211.94029850746264 474.6268656716418 L 211.94029850746264 510.4477611940298 Z" fill="none" stroke="#f2eda1" stroke-width="8.955223880597016" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 543.2835820895522 492.5373134328358 L 588.0597014925372 492.5373134328358 L 588.0597014925372 447.7611940298507" fill="none" stroke="#f2eda1" stroke-width="8.955223880597016" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 543.2835820895522 134.3283582089552 L 588.0597014925372 134.3283582089552 L 588.0597014925372 179.10447761194027" fill="none" stroke="#f2eda1" stroke-width="8.955223880597016" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="26.865671641791042" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,408.955223880597,89.55223880597012)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "quad16_w4_l4_p0.4_pw0.25_pl0.4_thermalpad_startingpin(bottomside,leftpin)"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="151.61290322580652" y="129.03225806451613" width="496.77419354838713" height="341.9354838709678"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="190.32258064516134" y="245.16129032258067" width="167.74193548387098" height="180.64516129032256" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="564.5161290322582" y="245.16129032258067" width="167.74193548387098" height="180.64516129032256" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 648.3870967741937 200 L 151.61290322580652 200 L 151.61290322580652 470.9677419354839 L 648.3870967741937 470.9677419354839" fill="none" stroke="#f2eda1" stroke-width="12.903225806451614" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="38.70967741935484" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,461.29032258064524,129.03225806451613)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "smf"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="181.81818181818187" y="109.09090909090907" width="436.3636363636364" height="381.8181818181818"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="226.36363636363635" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="280.90909090909093" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="335.45454545454544" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="390" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="226.36363636363635" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="280.90909090909093" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="335.45454545454544" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="390" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 163.63636363636363 L 618.1818181818182 163.63636363636363" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 490.9090909090909 L 618.1818181818182 490.9090909090909" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 214.54545454545465 245.45454545454544 L 181.81818181818187 212.7272727272727 L 181.81818181818187 278.18181818181813 L 214.54545454545465 245.45454545454544 Z" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,454.5454545454546,109.09090909090907)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "son8"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="228.57142857142856" y="128.5714285714286" width="342.8571428571428" height="342.85714285714283"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="283.91451068616425" y="441.0573678290214" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="412.4859392575928" y="441.0573678290214" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.0573678290212" y="441.0573678290214" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="283.91451068616425" y="312.48593925759286" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.0573678290212" y="312.48593925759286" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="283.91451068616425" y="183.91451068616428" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="412.4859392575928" y="183.91451068616428" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="541.0573678290212" y="183.91451068616428" width="60.74240719910011" height="60.74240719910011" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 250 150.00000000000006 L 250 128.5714285714286 L 228.57142857142856 150.00000000000006 L 250 150.00000000000006 Z" fill="none" stroke="#f2eda1" stroke-width="6.428571428571428" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_marker"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.71428571428571" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,442.85714285714283,150.00000000000006)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "bga footprint"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="53.333333333333314" y="97.33333333333334" width="693.3333333333335" height="405.33333333333337"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 53.333333333333314 502.6666666666667 L 746.6666666666667 502.6666666666667 L 746.6666666666667 129.33333333333331 L 53.333333333333314 129.33333333333331 L 53.333333333333314 502.6666666666667 Z" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 53.333333333333314 253.77777777777777 L 746.6666666666667 253.77777777777777" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 284.44444444444446 253.77777777777777 L 284.44444444444446 129.33333333333331" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 515.5555555555555 253.77777777777777 L 515.5555555555555 129.33333333333331" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="26.666666666666668" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,97.33333333333334)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="133.33333333333331" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="133.33333333333331" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="266.66666666666663" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="266.66666666666663" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="533.3333333333334" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="533.3333333333334" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="666.6666666666667" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="666.6666666666667" cy="369.3333333333333" r="26.666666666666668"/></g></svg>',
    title: "to220_5"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="214.07563025210084" y="100.84033613445382" width="371.8487394957983" height="398.3193277310924"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="234.2436974789916" y="191.59663865546224" width="113.4453781512605" height="267.2268907563025" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="529.2016806722689" y="191.59663865546224" width="113.4453781512605" height="267.2268907563025" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 585.9243697478992 151.26050420168073 L 214.07563025210084 151.26050420168073 L 214.07563025210084 499.15966386554624 L 585.9243697478992 499.15966386554624" fill="none" stroke="#f2eda1" stroke-width="10.084033613445378" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="20.168067226890756" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,438.4453781512605,100.84033613445382)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "cap_1210"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="259.84936268829665" y="28.968713789107824" width="280.3012746234067" height="542.0625724217844"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="49.97103128621091" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="87.63035921205102" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="125.2896871378911" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="162.9490150637312" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="200.60834298957127" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="238.26767091541137" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="275.9269988412515" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="313.5863267670915" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="351.2456546929316" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="388.9049826187717" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="426.56431054461177" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="464.2236384704519" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="501.882966396292" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="237.77520278099655" y="539.5422943221321" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="539.5422943221321" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="501.8829663962921" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="464.223638470452" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="426.5643105446119" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="388.9049826187718" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="351.2456546929317" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="313.5863267670916" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="275.92699884125153" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="238.26767091541143" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="200.60834298957133" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="162.94901506373125" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="125.28968713789115" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="87.63035921205105" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="518.0764774044032" y="49.97103128621091" width="44.14831981460023" height="22.074159907300114" rx="11.037079953650057" ry="11.037079953650057" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 284.82039397450757 571.0312862108922 L 284.82039397450757 40.55619930475092 L 361.6067979915025 40.55619930475092 L 364.52930647677795 55.248641628848986 L 372.85190650832646 67.70429279642443 L 385.30755767590193 76.02689282797294 L 400 78.94940131324839 L 414.69244232409807 76.02689282797294 L 427.14809349167354 67.70429279642443 L 435.47069352322205 55.248641628848986 L 438.3932020084975 40.55619930475092 L 515.1796060254924 40.55619930475092 L 515.1796060254924 571.0312862108922 L 284.82039397450757 571.0312862108922 Z" fill="none" stroke="#f2eda1" stroke-width="2.896871378910776" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="44.206257242178445" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,28.968713789107824)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "soic28_pw0762_pl1524"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="193.9393939393939" y="121.21212121212127" width="412.1212121212121" height="357.5757575757575"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="145.45454545454544" y="317.33333333333337" width="96.96969696969697" height="92.6060606060606" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="557.5757575757575" y="432.4848484848485" width="96.96969696969697" height="92.6060606060606" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="557.5757575757575" y="202.18181818181824" width="96.96969696969697" height="92.6060606060606" data-layer="top"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="36.36363636363636" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,121.21212121212127)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot23"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="241.17647058823528" y="141.17647058823525" width="317.6470588235294" height="317.64705882352945"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="269.4117647058823" y="268.235294117647" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="502.3529411764705" y="268.235294117647" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 558.8235294117646 211.76470588235287 L 241.17647058823528 211.76470588235287 L 241.17647058823528 458.8235294117647 L 558.8235294117646 458.8235294117647" fill="none" stroke="#f2eda1" stroke-width="14.11764705882353" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="28.23529411764706" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,442.3529411764706,141.17647058823525)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "0603_bottomleft_origin"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="147.94069192751235" y="32.948929159802276" width="504.11861614497525" height="534.1021416803953"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="106.17792421746293" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="127.59472817133445" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="149.01153212520592" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="170.42833607907744" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="191.84514003294893" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="213.26194398682043" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="234.67874794069195" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="256.0955518945634" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="277.51235584843494" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="298.92915980230646" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="320.3459637561779" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="341.76276771004945" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="363.17957166392097" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="384.59637561779243" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="406.0131795716639" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="427.4299835255354" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="448.84678747940694" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="470.26359143327846" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="491.68039538714993" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="126.52388797364085" y="513.0971993410215" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="191.1861614497529" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="212.6029654036244" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="234.01976935749587" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="255.4365733113674" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="276.85337726523886" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="298.2701812191104" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="319.6869851729819" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="341.10378912685337" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="362.5205930807249" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="383.9373970345964" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="405.3542009884679" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="426.7710049423394" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="448.1878088962109" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="469.6046128500824" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="491.02141680395385" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="512.4382207578254" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="533.855024711697" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="555.2718286655685" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="576.68863261944" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="598.1054365733114" y="545.6342668863261" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="513.0971993410215" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="491.6803953871499" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="470.2635914332784" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="448.8467874794069" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="427.4299835255354" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="406.0131795716639" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="384.5963756177924" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="363.1795716639209" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="341.7627677100494" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="320.34596375617787" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="298.9291598023064" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="277.5123558484349" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="256.09555189456336" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="234.6787479406919" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="213.26194398682043" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="191.8451400329489" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="170.4283360790774" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="149.0115321252059" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="127.5947281713344" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="630.6425041186161" y="106.17792421746293" width="42.833607907742994" height="10.708401976935749" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="598.1054365733114" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="576.6886326194399" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="555.2718286655685" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="533.855024711697" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="512.4382207578254" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="491.02141680395385" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="469.60461285008233" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="448.18780889621087" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="426.77100494233935" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="405.3542009884678" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="383.93739703459636" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="362.52059308072484" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="341.1037891268533" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="319.68698517298185" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="298.2701812191104" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="276.85337726523886" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="255.43657331136734" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="234.01976935749585" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="212.60296540362435" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="191.1861614497529" y="41.515650741350896" width="10.708401976935749" height="42.833607907742994" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 190.7742998352554 84.34925864909391 L 169.35749588138387 84.34925864909391 L 169.35749588138387 105.76606260296543" fill="none" stroke="#f2eda1" stroke-width="3.2948929159802307" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 168.12191103789127 69.52224052718287 L 174.71169686985172 62.93245469522239 L 168.12191103789127 56.34266886326196 L 168.12191103789127 69.52224052718287 Z" fill="none" stroke="#f2eda1" stroke-width="3.2948929159802307" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 190.7742998352554 545.6342668863261 L 169.35749588138387 545.6342668863261 L 169.35749588138387 524.2174629324546" fill="none" stroke="#f2eda1" stroke-width="3.2948929159802307" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 609.2257001647446 545.6342668863261 L 630.6425041186161 545.6342668863261 L 630.6425041186161 524.2174629324546" fill="none" stroke="#f2eda1" stroke-width="3.2948929159802307" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 609.2257001647446 84.34925864909391 L 630.6425041186161 84.34925864909391 L 630.6425041186161 105.76606260296543" fill="none" stroke="#f2eda1" stroke-width="3.2948929159802307" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="9.884678747940692" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,32.948929159802276)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "qfp80_w14_h14_p0.65mm_startingpin(topside,leftpin)"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="216.4473684210527" width="668.4210526315787" height="167.1052631578947"/><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,65.78947368421058,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,232.8947368421053,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,400,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,567.1052631578947,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#5da9e9" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(-1,0,0,1,734.2105263157894,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-bottom" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,216.4473684210527)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="334.2105263157895" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="383.5526315789474" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_bottomsidepinlabel"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="206.1538461538462" y="92.30769230769226" width="387.69230769230774" height="415.38461538461536"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="218.07692307692304" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="278.07692307692304" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="338.07692307692304" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.61538461538467" y="398.07692307692304" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="304.2307692307693" y="477.6923076923076" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="364.2307692307693" y="477.6923076923076" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="424.2307692307693" y="477.6923076923076" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="484.2307692307693" y="477.6923076923076" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="563.8461538461539" y="398.07692307692304" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="563.8461538461539" y="338.07692307692304" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="563.8461538461539" y="278.07692307692304" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="563.8461538461539" y="218.07692307692304" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="484.2307692307693" y="138.46153846153842" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="424.2307692307693" y="138.46153846153842" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="364.2307692307693" y="138.46153846153842" width="30" height="30" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="304.2307692307693" y="138.46153846153842" width="30" height="30" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 284.61538461538464 138.46153846153842 L 254.61538461538467 138.46153846153842" fill="none" stroke="#f2eda1" stroke-width="0" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 224.61538461538467 168.46153846153842 L 224.61538461538467 198.4615384615384" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 206.1538461538462 119.99999999999994 L 224.61538461538467 138.46153846153842 L 243.07692307692312 119.99999999999994 L 206.1538461538462 119.99999999999994 Z" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 284.61538461538464 507.6923076923076 L 224.61538461538467 507.6923076923076 L 224.61538461538467 447.6923076923077" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 533.8461538461539 507.6923076923076 L 593.8461538461539 507.6923076923076 L 593.8461538461539 447.6923076923077" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 533.8461538461539 138.46153846153842 L 593.8461538461539 138.46153846153842 L 593.8461538461539 198.4615384615384" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.69230769230769" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,409.2307692307693,92.30769230769226)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "qfn16_w4_h4_p0.65mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="60.21829130598417" y="223.52277004140012" width="679.5634173880317" height="152.95445991719987"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,127.96386902521641,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,280.9183289424163,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,433.8727888596161,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,586.827248776816,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,739.7817086940158,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.109145652992098" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,366.1272111403839,223.52277004140012)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="15.05457282649602" y="331.31351147911187" width="90.32743695897629" height="90.32743695897629"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="60.21829130598417" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="213.17275122318404" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="213.17275122318404" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="366.1272111403839" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="366.1272111403839" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="519.0816710575838" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="519.0816710575838" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="672.0361309747836" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="672.0361309747836" cy="376.4772299586" r="30.109145652992098"/></g></svg>',
    title: "pinrow5_textalignleft_verticallyinverted"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="286.5482233502537" y="152.28426395939087" width="226.9035532994924" height="295.4314720812183"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="317.0050761421319" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="472.33502538071053" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 513.4517766497461 228.42639593908632 L 286.5482233502537 228.42639593908632 L 286.5482233502537 447.71573604060916 L 513.4517766497461 447.71573604060916" fill="none" stroke="#f2eda1" stroke-width="15.228426395939088" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.456852791878177" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,435.7868020304568,152.28426395939087)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "cap_imperial0402"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="179.03682719546742" y="110.48158640226629" width="441.9263456090651" height="379.03682719546737"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="278.47025495750705" y="176.7705382436261" width="110.48158640226629" height="77.3371104815864" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="278.47025495750705" y="281.7280453257791" width="110.48158640226629" height="77.3371104815864" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="278.47025495750705" y="386.68555240793205" width="110.48158640226629" height="77.3371104815864" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="565.7223796033994" y="386.68555240793205" width="110.48158640226629" height="77.3371104815864" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="565.7223796033994" y="281.7280453257791" width="110.48158640226629" height="77.3371104815864" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="565.7223796033994" y="176.7705382436261" width="110.48158640226629" height="77.3371104815864" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 372.3796033994334 151.2747875354108 L 582.2946175637393 151.2747875354108" fill="none" stroke="#f2eda1" stroke-width="5.524079320113315" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 372.3796033994334 489.5184135977337 L 582.2946175637393 489.5184135977337" fill="none" stroke="#f2eda1" stroke-width="5.524079320113315" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 256.37393767705385 215.4390934844193 L 179.03682719546742 198.86685552407937 L 179.03682719546742 232.01133144475924 L 256.37393767705385 215.4390934844193 Z" fill="none" stroke="#f2eda1" stroke-width="5.524079320113315" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_indicator"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.14447592067989" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,477.33711048158636,110.48158640226629)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot6"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="78.43137254901961" y="178.43137254901956" width="643.1372549019607" height="243.13725490196083"/><path class="pcb-trace" stroke="rgb(200, 52, 52)" fill="none" d="M 223.52941176470586 323.52941176470586 L 576.4705882352941 323.52941176470586" stroke-width="29.411764705882355" stroke-linecap="round" stroke-linejoin="round" shape-rendering="crispEdges" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="105.88235294117645" y="264.70588235294116" width="117.64705882352942" height="117.64705882352942" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="576.470588235294" y="264.70588235294116" width="117.64705882352942" height="117.64705882352942" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 78.43137254901961 421.5686274509804 L 721.5686274509803 421.5686274509804 L 721.5686274509803 225.49019607843132 L 78.43137254901961 225.49019607843132 L 78.43137254901961 421.5686274509804 Z" fill="none" stroke="#f2eda1" stroke-width="11.764705882352942" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="outline"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.372549019607845" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,178.43137254901956)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "solderjumper2bridged12p6"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="325.00000000000006" y="166.66666666666663" width="150" height="266.6666666666667"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="358.33333333333337" y="316.66666666666663" width="66.66666666666667" height="49.99999999999999" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="441.66666666666674" y="316.66666666666663" width="66.66666666666667" height="49.99999999999999" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 475.00000000000006 249.99999999999994 L 325.00000000000006 249.99999999999994 L 325.00000000000006 433.3333333333333 L 475.00000000000006 433.3333333333333" fill="none" stroke="#f2eda1" stroke-width="16.666666666666668" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.333333333333336" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,433.33333333333337,166.66666666666663)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "diode01005"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="151.61290322580646" y="129.03225806451613" width="496.7741935483872" height="341.9354838709678"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="196.77419354838713" y="258.06451612903226" width="154.83870967741936" height="154.83870967741936" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="570.967741935484" y="258.06451612903226" width="154.83870967741936" height="154.83870967741936" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 648.3870967741937 200 L 151.61290322580646 200 L 151.61290322580646 470.9677419354839 L 648.3870967741937 470.9677419354839" fill="none" stroke="#f2eda1" stroke-width="12.903225806451614" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="38.70967741935484" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,461.29032258064524,129.03225806451613)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod123w"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="158.86075949367083" y="63.29113924050637" width="482.2784810126583" height="473.4177215189874"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 237.97468354430376 536.7088607594937 L 237.97468354430376 94.93670886075952 L 345.9915611814345 94.93670886075952 L 350.1027087926393 115.6048436045281 L 361.8102666700936 133.1264421906659 L 379.33186525623137 144.83400006812016 L 399.99999999999994 148.94514767932495 L 420.6681347437685 144.83400006812016 L 438.1897333299063 133.1264421906659 L 449.8972912073606 115.6048436045281 L 454.00843881856537 94.93670886075952 L 562.0253164556962 94.93670886075952 L 562.0253164556962 536.7088607594937 L 237.97468354430376 536.7088607594937 Z" fill="none" stroke="#f2eda1" stroke-width="6.329113924050633" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.31645569620253" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,63.29113924050637)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="18.987341772151897" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,73.41772151898732,155.06329113924056)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin1}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="18.987341772151897" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,73.41772151898732,315.8227848101266)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin2}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="18.987341772151897" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,73.41772151898732,476.5822784810127)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin3}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="18.987341772151897" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,726.5822784810125,476.5822784810127)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin4}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="18.987341772151897" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,726.5822784810125,315.8227848101266)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin5}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="18.987341772151897" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,726.5822784810125,155.06329113924056)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin6}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="111.39240506329108" y="107.59493670886081" width="94.9367088607595" height="94.9367088607595"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="158.86075949367083" cy="155.06329113924056" r="31.645569620253163"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="158.86075949367083" cy="315.8227848101266" r="47.46835443037975"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="158.86075949367083" cy="315.8227848101266" r="31.645569620253163"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="158.86075949367083" cy="476.5822784810127" r="47.46835443037975"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="158.86075949367083" cy="476.5822784810127" r="31.645569620253163"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="641.1392405063291" cy="476.5822784810127" r="47.46835443037975"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="641.1392405063291" cy="476.5822784810127" r="31.645569620253163"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="641.1392405063291" cy="315.8227848101266" r="47.46835443037975"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="641.1392405063291" cy="315.8227848101266" r="31.645569620253163"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="641.1392405063291" cy="155.06329113924056" r="47.46835443037975"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="641.1392405063291" cy="155.06329113924056" r="31.645569620253163"/></g></svg>',
    title: "dip_0.1in"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="53.333333333333314" y="97.33333333333334" width="693.3333333333335" height="405.33333333333337"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 53.333333333333314 502.6666666666667 L 746.6666666666667 502.6666666666667 L 746.6666666666667 129.33333333333331 L 53.333333333333314 129.33333333333331 L 53.333333333333314 502.6666666666667 Z" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 53.333333333333314 253.77777777777777 L 746.6666666666667 253.77777777777777" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 284.44444444444446 253.77777777777777 L 284.44444444444446 129.33333333333331" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 515.5555555555555 253.77777777777777 L 515.5555555555555 129.33333333333331" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="26.666666666666668" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,97.33333333333334)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="261.3333333333333" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="261.3333333333333" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="538.6666666666667" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="538.6666666666667" cy="369.3333333333333" r="26.666666666666668"/></g></svg>',
    title: "to220_3"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="128.72340425531922" y="106.38297872340428" width="542.5531914893617" height="387.2340425531915"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.19148936170217" y="196.2765957446809" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.19148936170217" y="265.42553191489367" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.19148936170217" y="334.57446808510645" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="203.19148936170217" y="403.7234042553192" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.1702127659574" y="196.2765957446809" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.1702127659574" y="265.42553191489367" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.1702127659574" y="334.57446808510645" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.1702127659574" y="403.7234042553192" width="170.2127659574468" height="53.191489361702125" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.0212765957447 159.57446808510645 L 642.5531914893618 159.57446808510645" fill="none" stroke="#f2eda1" stroke-width="5.319148936170213" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 317.0212765957447 493.6170212765958 L 642.5531914893618 493.6170212765958" fill="none" stroke="#f2eda1" stroke-width="5.319148936170213" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 160.63829787234044 222.87234042553195 L 128.72340425531922 190.95744680851067 L 128.72340425531922 254.78723404255322 L 160.63829787234044 222.87234042553195 Z" fill="none" stroke="#f2eda1" stroke-width="5.319148936170213" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.914893617021274" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,479.7872340425532,106.38297872340428)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "vssop8"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="386.29807692307696" y="28.84615384615381" width="27.403846153846132" height="542.3076923076924"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="39.66346153846153" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="54.08653846153844" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="68.50961538461537" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="82.9326923076923" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="97.35576923076921" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="111.77884615384615" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="126.20192307692308" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="140.62499999999997" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="155.0480769230769" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="169.4711538461538" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="183.89423076923075" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="256.0096153846154" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="270.4326923076923" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="284.8557692307692" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="299.2788461538462" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="313.7019230769231" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="328.125" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="342.5480769230769" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="356.97115384615387" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="371.3942307692308" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="385.81730769230774" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="400.24038461538464" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="414.66346153846155" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="429.08653846153845" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="443.50961538461536" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="457.9326923076923" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="472.3557692307693" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="486.7788461538462" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="501.2019230769231" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="515.625" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="530.0480769230769" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="544.4711538461538" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(77, 127, 196)" x="384.8557692307692" y="558.8942307692307" width="50.48076923076923" height="10.096153846153845" data-layer="bottom"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="32.45192307692308" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="46.874999999999986" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="61.29807692307692" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="75.72115384615383" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="90.14423076923076" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="104.5673076923077" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="118.9903846153846" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="133.41346153846152" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="147.83653846153845" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="162.25961538461536" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="176.6826923076923" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="191.1057692307692" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="263.22115384615387" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="277.6442307692308" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="292.0673076923077" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="306.49038461538464" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="320.91346153846155" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="335.33653846153845" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="349.7596153846154" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="364.1826923076923" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="378.6057692307692" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="393.0288461538462" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="407.4519230769231" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="421.875" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="436.2980769230769" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="450.72115384615387" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="465.1442307692308" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="479.56730769230774" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="493.99038461538464" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="508.41346153846155" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="522.8365384615385" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="537.2596153846154" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="551.6826923076924" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="392.06730769230774" y="566.1057692307693" width="43.269230769230774" height="10.096153846153845" data-layer="top"/><rect class="pcb-cutout pcb-cutout-rect" x="-50.18942307692308" y="-16.851923076923075" width="100.37884615384615" height="33.70384615384615" fill="#FF26E2" transform="matrix(1,0,0,1,392.35865384615386,228.7326923076923)"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 394.9519230769231 37.5 L 386.29807692307696 28.84615384615381 L 386.29807692307696 46.15384615384619 L 394.9519230769231 37.5 Z" fill="none" stroke="#f2eda1" stroke-width="1.4423076923076925" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/></svg>',
    title: "m2host"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="400" y="176.47058823529412" width="0" height="247.05882352941174"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="35.294117647058826" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,176.47058823529412)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="423.52941176470586" r="158.8235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="423.52941176470586" r="105.88235294117646"/></g></svg>',
    title: "platedhole_r0.6"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="194.39716312056743" y="73.75886524822704" width="411.2056737588651" height="452.48226950354604"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="332.69503546099287" y="169.64539007092208" width="110.63829787234042" height="106.95035460992906" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="332.69503546099287" y="387.23404255319156" width="110.63829787234042" height="106.95035460992906" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="334.5390070921986" y="315.3191489361703" width="106.95035460992906" height="33.191489361702125" rx="16.595744680851062" ry="16.595744680851062" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="552.127659574468" y="315.3191489361703" width="106.95035460992906" height="33.191489361702125" rx="16.595744680851062" ry="16.595744680851062" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="550.2836879432623" y="169.64539007092208" width="110.63829787234042" height="106.95035460992906" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="550.2836879432623" y="387.23404255319156" width="110.63829787234042" height="106.95035460992906" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 398.46335697399525 137.5886524822696 L 595.1536643026004 137.5886524822696" fill="none" stroke="#f2eda1" stroke-width="3.687943262411347" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 398.46335697399525 526.2411347517731 L 595.1536643026004 526.2411347517731" fill="none" stroke="#f2eda1" stroke-width="3.687943262411347" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 268.1560283687943 223.1205673758866 L 194.39716312056743 197.30496453900716 L 194.39716312056743 248.93617021276603 L 268.1560283687943 223.1205673758866 Z" fill="none" stroke="#f2eda1" stroke-width="3.687943262411347" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_indicator"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="22.12765957446808" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,496.80851063829783,73.75886524822704)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot457_wave"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="145.80152671755724" y="45.80152671755724" width="508.39694656488547" height="508.39694656488547"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 654.1984732824427 320.6106870229008 L 653.7375411443138 305.9435885679619 L 652.3565638184964 291.3343744498648 L 650.0609913915869 276.84070056241853 L 646.8598834392069 262.51976681492704 L 642.7658732719976 248.42809139027946 L 637.7951180777137 234.62128769350272 L 631.9672351561846 221.15384487105936 L 625.3052244987956 208.07891276708028 L 617.835378018028 195.44809216521148 L 609.5871757852931 183.3112311438956 L 600.5931696865584 171.7162283487794 L 590.8888549549251 160.70884395864223 L 580.5125300871593 150.33251909087642 L 569.5051456970222 140.62820435924314 L 557.9101429019059 131.6341982605085 L 545.77328188059 123.38599602777361 L 533.1424612787213 115.91614954700594 L 520.0675291747422 109.25413888961683 L 506.60008635229883 103.42625596808787 L 492.7932826555221 98.45550077380386 L 478.7016072308745 94.3614906065946 L 464.380673483383 91.16038265421474 L 449.88699959593674 88.86481022730521 L 435.27778547783964 87.48383290148774 L 420.6106870229008 87.02290076335882 L 405.9435885679619 87.48383290148774 L 391.3343744498648 88.86481022730521 L 376.8407005624185 91.16038265421474 L 362.5197668149271 94.3614906065946 L 348.4280913902795 98.45550077380383 L 334.6212876935027 103.42625596808787 L 321.1538448710594 109.25413888961685 L 308.0789127670802 115.91614954700597 L 295.44809216521145 123.38599602777364 L 283.3112311438956 131.6341982605085 L 271.7162283487794 140.62820435924314 L 260.7088439586422 150.33251909087645 L 250.33251909087647 160.70884395864218 L 240.62820435924317 171.71622834877934 L 231.63419826050853 183.31123114389558 L 223.38599602777364 195.44809216521142 L 215.91614954700597 208.07891276708017 L 209.25413888961685 221.15384487105933 L 203.42625596808787 234.62128769350267 L 198.45550077380386 248.42809139027946 L 194.3614906065946 262.51976681492704" fill="none" stroke="#f2eda1" stroke-width="4.580152671755726" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 194.3614906065946 378.7016072308744 L 198.45550077380383 392.79328265552203 L 203.42625596808787 406.60008635229883 L 209.25413888961685 420.06752917474216 L 215.91614954700594 433.1424612787212 L 223.38599602777356 445.77328188059 L 231.63419826050844 457.91014290190594 L 240.62820435924314 469.50514569702216 L 250.33251909087642 480.51253008715935 L 260.70884395864215 490.8888549549251 L 271.7162283487794 500.59316968655844 L 283.3112311438956 509.587175785293 L 295.4480921652114 517.8353780180279 L 308.0789127670803 525.3052244987956 L 321.15384487105933 531.9672351561846 L 334.6212876935028 537.7951180777137 L 348.42809139027946 542.7658732719976 L 362.5197668149269 546.8598834392069 L 376.84070056241853 550.0609913915869 L 391.33437444986475 552.3565638184964 L 405.94358856796197 553.7375411443138 L 420.6106870229007 554.1984732824427 L 435.2777854778395 553.7375411443138 L 449.88699959593674 552.3565638184964 L 464.38067348338313 550.0609913915869 L 478.7016072308745 546.8598834392069 L 492.79328265552203 542.7658732719977 L 506.6000863522987 537.7951180777137 L 520.0675291747422 531.9672351561848 L 533.1424612787214 525.3052244987956 L 545.77328188059 517.8353780180279 L 557.9101429019058 509.5871757852931 L 569.505145697022 500.5931696865585 L 580.5125300871593 490.88885495492514 L 590.8888549549251 480.5125300871594 L 600.5931696865584 469.50514569702216 L 609.5871757852931 457.910142901906 L 617.8353780180279 445.77328188059016 L 625.3052244987955 433.1424612787215 L 631.9672351561846 420.0675291747423 L 637.7951180777137 406.60008635229883 L 642.7658732719976 392.79328265552215 L 646.8598834392069 378.70160723087463 L 650.0609913915868 364.38067348338325 L 652.3565638184964 349.8869995959368 L 653.7375411443138 335.2777854778396 L 654.1984732824427 320.61068702290083" fill="none" stroke="#f2eda1" stroke-width="4.580152671755726" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 420.6106870229008 87.02290076335882 L 420.6106870229008 554.1984732824427" fill="none" stroke="#f2eda1" stroke-width="4.580152671755726" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 145.80152671755724 206.10687022900765 L 191.60305343511453 206.10687022900765" fill="none" stroke="#f2eda1" stroke-width="4.580152671755726" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 168.70229007633588 229.00763358778627 L 168.70229007633588 183.206106870229" fill="none" stroke="#f2eda1" stroke-width="4.580152671755726" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="22.900763358778626" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,420.6106870229008,45.80152671755724)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="248.8549618320611" cy="320.6106870229008" r="45.80152671755725"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="248.8549618320611" cy="320.6106870229008" r="22.900763358778626"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="592.3664122137404" cy="320.6106870229008" r="45.80152671755725"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="592.3664122137404" cy="320.6106870229008" r="22.900763358778626"/></g></svg>',
    title: "electrolytic_d10mm_p7.5mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="129.24071082390952" y="254.4426494345719" width="541.5185783521811" height="91.11470113085622"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="71.08239095315024" y="287.39903069466885" width="116.31663974151857" height="116.31663974151857" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="612.6009693053312" y="287.39903069466885" width="116.31663974151857" height="116.31663974151857" data-layer="top"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="38.77221324717286" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,254.4426494345719)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod123"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="248.31460674157304" y="67.41573033707877" width="303.37078651685397" height="465.16853932584263"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 248.31460674157304 532.5842696629214 L 248.31460674157304 94.38202247191023" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 551.685393258427 532.5842696629214 L 551.685393258427 94.38202247191023" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 248.31460674157304 313.4831460674158 L 339.32584269662925 313.4831460674158 L 442.90310807199273 258.7078651685394" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 551.685393258427 313.4831460674158 L 460.67415730337075 313.4831460674158" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.70786516853932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,67.41573033707877)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="248.31460674157304" cy="94.38202247191023" r="50.561797752808985"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="248.31460674157304" cy="94.38202247191023" r="33.70786516853932"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="248.31460674157304" cy="532.5842696629214" r="50.561797752808985"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="248.31460674157304" cy="532.5842696629214" r="33.70786516853932"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="551.685393258427" cy="532.5842696629214" r="50.561797752808985"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="551.685393258427" cy="532.5842696629214" r="33.70786516853932"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="551.685393258427" cy="94.38202247191023" r="50.561797752808985"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="551.685393258427" cy="94.38202247191023" r="33.70786516853932"/></g></svg>',
    title: "pushbutton"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="286.5482233502537" y="152.28426395939087" width="226.9035532994924" height="295.4314720812183"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="317.0050761421319" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="472.33502538071053" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 513.4517766497461 228.42639593908632 L 286.5482233502537 228.42639593908632 L 286.5482233502537 447.71573604060916 L 513.4517766497461 447.71573604060916" fill="none" stroke="#f2eda1" stroke-width="15.228426395939088" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.456852791878177" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,435.7868020304568,152.28426395939087)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "diode"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="68.9655172413793" y="85.34482758620703" width="662.0689655172414" height="429.3103448275862"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="137.9310344827586" y="461.2068965517243" width="41.37931034482759" height="106.89655172413795" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="206.8965517241379" y="461.2068965517243" width="41.37931034482759" height="106.89655172413795" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="275.86206896551727" y="461.2068965517243" width="41.37931034482759" height="106.89655172413795" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.82758620689657" y="461.2068965517243" width="41.37931034482759" height="106.89655172413795" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="413.7931034482759" y="461.2068965517243" width="41.37931034482759" height="106.89655172413795" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="482.7586206896552" y="461.2068965517243" width="41.37931034482759" height="106.89655172413795" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="551.7241379310344" y="461.2068965517243" width="41.37931034482759" height="106.89655172413795" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="620.6896551724138" y="461.2068965517243" width="41.37931034482759" height="106.89655172413795" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="27.586206896551715" y="277.0689655172415" width="82.75862068965517" height="124.13793103448278" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="689.6551724137931" y="277.0689655172415" width="82.75862068965517" height="124.13793103448278" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="" fill="none" stroke="#f2eda1" stroke-width="6.896551724137932" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="34.48275862068966" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,85.34482758620703)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "jst.test.tsjst_sh8"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="208.9385474860335" y="134.07821229050282" width="382.12290502793303" height="331.8435754189944"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="255.86592178770948" y="294.97206703910615" width="107.26256983240224" height="120.67039106145252" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="537.4301675977654" y="294.97206703910615" width="107.26256983240224" height="120.67039106145252" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 591.0614525139665 244.6927374301676 L 208.9385474860335 244.6927374301676 L 208.9385474860335 465.9217877094972 L 591.0614525139665 465.9217877094972" fill="none" stroke="#f2eda1" stroke-width="13.40782122905028" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="40.22346368715083" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,450.27932960893855,134.07821229050282)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod323fl"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="311.62162162162167" y="162.16216216216213" width="176.75675675675677" height="275.6756756756757"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.05405405405406" y="308.10810810810807" width="74.5945945945946" height="64.86486486486487" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="451.08108108108115" y="308.10810810810807" width="74.5945945945946" height="64.86486486486487" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 488.37837837837844 243.24324324324323 L 311.62162162162167 243.24324324324323 L 311.62162162162167 437.8378378378378 L 488.37837837837844 437.8378378378378" fill="none" stroke="#f2eda1" stroke-width="16.216216216216218" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.432432432432435" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,434.8648648648649,162.16216216216213)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "diode0201"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="226.72934855607792" y="80.59100067159162" width="346.5413028878442" height="438.8179986568167"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.43384822028207" y="138.41504365345864" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.43384822028207" y="240.76561450638005" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.43384822028207" y="343.1161853593015" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.43384822028207" y="445.4667562122229" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.9751511081263" y="445.4667562122229" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.9751511081263" y="343.1161853593015" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.9751511081263" y="240.76561450638005" width="80.59100067159167" height="48.354600402955" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.9751511081263" y="138.41504365345864" width="80.59100067159167" height="48.354600402955" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 275.0839489590329 519.4089993284083 L 275.0839489590329 112.82740094022827 L 358.36131631967766 112.82740094022827 L 361.5308723870384 128.7618353301783 L 370.5570044099624 142.27039653026586 L 384.06556561005 151.29652855318983 L 400 154.46608462055065 L 415.93443438995 151.29652855318983 L 429.4429955900376 142.27039653026586 L 438.4691276129616 128.7618353301783 L 441.63868368032234 112.82740094022827 L 524.9160510409671 112.82740094022827 L 524.9160510409671 519.4089993284083 L 275.0839489590329 519.4089993284083 Z" fill="none" stroke="#f2eda1" stroke-width="8.059100067159168" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.881799865681664" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,80.59100067159162)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "soic8_w5.3mm_p1.27mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="143.4782608695652" y="86.95652173913038" width="513.0434782608695" height="426.0869565217391"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="204.3478260869565" y="143.4782608695652" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="204.3478260869565" y="221.73913043478257" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="204.3478260869565" y="299.99999999999994" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="204.3478260869565" y="378.2608695652173" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="204.3478260869565" y="456.52173913043475" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.9565217391304" y="143.4782608695652" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.9565217391304" y="221.73913043478257" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.9565217391304" y="299.99999999999994" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.9565217391304" y="378.2608695652173" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="586.9565217391304" y="456.52173913043475" width="139.13043478260872" height="43.47826086956522" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 330.4347826086956 130.4347826086956 L 600 130.4347826086956" fill="none" stroke="#f2eda1" stroke-width="4.347826086956522" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 330.4347826086956 513.0434782608695 L 600 513.0434782608695" fill="none" stroke="#f2eda1" stroke-width="4.347826086956522" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 169.56521739130432 165.21739130434779 L 143.4782608695652 139.13043478260863 L 143.4782608695652 191.3043478260869 L 169.56521739130432 165.21739130434779 Z" fill="none" stroke="#f2eda1" stroke-width="4.347826086956522" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="26.08695652173913" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,465.2173913043478,86.95652173913038)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "vssop10_h4.4mm_pl1.6mm_pw0.5mm_p0.9mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="193.9393939393939" y="121.21212121212127" width="412.1212121212121" height="357.5757575757575"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="145.45454545454544" y="317.33333333333337" width="96.96969696969697" height="92.6060606060606" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="557.5757575757575" y="432.4848484848485" width="96.96969696969697" height="92.6060606060606" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="557.5757575757575" y="202.18181818181824" width="96.96969696969697" height="92.6060606060606" data-layer="top"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="36.36363636363636" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,121.21212121212127)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot23_3"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="206.57894736842107" y="157.89473684210526" width="386.8421052631579" height="284.2105263157895"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 593.421052631579 236.84210526315786 L 206.57894736842107 236.84210526315786 L 206.57894736842107 442.10526315789474 L 593.421052631579 442.10526315789474" fill="none" stroke="#f2eda1" stroke-width="15.789473684210527" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.578947368421055" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,435.5263157894737,157.89473684210526)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="277.63157894736844" cy="339.4736842105263" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="277.63157894736844" cy="339.4736842105263" r="39.473684210526315"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="593.421052631579" cy="339.4736842105263" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="593.421052631579" cy="339.4736842105263" r="39.473684210526315"/></g></svg>',
    title: "led_hole"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="152.9411764705882" y="117.64705882352939" width="494.11764705882365" height="364.7058823529412"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 152.9411764705882 384.7058823529412 L 176.47058823529412 482.3529411764706 L 623.5294117647059 482.3529411764706 L 647.0588235294118 384.7058823529412 L 576.4705882352941 176.4705882352941 L 223.52941176470586 176.4705882352941 L 152.9411764705882 384.7058823529412 Z" fill="none" stroke="#f2eda1" stroke-width="11.764705882352942" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="58.82352941176471" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,117.64705882352939)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="250.58823529411762" cy="384.7058823529412" r="55.88235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="250.58823529411762" cy="384.7058823529412" r="42.35294117647059"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="384.7058823529412" r="55.88235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="384.7058823529412" r="42.35294117647059"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="549.4117647058824" cy="384.7058823529412" r="55.88235294117647"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="549.4117647058824" cy="384.7058823529412" r="42.35294117647059"/></g></svg>',
    title: "to92s_3"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="241.1764705882353" y="141.1764705882353" width="317.64705882352945" height="317.64705882352945"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="269.4117647058823" y="268.2352941176471" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="502.3529411764706" y="268.2352941176471" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 558.8235294117648 211.76470588235296 L 241.1764705882353 211.76470588235296 L 241.1764705882353 458.82352941176475 L 558.8235294117648 458.82352941176475" fill="none" stroke="#f2eda1" stroke-width="14.11764705882353" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="28.23529411764706" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,442.3529411764706,141.1764705882353)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "0603"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="69.26406926406935" y="109.52380952380955" width="661.4718614718614" height="380.95238095238096"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="145.45454545454555" y="230.73593073593076" width="228.57142857142856" height="173.16017316017314" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="616.4502164502164" y="230.73593073593076" width="228.57142857142856" height="173.16017316017314" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 730.7359307359308 144.1558441558442 L 69.26406926406935 144.1558441558442 L 69.26406926406935 490.4761904761905 L 730.7359307359308 490.4761904761905" fill="none" stroke="#f2eda1" stroke-width="6.926406926406926" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="20.77922077922078" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,495.2380952380953,109.52380952380955)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "smc"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="148.1481481481481" y="155.55555555555554" width="503.70370370370364" height="288.8888888888889"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="88.88888888888883" y="247.1111111111111" width="118.51851851851853" height="113.18518518518519" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="592.5925925925925" y="387.85185185185185" width="118.51851851851853" height="113.18518518518519" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="592.5925925925925" y="106.37037037037037" width="118.51851851851853" height="113.18518518518519" data-layer="top"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="44.44444444444444" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,155.55555555555554)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot23_w3_h1.5_p0.95mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="53.333333333333314" y="97.33333333333334" width="693.3333333333335" height="405.33333333333337"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 53.333333333333314 502.6666666666667 L 746.6666666666667 502.6666666666667 L 746.6666666666667 129.33333333333331 L 53.333333333333314 129.33333333333331 L 53.333333333333314 502.6666666666667 Z" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 53.333333333333314 253.77777777777777 L 746.6666666666667 253.77777777777777" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 284.44444444444446 253.77777777777777 L 284.44444444444446 129.33333333333331" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 515.5555555555555 253.77777777777777 L 515.5555555555555 129.33333333333331" fill="none" stroke="#f2eda1" stroke-width="5.333333333333334" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="26.666666666666668" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,97.33333333333334)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="261.3333333333333" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="261.3333333333333" cy="369.3333333333333" r="26.666666666666668"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="538.6666666666667" cy="369.3333333333333" r="50.666666666666664"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="538.6666666666667" cy="369.3333333333333" r="26.666666666666668"/></g></svg>',
    title: "to220_2"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="195.74468085106386" y="72.94832826747728" width="408.5106382978722" height="454.1033434650456"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="268.69300911854106" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="341.6413373860182" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="414.58966565349544" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.5379939209726" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="151.97568389057756" y="275.7446808510639" width="87.53799392097262" height="131.30699088145894" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="560.4863221884498" y="275.7446808510639" width="87.53799392097262" height="131.30699088145894" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="" fill="none" stroke="#f2eda1" stroke-width="7.29483282674772" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="36.4741641337386" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,72.94832826747728)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "jst.test.tsjst_sh"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="192.30769230769232" y="92.30769230769232" width="415.3846153846153" height="415.38461538461536"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 607.6923076923076 300 L 605.9154712084068 272.89071392352776 L 600.6153639215757 246.24527524793803 L 591.8826721369595 220.51959481648134 L 579.8668146321527 196.15384615384613 L 564.7733860604873 173.56493397511184 L 546.8606391695138 153.13936083048628 L 526.4350660248881 135.22661393951267 L 503.84615384615387 120.13318536784732 L 479.48040518351866 108.11732786304043 L 453.754724752062 99.38463607842425 L 427.1092860764723 94.08452879159319 L 400 92.30769230769232 L 372.8907139235278 94.08452879159319 L 346.24527524793797 99.38463607842425 L 320.51959481648134 108.11732786304043 L 296.1538461538462 120.13318536784732 L 273.5649339751119 135.22661393951267 L 253.13936083048628 153.13936083048623 L 235.22661393951273 173.56493397511179 L 220.13318536784735 196.15384615384613 L 208.11732786304046 220.51959481648134 L 199.3846360784243 246.2452752479379 L 194.08452879159324 272.89071392352776 L 192.30769230769232 299.99999999999994 L 192.30769230769232 507.6923076923077 L 607.6923076923076 507.6923076923077 L 607.6923076923076 300 Z" fill="none" stroke="#f2eda1" stroke-width="9.230769230769232" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="46.15384615384615" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,207.69230769230768)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="282.7692307692308" cy="417.2307692307692" r="43.84615384615385"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="282.7692307692308" cy="417.2307692307692" r="33.230769230769226"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="517.2307692307693" cy="417.2307692307692" r="43.84615384615385"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="517.2307692307693" cy="417.2307692307692" r="33.230769230769226"/></g></svg>',
    title: "to92_2"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="184.74576271186442" y="84.74576271186442" width="430.5084745762711" height="430.5084745762711"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,184.74576271186442,204.66101694915255)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,184.74576271186442,419.91525423728814)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,419.91525423728814)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,615.2542372881355,419.91525423728814)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,615.2542372881355,204.66101694915255)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.42372881355932" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,204.66101694915255)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN6}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="42.3728813559322" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,84.74576271186442)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="121.18644067796612" y="236.4406779661017" width="127.1186440677966" height="127.1186440677966"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="184.74576271186442" cy="300" r="42.3728813559322"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="184.74576271186442" cy="515.2542372881355" r="63.5593220338983"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="184.74576271186442" cy="515.2542372881355" r="42.3728813559322"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="515.2542372881355" r="63.5593220338983"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="515.2542372881355" r="42.3728813559322"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="615.2542372881355" cy="515.2542372881355" r="63.5593220338983"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="615.2542372881355" cy="515.2542372881355" r="42.3728813559322"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="615.2542372881355" cy="300" r="63.5593220338983"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="615.2542372881355" cy="300" r="42.3728813559322"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="300" r="63.5593220338983"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="300" r="42.3728813559322"/></g></svg>',
    title: "pinrow6_female_rows2_1"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="124.03100775193798" y="132.55813953488368" width="551.937984496124" height="334.88372093023247"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="161.2403100775194" y="219.37984496124025" width="161.24031007751938" height="210.85271317829455" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="595.3488372093024" y="219.37984496124025" width="161.24031007751938" height="210.85271317829455" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 675.968992248062 182.17054263565888 L 124.03100775193798 182.17054263565888 L 124.03100775193798 467.4418604651162 L 675.968992248062 467.4418604651162" fill="none" stroke="#f2eda1" stroke-width="12.4031007751938" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="37.20930232558139" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,458.91472868217056,132.55813953488368)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "minimelf"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="238.03191489361708" y="127.65957446808511" width="323.9361702127659" height="344.6808510638298"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.56382978723406" y="242.55319148936172" width="130.85106382978722" height="178.72340425531914" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="496.5425531914894" y="242.55319148936172" width="130.85106382978722" height="178.72340425531914" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 561.968085106383 191.48936170212767 L 238.03191489361708 191.48936170212767 L 238.03191489361708 472.3404255319149 L 561.968085106383 472.3404255319149" fill="none" stroke="#f2eda1" stroke-width="12.76595744680851" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.53191489361702" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,445.47872340425533,127.65957446808511)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "led_0805"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="251.85185185185185" y="74.07407407407408" width="296.2962962962963" height="451.8518518518518"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="214.8148148148148" y="237.037037037037" width="74.07407407407408" height="51.85185185185185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="214.8148148148148" y="377.77777777777777" width="74.07407407407408" height="51.85185185185185" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="511.1111111111111" y="307.4074074074074" width="74.07407407407408" height="51.85185185185185" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 285.1851851851852 140.7407407407407 L 537.0370370370371 140.7407407407407 L 537.0370370370371 237.037037037037" fill="none" stroke="#f2eda1" stroke-width="7.407407407407408" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 285.1851851851852 525.9259259259259 L 537.0370370370371 525.9259259259259 L 537.0370370370371 429.6296296296296" fill="none" stroke="#f2eda1" stroke-width="7.407407407407408" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="22.22222222222222" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,74.07407407407408)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot23w_p2_w5.1_h5.2"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="187.64044943820224" y="67.41573033707874" width="424.71910112359535" height="465.1685393258426"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="120.2247191011236" y="94.3820224719102" width="134.83146067415728" height="101.12359550561797" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="120.2247191011236" y="249.43820224719107" width="134.83146067415728" height="101.12359550561797" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="120.2247191011236" y="404.494382022472" width="134.83146067415728" height="101.12359550561797" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="544.9438202247189" y="171.91011235955065" width="134.83146067415728" height="256.1797752808988" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 275.2808988764044 67.41573033707874 L 524.7191011235955 67.41573033707874 L 524.7191011235955 150.00000000000009" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 275.2808988764044 532.5842696629213 L 524.7191011235955 532.5842696629213 L 524.7191011235955 450" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="20.224719101123593" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,300.00000000000006)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot223_4"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="99.07120743034056" y="106.81114551083587" width="601.8575851393189" height="386.3777089783282"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="178.32817337461302" y="235.60371517027863" width="242.7244582043344" height="178.32817337461302" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="579.5665634674922" y="235.60371517027863" width="242.7244582043344" height="178.32817337461302" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 700.9287925696594 156.34674922600618 L 99.07120743034056 156.34674922600618 L 99.07120743034056 493.1888544891641 L 700.9287925696594 493.1888544891641" fill="none" stroke="#f2eda1" stroke-width="9.907120743034056" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="29.72136222910217" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,500.30959752321985,106.81114551083587)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sma"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="115.51724137931035" y="103.44827586206898" width="568.9655172413794" height="393.1034482758621"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="156.89655172413796" y="212.0689655172414" width="144.82758620689654" height="217.24137931034485" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="612.0689655172415" y="212.0689655172414" width="144.82758620689654" height="217.24137931034485" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 684.4827586206898 144.8275862068966 L 115.51724137931035 144.8275862068966 L 115.51724137931035 496.55172413793105 L 684.4827586206898 496.55172413793105" fill="none" stroke="#f2eda1" stroke-width="10.344827586206897" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.03448275862069" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,456.89655172413796,103.44827586206898)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod128"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="270.31700288184436" y="86.45533141210367" width="259.3659942363113" height="427.0893371757926"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 378.38616714697406 513.5446685878962 L 378.38616714697406 129.68299711815555 L 392.79538904899135 129.68299711815555 L 393.3438074026564 132.44008236574263 L 394.9055707407309 134.77742637742463 L 397.2429147524129 136.3391897154991 L 400 136.8876080691642 L 402.7570852475871 136.3391897154991 L 405.0944292592691 134.77742637742463 L 406.6561925973436 132.44008236574263 L 407.20461095100865 129.68299711815555 L 421.61383285302594 129.68299711815555 L 421.61383285302594 513.5446685878962 L 378.38616714697406 513.5446685878962 Z" fill="none" stroke="#f2eda1" stroke-width="8.645533141210375" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="34.5821325648415" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,86.45533141210367)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="25.936599423631122" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,153.60230547550432,211.81556195965413)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin1}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="25.936599423631122" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,153.60230547550432,431.41210374639763)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin2}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="25.936599423631122" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,646.3976945244957,431.41210374639763)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin3}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="25.936599423631122" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,646.3976945244957,211.81556195965413)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin4}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="205.47550432276654" y="146.9740634005763" width="129.6829971181556" height="129.6829971181556"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="270.31700288184436" cy="211.81556195965413" r="43.22766570605187"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="270.31700288184436" cy="431.41210374639763" r="64.8414985590778"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="270.31700288184436" cy="431.41210374639763" r="43.22766570605187"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="529.6829971181556" cy="431.41210374639763" r="64.8414985590778"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="529.6829971181556" cy="431.41210374639763" r="43.22766570605187"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="529.6829971181556" cy="211.81556195965413" r="64.8414985590778"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="529.6829971181556" cy="211.81556195965413" r="43.22766570605187"/></g></svg>',
    title: "dip4_w3.00mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="241.58004158004164" y="62.370062370062385" width="316.8399168399168" height="475.2598752598753"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.71101871101871" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,241.58004158004164,150.62370062370064)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.71101871101871" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400.00000000000006,150.62370062370064)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.71101871101871" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,558.4199584199584,150.62370062370064)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.71101871101871" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,241.58004158004164,309.04365904365903)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.71101871101871" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400.00000000000006,309.04365904365903)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.71101871101871" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,558.4199584199584,309.04365904365903)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN6}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.71101871101871" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,241.58004158004164,467.4636174636174)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN7}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.71101871101871" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400.00000000000006,467.4636174636174)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN8}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.71101871101871" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,558.4199584199584,467.4636174636174)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN9}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.185031185031182" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400.00000000000006,62.370062370062385)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="194.80249480249486" y="174.01247401247403" width="93.55509355509355" height="93.55509355509355"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="241.58004158004164" cy="220.7900207900208" r="31.185031185031182"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400.00000000000006" cy="220.7900207900208" r="46.777546777546775"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400.00000000000006" cy="220.7900207900208" r="31.185031185031182"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="558.4199584199584" cy="220.7900207900208" r="46.777546777546775"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="558.4199584199584" cy="220.7900207900208" r="31.185031185031182"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="241.58004158004164" cy="379.2099792099792" r="46.777546777546775"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="241.58004158004164" cy="379.2099792099792" r="31.185031185031182"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400.00000000000006" cy="379.2099792099792" r="46.777546777546775"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400.00000000000006" cy="379.2099792099792" r="31.185031185031182"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="558.4199584199584" cy="379.2099792099792" r="46.777546777546775"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="558.4199584199584" cy="379.2099792099792" r="31.185031185031182"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="241.58004158004164" cy="537.6299376299377" r="46.777546777546775"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="241.58004158004164" cy="537.6299376299377" r="31.185031185031182"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400.00000000000006" cy="537.6299376299377" r="46.777546777546775"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400.00000000000006" cy="537.6299376299377" r="31.185031185031182"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="558.4199584199584" cy="537.6299376299377" r="46.777546777546775"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="558.4199584199584" cy="537.6299376299377" r="31.185031185031182"/></g></svg>',
    title: "pinrow9_male_rows3_1"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="244.07894736842107" y="157.89473684210532" width="311.8421052631579" height="284.2105263157895"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="295.39473684210526" y="300.00000000000006" width="78.94736842105263" height="94.73684210526315" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="516.4473684210526" y="300.00000000000006" width="78.94736842105263" height="94.73684210526315" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 555.921052631579 252.63157894736847 L 244.07894736842107 252.63157894736847 L 244.07894736842107 442.1052631578948 L 555.921052631579 442.1052631578948" fill="none" stroke="#f2eda1" stroke-width="15.789473684210527" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="47.368421052631575" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,445.39473684210526,157.89473684210532)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod523"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="241.1764705882353" y="141.1764705882353" width="317.64705882352945" height="317.64705882352945"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="269.4117647058823" y="268.2352941176471" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="502.3529411764706" y="268.2352941176471" width="112.94117647058825" height="134.11764705882354" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 558.8235294117648 211.76470588235296 L 241.1764705882353 211.76470588235296 L 241.1764705882353 458.82352941176475 L 558.8235294117648 458.82352941176475" fill="none" stroke="#f2eda1" stroke-width="14.11764705882353" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="28.23529411764706" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,442.3529411764706,141.1764705882353)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "diode0603"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="222.62996941896017" y="122.32415902140673" width="354.74006116207954" height="355.35168195718654"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="161.4678899082568" y="210.09174311926606" width="122.32415902140674" height="73.39449541284404" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="161.4678899082568" y="365.4434250764526" width="122.32415902140674" height="73.39449541284404" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="516.2079510703363" y="365.4434250764526" width="122.32415902140674" height="73.39449541284404" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="516.2079510703363" y="210.09174311926606" width="122.32415902140674" height="73.39449541284404" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 296.0244648318042 477.67584097859327 L 296.0244648318042 171.25382262996942 L 365.341488277268 171.25382262996942 L 367.97971039206544 184.51706085669016 L 375.49273133502277 195.76109129494657 L 386.73676177327917 203.27411223790392 L 399.99999999999994 205.91233435270132 L 413.2632382267207 203.27411223790392 L 424.5072686649771 195.76109129494657 L 432.02028960793444 184.51706085669016 L 434.6585117227319 171.25382262996942 L 503.9755351681957 171.25382262996942 L 503.9755351681957 477.67584097859327 L 296.0244648318042 477.67584097859327 Z" fill="none" stroke="#f2eda1" stroke-width="12.232415902140675" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="25.535168195718658" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,399.99999999999994,122.32415902140673)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "ssop"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="283.6048879837067" y="30.54989816700612" width="232.7902240325866" height="538.9002036659876"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 321.79226069246437 569.4501018329938 L 321.79226069246437 45.82484725050921 L 373.93075356415477 45.82484725050921 L 375.9151567899298 55.80111595574982 L 381.56625906479064 64.25858818571857 L 390.0237312947594 69.90969046057938 L 400 71.89409368635441 L 409.9762687052406 69.90969046057938 L 418.4337409352094 64.25858818571857 L 424.0848432100702 55.80111595574982 L 426.06924643584523 45.82484725050921 L 478.20773930753563 45.82484725050921 L 478.20773930753563 569.4501018329938 L 321.79226069246437 569.4501018329938 Z" fill="none" stroke="#f2eda1" stroke-width="3.054989816700611" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="12.219959266802444" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,30.54989816700612)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,242.36252545824848,74.84725050916498)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin1}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,242.36252545824848,152.4439918533605)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin2}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,242.36252545824848,230.04073319755602)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin3}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,242.36252545824848,307.63747454175154)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin4}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,242.36252545824848,385.23421588594704)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin5}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,242.36252545824848,462.83095723014253)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin6}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,242.36252545824848,540.4276985743381)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin7}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,557.6374745417515,540.4276985743381)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin8}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,557.6374745417515,462.8309572301426)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin9}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,557.6374745417515,385.23421588594704)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin10}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,557.6374745417515,307.63747454175154)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin11}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,557.6374745417515,230.04073319755602)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin12}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,557.6374745417515,152.44399185336053)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin13}</text><text x="0" y="0" font-family="Arial, sans-serif" font-size="9.164969450101832" text-anchor="middle" dominant-baseline="central" transform="matrix(0.9998476951563913,0.01745240643728351,-0.01745240643728351,0.9998476951563913,557.6374745417515,74.84725050916498)" class="pcb-fabrication-note-text" fill="rgba(255,255,255,0.5)">{pin14}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="260.6924643584521" y="51.9348268839104" width="45.824847250509166" height="45.824847250509166"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="283.6048879837067" cy="74.84725050916498" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="283.6048879837067" cy="152.4439918533605" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="283.6048879837067" cy="152.4439918533605" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="283.6048879837067" cy="230.04073319755602" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="283.6048879837067" cy="230.04073319755602" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="283.6048879837067" cy="307.63747454175154" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="283.6048879837067" cy="307.63747454175154" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="283.6048879837067" cy="385.23421588594704" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="283.6048879837067" cy="385.23421588594704" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="283.6048879837067" cy="462.83095723014253" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="283.6048879837067" cy="462.83095723014253" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="283.6048879837067" cy="540.4276985743381" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="283.6048879837067" cy="540.4276985743381" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="516.3951120162933" cy="540.4276985743381" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="516.3951120162933" cy="540.4276985743381" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="516.3951120162933" cy="462.8309572301426" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="516.3951120162933" cy="462.8309572301426" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="516.3951120162933" cy="385.23421588594704" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="516.3951120162933" cy="385.23421588594704" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="516.3951120162933" cy="307.63747454175154" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="516.3951120162933" cy="307.63747454175154" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="516.3951120162933" cy="230.04073319755602" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="516.3951120162933" cy="230.04073319755602" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="516.3951120162933" cy="152.44399185336053" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="516.3951120162933" cy="152.44399185336053" r="15.274949083503055"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="516.3951120162933" cy="74.84725050916498" r="22.912423625254583"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="516.3951120162933" cy="74.84725050916498" r="15.274949083503055"/></g></svg>',
    title: "dip14_w7.62mm_p2.54mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="263.6893203883495" y="10.485436893203882" width="272.621359223301" height="579.0291262135922"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="45.005825242718466" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="71.63883495145633" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="98.27184466019422" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="124.90485436893208" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="151.53786407766992" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="178.17087378640778" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="204.80388349514567" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="231.43689320388353" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="258.0699029126214" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="284.70291262135925" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="311.3359223300971" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="337.968932038835" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="364.6019417475729" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="391.23495145631074" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="417.8679611650486" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="444.50097087378646" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="471.1339805825243" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="497.7669902912622" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="524.4000000000001" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="551.033009708738" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="369.17281553398055" y="539.1844660194175" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="395.8058252427184" y="539.1844660194175" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="422.4388349514563" y="539.1844660194175" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="551.033009708738" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="524.4000000000001" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="497.7669902912622" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="471.1339805825243" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="444.50097087378646" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="417.8679611650486" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="391.2349514563107" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="364.6019417475728" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="337.96893203883496" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="311.3359223300971" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="284.70291262135925" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="258.06990291262133" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="231.4368932038835" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="204.8038834951456" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="178.17087378640775" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="151.5378640776699" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="124.90485436893205" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="98.27184466019419" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="71.63883495145633" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="45.005825242718466" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="409.12233009708734" y="40.07766990291266" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="382.4893203883495" y="40.07766990291266" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 282.9126213592233 28.893203883495175 L 525.4757281553398 28.893203883495175 L 525.4757281553398 583.9223300970874 L 282.9126213592233 583.9223300970874 L 282.9126213592233 28.893203883495175 Z" fill="none" stroke="#f2eda1" stroke-width="1.0485436893203886" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 282.5631067961165 53.394174757281576 L 272.0776699029126 50.2485436893204 L 272.0776699029126 56.53980582524275 L 282.5631067961165 53.394174757281576 Z" fill="none" stroke="#f2eda1" stroke-width="1.0485436893203886" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="1" data-pcb-silkscreen-path-id="1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,53.394174757281576)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin1</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,80.02718446601943)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin2</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,106.66019417475732)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin3</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,133.29320388349518)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin4</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,159.92621359223304)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin5</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,186.5592233009709)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin6</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,213.1922330097088)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin7</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,239.82524271844665)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin8</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,266.4582524271845)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin9</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,293.09126213592236)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin10</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,319.7242718446602)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin11</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,346.35728155339814)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin12</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,372.990291262136)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin13</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,399.62330097087386)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin14</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,426.2563106796117)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin15</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,452.8893203883496)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin16</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,479.52233009708743)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin17</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,506.1553398058253)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin18</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,532.7883495145632)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin19</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,559.421359223301)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin20</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,377.56116504854367,589.5145631067961)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin21</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,404.19417475728153,589.5145631067961)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin22</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,430.8271844660194,589.5145631067961)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin23</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,559.421359223301)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin24</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,532.7883495145632)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin25</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,506.1553398058253)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin26</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,479.52233009708743)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin27</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,452.8893203883496)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin28</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,426.2563106796117)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin29</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,399.6233009708738)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin30</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,372.99029126213594)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin31</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,346.3572815533981)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin32</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,319.7242718446602)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin33</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,293.09126213592236)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin34</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,266.45825242718445)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin35</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,239.82524271844662)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin36</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,213.19223300970873)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin37</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,186.55922330097087)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin38</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,159.926213592233)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin39</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,133.29320388349515)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin40</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,106.6601941747573)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin41</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,80.02718446601943)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin42</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,53.394174757281576)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin43</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,417.51067961165046,23.30097087378647)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin44</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,390.8776699029126,23.30097087378647)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin45</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="21.306407766990294" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,404.19417475728153,10.485436893203882)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="53.394174757281576" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="53.394174757281576" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="80.02718446601943" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="80.02718446601943" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="106.66019417475732" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="106.66019417475732" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="133.29320388349518" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="133.29320388349518" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="159.92621359223304" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="159.92621359223304" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="186.5592233009709" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="186.5592233009709" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="213.1922330097088" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="213.1922330097088" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="239.82524271844665" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="239.82524271844665" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="266.4582524271845" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="266.4582524271845" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="293.09126213592236" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="293.09126213592236" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="319.7242718446602" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="319.7242718446602" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="346.35728155339814" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="346.35728155339814" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="372.990291262136" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="372.990291262136" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="399.62330097087386" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="399.62330097087386" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="426.2563106796117" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="426.2563106796117" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="452.8893203883496" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="452.8893203883496" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="479.52233009708743" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="479.52233009708743" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="506.1553398058253" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="506.1553398058253" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="532.7883495145632" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="532.7883495145632" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="310.97864077669897" cy="559.421359223301" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="310.97864077669897" cy="559.421359223301" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="377.56116504854367" cy="555.8563106796116" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="377.56116504854367" cy="555.8563106796116" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="404.19417475728153" cy="555.8563106796116" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="404.19417475728153" cy="555.8563106796116" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="430.8271844660194" cy="555.8563106796116" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="430.8271844660194" cy="555.8563106796116" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="559.421359223301" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="559.421359223301" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="532.7883495145632" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="532.7883495145632" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="506.1553398058253" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="506.1553398058253" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="479.52233009708743" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="479.52233009708743" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="452.8893203883496" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="452.8893203883496" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="426.2563106796117" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="426.2563106796117" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="399.6233009708738" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="399.6233009708738" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="372.99029126213594" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="372.99029126213594" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="346.3572815533981" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="346.3572815533981" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="319.7242718446602" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="319.7242718446602" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="293.09126213592236" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="293.09126213592236" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="266.45825242718445" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="266.45825242718445" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="239.82524271844662" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="239.82524271844662" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="213.19223300970873" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="213.19223300970873" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="186.55922330097087" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="186.55922330097087" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="159.926213592233" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="159.926213592233" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="133.29320388349515" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="133.29320388349515" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="106.6601941747573" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="106.6601941747573" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="80.02718446601943" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="80.02718446601943" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="497.4097087378641" cy="53.394174757281576" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="497.4097087378641" cy="53.394174757281576" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="417.51067961165046" cy="56.959223300970905" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="417.51067961165046" cy="56.959223300970905" r="5.242718446601942"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="390.8776699029126" cy="56.959223300970905" r="6.29126213592233"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="390.8776699029126" cy="56.959223300970905" r="5.242718446601942"/></g></svg>',
    title: "stampreceiver_left20_right20_bottom3_top2_w21mm_p2.54mm_innerhole"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="268.69300911854106" y="72.94832826747728" width="262.61398176291783" height="454.1033434650456"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="341.6413373860182" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="414.58966565349544" y="470.51671732522806" width="43.76899696048631" height="113.06990881458965" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="224.92401215805475" y="275.7446808510639" width="87.53799392097262" height="131.30699088145894" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="487.53799392097255" y="275.7446808510639" width="87.53799392097262" height="131.30699088145894" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="" fill="none" stroke="#f2eda1" stroke-width="7.29483282674772" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="36.4741641337386" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,72.94832826747728)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "jst.test.tsjst_sh2"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="286.5482233502537" y="152.28426395939087" width="226.9035532994924" height="295.4314720812183"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="317.0050761421319" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="472.33502538071053" y="289.34010152284264" width="82.23350253807108" height="97.46192893401016" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 513.4517766497461 228.42639593908632 L 286.5482233502537 228.42639593908632 L 286.5482233502537 447.71573604060916 L 513.4517766497461 447.71573604060916" fill="none" stroke="#f2eda1" stroke-width="15.228426395939088" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.456852791878177" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,435.7868020304568,152.28426395939087)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "led_0402"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="101.2658227848101" y="106.07594936708861" width="597.4683544303798" height="387.84810126582283"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="178.48101265822785" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="244.30379746835445" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="310.126582278481" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="375.9493670886076" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="179.74683544303792" y="441.77215189873414" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="178.48101265822785" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="244.30379746835445" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="310.126582278481" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="375.9493670886076" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="625.3164556962025" y="441.77215189873414" width="146.83544303797467" height="30.379746835443036" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 318.98734177215186 156.70886075949366 L 632.9113924050632 156.70886075949366" fill="none" stroke="#f2eda1" stroke-width="5.063291139240507" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 318.98734177215186 493.9240506329114 L 632.9113924050632 493.9240506329114" fill="none" stroke="#f2eda1" stroke-width="5.063291139240507" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 131.64556962025313 193.67088607594937 L 101.2658227848101 163.2911392405063 L 101.2658227848101 224.0506329113924 L 131.64556962025313 193.67088607594937 Z" fill="none" stroke="#f2eda1" stroke-width="5.063291139240507" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.379746835443036" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,475.9493670886076,106.07594936708861)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "vssop10_p0.65mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="293.7728937728938" y="146.52014652014648" width="212.45421245421244" height="306.959706959707"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="337.7289377289377" y="304.76190476190476" width="73.26007326007326" height="102.56410256410255" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="454.94505494505495" y="304.76190476190476" width="73.26007326007326" height="102.56410256410255" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 506.2271062271062 258.6080586080586 L 293.7728937728938 258.6080586080586 L 293.7728937728938 453.47985347985343 L 506.2271062271062 453.47985347985343" fill="none" stroke="#f2eda1" stroke-width="14.652014652014651" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="43.95604395604395" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,432.96703296703294,146.52014652014648)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sod882d"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="263.6893203883495" y="10.485436893203882" width="272.621359223301" height="579.0291262135922"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="45.005825242718466" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="71.63883495145633" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="98.27184466019422" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="124.90485436893208" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="151.53786407766992" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="178.17087378640778" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="204.80388349514567" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="231.43689320388353" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="258.0699029126214" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="284.70291262135925" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="311.3359223300971" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="337.968932038835" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="364.6019417475729" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="391.23495145631074" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="417.8679611650486" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="444.50097087378646" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="471.1339805825243" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="497.7669902912622" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="524.4000000000001" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="294.0970873786407" y="551.033009708738" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="369.17281553398055" y="539.1844660194175" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="395.8058252427184" y="539.1844660194175" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="422.4388349514563" y="539.1844660194175" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="551.033009708738" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="524.4000000000001" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="497.7669902912622" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="471.1339805825243" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="444.50097087378646" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="417.8679611650486" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="391.2349514563107" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="364.6019417475728" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="337.96893203883496" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="311.3359223300971" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="284.70291262135925" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="258.06990291262133" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="231.4368932038835" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="204.8038834951456" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="178.17087378640775" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="151.5378640776699" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="124.90485436893205" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="98.27184466019419" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="71.63883495145633" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="480.7378640776699" y="45.005825242718466" width="33.553398058252434" height="16.776699029126217" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="409.12233009708734" y="40.07766990291266" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="382.4893203883495" y="40.07766990291266" width="16.776699029126217" height="33.553398058252434" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 282.9126213592233 28.893203883495175 L 525.4757281553398 28.893203883495175 L 525.4757281553398 583.9223300970874 L 282.9126213592233 583.9223300970874 L 282.9126213592233 28.893203883495175 Z" fill="none" stroke="#f2eda1" stroke-width="1.0485436893203886" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 282.5631067961165 53.394174757281576 L 272.0776699029126 50.2485436893204 L 272.0776699029126 56.53980582524275 L 282.5631067961165 53.394174757281576 Z" fill="none" stroke="#f2eda1" stroke-width="1.0485436893203886" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="1" data-pcb-silkscreen-path-id="1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,53.394174757281576)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin1</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,80.02718446601943)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin2</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,106.66019417475732)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin3</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,133.29320388349518)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin4</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,159.92621359223304)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin5</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,186.5592233009709)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin6</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,213.1922330097088)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin7</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,239.82524271844665)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin8</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,266.4582524271845)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin9</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,293.09126213592236)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin10</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,319.7242718446602)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin11</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,346.35728155339814)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin12</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,372.990291262136)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin13</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,399.62330097087386)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin14</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,426.2563106796117)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin15</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,452.8893203883496)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin16</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,479.52233009708743)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin17</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,506.1553398058253)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin18</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,532.7883495145632)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin19</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,263.6893203883495,559.421359223301)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin20</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,377.56116504854367,589.5145631067961)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin21</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,404.19417475728153,589.5145631067961)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin22</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,430.8271844660194,589.5145631067961)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin23</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,559.421359223301)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin24</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,532.7883495145632)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin25</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,506.1553398058253)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin26</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,479.52233009708743)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin27</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,452.8893203883496)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin28</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,426.2563106796117)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin29</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,399.6233009708738)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin30</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,372.99029126213594)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin31</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,346.3572815533981)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin32</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,319.7242718446602)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin33</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,293.09126213592236)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin34</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,266.45825242718445)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin35</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,239.82524271844662)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin36</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,213.19223300970873)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin37</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,186.55922330097087)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin38</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,159.926213592233)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin39</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,133.29320388349515)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin40</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,106.6601941747573)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin41</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,80.02718446601943)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin42</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,536.3106796116505,53.394174757281576)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin43</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,417.51067961165046,23.30097087378647)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin44</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="7.339805825242719" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,390.8776699029126,23.30097087378647)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="1" stroke="none">pin45</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="21.306407766990294" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,404.19417475728153,10.485436893203882)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "stampreceiver_left20_right20_bottom3_top2_w21mm_p2.54mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="159.99999999999997" y="35.55555555555554" width="480" height="528.8888888888889"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="179.55555555555554" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="202.66666666666666" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="225.77777777777777" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="248.88888888888886" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="272" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="295.1111111111111" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="318.22222222222223" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="341.3333333333333" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="364.44444444444446" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="387.5555555555556" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="410.6666666666667" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="433.77777777777777" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="127.11111111111109" y="456.8888888888889" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="255.1111111111111" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="278.22222222222223" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="301.3333333333333" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="324.4444444444444" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="347.55555555555554" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="370.66666666666663" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="393.77777777777777" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="416.88888888888886" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="440" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="463.11111111111114" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="486.22222222222223" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="509.3333333333333" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.4444444444443" y="524.4444444444445" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="456.8888888888889" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="433.77777777777777" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="410.6666666666667" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="387.5555555555556" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="364.44444444444446" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="341.33333333333337" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="318.22222222222223" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="295.11111111111114" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="272" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="248.88888888888886" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="225.77777777777777" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="202.66666666666669" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="600" y="179.55555555555554" width="80" height="19.555555555555557" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="532.4444444444443" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="509.3333333333333" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="486.22222222222223" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="463.11111111111114" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="440" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="416.8888888888889" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="393.77777777777777" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="370.6666666666667" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="347.55555555555554" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="324.4444444444444" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="301.3333333333333" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="278.22222222222223" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="255.1111111111111" y="51.55555555555554" width="19.555555555555557" height="80" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 246.22222222222217 131.55555555555554 L 207.1111111111111 131.55555555555554 L 207.1111111111111 170.66666666666663" fill="none" stroke="#f2eda1" stroke-width="3.555555555555556" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 159.99999999999997 134.2222222222222 L 167.1111111111111 141.33333333333331 L 174.2222222222222 134.2222222222222 L 159.99999999999997 134.2222222222222 Z" fill="none" stroke="#f2eda1" stroke-width="3.555555555555556" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 246.22222222222217 524.4444444444445 L 207.1111111111111 524.4444444444445 L 207.1111111111111 485.33333333333337" fill="none" stroke="#f2eda1" stroke-width="3.555555555555556" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 560.8888888888889 524.4444444444445 L 600 524.4444444444445 L 600 485.33333333333337" fill="none" stroke="#f2eda1" stroke-width="3.555555555555556" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 560.8888888888889 131.55555555555554 L 600 131.55555555555554 L 600 170.66666666666663" fill="none" stroke="#f2eda1" stroke-width="3.555555555555556" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="10.666666666666666" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,403.55555555555554,35.55555555555554)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "qfp52"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="247.94520547945203" y="82.19178082191777" width="304.1095890410959" height="435.6164383561645"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.30136986301366" y="415.06849315068496" width="123.28767123287673" height="57.534246575342465" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="186.30136986301366" y="168.49315068493146" width="123.28767123287673" height="57.534246575342465" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="367.1232876712329" y="238.35616438356163" width="65.75342465753425" height="164.38356164383563" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="490.4109589041096" y="415.06849315068496" width="123.28767123287673" height="57.534246575342465" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="490.4109589041096" y="168.49315068493146" width="123.28767123287673" height="57.534246575342465" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 284.93150684931504 123.28767123287668 L 515.068493150685 123.28767123287668" fill="none" stroke="#f2eda1" stroke-width="8.219178082191782" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 284.93150684931504 517.8082191780823 L 515.068493150685 517.8082191780823" fill="none" stroke="#f2eda1" stroke-width="8.219178082191782" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="24.657534246575345" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,82.19178082191777)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot89_5"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="149.48453608247414" y="30.927835051546367" width="501.03092783505156" height="538.1443298969073"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="143.8144329896907" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="174.7422680412371" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="205.67010309278348" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="236.5979381443299" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="267.52577319587624" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="298.45360824742266" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="329.38144329896903" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="360.30927835051546" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="391.2371134020618" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="422.16494845360825" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="453.0927835051546" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="124.742268041237" y="484.02061855670104" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="225.25773195876278" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="256.18556701030917" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="287.11340206185554" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="318.04123711340196" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="348.96907216494833" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="379.89690721649475" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="410.8247422680411" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="441.75257731958754" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="472.6804123711339" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.60824742268034" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="534.5360824742266" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="565.4639175257731" y="538.1443298969073" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="484.02061855670104" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="453.0927835051546" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="422.16494845360825" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="391.2371134020618" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="360.30927835051546" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="329.38144329896903" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="298.45360824742266" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="267.52577319587624" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="236.5979381443299" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="205.67010309278348" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="174.7422680412371" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="619.5876288659794" y="143.8144329896907" width="61.85567010309279" height="15.463917525773198" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="565.4639175257731" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="534.5360824742266" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="503.60824742268034" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="472.6804123711339" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="441.75257731958754" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="410.8247422680411" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="379.89690721649475" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="348.96907216494833" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="318.04123711340196" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="287.11340206185554" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="256.18556701030917" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="225.25773195876278" y="43.29896907216491" width="15.463917525773198" height="61.85567010309279" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 217.52577319587618 105.1546391752577 L 186.5979381443298 105.1546391752577 L 186.5979381443298 136.0824742268041" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 149.48453608247414 106.701030927835 L 155.6701030927834 112.88659793814429 L 161.85567010309268 106.701030927835 L 149.48453608247414 106.701030927835 Z" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-left_3"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 217.52577319587618 538.1443298969073 L 186.5979381443298 538.1443298969073 L 186.5979381443298 507.21649484536084" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-left"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 588.659793814433 538.1443298969073 L 619.5876288659794 538.1443298969073 L 619.5876288659794 507.21649484536084" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_bottom-right"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 588.659793814433 105.1546391752577 L 619.5876288659794 105.1546391752577 L 619.5876288659794 136.0824742268041" fill="none" stroke="#f2eda1" stroke-width="3.0927835051546397" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pcb_silkscreen_path_top-right"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="9.278350515463918" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,403.09278350515456,30.927835051546367)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "qfp48_w14_p1mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="174.44029850746267" y="89.55223880597012" width="451.11940298507466" height="420.8955223880597"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="192.35074626865674" y="170.14925373134326" width="100.74626865671641" height="304.4776119402985" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="575.1865671641791" y="170.14925373134326" width="100.74626865671641" height="304.4776119402985" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 625.5597014925373 134.3283582089552 L 174.44029850746267 134.3283582089552 L 174.44029850746267 510.44776119402985 L 625.5597014925373 510.44776119402985" fill="none" stroke="#f2eda1" stroke-width="8.955223880597016" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="17.910447761194032" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,434.14179104477614,89.55223880597012)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "cap_1812"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="187.6404494382022" y="67.41573033707874" width="424.7191011235954" height="465.1685393258426"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="113.4831460674157" y="114.60674157303379" width="148.31460674157302" height="67.41573033707864" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="113.4831460674157" y="215.73033707865176" width="148.31460674157302" height="67.41573033707864" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="113.4831460674157" y="316.8539325842697" width="148.31460674157302" height="67.41573033707864" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="113.4831460674157" y="417.97752808988764" width="148.31460674157302" height="67.41573033707864" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="551.6853932584269" y="185.39325842696638" width="121.34831460674155" height="229.21348314606738" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 268.5393258426966 67.41573033707874 L 517.9775280898875 67.41573033707874 L 517.9775280898875 150.00000000000009" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 268.5393258426966 532.5842696629213 L 517.9775280898875 532.5842696629213 L 517.9775280898875 450" fill="none" stroke="#f2eda1" stroke-width="6.741573033707865" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_2"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="20.224719101123593" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,393.25842696629206,300.00000000000006)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "sot223_5"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="221.94616977225672" y="82.81573498964804" width="356.1076604554865" height="434.36853002070393"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="180.5383022774327" y="142.2360248447205" width="82.81573498964804" height="33.126293995859214" rx="16.563146997929607" ry="16.563146997929607" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="180.5383022774327" y="247.4120082815735" width="82.81573498964804" height="33.126293995859214" rx="16.563146997929607" ry="16.563146997929607" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="180.5383022774327" y="352.5879917184265" width="82.81573498964804" height="33.126293995859214" rx="16.563146997929607" ry="16.563146997929607" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="180.5383022774327" y="457.76397515527947" width="82.81573498964804" height="33.126293995859214" rx="16.563146997929607" ry="16.563146997929607" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="536.6459627329192" y="457.76397515527947" width="82.81573498964804" height="33.126293995859214" rx="16.563146997929607" ry="16.563146997929607" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="536.6459627329192" y="352.5879917184265" width="82.81573498964804" height="33.126293995859214" rx="16.563146997929607" ry="16.563146997929607" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="536.6459627329192" y="247.4120082815735" width="82.81573498964804" height="33.126293995859214" rx="16.563146997929607" ry="16.563146997929607" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="536.6459627329192" y="142.2360248447205" width="82.81573498964804" height="33.126293995859214" rx="16.563146997929607" ry="16.563146997929607" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 271.6356107660456 517.184265010352 L 271.6356107660456 115.94202898550725 L 357.2118702553485 115.94202898550725 L 360.4689226944791 132.31633734067327 L 369.7442233032671 146.19780568224013 L 383.625691644834 155.47310629102813 L 400 158.73015873015873 L 416.374308355166 155.47310629102813 L 430.2557766967329 146.19780568224013 L 439.5310773055209 132.31633734067327 L 442.7881297446515 115.94202898550725 L 528.3643892339544 115.94202898550725 L 528.3643892339544 517.184265010352 L 271.6356107660456 517.184265010352 Z" fill="none" stroke="#f2eda1" stroke-width="8.281573498964804" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="silkscreen_path_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="33.43685300207039" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,82.81573498964804)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "soic8_pw04_pl1_pillpads"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="181.33436174315466" y="20.82529888160434" width="437.3312765136907" height="558.3494022367913"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="536.0663324334747" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="483.1700732741998" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="430.27381411492485" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="377.3775549556498" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="324.48129579637487" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="271.58503663709996" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="218.6887774778249" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="165.79251831854992" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="112.896259159275" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="568.684920940995" y="60.00000000000004" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="536.0663324334747" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="483.1700732741998" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="430.27381411492485" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="377.3775549556498" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="324.48129579637487" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="271.58503663709996" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="218.6887774778249" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="165.79251831854992" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="112.896259159275" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="181.33436174315463" y="60.00000000000004" width="49.98071731585036" height="33.32047821056691" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="303.9953721558041" y="529.1939838025453" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="356.89163131507905" y="529.1939838025453" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="409.78789047435407" y="529.1939838025453" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="462.68414963362903" y="529.1939838025453" width="33.32047821056691" height="49.98071731585036" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 181.33436174315466 50.21210952564604 L 618.6656382568453 50.21210952564604 L 618.6656382568453 579.1747011183957 L 181.33436174315466 579.1747011183957 L 181.33436174315466 50.21210952564604 Z" fill="none" stroke="#f2eda1" stroke-width="2.082529888160432" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_1"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 240.894716544543 76.6602391052835 L 261.7200154261473 70.4126494408022 L 261.7200154261473 82.90782876976482 L 240.894716544543 76.6602391052835 Z" fill="none" stroke="#f2eda1" stroke-width="2.082529888160432" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="2" data-pcb-silkscreen-path-id="pcb_silkscreen_triangle_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="21.158503663709986" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,20.82529888160434)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "stampboard_left10_right10_bottom4_top0_w21mm_p2.54mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="60.21829130598417" y="223.52277004140012" width="679.5634173880317" height="152.95445991719987"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(1,0,0,1,60.21829130598417,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(1,0,0,1,213.172751223184,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(1,0,0,1,366.1272111403839,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(1,0,0,1,519.0816710575838,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="18.06548739179526" text-anchor="end" dominant-baseline="central" transform="matrix(1,0,0,1,672.0361309747836,376.4772299586)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="30.109145652992098" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,433.8727888596161,223.52277004140012)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="82.8001505457282" y="331.31351147911187" width="90.32743695897629" height="90.32743695897629"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="127.96386902521635" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="280.9183289424162" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="280.9183289424162" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="433.8727888596161" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="433.8727888596161" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="586.827248776816" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="586.827248776816" cy="376.4772299586" r="30.109145652992098"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="739.7817086940158" cy="376.4772299586" r="45.163718479488146"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="739.7817086940158" cy="376.4772299586" r="30.109145652992098"/></g></svg>',
    title: "pinrow5_textalignright"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="146.1538461538462" y="92.30769230769226" width="507.69230769230774" height="415.38461538461536"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="154.61538461538458" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="214.61538461538458" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="274.6153846153846" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="334.6153846153846" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="394.6153846153846" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="244.00000000000003" y="454.6153846153846" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="154.61538461538458" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="214.61538461538458" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="274.6153846153846" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="334.6153846153846" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="394.6153846153846" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="613.2307692307693" y="454.6153846153846" width="81.23076923076923" height="36.92307692307693" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 330.76923076923083 138.46153846153842 L 607.6923076923077 138.46153846153842" fill="none" stroke="#f2eda1" stroke-width="4.615384615384616" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 330.76923076923083 507.6923076923076 L 607.6923076923077 507.6923076923076" fill="none" stroke="#f2eda1" stroke-width="4.615384615384616" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 173.84615384615392 173.07692307692304 L 146.1538461538462 145.38461538461533 L 146.1538461538462 200.76923076923072 L 173.84615384615392 173.07692307692304 Z" fill="none" stroke="#f2eda1" stroke-width="4.615384615384616" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="27.69230769230769" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,469.2307692307693,92.30769230769226)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "msop12"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="181.81818181818187" y="109.09090909090907" width="436.3636363636364" height="381.8181818181818"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.6363636363637" y="226.36363636363635" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.6363636363637" y="280.90909090909093" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.6363636363637" y="335.45454545454544" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="263.6363636363637" y="390" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="569.0909090909092" y="226.36363636363635" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="569.0909090909092" y="280.90909090909093" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="569.0909090909092" y="335.45454545454544" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="569.0909090909092" y="390" width="76.36363636363636" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="372.7272727272728" y="234.5454545454545" width="163.63636363636363" height="185.45454545454547" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 163.63636363636363 L 618.1818181818182 163.63636363636363" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 490.9090909090909 L 618.1818181818182 490.9090909090909" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 214.54545454545465 245.45454545454544 L 181.81818181818187 212.7272727272727 L 181.81818181818187 278.18181818181813 L 214.54545454545465 245.45454545454544 Z" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,454.5454545454546,109.09090909090907)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "son8_ep_h3.0mm_pl0.7mm_epw1.5mm_eph1.7mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="400" y="184.61538461538458" width="0" height="230.76923076923077"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="36.92307692307693" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,184.61538461538458)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="261.53846153846155" y="276.9230769230769" width="276.9230769230769" height="276.9230769230769"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="415.38461538461536" r="92.3076923076923"/></g></svg>',
    title: "platedhole_squarepad"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="311.62162162162167" y="162.16216216216213" width="176.75675675675677" height="275.6756756756757"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="344.05405405405406" y="308.10810810810807" width="74.5945945945946" height="64.86486486486487" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="451.08108108108115" y="308.10810810810807" width="74.5945945945946" height="64.86486486486487" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 488.37837837837844 243.24324324324323 L 311.62162162162167 243.24324324324323 L 311.62162162162167 437.8378378378378 L 488.37837837837844 437.8378378378378" fill="none" stroke="#f2eda1" stroke-width="16.216216216216218" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.432432432432435" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,434.8648648648649,162.16216216216213)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "led_0201"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="189.4736842105263" y="105.26315789473685" width="421.05263157894734" height="389.47368421052636"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="277.89473684210526" y="189.4736842105263" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="277.89473684210526" y="268.42105263157896" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="277.89473684210526" y="347.36842105263156" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="277.89473684210526" y="426.3157894736842" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="572.6315789473684" y="189.4736842105263" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="572.6315789473684" y="268.42105263157896" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="572.6315789473684" y="347.36842105263156" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="572.6315789473684" y="426.3157894736842" width="54.73684210526316" height="36.84210526315789" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 294.7368421052631 157.89473684210526 L 610.5263157894736 157.89473684210526" fill="none" stroke="#f2eda1" stroke-width="5.2631578947368425" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 294.7368421052631 494.7368421052632 L 610.5263157894736 494.7368421052632" fill="none" stroke="#f2eda1" stroke-width="5.2631578947368425" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 221.05263157894737 207.89473684210526 L 189.4736842105263 176.31578947368422 L 189.4736842105263 239.47368421052633 L 221.05263157894737 207.89473684210526 Z" fill="none" stroke="#f2eda1" stroke-width="5.2631578947368425" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="31.578947368421048" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,452.6315789473684,105.26315789473685)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "son8_p0.75mm_h3.2mm"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="181.81818181818187" y="109.09090909090907" width="436.3636363636364" height="381.8181818181818"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="253.6363636363636" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="308.1818181818182" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="273.4545454545455" y="362.72727272727275" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="253.6363636363636" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="308.1818181818182" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="578.909090909091" y="362.72727272727275" width="56.727272727272734" height="38.18181818181818" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 163.63636363636363 L 618.1818181818182 163.63636363636363" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 290.909090909091 490.9090909090909 L 618.1818181818182 490.9090909090909" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id=""/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 214.54545454545465 272.7272727272727 L 181.81818181818187 239.99999999999997 L 181.81818181818187 305.45454545454544 L 214.54545454545465 272.7272727272727 Z" fill="none" stroke="#f2eda1" stroke-width="5.454545454545455" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="pin_marker_1" data-pcb-silkscreen-path-id="pin_marker_1"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.72727272727273" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,454.5454545454546,109.09090909090907)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "son6"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="280" y="144" width="240" height="312"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="245.98425196850394" y="325.98425196850394" width="68.03149606299212" height="68.03149606299212" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="389.98425196850394" y="325.98425196850394" width="68.03149606299212" height="68.03149606299212" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="245.98425196850394" y="181.98425196850394" width="68.03149606299212" height="68.03149606299212" data-layer="top"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="389.98425196850394" y="181.98425196850394" width="68.03149606299212" height="68.03149606299212" data-layer="top"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 496 432 L 496 456 L 520 432 L 496 432 Z" fill="none" stroke="#f2eda1" stroke-width="7.2" stroke-linecap="round" stroke-linejoin="round" data-pcb-component-id="" data-pcb-silkscreen-path-id="pin1_marker"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="28.8" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,352,144)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text></svg>',
    title: "bga_2x2_bottom_right_origin"
  },
  {
    svgContent: '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="225" viewBox="0 0 800 600"><style></style><rect class="boundary" x="0" y="0" fill="#000" width="800" height="600"/><rect class="pcb-boundary" fill="none" stroke="#fff" stroke-width="0.3" x="65.78947368421058" y="216.4473684210527" width="668.4210526315787" height="167.1052631578947"/><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,65.78947368421058,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN1}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,232.8947368421053,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN2}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN3}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,567.1052631578947,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN4}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="19.736842105263154" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,734.2105263157894,309.5394736842106)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{PIN5}</text><text x="0" y="0" dx="0" dy="0" fill="#f2eda1" font-family="Arial, sans-serif" font-size="32.89473684210526" text-anchor="middle" dominant-baseline="central" transform="matrix(1,0,0,1,400,216.4473684210527)" class="pcb-silkscreen-text pcb-silkscreen-top" data-pcb-silkscreen-text-id="pcb_component_1" stroke="none">{REF}</text><g><rect class="pcb-hole-outer-pad" fill="rgb(200, 52, 52)" x="16.447368421052687" y="334.2105263157895" width="98.68421052631578" height="98.68421052631578"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="65.78947368421058" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="232.8947368421053" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="232.8947368421053" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="400" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="400" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="567.1052631578947" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="567.1052631578947" cy="383.5526315789474" r="32.89473684210526"/></g><g><circle class="pcb-hole-outer" fill="rgb(200, 52, 52)" cx="734.2105263157894" cy="383.5526315789474" r="49.34210526315789"/><circle class="pcb-hole-inner" fill="#FF26E2" cx="734.2105263157894" cy="383.5526315789474" r="32.89473684210526"/></g></svg>',
    title: "pinrow5_textaligncenter"
  }
];

// gallery/index.tsx
var jsx_dev_runtime = __toESM(require_jsx_dev_runtime(), 1);
var FootprintCreator = () => {
  const [definition, setDefinition] = import_react.useState("");
  const [generatedSvg, setGeneratedSvg] = import_react.useState(null);
  const [loading, setLoading] = import_react.useState(false);
  const [error, setError] = import_react.useState("");
  const generateFootprint = import_react.useCallback(async (input) => {
    setError("");
    setGeneratedSvg(null);
    if (!input.trim()) {
      setError("Please enter a footprint definition.");
      return;
    }
    setLoading(true);
    try {
      const circuitJson = fp2.string(input).circuitJson();
      const svgContent = convertCircuitJsonToPcbSvg(circuitJson);
      setGeneratedSvg(svgContent);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, []);
  const handleGenerate = (e3) => {
    e3.preventDefault();
    generateFootprint(definition);
  };
  const handleFootprintClick = (footprint) => {
    setDefinition(footprint.title);
    generateFootprint(footprint.title);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };
  const handleKeyDown = (e3) => {
    if (e3.key === "Enter" && !e3.shiftKey) {
      e3.preventDefault();
      generateFootprint(definition);
    }
  };
  return /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
    className: "min-h-screen bg-gradient-to-br from-blue-100 to-purple-100",
    children: [
      /* @__PURE__ */ jsx_dev_runtime.jsxDEV("header", {
        className: "bg-blue-600 text-white py-4 shadow-md",
        children: /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
          className: "container mx-auto px-4 flex items-center",
          children: [
            /* @__PURE__ */ jsx_dev_runtime.jsxDEV("h1", {
              className: "text-2xl font-bold",
              children: /* @__PURE__ */ jsx_dev_runtime.jsxDEV("a", {
                href: "https://github.com/tscircuit/footprinter",
                className: "hover:underline",
                children: "@tscircuit/footprinter"
              }, undefined, false, undefined, this)
            }, undefined, false, undefined, this),
            /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
              className: "ml-auto",
              children: /* @__PURE__ */ jsx_dev_runtime.jsxDEV("a", {
                href: "https://github.com/tscircuit/footprinter",
                target: "_blank",
                rel: "noopener noreferrer",
                children: /* @__PURE__ */ jsx_dev_runtime.jsxDEV("img", {
                  alt: "GitHub stars",
                  src: "https://img.shields.io/github/stars/tscircuit/footprinter?style=social",
                  className: "h-6"
                }, undefined, false, undefined, this)
              }, undefined, false, undefined, this)
            }, undefined, false, undefined, this)
          ]
        }, undefined, true, undefined, this)
      }, undefined, false, undefined, this),
      /* @__PURE__ */ jsx_dev_runtime.jsxDEV("main", {
        className: "container mx-auto px-4 py-6",
        children: [
          /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
            className: "bg-white relative rounded-lg shadow-lg p-6",
            children: /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
              className: "grid place-items-center w-full grid-cols-1 md:grid-cols-5 gap-4 gap-6",
              children: [
                /* @__PURE__ */ jsx_dev_runtime.jsxDEV("section", {
                  className: "w-full h-full grid place-items-center col-span-2",
                  children: [
                    /* @__PURE__ */ jsx_dev_runtime.jsxDEV("form", {
                      onSubmit: handleGenerate,
                      className: "flex flex-col w-full",
                      children: [
                        /* @__PURE__ */ jsx_dev_runtime.jsxDEV("textarea", {
                          spellCheck: false,
                          placeholder: "Enter footprint definition (e.g., breakoutheaders_left15_right15_w8mm_p1.54mm)",
                          value: definition,
                          onChange: (e3) => setDefinition(e3.target.value),
                          onKeyDown: handleKeyDown,
                          className: "w-full p-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400 resize-y min-h-[150px] text-lg font-medium"
                        }, undefined, false, undefined, this),
                        /* @__PURE__ */ jsx_dev_runtime.jsxDEV("button", {
                          type: "submit",
                          disabled: loading,
                          className: "mt-4  bottom-4 w-full bg-blue-600 text-white py-3 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors cursor-pointer",
                          children: loading ? "Generating..." : "Generate Footprint"
                        }, undefined, false, undefined, this)
                      ]
                    }, undefined, true, undefined, this),
                    error && /* @__PURE__ */ jsx_dev_runtime.jsxDEV("p", {
                      className: "mt-3 text-red-500 font-bold text-center",
                      children: error
                    }, undefined, false, undefined, this)
                  ]
                }, undefined, true, undefined, this),
                /* @__PURE__ */ jsx_dev_runtime.jsxDEV("section", {
                  className: "w-full h-full rounded-md col-span-3 grid place-items-center shadow p-4",
                  children: generatedSvg ? /* @__PURE__ */ jsx_dev_runtime.jsxDEV(jsx_dev_runtime.Fragment, {
                    children: /* @__PURE__ */ jsx_dev_runtime.jsxDEV("img", {
                      src: `data:image/svg+xml;base64,${btoa(generatedSvg)}`,
                      alt: "Generated Footprint",
                      className: "w-full h-full object-contain"
                    }, undefined, false, undefined, this)
                  }, undefined, false, undefined, this) : /* @__PURE__ */ jsx_dev_runtime.jsxDEV("p", {
                    className: "text-gray-500",
                    children: "Preview will appear here once generated."
                  }, undefined, false, undefined, this)
                }, undefined, false, undefined, this)
              ]
            }, undefined, true, undefined, this)
          }, undefined, false, undefined, this),
          /* @__PURE__ */ jsx_dev_runtime.jsxDEV("section", {
            className: "mt-10",
            children: [
              /* @__PURE__ */ jsx_dev_runtime.jsxDEV("h2", {
                className: "text-2xl font-bold text-center mb-6",
                children: "Example Footprints"
              }, undefined, false, undefined, this),
              /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
                className: "grid grid-cols-1  md:grid-cols-3 gap-6",
                children: content_default.map((footprint, index) => /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
                  className: "relative grid place-items-center",
                  onClick: () => handleFootprintClick(footprint),
                  children: [
                    /* @__PURE__ */ jsx_dev_runtime.jsxDEV("img", {
                      src: `data:image/svg+xml;base64,${btoa(footprint.svgContent)}`,
                      alt: `${footprint.title} Footprint SVG`,
                      className: "rounded-md shadow cursor-pointer hover:shadow-lg transition-shadow w-full h-full object-contain"
                    }, undefined, false, undefined, this),
                    /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
                      className: "absolute bottom-2 left-2 bg-white bg-opacity-80 px-2 py-1 text-xs rounded !break-all",
                      children: footprint.title
                    }, undefined, false, undefined, this)
                  ]
                }, index, true, undefined, this))
              }, undefined, false, undefined, this)
            ]
          }, undefined, true, undefined, this)
        ]
      }, undefined, true, undefined, this)
    ]
  }, undefined, true, undefined, this);
};
var root = import_client.default.createRoot(document.body);
root.render(/* @__PURE__ */ jsx_dev_runtime.jsxDEV(FootprintCreator, {}, undefined, false, undefined, this));
